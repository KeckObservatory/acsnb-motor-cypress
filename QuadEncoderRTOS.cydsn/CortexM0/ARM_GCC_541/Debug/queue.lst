ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	prvGetDisinheritPriorityAfterTimeout, %function
  24              	prvGetDisinheritPriorityAfterTimeout:
  25              	.LFB49:
  26              		.file 1 "FreeRTOS\\source\\queue.c"
   1:FreeRTOS\source/queue.c **** /*
   2:FreeRTOS\source/queue.c ****  * FreeRTOS Kernel V10.0.1
   3:FreeRTOS\source/queue.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS\source/queue.c ****  *
   5:FreeRTOS\source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS\source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS\source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS\source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS\source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS\source/queue.c ****  * subject to the following conditions:
  11:FreeRTOS\source/queue.c ****  *
  12:FreeRTOS\source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS\source/queue.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS\source/queue.c ****  *
  15:FreeRTOS\source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS\source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS\source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS\source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS\source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS\source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS\source/queue.c ****  *
  22:FreeRTOS\source/queue.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS\source/queue.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS\source/queue.c ****  *
  25:FreeRTOS\source/queue.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS\source/queue.c ****  */
  27:FreeRTOS\source/queue.c **** 
  28:FreeRTOS\source/queue.c **** #include <stdlib.h>
  29:FreeRTOS\source/queue.c **** #include <string.h>
  30:FreeRTOS\source/queue.c **** 
  31:FreeRTOS\source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 2


  32:FreeRTOS\source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:FreeRTOS\source/queue.c **** task.h is included from an application file. */
  34:FreeRTOS\source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:FreeRTOS\source/queue.c **** 
  36:FreeRTOS\source/queue.c **** #include "FreeRTOS.h"
  37:FreeRTOS\source/queue.c **** #include "task.h"
  38:FreeRTOS\source/queue.c **** #include "queue.h"
  39:FreeRTOS\source/queue.c **** 
  40:FreeRTOS\source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:FreeRTOS\source/queue.c **** 	#include "croutine.h"
  42:FreeRTOS\source/queue.c **** #endif
  43:FreeRTOS\source/queue.c **** 
  44:FreeRTOS\source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:FreeRTOS\source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:FreeRTOS\source/queue.c **** header files above, but not in this file, in order to generate the correct
  47:FreeRTOS\source/queue.c **** privileged Vs unprivileged linkage and placement. */
  48:FreeRTOS\source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:FreeRTOS\source/queue.c **** 
  50:FreeRTOS\source/queue.c **** 
  51:FreeRTOS\source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:FreeRTOS\source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:FreeRTOS\source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:FreeRTOS\source/queue.c **** 
  55:FreeRTOS\source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:FreeRTOS\source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:FreeRTOS\source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:FreeRTOS\source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:FreeRTOS\source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
  60:FreeRTOS\source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
  61:FreeRTOS\source/queue.c **** the code is maintained despite this dual use of two structure members.  An
  62:FreeRTOS\source/queue.c **** alternative implementation would be to use a union, but use of a union is
  63:FreeRTOS\source/queue.c **** against the coding standard (although an exception to the standard has been
  64:FreeRTOS\source/queue.c **** permitted where the dual use also significantly changes the type of the
  65:FreeRTOS\source/queue.c **** structure member). */
  66:FreeRTOS\source/queue.c **** #define pxMutexHolder					pcTail
  67:FreeRTOS\source/queue.c **** #define uxQueueType						pcHead
  68:FreeRTOS\source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  69:FreeRTOS\source/queue.c **** 
  70:FreeRTOS\source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  71:FreeRTOS\source/queue.c **** zero. */
  72:FreeRTOS\source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  73:FreeRTOS\source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  74:FreeRTOS\source/queue.c **** 
  75:FreeRTOS\source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  76:FreeRTOS\source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  77:FreeRTOS\source/queue.c **** 	performed just because a higher priority task has been woken. */
  78:FreeRTOS\source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  79:FreeRTOS\source/queue.c **** #else
  80:FreeRTOS\source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  81:FreeRTOS\source/queue.c **** #endif
  82:FreeRTOS\source/queue.c **** 
  83:FreeRTOS\source/queue.c **** /*
  84:FreeRTOS\source/queue.c ****  * Definition of the queue used by the scheduler.
  85:FreeRTOS\source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  86:FreeRTOS\source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
  87:FreeRTOS\source/queue.c ****  */
  88:FreeRTOS\source/queue.c **** typedef struct QueueDefinition
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 3


  89:FreeRTOS\source/queue.c **** {
  90:FreeRTOS\source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
  91:FreeRTOS\source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  92:FreeRTOS\source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
  93:FreeRTOS\source/queue.c **** 
  94:FreeRTOS\source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
  95:FreeRTOS\source/queue.c **** 	{
  96:FreeRTOS\source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
  97:FreeRTOS\source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
  98:FreeRTOS\source/queue.c **** 	} u;
  99:FreeRTOS\source/queue.c **** 
 100:FreeRTOS\source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 101:FreeRTOS\source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 102:FreeRTOS\source/queue.c **** 
 103:FreeRTOS\source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 104:FreeRTOS\source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 105:FreeRTOS\source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 106:FreeRTOS\source/queue.c **** 
 107:FreeRTOS\source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 108:FreeRTOS\source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 109:FreeRTOS\source/queue.c **** 
 110:FreeRTOS\source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 111:FreeRTOS\source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 112:FreeRTOS\source/queue.c **** 	#endif
 113:FreeRTOS\source/queue.c **** 
 114:FreeRTOS\source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 115:FreeRTOS\source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 116:FreeRTOS\source/queue.c **** 	#endif
 117:FreeRTOS\source/queue.c **** 
 118:FreeRTOS\source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 119:FreeRTOS\source/queue.c **** 		UBaseType_t uxQueueNumber;
 120:FreeRTOS\source/queue.c **** 		uint8_t ucQueueType;
 121:FreeRTOS\source/queue.c **** 	#endif
 122:FreeRTOS\source/queue.c **** 
 123:FreeRTOS\source/queue.c **** } xQUEUE;
 124:FreeRTOS\source/queue.c **** 
 125:FreeRTOS\source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 126:FreeRTOS\source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 127:FreeRTOS\source/queue.c **** typedef xQUEUE Queue_t;
 128:FreeRTOS\source/queue.c **** 
 129:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 130:FreeRTOS\source/queue.c **** 
 131:FreeRTOS\source/queue.c **** /*
 132:FreeRTOS\source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 133:FreeRTOS\source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 134:FreeRTOS\source/queue.c ****  */
 135:FreeRTOS\source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 136:FreeRTOS\source/queue.c **** 
 137:FreeRTOS\source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 138:FreeRTOS\source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 139:FreeRTOS\source/queue.c **** 	more user friendly. */
 140:FreeRTOS\source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 141:FreeRTOS\source/queue.c **** 	{
 142:FreeRTOS\source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 143:FreeRTOS\source/queue.c **** 		QueueHandle_t xHandle;
 144:FreeRTOS\source/queue.c **** 	} xQueueRegistryItem;
 145:FreeRTOS\source/queue.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 4


 146:FreeRTOS\source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 147:FreeRTOS\source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 148:FreeRTOS\source/queue.c **** 	debuggers. */
 149:FreeRTOS\source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 150:FreeRTOS\source/queue.c **** 
 151:FreeRTOS\source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 152:FreeRTOS\source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 153:FreeRTOS\source/queue.c **** 	array position being vacant. */
 154:FreeRTOS\source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 155:FreeRTOS\source/queue.c **** 
 156:FreeRTOS\source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 157:FreeRTOS\source/queue.c **** 
 158:FreeRTOS\source/queue.c **** /*
 159:FreeRTOS\source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 160:FreeRTOS\source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 161:FreeRTOS\source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 162:FreeRTOS\source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 163:FreeRTOS\source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 164:FreeRTOS\source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 165:FreeRTOS\source/queue.c ****  */
 166:FreeRTOS\source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 167:FreeRTOS\source/queue.c **** 
 168:FreeRTOS\source/queue.c **** /*
 169:FreeRTOS\source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 170:FreeRTOS\source/queue.c ****  *
 171:FreeRTOS\source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 172:FreeRTOS\source/queue.c ****  */
 173:FreeRTOS\source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 174:FreeRTOS\source/queue.c **** 
 175:FreeRTOS\source/queue.c **** /*
 176:FreeRTOS\source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 177:FreeRTOS\source/queue.c ****  *
 178:FreeRTOS\source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 179:FreeRTOS\source/queue.c ****  */
 180:FreeRTOS\source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 181:FreeRTOS\source/queue.c **** 
 182:FreeRTOS\source/queue.c **** /*
 183:FreeRTOS\source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 184:FreeRTOS\source/queue.c ****  * back of the queue.
 185:FreeRTOS\source/queue.c ****  */
 186:FreeRTOS\source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 187:FreeRTOS\source/queue.c **** 
 188:FreeRTOS\source/queue.c **** /*
 189:FreeRTOS\source/queue.c ****  * Copies an item out of a queue.
 190:FreeRTOS\source/queue.c ****  */
 191:FreeRTOS\source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 192:FreeRTOS\source/queue.c **** 
 193:FreeRTOS\source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 194:FreeRTOS\source/queue.c **** 	/*
 195:FreeRTOS\source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 196:FreeRTOS\source/queue.c **** 	 * the queue set that the queue contains data.
 197:FreeRTOS\source/queue.c **** 	 */
 198:FreeRTOS\source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 199:FreeRTOS\source/queue.c **** #endif
 200:FreeRTOS\source/queue.c **** 
 201:FreeRTOS\source/queue.c **** /*
 202:FreeRTOS\source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 5


 203:FreeRTOS\source/queue.c ****  * dynamically to fill in the structure's members.
 204:FreeRTOS\source/queue.c ****  */
 205:FreeRTOS\source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 206:FreeRTOS\source/queue.c **** 
 207:FreeRTOS\source/queue.c **** /*
 208:FreeRTOS\source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 209:FreeRTOS\source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 210:FreeRTOS\source/queue.c ****  * as a mutex.
 211:FreeRTOS\source/queue.c ****  */
 212:FreeRTOS\source/queue.c **** #if( configUSE_MUTEXES == 1 )
 213:FreeRTOS\source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 214:FreeRTOS\source/queue.c **** #endif
 215:FreeRTOS\source/queue.c **** 
 216:FreeRTOS\source/queue.c **** #if( configUSE_MUTEXES == 1 )
 217:FreeRTOS\source/queue.c **** 	/*
 218:FreeRTOS\source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 219:FreeRTOS\source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 220:FreeRTOS\source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 221:FreeRTOS\source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 222:FreeRTOS\source/queue.c **** 	 * that priority.
 223:FreeRTOS\source/queue.c **** 	 */
 224:FreeRTOS\source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 225:FreeRTOS\source/queue.c **** #endif
 226:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 227:FreeRTOS\source/queue.c **** 
 228:FreeRTOS\source/queue.c **** /*
 229:FreeRTOS\source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 230:FreeRTOS\source/queue.c ****  * accessing the queue event lists.
 231:FreeRTOS\source/queue.c ****  */
 232:FreeRTOS\source/queue.c **** #define prvLockQueue( pxQueue )								\
 233:FreeRTOS\source/queue.c **** 	taskENTER_CRITICAL();									\
 234:FreeRTOS\source/queue.c **** 	{														\
 235:FreeRTOS\source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 236:FreeRTOS\source/queue.c **** 		{													\
 237:FreeRTOS\source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 238:FreeRTOS\source/queue.c **** 		}													\
 239:FreeRTOS\source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 240:FreeRTOS\source/queue.c **** 		{													\
 241:FreeRTOS\source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 242:FreeRTOS\source/queue.c **** 		}													\
 243:FreeRTOS\source/queue.c **** 	}														\
 244:FreeRTOS\source/queue.c **** 	taskEXIT_CRITICAL()
 245:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 246:FreeRTOS\source/queue.c **** 
 247:FreeRTOS\source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 248:FreeRTOS\source/queue.c **** {
 249:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 250:FreeRTOS\source/queue.c **** 
 251:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue );
 252:FreeRTOS\source/queue.c **** 
 253:FreeRTOS\source/queue.c **** 	taskENTER_CRITICAL();
 254:FreeRTOS\source/queue.c **** 	{
 255:FreeRTOS\source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 256:FreeRTOS\source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 257:FreeRTOS\source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 258:FreeRTOS\source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 259:FreeRTOS\source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 6


 260:FreeRTOS\source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 261:FreeRTOS\source/queue.c **** 
 262:FreeRTOS\source/queue.c **** 		if( xNewQueue == pdFALSE )
 263:FreeRTOS\source/queue.c **** 		{
 264:FreeRTOS\source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 265:FreeRTOS\source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 266:FreeRTOS\source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 267:FreeRTOS\source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 268:FreeRTOS\source/queue.c **** 			it will be possible to write to it. */
 269:FreeRTOS\source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 270:FreeRTOS\source/queue.c **** 			{
 271:FreeRTOS\source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 272:FreeRTOS\source/queue.c **** 				{
 273:FreeRTOS\source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 274:FreeRTOS\source/queue.c **** 				}
 275:FreeRTOS\source/queue.c **** 				else
 276:FreeRTOS\source/queue.c **** 				{
 277:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 278:FreeRTOS\source/queue.c **** 				}
 279:FreeRTOS\source/queue.c **** 			}
 280:FreeRTOS\source/queue.c **** 			else
 281:FreeRTOS\source/queue.c **** 			{
 282:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 283:FreeRTOS\source/queue.c **** 			}
 284:FreeRTOS\source/queue.c **** 		}
 285:FreeRTOS\source/queue.c **** 		else
 286:FreeRTOS\source/queue.c **** 		{
 287:FreeRTOS\source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 288:FreeRTOS\source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 289:FreeRTOS\source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 290:FreeRTOS\source/queue.c **** 		}
 291:FreeRTOS\source/queue.c **** 	}
 292:FreeRTOS\source/queue.c **** 	taskEXIT_CRITICAL();
 293:FreeRTOS\source/queue.c **** 
 294:FreeRTOS\source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 295:FreeRTOS\source/queue.c **** 	versions. */
 296:FreeRTOS\source/queue.c **** 	return pdPASS;
 297:FreeRTOS\source/queue.c **** }
 298:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 299:FreeRTOS\source/queue.c **** 
 300:FreeRTOS\source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 301:FreeRTOS\source/queue.c **** 
 302:FreeRTOS\source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 303:FreeRTOS\source/queue.c **** 	{
 304:FreeRTOS\source/queue.c **** 	Queue_t *pxNewQueue;
 305:FreeRTOS\source/queue.c **** 
 306:FreeRTOS\source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 307:FreeRTOS\source/queue.c **** 
 308:FreeRTOS\source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 309:FreeRTOS\source/queue.c **** 		supplied. */
 310:FreeRTOS\source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 311:FreeRTOS\source/queue.c **** 
 312:FreeRTOS\source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 313:FreeRTOS\source/queue.c **** 		should not be provided if the item size is 0. */
 314:FreeRTOS\source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 315:FreeRTOS\source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 316:FreeRTOS\source/queue.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 7


 317:FreeRTOS\source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 318:FreeRTOS\source/queue.c **** 		{
 319:FreeRTOS\source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 320:FreeRTOS\source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 321:FreeRTOS\source/queue.c **** 			the real queue and semaphore structures. */
 322:FreeRTOS\source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 323:FreeRTOS\source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 324:FreeRTOS\source/queue.c **** 		}
 325:FreeRTOS\source/queue.c **** 		#endif /* configASSERT_DEFINED */
 326:FreeRTOS\source/queue.c **** 
 327:FreeRTOS\source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 328:FreeRTOS\source/queue.c **** 		The address of a statically allocated storage area was also passed in
 329:FreeRTOS\source/queue.c **** 		but is already set. */
 330:FreeRTOS\source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 331:FreeRTOS\source/queue.c **** 
 332:FreeRTOS\source/queue.c **** 		if( pxNewQueue != NULL )
 333:FreeRTOS\source/queue.c **** 		{
 334:FreeRTOS\source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 335:FreeRTOS\source/queue.c **** 			{
 336:FreeRTOS\source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 337:FreeRTOS\source/queue.c **** 				note this queue was allocated statically in case the queue is
 338:FreeRTOS\source/queue.c **** 				later deleted. */
 339:FreeRTOS\source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 340:FreeRTOS\source/queue.c **** 			}
 341:FreeRTOS\source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 342:FreeRTOS\source/queue.c **** 
 343:FreeRTOS\source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 344:FreeRTOS\source/queue.c **** 		}
 345:FreeRTOS\source/queue.c **** 		else
 346:FreeRTOS\source/queue.c **** 		{
 347:FreeRTOS\source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 348:FreeRTOS\source/queue.c **** 		}
 349:FreeRTOS\source/queue.c **** 
 350:FreeRTOS\source/queue.c **** 		return pxNewQueue;
 351:FreeRTOS\source/queue.c **** 	}
 352:FreeRTOS\source/queue.c **** 
 353:FreeRTOS\source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 354:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 355:FreeRTOS\source/queue.c **** 
 356:FreeRTOS\source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 357:FreeRTOS\source/queue.c **** 
 358:FreeRTOS\source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 359:FreeRTOS\source/queue.c **** 	{
 360:FreeRTOS\source/queue.c **** 	Queue_t *pxNewQueue;
 361:FreeRTOS\source/queue.c **** 	size_t xQueueSizeInBytes;
 362:FreeRTOS\source/queue.c **** 	uint8_t *pucQueueStorage;
 363:FreeRTOS\source/queue.c **** 
 364:FreeRTOS\source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 365:FreeRTOS\source/queue.c **** 
 366:FreeRTOS\source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 367:FreeRTOS\source/queue.c **** 		{
 368:FreeRTOS\source/queue.c **** 			/* There is not going to be a queue storage area. */
 369:FreeRTOS\source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 370:FreeRTOS\source/queue.c **** 		}
 371:FreeRTOS\source/queue.c **** 		else
 372:FreeRTOS\source/queue.c **** 		{
 373:FreeRTOS\source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 8


 374:FreeRTOS\source/queue.c **** 			can be in the queue at any time. */
 375:FreeRTOS\source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 376:FreeRTOS\source/queue.c **** 		}
 377:FreeRTOS\source/queue.c **** 
 378:FreeRTOS\source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 379:FreeRTOS\source/queue.c **** 
 380:FreeRTOS\source/queue.c **** 		if( pxNewQueue != NULL )
 381:FreeRTOS\source/queue.c **** 		{
 382:FreeRTOS\source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 383:FreeRTOS\source/queue.c **** 			storage area. */
 384:FreeRTOS\source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 385:FreeRTOS\source/queue.c **** 
 386:FreeRTOS\source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 387:FreeRTOS\source/queue.c **** 			{
 388:FreeRTOS\source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 389:FreeRTOS\source/queue.c **** 				note this task was created dynamically in case it is later
 390:FreeRTOS\source/queue.c **** 				deleted. */
 391:FreeRTOS\source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 392:FreeRTOS\source/queue.c **** 			}
 393:FreeRTOS\source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 394:FreeRTOS\source/queue.c **** 
 395:FreeRTOS\source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 396:FreeRTOS\source/queue.c **** 		}
 397:FreeRTOS\source/queue.c **** 		else
 398:FreeRTOS\source/queue.c **** 		{
 399:FreeRTOS\source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 400:FreeRTOS\source/queue.c **** 		}
 401:FreeRTOS\source/queue.c **** 
 402:FreeRTOS\source/queue.c **** 		return pxNewQueue;
 403:FreeRTOS\source/queue.c **** 	}
 404:FreeRTOS\source/queue.c **** 
 405:FreeRTOS\source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 406:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 407:FreeRTOS\source/queue.c **** 
 408:FreeRTOS\source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 409:FreeRTOS\source/queue.c **** {
 410:FreeRTOS\source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 411:FreeRTOS\source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 412:FreeRTOS\source/queue.c **** 	( void ) ucQueueType;
 413:FreeRTOS\source/queue.c **** 
 414:FreeRTOS\source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 415:FreeRTOS\source/queue.c **** 	{
 416:FreeRTOS\source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 417:FreeRTOS\source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 418:FreeRTOS\source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 419:FreeRTOS\source/queue.c **** 		value that is known to be within the memory map. */
 420:FreeRTOS\source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 421:FreeRTOS\source/queue.c **** 	}
 422:FreeRTOS\source/queue.c **** 	else
 423:FreeRTOS\source/queue.c **** 	{
 424:FreeRTOS\source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 425:FreeRTOS\source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 426:FreeRTOS\source/queue.c **** 	}
 427:FreeRTOS\source/queue.c **** 
 428:FreeRTOS\source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 429:FreeRTOS\source/queue.c **** 	defined. */
 430:FreeRTOS\source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 9


 431:FreeRTOS\source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 432:FreeRTOS\source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 433:FreeRTOS\source/queue.c **** 
 434:FreeRTOS\source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 435:FreeRTOS\source/queue.c **** 	{
 436:FreeRTOS\source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 437:FreeRTOS\source/queue.c **** 	}
 438:FreeRTOS\source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 439:FreeRTOS\source/queue.c **** 
 440:FreeRTOS\source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 441:FreeRTOS\source/queue.c **** 	{
 442:FreeRTOS\source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 443:FreeRTOS\source/queue.c **** 	}
 444:FreeRTOS\source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 445:FreeRTOS\source/queue.c **** 
 446:FreeRTOS\source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 447:FreeRTOS\source/queue.c **** }
 448:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 449:FreeRTOS\source/queue.c **** 
 450:FreeRTOS\source/queue.c **** #if( configUSE_MUTEXES == 1 )
 451:FreeRTOS\source/queue.c **** 
 452:FreeRTOS\source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 453:FreeRTOS\source/queue.c **** 	{
 454:FreeRTOS\source/queue.c **** 		if( pxNewQueue != NULL )
 455:FreeRTOS\source/queue.c **** 		{
 456:FreeRTOS\source/queue.c **** 			/* The queue create function will set all the queue structure members
 457:FreeRTOS\source/queue.c **** 			correctly for a generic queue, but this function is creating a
 458:FreeRTOS\source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 459:FreeRTOS\source/queue.c **** 			in particular the information required for priority inheritance. */
 460:FreeRTOS\source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 461:FreeRTOS\source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 462:FreeRTOS\source/queue.c **** 
 463:FreeRTOS\source/queue.c **** 			/* In case this is a recursive mutex. */
 464:FreeRTOS\source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 465:FreeRTOS\source/queue.c **** 
 466:FreeRTOS\source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 467:FreeRTOS\source/queue.c **** 
 468:FreeRTOS\source/queue.c **** 			/* Start with the semaphore in the expected state. */
 469:FreeRTOS\source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 470:FreeRTOS\source/queue.c **** 		}
 471:FreeRTOS\source/queue.c **** 		else
 472:FreeRTOS\source/queue.c **** 		{
 473:FreeRTOS\source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 474:FreeRTOS\source/queue.c **** 		}
 475:FreeRTOS\source/queue.c **** 	}
 476:FreeRTOS\source/queue.c **** 
 477:FreeRTOS\source/queue.c **** #endif /* configUSE_MUTEXES */
 478:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 479:FreeRTOS\source/queue.c **** 
 480:FreeRTOS\source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 481:FreeRTOS\source/queue.c **** 
 482:FreeRTOS\source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 483:FreeRTOS\source/queue.c **** 	{
 484:FreeRTOS\source/queue.c **** 	Queue_t *pxNewQueue;
 485:FreeRTOS\source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 486:FreeRTOS\source/queue.c **** 
 487:FreeRTOS\source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 10


 488:FreeRTOS\source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 489:FreeRTOS\source/queue.c **** 
 490:FreeRTOS\source/queue.c **** 		return pxNewQueue;
 491:FreeRTOS\source/queue.c **** 	}
 492:FreeRTOS\source/queue.c **** 
 493:FreeRTOS\source/queue.c **** #endif /* configUSE_MUTEXES */
 494:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 495:FreeRTOS\source/queue.c **** 
 496:FreeRTOS\source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 497:FreeRTOS\source/queue.c **** 
 498:FreeRTOS\source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 499:FreeRTOS\source/queue.c **** 	{
 500:FreeRTOS\source/queue.c **** 	Queue_t *pxNewQueue;
 501:FreeRTOS\source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 502:FreeRTOS\source/queue.c **** 
 503:FreeRTOS\source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 504:FreeRTOS\source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 505:FreeRTOS\source/queue.c **** 		( void ) ucQueueType;
 506:FreeRTOS\source/queue.c **** 
 507:FreeRTOS\source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 508:FreeRTOS\source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 509:FreeRTOS\source/queue.c **** 
 510:FreeRTOS\source/queue.c **** 		return pxNewQueue;
 511:FreeRTOS\source/queue.c **** 	}
 512:FreeRTOS\source/queue.c **** 
 513:FreeRTOS\source/queue.c **** #endif /* configUSE_MUTEXES */
 514:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 515:FreeRTOS\source/queue.c **** 
 516:FreeRTOS\source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 517:FreeRTOS\source/queue.c **** 
 518:FreeRTOS\source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 519:FreeRTOS\source/queue.c **** 	{
 520:FreeRTOS\source/queue.c **** 	void *pxReturn;
 521:FreeRTOS\source/queue.c **** 
 522:FreeRTOS\source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 523:FreeRTOS\source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 524:FreeRTOS\source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 525:FreeRTOS\source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 526:FreeRTOS\source/queue.c **** 		following critical section exiting and the function returning. */
 527:FreeRTOS\source/queue.c **** 		taskENTER_CRITICAL();
 528:FreeRTOS\source/queue.c **** 		{
 529:FreeRTOS\source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 530:FreeRTOS\source/queue.c **** 			{
 531:FreeRTOS\source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 532:FreeRTOS\source/queue.c **** 			}
 533:FreeRTOS\source/queue.c **** 			else
 534:FreeRTOS\source/queue.c **** 			{
 535:FreeRTOS\source/queue.c **** 				pxReturn = NULL;
 536:FreeRTOS\source/queue.c **** 			}
 537:FreeRTOS\source/queue.c **** 		}
 538:FreeRTOS\source/queue.c **** 		taskEXIT_CRITICAL();
 539:FreeRTOS\source/queue.c **** 
 540:FreeRTOS\source/queue.c **** 		return pxReturn;
 541:FreeRTOS\source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 542:FreeRTOS\source/queue.c **** 
 543:FreeRTOS\source/queue.c **** #endif
 544:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 11


 545:FreeRTOS\source/queue.c **** 
 546:FreeRTOS\source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 547:FreeRTOS\source/queue.c **** 
 548:FreeRTOS\source/queue.c **** 	void* xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 549:FreeRTOS\source/queue.c **** 	{
 550:FreeRTOS\source/queue.c **** 	void *pxReturn;
 551:FreeRTOS\source/queue.c **** 
 552:FreeRTOS\source/queue.c **** 		configASSERT( xSemaphore );
 553:FreeRTOS\source/queue.c **** 
 554:FreeRTOS\source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 555:FreeRTOS\source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 556:FreeRTOS\source/queue.c **** 		not required here. */
 557:FreeRTOS\source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 558:FreeRTOS\source/queue.c **** 		{
 559:FreeRTOS\source/queue.c **** 			pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 560:FreeRTOS\source/queue.c **** 		}
 561:FreeRTOS\source/queue.c **** 		else
 562:FreeRTOS\source/queue.c **** 		{
 563:FreeRTOS\source/queue.c **** 			pxReturn = NULL;
 564:FreeRTOS\source/queue.c **** 		}
 565:FreeRTOS\source/queue.c **** 
 566:FreeRTOS\source/queue.c **** 		return pxReturn;
 567:FreeRTOS\source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 568:FreeRTOS\source/queue.c **** 
 569:FreeRTOS\source/queue.c **** #endif
 570:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 571:FreeRTOS\source/queue.c **** 
 572:FreeRTOS\source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 573:FreeRTOS\source/queue.c **** 
 574:FreeRTOS\source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 575:FreeRTOS\source/queue.c **** 	{
 576:FreeRTOS\source/queue.c **** 	BaseType_t xReturn;
 577:FreeRTOS\source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 578:FreeRTOS\source/queue.c **** 
 579:FreeRTOS\source/queue.c **** 		configASSERT( pxMutex );
 580:FreeRTOS\source/queue.c **** 
 581:FreeRTOS\source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 582:FreeRTOS\source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 583:FreeRTOS\source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 584:FreeRTOS\source/queue.c **** 		this is the only condition we are interested in it does not matter if
 585:FreeRTOS\source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 586:FreeRTOS\source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 587:FreeRTOS\source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 588:FreeRTOS\source/queue.c **** 		{
 589:FreeRTOS\source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 590:FreeRTOS\source/queue.c **** 
 591:FreeRTOS\source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 592:FreeRTOS\source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 593:FreeRTOS\source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 594:FreeRTOS\source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 595:FreeRTOS\source/queue.c **** 			uxRecursiveCallCount member. */
 596:FreeRTOS\source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 597:FreeRTOS\source/queue.c **** 
 598:FreeRTOS\source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 599:FreeRTOS\source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 600:FreeRTOS\source/queue.c **** 			{
 601:FreeRTOS\source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 12


 602:FreeRTOS\source/queue.c **** 				task that might be waiting to access the mutex. */
 603:FreeRTOS\source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 604:FreeRTOS\source/queue.c **** 			}
 605:FreeRTOS\source/queue.c **** 			else
 606:FreeRTOS\source/queue.c **** 			{
 607:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 608:FreeRTOS\source/queue.c **** 			}
 609:FreeRTOS\source/queue.c **** 
 610:FreeRTOS\source/queue.c **** 			xReturn = pdPASS;
 611:FreeRTOS\source/queue.c **** 		}
 612:FreeRTOS\source/queue.c **** 		else
 613:FreeRTOS\source/queue.c **** 		{
 614:FreeRTOS\source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 615:FreeRTOS\source/queue.c **** 			holder. */
 616:FreeRTOS\source/queue.c **** 			xReturn = pdFAIL;
 617:FreeRTOS\source/queue.c **** 
 618:FreeRTOS\source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 619:FreeRTOS\source/queue.c **** 		}
 620:FreeRTOS\source/queue.c **** 
 621:FreeRTOS\source/queue.c **** 		return xReturn;
 622:FreeRTOS\source/queue.c **** 	}
 623:FreeRTOS\source/queue.c **** 
 624:FreeRTOS\source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 625:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 626:FreeRTOS\source/queue.c **** 
 627:FreeRTOS\source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 628:FreeRTOS\source/queue.c **** 
 629:FreeRTOS\source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 630:FreeRTOS\source/queue.c **** 	{
 631:FreeRTOS\source/queue.c **** 	BaseType_t xReturn;
 632:FreeRTOS\source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 633:FreeRTOS\source/queue.c **** 
 634:FreeRTOS\source/queue.c **** 		configASSERT( pxMutex );
 635:FreeRTOS\source/queue.c **** 
 636:FreeRTOS\source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 637:FreeRTOS\source/queue.c **** 		xQueueGiveMutexRecursive(). */
 638:FreeRTOS\source/queue.c **** 
 639:FreeRTOS\source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 640:FreeRTOS\source/queue.c **** 
 641:FreeRTOS\source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 642:FreeRTOS\source/queue.c **** 		{
 643:FreeRTOS\source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 644:FreeRTOS\source/queue.c **** 			xReturn = pdPASS;
 645:FreeRTOS\source/queue.c **** 		}
 646:FreeRTOS\source/queue.c **** 		else
 647:FreeRTOS\source/queue.c **** 		{
 648:FreeRTOS\source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 649:FreeRTOS\source/queue.c **** 
 650:FreeRTOS\source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 651:FreeRTOS\source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 652:FreeRTOS\source/queue.c **** 			before reaching here. */
 653:FreeRTOS\source/queue.c **** 			if( xReturn != pdFAIL )
 654:FreeRTOS\source/queue.c **** 			{
 655:FreeRTOS\source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 656:FreeRTOS\source/queue.c **** 			}
 657:FreeRTOS\source/queue.c **** 			else
 658:FreeRTOS\source/queue.c **** 			{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 13


 659:FreeRTOS\source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 660:FreeRTOS\source/queue.c **** 			}
 661:FreeRTOS\source/queue.c **** 		}
 662:FreeRTOS\source/queue.c **** 
 663:FreeRTOS\source/queue.c **** 		return xReturn;
 664:FreeRTOS\source/queue.c **** 	}
 665:FreeRTOS\source/queue.c **** 
 666:FreeRTOS\source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 667:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 668:FreeRTOS\source/queue.c **** 
 669:FreeRTOS\source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 670:FreeRTOS\source/queue.c **** 
 671:FreeRTOS\source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 672:FreeRTOS\source/queue.c **** 	{
 673:FreeRTOS\source/queue.c **** 	QueueHandle_t xHandle;
 674:FreeRTOS\source/queue.c **** 
 675:FreeRTOS\source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 676:FreeRTOS\source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 677:FreeRTOS\source/queue.c **** 
 678:FreeRTOS\source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 679:FreeRTOS\source/queue.c **** 
 680:FreeRTOS\source/queue.c **** 		if( xHandle != NULL )
 681:FreeRTOS\source/queue.c **** 		{
 682:FreeRTOS\source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 683:FreeRTOS\source/queue.c **** 
 684:FreeRTOS\source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 685:FreeRTOS\source/queue.c **** 		}
 686:FreeRTOS\source/queue.c **** 		else
 687:FreeRTOS\source/queue.c **** 		{
 688:FreeRTOS\source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 689:FreeRTOS\source/queue.c **** 		}
 690:FreeRTOS\source/queue.c **** 
 691:FreeRTOS\source/queue.c **** 		return xHandle;
 692:FreeRTOS\source/queue.c **** 	}
 693:FreeRTOS\source/queue.c **** 
 694:FreeRTOS\source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 695:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 696:FreeRTOS\source/queue.c **** 
 697:FreeRTOS\source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 698:FreeRTOS\source/queue.c **** 
 699:FreeRTOS\source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 700:FreeRTOS\source/queue.c **** 	{
 701:FreeRTOS\source/queue.c **** 	QueueHandle_t xHandle;
 702:FreeRTOS\source/queue.c **** 
 703:FreeRTOS\source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 704:FreeRTOS\source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 705:FreeRTOS\source/queue.c **** 
 706:FreeRTOS\source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 707:FreeRTOS\source/queue.c **** 
 708:FreeRTOS\source/queue.c **** 		if( xHandle != NULL )
 709:FreeRTOS\source/queue.c **** 		{
 710:FreeRTOS\source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 711:FreeRTOS\source/queue.c **** 
 712:FreeRTOS\source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 713:FreeRTOS\source/queue.c **** 		}
 714:FreeRTOS\source/queue.c **** 		else
 715:FreeRTOS\source/queue.c **** 		{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 14


 716:FreeRTOS\source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 717:FreeRTOS\source/queue.c **** 		}
 718:FreeRTOS\source/queue.c **** 
 719:FreeRTOS\source/queue.c **** 		return xHandle;
 720:FreeRTOS\source/queue.c **** 	}
 721:FreeRTOS\source/queue.c **** 
 722:FreeRTOS\source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 723:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 724:FreeRTOS\source/queue.c **** 
 725:FreeRTOS\source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 726:FreeRTOS\source/queue.c **** {
 727:FreeRTOS\source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 728:FreeRTOS\source/queue.c **** TimeOut_t xTimeOut;
 729:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 730:FreeRTOS\source/queue.c **** 
 731:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue );
 732:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 733:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 734:FreeRTOS\source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 735:FreeRTOS\source/queue.c **** 	{
 736:FreeRTOS\source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 737:FreeRTOS\source/queue.c **** 	}
 738:FreeRTOS\source/queue.c **** 	#endif
 739:FreeRTOS\source/queue.c **** 
 740:FreeRTOS\source/queue.c **** 
 741:FreeRTOS\source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 742:FreeRTOS\source/queue.c **** 	statements within the function itself.  This is done in the interest
 743:FreeRTOS\source/queue.c **** 	of execution time efficiency. */
 744:FreeRTOS\source/queue.c **** 	for( ;; )
 745:FreeRTOS\source/queue.c **** 	{
 746:FreeRTOS\source/queue.c **** 		taskENTER_CRITICAL();
 747:FreeRTOS\source/queue.c **** 		{
 748:FreeRTOS\source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 749:FreeRTOS\source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 750:FreeRTOS\source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 751:FreeRTOS\source/queue.c **** 			queue is full. */
 752:FreeRTOS\source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 753:FreeRTOS\source/queue.c **** 			{
 754:FreeRTOS\source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 755:FreeRTOS\source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 756:FreeRTOS\source/queue.c **** 
 757:FreeRTOS\source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 758:FreeRTOS\source/queue.c **** 				{
 759:FreeRTOS\source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 760:FreeRTOS\source/queue.c **** 					{
 761:FreeRTOS\source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 762:FreeRTOS\source/queue.c **** 						{
 763:FreeRTOS\source/queue.c **** 							/* The queue is a member of a queue set, and posting
 764:FreeRTOS\source/queue.c **** 							to the queue set caused a higher priority task to
 765:FreeRTOS\source/queue.c **** 							unblock. A context switch is required. */
 766:FreeRTOS\source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 767:FreeRTOS\source/queue.c **** 						}
 768:FreeRTOS\source/queue.c **** 						else
 769:FreeRTOS\source/queue.c **** 						{
 770:FreeRTOS\source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 771:FreeRTOS\source/queue.c **** 						}
 772:FreeRTOS\source/queue.c **** 					}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 15


 773:FreeRTOS\source/queue.c **** 					else
 774:FreeRTOS\source/queue.c **** 					{
 775:FreeRTOS\source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 776:FreeRTOS\source/queue.c **** 						queue then unblock it now. */
 777:FreeRTOS\source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 778:FreeRTOS\source/queue.c **** 						{
 779:FreeRTOS\source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 780:FreeRTOS\source/queue.c **** 							{
 781:FreeRTOS\source/queue.c **** 								/* The unblocked task has a priority higher than
 782:FreeRTOS\source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 783:FreeRTOS\source/queue.c **** 								do this from within the critical section - the
 784:FreeRTOS\source/queue.c **** 								kernel takes care of that. */
 785:FreeRTOS\source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 786:FreeRTOS\source/queue.c **** 							}
 787:FreeRTOS\source/queue.c **** 							else
 788:FreeRTOS\source/queue.c **** 							{
 789:FreeRTOS\source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 790:FreeRTOS\source/queue.c **** 							}
 791:FreeRTOS\source/queue.c **** 						}
 792:FreeRTOS\source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 793:FreeRTOS\source/queue.c **** 						{
 794:FreeRTOS\source/queue.c **** 							/* This path is a special case that will only get
 795:FreeRTOS\source/queue.c **** 							executed if the task was holding multiple mutexes
 796:FreeRTOS\source/queue.c **** 							and the mutexes were given back in an order that is
 797:FreeRTOS\source/queue.c **** 							different to that in which they were taken. */
 798:FreeRTOS\source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:FreeRTOS\source/queue.c **** 						}
 800:FreeRTOS\source/queue.c **** 						else
 801:FreeRTOS\source/queue.c **** 						{
 802:FreeRTOS\source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:FreeRTOS\source/queue.c **** 						}
 804:FreeRTOS\source/queue.c **** 					}
 805:FreeRTOS\source/queue.c **** 				}
 806:FreeRTOS\source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 807:FreeRTOS\source/queue.c **** 				{
 808:FreeRTOS\source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 809:FreeRTOS\source/queue.c **** 					queue then unblock it now. */
 810:FreeRTOS\source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811:FreeRTOS\source/queue.c **** 					{
 812:FreeRTOS\source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 813:FreeRTOS\source/queue.c **** 						{
 814:FreeRTOS\source/queue.c **** 							/* The unblocked task has a priority higher than
 815:FreeRTOS\source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 816:FreeRTOS\source/queue.c **** 							this from within the critical section - the kernel
 817:FreeRTOS\source/queue.c **** 							takes care of that. */
 818:FreeRTOS\source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 819:FreeRTOS\source/queue.c **** 						}
 820:FreeRTOS\source/queue.c **** 						else
 821:FreeRTOS\source/queue.c **** 						{
 822:FreeRTOS\source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 823:FreeRTOS\source/queue.c **** 						}
 824:FreeRTOS\source/queue.c **** 					}
 825:FreeRTOS\source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 826:FreeRTOS\source/queue.c **** 					{
 827:FreeRTOS\source/queue.c **** 						/* This path is a special case that will only get
 828:FreeRTOS\source/queue.c **** 						executed if the task was holding multiple mutexes and
 829:FreeRTOS\source/queue.c **** 						the mutexes were given back in an order that is
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 16


 830:FreeRTOS\source/queue.c **** 						different to that in which they were taken. */
 831:FreeRTOS\source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 832:FreeRTOS\source/queue.c **** 					}
 833:FreeRTOS\source/queue.c **** 					else
 834:FreeRTOS\source/queue.c **** 					{
 835:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 836:FreeRTOS\source/queue.c **** 					}
 837:FreeRTOS\source/queue.c **** 				}
 838:FreeRTOS\source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 839:FreeRTOS\source/queue.c **** 
 840:FreeRTOS\source/queue.c **** 				taskEXIT_CRITICAL();
 841:FreeRTOS\source/queue.c **** 				return pdPASS;
 842:FreeRTOS\source/queue.c **** 			}
 843:FreeRTOS\source/queue.c **** 			else
 844:FreeRTOS\source/queue.c **** 			{
 845:FreeRTOS\source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 846:FreeRTOS\source/queue.c **** 				{
 847:FreeRTOS\source/queue.c **** 					/* The queue was full and no block time is specified (or
 848:FreeRTOS\source/queue.c **** 					the block time has expired) so leave now. */
 849:FreeRTOS\source/queue.c **** 					taskEXIT_CRITICAL();
 850:FreeRTOS\source/queue.c **** 
 851:FreeRTOS\source/queue.c **** 					/* Return to the original privilege level before exiting
 852:FreeRTOS\source/queue.c **** 					the function. */
 853:FreeRTOS\source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 854:FreeRTOS\source/queue.c **** 					return errQUEUE_FULL;
 855:FreeRTOS\source/queue.c **** 				}
 856:FreeRTOS\source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 857:FreeRTOS\source/queue.c **** 				{
 858:FreeRTOS\source/queue.c **** 					/* The queue was full and a block time was specified so
 859:FreeRTOS\source/queue.c **** 					configure the timeout structure. */
 860:FreeRTOS\source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 861:FreeRTOS\source/queue.c **** 					xEntryTimeSet = pdTRUE;
 862:FreeRTOS\source/queue.c **** 				}
 863:FreeRTOS\source/queue.c **** 				else
 864:FreeRTOS\source/queue.c **** 				{
 865:FreeRTOS\source/queue.c **** 					/* Entry time was already set. */
 866:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 867:FreeRTOS\source/queue.c **** 				}
 868:FreeRTOS\source/queue.c **** 			}
 869:FreeRTOS\source/queue.c **** 		}
 870:FreeRTOS\source/queue.c **** 		taskEXIT_CRITICAL();
 871:FreeRTOS\source/queue.c **** 
 872:FreeRTOS\source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 873:FreeRTOS\source/queue.c **** 		now the critical section has been exited. */
 874:FreeRTOS\source/queue.c **** 
 875:FreeRTOS\source/queue.c **** 		vTaskSuspendAll();
 876:FreeRTOS\source/queue.c **** 		prvLockQueue( pxQueue );
 877:FreeRTOS\source/queue.c **** 
 878:FreeRTOS\source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 879:FreeRTOS\source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 880:FreeRTOS\source/queue.c **** 		{
 881:FreeRTOS\source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 882:FreeRTOS\source/queue.c **** 			{
 883:FreeRTOS\source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 884:FreeRTOS\source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 885:FreeRTOS\source/queue.c **** 
 886:FreeRTOS\source/queue.c **** 				/* Unlocking the queue means queue events can effect the
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 17


 887:FreeRTOS\source/queue.c **** 				event list.  It is possible that interrupts occurring now
 888:FreeRTOS\source/queue.c **** 				remove this task from the event list again - but as the
 889:FreeRTOS\source/queue.c **** 				scheduler is suspended the task will go onto the pending
 890:FreeRTOS\source/queue.c **** 				ready last instead of the actual ready list. */
 891:FreeRTOS\source/queue.c **** 				prvUnlockQueue( pxQueue );
 892:FreeRTOS\source/queue.c **** 
 893:FreeRTOS\source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 894:FreeRTOS\source/queue.c **** 				ready list into the ready list - so it is feasible that this
 895:FreeRTOS\source/queue.c **** 				task is already in a ready list before it yields - in which
 896:FreeRTOS\source/queue.c **** 				case the yield will not cause a context switch unless there
 897:FreeRTOS\source/queue.c **** 				is also a higher priority task in the pending ready list. */
 898:FreeRTOS\source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 899:FreeRTOS\source/queue.c **** 				{
 900:FreeRTOS\source/queue.c **** 					portYIELD_WITHIN_API();
 901:FreeRTOS\source/queue.c **** 				}
 902:FreeRTOS\source/queue.c **** 			}
 903:FreeRTOS\source/queue.c **** 			else
 904:FreeRTOS\source/queue.c **** 			{
 905:FreeRTOS\source/queue.c **** 				/* Try again. */
 906:FreeRTOS\source/queue.c **** 				prvUnlockQueue( pxQueue );
 907:FreeRTOS\source/queue.c **** 				( void ) xTaskResumeAll();
 908:FreeRTOS\source/queue.c **** 			}
 909:FreeRTOS\source/queue.c **** 		}
 910:FreeRTOS\source/queue.c **** 		else
 911:FreeRTOS\source/queue.c **** 		{
 912:FreeRTOS\source/queue.c **** 			/* The timeout has expired. */
 913:FreeRTOS\source/queue.c **** 			prvUnlockQueue( pxQueue );
 914:FreeRTOS\source/queue.c **** 			( void ) xTaskResumeAll();
 915:FreeRTOS\source/queue.c **** 
 916:FreeRTOS\source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 917:FreeRTOS\source/queue.c **** 			return errQUEUE_FULL;
 918:FreeRTOS\source/queue.c **** 		}
 919:FreeRTOS\source/queue.c **** 	}
 920:FreeRTOS\source/queue.c **** }
 921:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 922:FreeRTOS\source/queue.c **** 
 923:FreeRTOS\source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 924:FreeRTOS\source/queue.c **** {
 925:FreeRTOS\source/queue.c **** BaseType_t xReturn;
 926:FreeRTOS\source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 927:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 928:FreeRTOS\source/queue.c **** 
 929:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue );
 930:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 931:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 932:FreeRTOS\source/queue.c **** 
 933:FreeRTOS\source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 934:FreeRTOS\source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 935:FreeRTOS\source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 936:FreeRTOS\source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 937:FreeRTOS\source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 938:FreeRTOS\source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 939:FreeRTOS\source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 940:FreeRTOS\source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 941:FreeRTOS\source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 942:FreeRTOS\source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 943:FreeRTOS\source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 18


 944:FreeRTOS\source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 945:FreeRTOS\source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 946:FreeRTOS\source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 947:FreeRTOS\source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 948:FreeRTOS\source/queue.c **** 
 949:FreeRTOS\source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 950:FreeRTOS\source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 951:FreeRTOS\source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 952:FreeRTOS\source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 953:FreeRTOS\source/queue.c **** 	post). */
 954:FreeRTOS\source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 955:FreeRTOS\source/queue.c **** 	{
 956:FreeRTOS\source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 957:FreeRTOS\source/queue.c **** 		{
 958:FreeRTOS\source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 959:FreeRTOS\source/queue.c **** 
 960:FreeRTOS\source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 961:FreeRTOS\source/queue.c **** 
 962:FreeRTOS\source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 963:FreeRTOS\source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 964:FreeRTOS\source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 965:FreeRTOS\source/queue.c **** 			called here even though the disinherit function does not check if
 966:FreeRTOS\source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 967:FreeRTOS\source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 968:FreeRTOS\source/queue.c **** 
 969:FreeRTOS\source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 970:FreeRTOS\source/queue.c **** 			be done when the queue is unlocked later. */
 971:FreeRTOS\source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 972:FreeRTOS\source/queue.c **** 			{
 973:FreeRTOS\source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 974:FreeRTOS\source/queue.c **** 				{
 975:FreeRTOS\source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 976:FreeRTOS\source/queue.c **** 					{
 977:FreeRTOS\source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 978:FreeRTOS\source/queue.c **** 						{
 979:FreeRTOS\source/queue.c **** 							/* The queue is a member of a queue set, and posting
 980:FreeRTOS\source/queue.c **** 							to the queue set caused a higher priority task to
 981:FreeRTOS\source/queue.c **** 							unblock.  A context switch is required. */
 982:FreeRTOS\source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 983:FreeRTOS\source/queue.c **** 							{
 984:FreeRTOS\source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 985:FreeRTOS\source/queue.c **** 							}
 986:FreeRTOS\source/queue.c **** 							else
 987:FreeRTOS\source/queue.c **** 							{
 988:FreeRTOS\source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 989:FreeRTOS\source/queue.c **** 							}
 990:FreeRTOS\source/queue.c **** 						}
 991:FreeRTOS\source/queue.c **** 						else
 992:FreeRTOS\source/queue.c **** 						{
 993:FreeRTOS\source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 994:FreeRTOS\source/queue.c **** 						}
 995:FreeRTOS\source/queue.c **** 					}
 996:FreeRTOS\source/queue.c **** 					else
 997:FreeRTOS\source/queue.c **** 					{
 998:FreeRTOS\source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 999:FreeRTOS\source/queue.c **** 						{
1000:FreeRTOS\source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 19


1001:FreeRTOS\source/queue.c **** 							{
1002:FreeRTOS\source/queue.c **** 								/* The task waiting has a higher priority so
1003:FreeRTOS\source/queue.c **** 								record that a context switch is required. */
1004:FreeRTOS\source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1005:FreeRTOS\source/queue.c **** 								{
1006:FreeRTOS\source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1007:FreeRTOS\source/queue.c **** 								}
1008:FreeRTOS\source/queue.c **** 								else
1009:FreeRTOS\source/queue.c **** 								{
1010:FreeRTOS\source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1011:FreeRTOS\source/queue.c **** 								}
1012:FreeRTOS\source/queue.c **** 							}
1013:FreeRTOS\source/queue.c **** 							else
1014:FreeRTOS\source/queue.c **** 							{
1015:FreeRTOS\source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1016:FreeRTOS\source/queue.c **** 							}
1017:FreeRTOS\source/queue.c **** 						}
1018:FreeRTOS\source/queue.c **** 						else
1019:FreeRTOS\source/queue.c **** 						{
1020:FreeRTOS\source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1021:FreeRTOS\source/queue.c **** 						}
1022:FreeRTOS\source/queue.c **** 					}
1023:FreeRTOS\source/queue.c **** 				}
1024:FreeRTOS\source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1025:FreeRTOS\source/queue.c **** 				{
1026:FreeRTOS\source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1027:FreeRTOS\source/queue.c **** 					{
1028:FreeRTOS\source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1029:FreeRTOS\source/queue.c **** 						{
1030:FreeRTOS\source/queue.c **** 							/* The task waiting has a higher priority so record that a
1031:FreeRTOS\source/queue.c **** 							context	switch is required. */
1032:FreeRTOS\source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1033:FreeRTOS\source/queue.c **** 							{
1034:FreeRTOS\source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1035:FreeRTOS\source/queue.c **** 							}
1036:FreeRTOS\source/queue.c **** 							else
1037:FreeRTOS\source/queue.c **** 							{
1038:FreeRTOS\source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1039:FreeRTOS\source/queue.c **** 							}
1040:FreeRTOS\source/queue.c **** 						}
1041:FreeRTOS\source/queue.c **** 						else
1042:FreeRTOS\source/queue.c **** 						{
1043:FreeRTOS\source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1044:FreeRTOS\source/queue.c **** 						}
1045:FreeRTOS\source/queue.c **** 					}
1046:FreeRTOS\source/queue.c **** 					else
1047:FreeRTOS\source/queue.c **** 					{
1048:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1049:FreeRTOS\source/queue.c **** 					}
1050:FreeRTOS\source/queue.c **** 				}
1051:FreeRTOS\source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1052:FreeRTOS\source/queue.c **** 			}
1053:FreeRTOS\source/queue.c **** 			else
1054:FreeRTOS\source/queue.c **** 			{
1055:FreeRTOS\source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1056:FreeRTOS\source/queue.c **** 				knows that data was posted while it was locked. */
1057:FreeRTOS\source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 20


1058:FreeRTOS\source/queue.c **** 			}
1059:FreeRTOS\source/queue.c **** 
1060:FreeRTOS\source/queue.c **** 			xReturn = pdPASS;
1061:FreeRTOS\source/queue.c **** 		}
1062:FreeRTOS\source/queue.c **** 		else
1063:FreeRTOS\source/queue.c **** 		{
1064:FreeRTOS\source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1065:FreeRTOS\source/queue.c **** 			xReturn = errQUEUE_FULL;
1066:FreeRTOS\source/queue.c **** 		}
1067:FreeRTOS\source/queue.c **** 	}
1068:FreeRTOS\source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1069:FreeRTOS\source/queue.c **** 
1070:FreeRTOS\source/queue.c **** 	return xReturn;
1071:FreeRTOS\source/queue.c **** }
1072:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1073:FreeRTOS\source/queue.c **** 
1074:FreeRTOS\source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1075:FreeRTOS\source/queue.c **** {
1076:FreeRTOS\source/queue.c **** BaseType_t xReturn;
1077:FreeRTOS\source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1078:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1079:FreeRTOS\source/queue.c **** 
1080:FreeRTOS\source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1081:FreeRTOS\source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1082:FreeRTOS\source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1083:FreeRTOS\source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1084:FreeRTOS\source/queue.c **** 	post). */
1085:FreeRTOS\source/queue.c **** 
1086:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue );
1087:FreeRTOS\source/queue.c **** 
1088:FreeRTOS\source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1089:FreeRTOS\source/queue.c **** 	if the item size is not 0. */
1090:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1091:FreeRTOS\source/queue.c **** 
1092:FreeRTOS\source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1093:FreeRTOS\source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1094:FreeRTOS\source/queue.c **** 	interrupts, only tasks. */
1095:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1096:FreeRTOS\source/queue.c **** 
1097:FreeRTOS\source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1098:FreeRTOS\source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1099:FreeRTOS\source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1100:FreeRTOS\source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1101:FreeRTOS\source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1102:FreeRTOS\source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1103:FreeRTOS\source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1104:FreeRTOS\source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1105:FreeRTOS\source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1106:FreeRTOS\source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1107:FreeRTOS\source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1108:FreeRTOS\source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1109:FreeRTOS\source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1110:FreeRTOS\source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1111:FreeRTOS\source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1112:FreeRTOS\source/queue.c **** 
1113:FreeRTOS\source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1114:FreeRTOS\source/queue.c **** 	{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 21


1115:FreeRTOS\source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1116:FreeRTOS\source/queue.c **** 
1117:FreeRTOS\source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1118:FreeRTOS\source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1119:FreeRTOS\source/queue.c **** 		space'. */
1120:FreeRTOS\source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1121:FreeRTOS\source/queue.c **** 		{
1122:FreeRTOS\source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1123:FreeRTOS\source/queue.c **** 
1124:FreeRTOS\source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1125:FreeRTOS\source/queue.c **** 
1126:FreeRTOS\source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1127:FreeRTOS\source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1128:FreeRTOS\source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1129:FreeRTOS\source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1130:FreeRTOS\source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1131:FreeRTOS\source/queue.c **** 			messages (semaphores) available. */
1132:FreeRTOS\source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1133:FreeRTOS\source/queue.c **** 
1134:FreeRTOS\source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1135:FreeRTOS\source/queue.c **** 			be done when the queue is unlocked later. */
1136:FreeRTOS\source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1137:FreeRTOS\source/queue.c **** 			{
1138:FreeRTOS\source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1139:FreeRTOS\source/queue.c **** 				{
1140:FreeRTOS\source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1141:FreeRTOS\source/queue.c **** 					{
1142:FreeRTOS\source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1143:FreeRTOS\source/queue.c **** 						{
1144:FreeRTOS\source/queue.c **** 							/* The semaphore is a member of a queue set, and
1145:FreeRTOS\source/queue.c **** 							posting	to the queue set caused a higher priority
1146:FreeRTOS\source/queue.c **** 							task to	unblock.  A context switch is required. */
1147:FreeRTOS\source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1148:FreeRTOS\source/queue.c **** 							{
1149:FreeRTOS\source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1150:FreeRTOS\source/queue.c **** 							}
1151:FreeRTOS\source/queue.c **** 							else
1152:FreeRTOS\source/queue.c **** 							{
1153:FreeRTOS\source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1154:FreeRTOS\source/queue.c **** 							}
1155:FreeRTOS\source/queue.c **** 						}
1156:FreeRTOS\source/queue.c **** 						else
1157:FreeRTOS\source/queue.c **** 						{
1158:FreeRTOS\source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1159:FreeRTOS\source/queue.c **** 						}
1160:FreeRTOS\source/queue.c **** 					}
1161:FreeRTOS\source/queue.c **** 					else
1162:FreeRTOS\source/queue.c **** 					{
1163:FreeRTOS\source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1164:FreeRTOS\source/queue.c **** 						{
1165:FreeRTOS\source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1166:FreeRTOS\source/queue.c **** 							{
1167:FreeRTOS\source/queue.c **** 								/* The task waiting has a higher priority so
1168:FreeRTOS\source/queue.c **** 								record that a context switch is required. */
1169:FreeRTOS\source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1170:FreeRTOS\source/queue.c **** 								{
1171:FreeRTOS\source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 22


1172:FreeRTOS\source/queue.c **** 								}
1173:FreeRTOS\source/queue.c **** 								else
1174:FreeRTOS\source/queue.c **** 								{
1175:FreeRTOS\source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1176:FreeRTOS\source/queue.c **** 								}
1177:FreeRTOS\source/queue.c **** 							}
1178:FreeRTOS\source/queue.c **** 							else
1179:FreeRTOS\source/queue.c **** 							{
1180:FreeRTOS\source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1181:FreeRTOS\source/queue.c **** 							}
1182:FreeRTOS\source/queue.c **** 						}
1183:FreeRTOS\source/queue.c **** 						else
1184:FreeRTOS\source/queue.c **** 						{
1185:FreeRTOS\source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1186:FreeRTOS\source/queue.c **** 						}
1187:FreeRTOS\source/queue.c **** 					}
1188:FreeRTOS\source/queue.c **** 				}
1189:FreeRTOS\source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1190:FreeRTOS\source/queue.c **** 				{
1191:FreeRTOS\source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1192:FreeRTOS\source/queue.c **** 					{
1193:FreeRTOS\source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1194:FreeRTOS\source/queue.c **** 						{
1195:FreeRTOS\source/queue.c **** 							/* The task waiting has a higher priority so record that a
1196:FreeRTOS\source/queue.c **** 							context	switch is required. */
1197:FreeRTOS\source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1198:FreeRTOS\source/queue.c **** 							{
1199:FreeRTOS\source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1200:FreeRTOS\source/queue.c **** 							}
1201:FreeRTOS\source/queue.c **** 							else
1202:FreeRTOS\source/queue.c **** 							{
1203:FreeRTOS\source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1204:FreeRTOS\source/queue.c **** 							}
1205:FreeRTOS\source/queue.c **** 						}
1206:FreeRTOS\source/queue.c **** 						else
1207:FreeRTOS\source/queue.c **** 						{
1208:FreeRTOS\source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1209:FreeRTOS\source/queue.c **** 						}
1210:FreeRTOS\source/queue.c **** 					}
1211:FreeRTOS\source/queue.c **** 					else
1212:FreeRTOS\source/queue.c **** 					{
1213:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1214:FreeRTOS\source/queue.c **** 					}
1215:FreeRTOS\source/queue.c **** 				}
1216:FreeRTOS\source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1217:FreeRTOS\source/queue.c **** 			}
1218:FreeRTOS\source/queue.c **** 			else
1219:FreeRTOS\source/queue.c **** 			{
1220:FreeRTOS\source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1221:FreeRTOS\source/queue.c **** 				knows that data was posted while it was locked. */
1222:FreeRTOS\source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1223:FreeRTOS\source/queue.c **** 			}
1224:FreeRTOS\source/queue.c **** 
1225:FreeRTOS\source/queue.c **** 			xReturn = pdPASS;
1226:FreeRTOS\source/queue.c **** 		}
1227:FreeRTOS\source/queue.c **** 		else
1228:FreeRTOS\source/queue.c **** 		{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 23


1229:FreeRTOS\source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1230:FreeRTOS\source/queue.c **** 			xReturn = errQUEUE_FULL;
1231:FreeRTOS\source/queue.c **** 		}
1232:FreeRTOS\source/queue.c **** 	}
1233:FreeRTOS\source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1234:FreeRTOS\source/queue.c **** 
1235:FreeRTOS\source/queue.c **** 	return xReturn;
1236:FreeRTOS\source/queue.c **** }
1237:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1238:FreeRTOS\source/queue.c **** 
1239:FreeRTOS\source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1240:FreeRTOS\source/queue.c **** {
1241:FreeRTOS\source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1242:FreeRTOS\source/queue.c **** TimeOut_t xTimeOut;
1243:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1244:FreeRTOS\source/queue.c **** 
1245:FreeRTOS\source/queue.c **** 	/* Check the pointer is not NULL. */
1246:FreeRTOS\source/queue.c **** 	configASSERT( ( pxQueue ) );
1247:FreeRTOS\source/queue.c **** 
1248:FreeRTOS\source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1249:FreeRTOS\source/queue.c **** 	is zero (so no data is copied into the buffer. */
1250:FreeRTOS\source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1251:FreeRTOS\source/queue.c **** 
1252:FreeRTOS\source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1253:FreeRTOS\source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1254:FreeRTOS\source/queue.c **** 	{
1255:FreeRTOS\source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1256:FreeRTOS\source/queue.c **** 	}
1257:FreeRTOS\source/queue.c **** 	#endif
1258:FreeRTOS\source/queue.c **** 
1259:FreeRTOS\source/queue.c **** 
1260:FreeRTOS\source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1261:FreeRTOS\source/queue.c **** 	statements within the function itself.  This is done in the interest
1262:FreeRTOS\source/queue.c **** 	of execution time efficiency. */
1263:FreeRTOS\source/queue.c **** 
1264:FreeRTOS\source/queue.c **** 	for( ;; )
1265:FreeRTOS\source/queue.c **** 	{
1266:FreeRTOS\source/queue.c **** 		taskENTER_CRITICAL();
1267:FreeRTOS\source/queue.c **** 		{
1268:FreeRTOS\source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1269:FreeRTOS\source/queue.c **** 
1270:FreeRTOS\source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1271:FreeRTOS\source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1272:FreeRTOS\source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1273:FreeRTOS\source/queue.c **** 			{
1274:FreeRTOS\source/queue.c **** 				/* Data available, remove one item. */
1275:FreeRTOS\source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1276:FreeRTOS\source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1277:FreeRTOS\source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1278:FreeRTOS\source/queue.c **** 
1279:FreeRTOS\source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1280:FreeRTOS\source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1281:FreeRTOS\source/queue.c **** 				task. */
1282:FreeRTOS\source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1283:FreeRTOS\source/queue.c **** 				{
1284:FreeRTOS\source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1285:FreeRTOS\source/queue.c **** 					{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 24


1286:FreeRTOS\source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1287:FreeRTOS\source/queue.c **** 					}
1288:FreeRTOS\source/queue.c **** 					else
1289:FreeRTOS\source/queue.c **** 					{
1290:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1291:FreeRTOS\source/queue.c **** 					}
1292:FreeRTOS\source/queue.c **** 				}
1293:FreeRTOS\source/queue.c **** 				else
1294:FreeRTOS\source/queue.c **** 				{
1295:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1296:FreeRTOS\source/queue.c **** 				}
1297:FreeRTOS\source/queue.c **** 
1298:FreeRTOS\source/queue.c **** 				taskEXIT_CRITICAL();
1299:FreeRTOS\source/queue.c **** 				return pdPASS;
1300:FreeRTOS\source/queue.c **** 			}
1301:FreeRTOS\source/queue.c **** 			else
1302:FreeRTOS\source/queue.c **** 			{
1303:FreeRTOS\source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1304:FreeRTOS\source/queue.c **** 				{
1305:FreeRTOS\source/queue.c **** 					/* The queue was empty and no block time is specified (or
1306:FreeRTOS\source/queue.c **** 					the block time has expired) so leave now. */
1307:FreeRTOS\source/queue.c **** 					taskEXIT_CRITICAL();
1308:FreeRTOS\source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1309:FreeRTOS\source/queue.c **** 					return errQUEUE_EMPTY;
1310:FreeRTOS\source/queue.c **** 				}
1311:FreeRTOS\source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1312:FreeRTOS\source/queue.c **** 				{
1313:FreeRTOS\source/queue.c **** 					/* The queue was empty and a block time was specified so
1314:FreeRTOS\source/queue.c **** 					configure the timeout structure. */
1315:FreeRTOS\source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1316:FreeRTOS\source/queue.c **** 					xEntryTimeSet = pdTRUE;
1317:FreeRTOS\source/queue.c **** 				}
1318:FreeRTOS\source/queue.c **** 				else
1319:FreeRTOS\source/queue.c **** 				{
1320:FreeRTOS\source/queue.c **** 					/* Entry time was already set. */
1321:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1322:FreeRTOS\source/queue.c **** 				}
1323:FreeRTOS\source/queue.c **** 			}
1324:FreeRTOS\source/queue.c **** 		}
1325:FreeRTOS\source/queue.c **** 		taskEXIT_CRITICAL();
1326:FreeRTOS\source/queue.c **** 
1327:FreeRTOS\source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1328:FreeRTOS\source/queue.c **** 		now the critical section has been exited. */
1329:FreeRTOS\source/queue.c **** 
1330:FreeRTOS\source/queue.c **** 		vTaskSuspendAll();
1331:FreeRTOS\source/queue.c **** 		prvLockQueue( pxQueue );
1332:FreeRTOS\source/queue.c **** 
1333:FreeRTOS\source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1334:FreeRTOS\source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1335:FreeRTOS\source/queue.c **** 		{
1336:FreeRTOS\source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1337:FreeRTOS\source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1338:FreeRTOS\source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1339:FreeRTOS\source/queue.c **** 			{
1340:FreeRTOS\source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1341:FreeRTOS\source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1342:FreeRTOS\source/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 25


1343:FreeRTOS\source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1344:FreeRTOS\source/queue.c **** 				{
1345:FreeRTOS\source/queue.c **** 					portYIELD_WITHIN_API();
1346:FreeRTOS\source/queue.c **** 				}
1347:FreeRTOS\source/queue.c **** 				else
1348:FreeRTOS\source/queue.c **** 				{
1349:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1350:FreeRTOS\source/queue.c **** 				}
1351:FreeRTOS\source/queue.c **** 			}
1352:FreeRTOS\source/queue.c **** 			else
1353:FreeRTOS\source/queue.c **** 			{
1354:FreeRTOS\source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1355:FreeRTOS\source/queue.c **** 				data. */
1356:FreeRTOS\source/queue.c **** 				prvUnlockQueue( pxQueue );
1357:FreeRTOS\source/queue.c **** 				( void ) xTaskResumeAll();
1358:FreeRTOS\source/queue.c **** 			}
1359:FreeRTOS\source/queue.c **** 		}
1360:FreeRTOS\source/queue.c **** 		else
1361:FreeRTOS\source/queue.c **** 		{
1362:FreeRTOS\source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1363:FreeRTOS\source/queue.c **** 			back and attempt to read the data. */
1364:FreeRTOS\source/queue.c **** 			prvUnlockQueue( pxQueue );
1365:FreeRTOS\source/queue.c **** 			( void ) xTaskResumeAll();
1366:FreeRTOS\source/queue.c **** 
1367:FreeRTOS\source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1368:FreeRTOS\source/queue.c **** 			{
1369:FreeRTOS\source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1370:FreeRTOS\source/queue.c **** 				return errQUEUE_EMPTY;
1371:FreeRTOS\source/queue.c **** 			}
1372:FreeRTOS\source/queue.c **** 			else
1373:FreeRTOS\source/queue.c **** 			{
1374:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1375:FreeRTOS\source/queue.c **** 			}
1376:FreeRTOS\source/queue.c **** 		}
1377:FreeRTOS\source/queue.c **** 	}
1378:FreeRTOS\source/queue.c **** }
1379:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1380:FreeRTOS\source/queue.c **** 
1381:FreeRTOS\source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1382:FreeRTOS\source/queue.c **** {
1383:FreeRTOS\source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1384:FreeRTOS\source/queue.c **** TimeOut_t xTimeOut;
1385:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1386:FreeRTOS\source/queue.c **** 
1387:FreeRTOS\source/queue.c **** #if( configUSE_MUTEXES == 1 )
1388:FreeRTOS\source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1389:FreeRTOS\source/queue.c **** #endif
1390:FreeRTOS\source/queue.c **** 
1391:FreeRTOS\source/queue.c **** 	/* Check the queue pointer is not NULL. */
1392:FreeRTOS\source/queue.c **** 	configASSERT( ( pxQueue ) );
1393:FreeRTOS\source/queue.c **** 
1394:FreeRTOS\source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1395:FreeRTOS\source/queue.c **** 	0. */
1396:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1397:FreeRTOS\source/queue.c **** 
1398:FreeRTOS\source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1399:FreeRTOS\source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 26


1400:FreeRTOS\source/queue.c **** 	{
1401:FreeRTOS\source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1402:FreeRTOS\source/queue.c **** 	}
1403:FreeRTOS\source/queue.c **** 	#endif
1404:FreeRTOS\source/queue.c **** 
1405:FreeRTOS\source/queue.c **** 
1406:FreeRTOS\source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1407:FreeRTOS\source/queue.c **** 	statements within the function itself.  This is done in the interest
1408:FreeRTOS\source/queue.c **** 	of execution time efficiency. */
1409:FreeRTOS\source/queue.c **** 
1410:FreeRTOS\source/queue.c **** 	for( ;; )
1411:FreeRTOS\source/queue.c **** 	{
1412:FreeRTOS\source/queue.c **** 		taskENTER_CRITICAL();
1413:FreeRTOS\source/queue.c **** 		{
1414:FreeRTOS\source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1415:FreeRTOS\source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1416:FreeRTOS\source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1417:FreeRTOS\source/queue.c **** 
1418:FreeRTOS\source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1419:FreeRTOS\source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1420:FreeRTOS\source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1421:FreeRTOS\source/queue.c **** 			{
1422:FreeRTOS\source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1423:FreeRTOS\source/queue.c **** 
1424:FreeRTOS\source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1425:FreeRTOS\source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1426:FreeRTOS\source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1427:FreeRTOS\source/queue.c **** 
1428:FreeRTOS\source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1429:FreeRTOS\source/queue.c **** 				{
1430:FreeRTOS\source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1431:FreeRTOS\source/queue.c **** 					{
1432:FreeRTOS\source/queue.c **** 						/* Record the information required to implement
1433:FreeRTOS\source/queue.c **** 						priority inheritance should it become necessary. */
1434:FreeRTOS\source/queue.c **** 						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is n
1435:FreeRTOS\source/queue.c **** 					}
1436:FreeRTOS\source/queue.c **** 					else
1437:FreeRTOS\source/queue.c **** 					{
1438:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1439:FreeRTOS\source/queue.c **** 					}
1440:FreeRTOS\source/queue.c **** 				}
1441:FreeRTOS\source/queue.c **** 				#endif /* configUSE_MUTEXES */
1442:FreeRTOS\source/queue.c **** 
1443:FreeRTOS\source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1444:FreeRTOS\source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1445:FreeRTOS\source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1446:FreeRTOS\source/queue.c **** 				{
1447:FreeRTOS\source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1448:FreeRTOS\source/queue.c **** 					{
1449:FreeRTOS\source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1450:FreeRTOS\source/queue.c **** 					}
1451:FreeRTOS\source/queue.c **** 					else
1452:FreeRTOS\source/queue.c **** 					{
1453:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1454:FreeRTOS\source/queue.c **** 					}
1455:FreeRTOS\source/queue.c **** 				}
1456:FreeRTOS\source/queue.c **** 				else
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 27


1457:FreeRTOS\source/queue.c **** 				{
1458:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1459:FreeRTOS\source/queue.c **** 				}
1460:FreeRTOS\source/queue.c **** 
1461:FreeRTOS\source/queue.c **** 				taskEXIT_CRITICAL();
1462:FreeRTOS\source/queue.c **** 				return pdPASS;
1463:FreeRTOS\source/queue.c **** 			}
1464:FreeRTOS\source/queue.c **** 			else
1465:FreeRTOS\source/queue.c **** 			{
1466:FreeRTOS\source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1467:FreeRTOS\source/queue.c **** 				{
1468:FreeRTOS\source/queue.c **** 					/* For inheritance to have occurred there must have been an
1469:FreeRTOS\source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1470:FreeRTOS\source/queue.c **** 					if it were 0 the function would have exited. */
1471:FreeRTOS\source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1472:FreeRTOS\source/queue.c **** 					{
1473:FreeRTOS\source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1474:FreeRTOS\source/queue.c **** 					}
1475:FreeRTOS\source/queue.c **** 					#endif /* configUSE_MUTEXES */
1476:FreeRTOS\source/queue.c **** 
1477:FreeRTOS\source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1478:FreeRTOS\source/queue.c **** 					(or the block time has expired) so exit now. */
1479:FreeRTOS\source/queue.c **** 					taskEXIT_CRITICAL();
1480:FreeRTOS\source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1481:FreeRTOS\source/queue.c **** 					return errQUEUE_EMPTY;
1482:FreeRTOS\source/queue.c **** 				}
1483:FreeRTOS\source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1484:FreeRTOS\source/queue.c **** 				{
1485:FreeRTOS\source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1486:FreeRTOS\source/queue.c **** 					so configure the timeout structure ready to block. */
1487:FreeRTOS\source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1488:FreeRTOS\source/queue.c **** 					xEntryTimeSet = pdTRUE;
1489:FreeRTOS\source/queue.c **** 				}
1490:FreeRTOS\source/queue.c **** 				else
1491:FreeRTOS\source/queue.c **** 				{
1492:FreeRTOS\source/queue.c **** 					/* Entry time was already set. */
1493:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1494:FreeRTOS\source/queue.c **** 				}
1495:FreeRTOS\source/queue.c **** 			}
1496:FreeRTOS\source/queue.c **** 		}
1497:FreeRTOS\source/queue.c **** 		taskEXIT_CRITICAL();
1498:FreeRTOS\source/queue.c **** 
1499:FreeRTOS\source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1500:FreeRTOS\source/queue.c **** 		now the critical section has been exited. */
1501:FreeRTOS\source/queue.c **** 
1502:FreeRTOS\source/queue.c **** 		vTaskSuspendAll();
1503:FreeRTOS\source/queue.c **** 		prvLockQueue( pxQueue );
1504:FreeRTOS\source/queue.c **** 
1505:FreeRTOS\source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1506:FreeRTOS\source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1507:FreeRTOS\source/queue.c **** 		{
1508:FreeRTOS\source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1509:FreeRTOS\source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1510:FreeRTOS\source/queue.c **** 			become available.  As semaphores are implemented with queues the
1511:FreeRTOS\source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1512:FreeRTOS\source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1513:FreeRTOS\source/queue.c **** 			{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 28


1514:FreeRTOS\source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1515:FreeRTOS\source/queue.c **** 
1516:FreeRTOS\source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1517:FreeRTOS\source/queue.c **** 				{
1518:FreeRTOS\source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1519:FreeRTOS\source/queue.c **** 					{
1520:FreeRTOS\source/queue.c **** 						taskENTER_CRITICAL();
1521:FreeRTOS\source/queue.c **** 						{
1522:FreeRTOS\source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1523:FreeRTOS\source/queue.c **** 						}
1524:FreeRTOS\source/queue.c **** 						taskEXIT_CRITICAL();
1525:FreeRTOS\source/queue.c **** 					}
1526:FreeRTOS\source/queue.c **** 					else
1527:FreeRTOS\source/queue.c **** 					{
1528:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1529:FreeRTOS\source/queue.c **** 					}
1530:FreeRTOS\source/queue.c **** 				}
1531:FreeRTOS\source/queue.c **** 				#endif
1532:FreeRTOS\source/queue.c **** 
1533:FreeRTOS\source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1534:FreeRTOS\source/queue.c **** 				prvUnlockQueue( pxQueue );
1535:FreeRTOS\source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1536:FreeRTOS\source/queue.c **** 				{
1537:FreeRTOS\source/queue.c **** 					portYIELD_WITHIN_API();
1538:FreeRTOS\source/queue.c **** 				}
1539:FreeRTOS\source/queue.c **** 				else
1540:FreeRTOS\source/queue.c **** 				{
1541:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1542:FreeRTOS\source/queue.c **** 				}
1543:FreeRTOS\source/queue.c **** 			}
1544:FreeRTOS\source/queue.c **** 			else
1545:FreeRTOS\source/queue.c **** 			{
1546:FreeRTOS\source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1547:FreeRTOS\source/queue.c **** 				attempt to take the semaphore again. */
1548:FreeRTOS\source/queue.c **** 				prvUnlockQueue( pxQueue );
1549:FreeRTOS\source/queue.c **** 				( void ) xTaskResumeAll();
1550:FreeRTOS\source/queue.c **** 			}
1551:FreeRTOS\source/queue.c **** 		}
1552:FreeRTOS\source/queue.c **** 		else
1553:FreeRTOS\source/queue.c **** 		{
1554:FreeRTOS\source/queue.c **** 			/* Timed out. */
1555:FreeRTOS\source/queue.c **** 			prvUnlockQueue( pxQueue );
1556:FreeRTOS\source/queue.c **** 			( void ) xTaskResumeAll();
1557:FreeRTOS\source/queue.c **** 
1558:FreeRTOS\source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1559:FreeRTOS\source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1560:FreeRTOS\source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1561:FreeRTOS\source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1562:FreeRTOS\source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1563:FreeRTOS\source/queue.c **** 			{
1564:FreeRTOS\source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1565:FreeRTOS\source/queue.c **** 				{
1566:FreeRTOS\source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1567:FreeRTOS\source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1568:FreeRTOS\source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1569:FreeRTOS\source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1570:FreeRTOS\source/queue.c **** 					{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 29


1571:FreeRTOS\source/queue.c **** 						taskENTER_CRITICAL();
1572:FreeRTOS\source/queue.c **** 						{
1573:FreeRTOS\source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1574:FreeRTOS\source/queue.c **** 
1575:FreeRTOS\source/queue.c **** 							/* This task blocking on the mutex caused another
1576:FreeRTOS\source/queue.c **** 							task to inherit this task's priority.  Now this task
1577:FreeRTOS\source/queue.c **** 							has timed out the priority should be disinherited
1578:FreeRTOS\source/queue.c **** 							again, but only as low as the next highest priority
1579:FreeRTOS\source/queue.c **** 							task that is waiting for the same mutex. */
1580:FreeRTOS\source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1581:FreeRTOS\source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
1582:FreeRTOS\source/queue.c **** 						}
1583:FreeRTOS\source/queue.c **** 						taskEXIT_CRITICAL();
1584:FreeRTOS\source/queue.c **** 					}
1585:FreeRTOS\source/queue.c **** 				}
1586:FreeRTOS\source/queue.c **** 				#endif /* configUSE_MUTEXES */
1587:FreeRTOS\source/queue.c **** 
1588:FreeRTOS\source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1589:FreeRTOS\source/queue.c **** 				return errQUEUE_EMPTY;
1590:FreeRTOS\source/queue.c **** 			}
1591:FreeRTOS\source/queue.c **** 			else
1592:FreeRTOS\source/queue.c **** 			{
1593:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1594:FreeRTOS\source/queue.c **** 			}
1595:FreeRTOS\source/queue.c **** 		}
1596:FreeRTOS\source/queue.c **** 	}
1597:FreeRTOS\source/queue.c **** }
1598:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1599:FreeRTOS\source/queue.c **** 
1600:FreeRTOS\source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1601:FreeRTOS\source/queue.c **** {
1602:FreeRTOS\source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1603:FreeRTOS\source/queue.c **** TimeOut_t xTimeOut;
1604:FreeRTOS\source/queue.c **** int8_t *pcOriginalReadPosition;
1605:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1606:FreeRTOS\source/queue.c **** 
1607:FreeRTOS\source/queue.c **** 	/* Check the pointer is not NULL. */
1608:FreeRTOS\source/queue.c **** 	configASSERT( ( pxQueue ) );
1609:FreeRTOS\source/queue.c **** 
1610:FreeRTOS\source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1611:FreeRTOS\source/queue.c **** 	is zero (so no data is copied into the buffer. */
1612:FreeRTOS\source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1613:FreeRTOS\source/queue.c **** 
1614:FreeRTOS\source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1615:FreeRTOS\source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1616:FreeRTOS\source/queue.c **** 	{
1617:FreeRTOS\source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1618:FreeRTOS\source/queue.c **** 	}
1619:FreeRTOS\source/queue.c **** 	#endif
1620:FreeRTOS\source/queue.c **** 
1621:FreeRTOS\source/queue.c **** 
1622:FreeRTOS\source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1623:FreeRTOS\source/queue.c **** 	statements within the function itself.  This is done in the interest
1624:FreeRTOS\source/queue.c **** 	of execution time efficiency. */
1625:FreeRTOS\source/queue.c **** 
1626:FreeRTOS\source/queue.c **** 	for( ;; )
1627:FreeRTOS\source/queue.c **** 	{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 30


1628:FreeRTOS\source/queue.c **** 		taskENTER_CRITICAL();
1629:FreeRTOS\source/queue.c **** 		{
1630:FreeRTOS\source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1631:FreeRTOS\source/queue.c **** 
1632:FreeRTOS\source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1633:FreeRTOS\source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1634:FreeRTOS\source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1635:FreeRTOS\source/queue.c **** 			{
1636:FreeRTOS\source/queue.c **** 				/* Remember the read position so it can be reset after the data
1637:FreeRTOS\source/queue.c **** 				is read from the queue as this function is only peeking the
1638:FreeRTOS\source/queue.c **** 				data, not removing it. */
1639:FreeRTOS\source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1640:FreeRTOS\source/queue.c **** 
1641:FreeRTOS\source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1642:FreeRTOS\source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1643:FreeRTOS\source/queue.c **** 
1644:FreeRTOS\source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1645:FreeRTOS\source/queue.c **** 				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1646:FreeRTOS\source/queue.c **** 
1647:FreeRTOS\source/queue.c **** 				/* The data is being left in the queue, so see if there are
1648:FreeRTOS\source/queue.c **** 				any other tasks waiting for the data. */
1649:FreeRTOS\source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1650:FreeRTOS\source/queue.c **** 				{
1651:FreeRTOS\source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1652:FreeRTOS\source/queue.c **** 					{
1653:FreeRTOS\source/queue.c **** 						/* The task waiting has a higher priority than this task. */
1654:FreeRTOS\source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1655:FreeRTOS\source/queue.c **** 					}
1656:FreeRTOS\source/queue.c **** 					else
1657:FreeRTOS\source/queue.c **** 					{
1658:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1659:FreeRTOS\source/queue.c **** 					}
1660:FreeRTOS\source/queue.c **** 				}
1661:FreeRTOS\source/queue.c **** 				else
1662:FreeRTOS\source/queue.c **** 				{
1663:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1664:FreeRTOS\source/queue.c **** 				}
1665:FreeRTOS\source/queue.c **** 
1666:FreeRTOS\source/queue.c **** 				taskEXIT_CRITICAL();
1667:FreeRTOS\source/queue.c **** 				return pdPASS;
1668:FreeRTOS\source/queue.c **** 			}
1669:FreeRTOS\source/queue.c **** 			else
1670:FreeRTOS\source/queue.c **** 			{
1671:FreeRTOS\source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1672:FreeRTOS\source/queue.c **** 				{
1673:FreeRTOS\source/queue.c **** 					/* The queue was empty and no block time is specified (or
1674:FreeRTOS\source/queue.c **** 					the block time has expired) so leave now. */
1675:FreeRTOS\source/queue.c **** 					taskEXIT_CRITICAL();
1676:FreeRTOS\source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1677:FreeRTOS\source/queue.c **** 					return errQUEUE_EMPTY;
1678:FreeRTOS\source/queue.c **** 				}
1679:FreeRTOS\source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1680:FreeRTOS\source/queue.c **** 				{
1681:FreeRTOS\source/queue.c **** 					/* The queue was empty and a block time was specified so
1682:FreeRTOS\source/queue.c **** 					configure the timeout structure ready to enter the blocked
1683:FreeRTOS\source/queue.c **** 					state. */
1684:FreeRTOS\source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 31


1685:FreeRTOS\source/queue.c **** 					xEntryTimeSet = pdTRUE;
1686:FreeRTOS\source/queue.c **** 				}
1687:FreeRTOS\source/queue.c **** 				else
1688:FreeRTOS\source/queue.c **** 				{
1689:FreeRTOS\source/queue.c **** 					/* Entry time was already set. */
1690:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1691:FreeRTOS\source/queue.c **** 				}
1692:FreeRTOS\source/queue.c **** 			}
1693:FreeRTOS\source/queue.c **** 		}
1694:FreeRTOS\source/queue.c **** 		taskEXIT_CRITICAL();
1695:FreeRTOS\source/queue.c **** 
1696:FreeRTOS\source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1697:FreeRTOS\source/queue.c **** 		now the critical section has been exited. */
1698:FreeRTOS\source/queue.c **** 
1699:FreeRTOS\source/queue.c **** 		vTaskSuspendAll();
1700:FreeRTOS\source/queue.c **** 		prvLockQueue( pxQueue );
1701:FreeRTOS\source/queue.c **** 
1702:FreeRTOS\source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1703:FreeRTOS\source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1704:FreeRTOS\source/queue.c **** 		{
1705:FreeRTOS\source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1706:FreeRTOS\source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1707:FreeRTOS\source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1708:FreeRTOS\source/queue.c **** 			{
1709:FreeRTOS\source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1710:FreeRTOS\source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1711:FreeRTOS\source/queue.c **** 				prvUnlockQueue( pxQueue );
1712:FreeRTOS\source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1713:FreeRTOS\source/queue.c **** 				{
1714:FreeRTOS\source/queue.c **** 					portYIELD_WITHIN_API();
1715:FreeRTOS\source/queue.c **** 				}
1716:FreeRTOS\source/queue.c **** 				else
1717:FreeRTOS\source/queue.c **** 				{
1718:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1719:FreeRTOS\source/queue.c **** 				}
1720:FreeRTOS\source/queue.c **** 			}
1721:FreeRTOS\source/queue.c **** 			else
1722:FreeRTOS\source/queue.c **** 			{
1723:FreeRTOS\source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1724:FreeRTOS\source/queue.c **** 				state, instead return to try and obtain the data. */
1725:FreeRTOS\source/queue.c **** 				prvUnlockQueue( pxQueue );
1726:FreeRTOS\source/queue.c **** 				( void ) xTaskResumeAll();
1727:FreeRTOS\source/queue.c **** 			}
1728:FreeRTOS\source/queue.c **** 		}
1729:FreeRTOS\source/queue.c **** 		else
1730:FreeRTOS\source/queue.c **** 		{
1731:FreeRTOS\source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1732:FreeRTOS\source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1733:FreeRTOS\source/queue.c **** 			prvUnlockQueue( pxQueue );
1734:FreeRTOS\source/queue.c **** 			( void ) xTaskResumeAll();
1735:FreeRTOS\source/queue.c **** 
1736:FreeRTOS\source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1737:FreeRTOS\source/queue.c **** 			{
1738:FreeRTOS\source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1739:FreeRTOS\source/queue.c **** 				return errQUEUE_EMPTY;
1740:FreeRTOS\source/queue.c **** 			}
1741:FreeRTOS\source/queue.c **** 			else
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 32


1742:FreeRTOS\source/queue.c **** 			{
1743:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1744:FreeRTOS\source/queue.c **** 			}
1745:FreeRTOS\source/queue.c **** 		}
1746:FreeRTOS\source/queue.c **** 	}
1747:FreeRTOS\source/queue.c **** }
1748:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1749:FreeRTOS\source/queue.c **** 
1750:FreeRTOS\source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1751:FreeRTOS\source/queue.c **** {
1752:FreeRTOS\source/queue.c **** BaseType_t xReturn;
1753:FreeRTOS\source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1754:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1755:FreeRTOS\source/queue.c **** 
1756:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue );
1757:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1758:FreeRTOS\source/queue.c **** 
1759:FreeRTOS\source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1760:FreeRTOS\source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1761:FreeRTOS\source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1762:FreeRTOS\source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1763:FreeRTOS\source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1764:FreeRTOS\source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1765:FreeRTOS\source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1766:FreeRTOS\source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1767:FreeRTOS\source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1768:FreeRTOS\source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1769:FreeRTOS\source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1770:FreeRTOS\source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1771:FreeRTOS\source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1772:FreeRTOS\source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1773:FreeRTOS\source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1774:FreeRTOS\source/queue.c **** 
1775:FreeRTOS\source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1776:FreeRTOS\source/queue.c **** 	{
1777:FreeRTOS\source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1778:FreeRTOS\source/queue.c **** 
1779:FreeRTOS\source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1780:FreeRTOS\source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1781:FreeRTOS\source/queue.c **** 		{
1782:FreeRTOS\source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1783:FreeRTOS\source/queue.c **** 
1784:FreeRTOS\source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1785:FreeRTOS\source/queue.c **** 
1786:FreeRTOS\source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1787:FreeRTOS\source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1788:FreeRTOS\source/queue.c **** 
1789:FreeRTOS\source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1790:FreeRTOS\source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1791:FreeRTOS\source/queue.c **** 			will know that an ISR has removed data while the queue was
1792:FreeRTOS\source/queue.c **** 			locked. */
1793:FreeRTOS\source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1794:FreeRTOS\source/queue.c **** 			{
1795:FreeRTOS\source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1796:FreeRTOS\source/queue.c **** 				{
1797:FreeRTOS\source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1798:FreeRTOS\source/queue.c **** 					{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 33


1799:FreeRTOS\source/queue.c **** 						/* The task waiting has a higher priority than us so
1800:FreeRTOS\source/queue.c **** 						force a context switch. */
1801:FreeRTOS\source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1802:FreeRTOS\source/queue.c **** 						{
1803:FreeRTOS\source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1804:FreeRTOS\source/queue.c **** 						}
1805:FreeRTOS\source/queue.c **** 						else
1806:FreeRTOS\source/queue.c **** 						{
1807:FreeRTOS\source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1808:FreeRTOS\source/queue.c **** 						}
1809:FreeRTOS\source/queue.c **** 					}
1810:FreeRTOS\source/queue.c **** 					else
1811:FreeRTOS\source/queue.c **** 					{
1812:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1813:FreeRTOS\source/queue.c **** 					}
1814:FreeRTOS\source/queue.c **** 				}
1815:FreeRTOS\source/queue.c **** 				else
1816:FreeRTOS\source/queue.c **** 				{
1817:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1818:FreeRTOS\source/queue.c **** 				}
1819:FreeRTOS\source/queue.c **** 			}
1820:FreeRTOS\source/queue.c **** 			else
1821:FreeRTOS\source/queue.c **** 			{
1822:FreeRTOS\source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1823:FreeRTOS\source/queue.c **** 				knows that data was removed while it was locked. */
1824:FreeRTOS\source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1825:FreeRTOS\source/queue.c **** 			}
1826:FreeRTOS\source/queue.c **** 
1827:FreeRTOS\source/queue.c **** 			xReturn = pdPASS;
1828:FreeRTOS\source/queue.c **** 		}
1829:FreeRTOS\source/queue.c **** 		else
1830:FreeRTOS\source/queue.c **** 		{
1831:FreeRTOS\source/queue.c **** 			xReturn = pdFAIL;
1832:FreeRTOS\source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1833:FreeRTOS\source/queue.c **** 		}
1834:FreeRTOS\source/queue.c **** 	}
1835:FreeRTOS\source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1836:FreeRTOS\source/queue.c **** 
1837:FreeRTOS\source/queue.c **** 	return xReturn;
1838:FreeRTOS\source/queue.c **** }
1839:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1840:FreeRTOS\source/queue.c **** 
1841:FreeRTOS\source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1842:FreeRTOS\source/queue.c **** {
1843:FreeRTOS\source/queue.c **** BaseType_t xReturn;
1844:FreeRTOS\source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1845:FreeRTOS\source/queue.c **** int8_t *pcOriginalReadPosition;
1846:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1847:FreeRTOS\source/queue.c **** 
1848:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue );
1849:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1850:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1851:FreeRTOS\source/queue.c **** 
1852:FreeRTOS\source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1853:FreeRTOS\source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1854:FreeRTOS\source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1855:FreeRTOS\source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 34


1856:FreeRTOS\source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1857:FreeRTOS\source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1858:FreeRTOS\source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1859:FreeRTOS\source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1860:FreeRTOS\source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1861:FreeRTOS\source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1862:FreeRTOS\source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1863:FreeRTOS\source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1864:FreeRTOS\source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1865:FreeRTOS\source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1866:FreeRTOS\source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1867:FreeRTOS\source/queue.c **** 
1868:FreeRTOS\source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1869:FreeRTOS\source/queue.c **** 	{
1870:FreeRTOS\source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1871:FreeRTOS\source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1872:FreeRTOS\source/queue.c **** 		{
1873:FreeRTOS\source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1874:FreeRTOS\source/queue.c **** 
1875:FreeRTOS\source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1876:FreeRTOS\source/queue.c **** 			actually being removed from the queue. */
1877:FreeRTOS\source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1878:FreeRTOS\source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1879:FreeRTOS\source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1880:FreeRTOS\source/queue.c **** 
1881:FreeRTOS\source/queue.c **** 			xReturn = pdPASS;
1882:FreeRTOS\source/queue.c **** 		}
1883:FreeRTOS\source/queue.c **** 		else
1884:FreeRTOS\source/queue.c **** 		{
1885:FreeRTOS\source/queue.c **** 			xReturn = pdFAIL;
1886:FreeRTOS\source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1887:FreeRTOS\source/queue.c **** 		}
1888:FreeRTOS\source/queue.c **** 	}
1889:FreeRTOS\source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1890:FreeRTOS\source/queue.c **** 
1891:FreeRTOS\source/queue.c **** 	return xReturn;
1892:FreeRTOS\source/queue.c **** }
1893:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1894:FreeRTOS\source/queue.c **** 
1895:FreeRTOS\source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1896:FreeRTOS\source/queue.c **** {
1897:FreeRTOS\source/queue.c **** UBaseType_t uxReturn;
1898:FreeRTOS\source/queue.c **** 
1899:FreeRTOS\source/queue.c **** 	configASSERT( xQueue );
1900:FreeRTOS\source/queue.c **** 
1901:FreeRTOS\source/queue.c **** 	taskENTER_CRITICAL();
1902:FreeRTOS\source/queue.c **** 	{
1903:FreeRTOS\source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1904:FreeRTOS\source/queue.c **** 	}
1905:FreeRTOS\source/queue.c **** 	taskEXIT_CRITICAL();
1906:FreeRTOS\source/queue.c **** 
1907:FreeRTOS\source/queue.c **** 	return uxReturn;
1908:FreeRTOS\source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1909:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1910:FreeRTOS\source/queue.c **** 
1911:FreeRTOS\source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1912:FreeRTOS\source/queue.c **** {
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 35


1913:FreeRTOS\source/queue.c **** UBaseType_t uxReturn;
1914:FreeRTOS\source/queue.c **** Queue_t *pxQueue;
1915:FreeRTOS\source/queue.c **** 
1916:FreeRTOS\source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1917:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue );
1918:FreeRTOS\source/queue.c **** 
1919:FreeRTOS\source/queue.c **** 	taskENTER_CRITICAL();
1920:FreeRTOS\source/queue.c **** 	{
1921:FreeRTOS\source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1922:FreeRTOS\source/queue.c **** 	}
1923:FreeRTOS\source/queue.c **** 	taskEXIT_CRITICAL();
1924:FreeRTOS\source/queue.c **** 
1925:FreeRTOS\source/queue.c **** 	return uxReturn;
1926:FreeRTOS\source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1927:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1928:FreeRTOS\source/queue.c **** 
1929:FreeRTOS\source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1930:FreeRTOS\source/queue.c **** {
1931:FreeRTOS\source/queue.c **** UBaseType_t uxReturn;
1932:FreeRTOS\source/queue.c **** 
1933:FreeRTOS\source/queue.c **** 	configASSERT( xQueue );
1934:FreeRTOS\source/queue.c **** 
1935:FreeRTOS\source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1936:FreeRTOS\source/queue.c **** 
1937:FreeRTOS\source/queue.c **** 	return uxReturn;
1938:FreeRTOS\source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1939:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1940:FreeRTOS\source/queue.c **** 
1941:FreeRTOS\source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1942:FreeRTOS\source/queue.c **** {
1943:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1944:FreeRTOS\source/queue.c **** 
1945:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue );
1946:FreeRTOS\source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1947:FreeRTOS\source/queue.c **** 
1948:FreeRTOS\source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1949:FreeRTOS\source/queue.c **** 	{
1950:FreeRTOS\source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1951:FreeRTOS\source/queue.c **** 	}
1952:FreeRTOS\source/queue.c **** 	#endif
1953:FreeRTOS\source/queue.c **** 
1954:FreeRTOS\source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1955:FreeRTOS\source/queue.c **** 	{
1956:FreeRTOS\source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1957:FreeRTOS\source/queue.c **** 		again. */
1958:FreeRTOS\source/queue.c **** 		vPortFree( pxQueue );
1959:FreeRTOS\source/queue.c **** 	}
1960:FreeRTOS\source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1961:FreeRTOS\source/queue.c **** 	{
1962:FreeRTOS\source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1963:FreeRTOS\source/queue.c **** 		check before attempting to free the memory. */
1964:FreeRTOS\source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1965:FreeRTOS\source/queue.c **** 		{
1966:FreeRTOS\source/queue.c **** 			vPortFree( pxQueue );
1967:FreeRTOS\source/queue.c **** 		}
1968:FreeRTOS\source/queue.c **** 		else
1969:FreeRTOS\source/queue.c **** 		{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 36


1970:FreeRTOS\source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1971:FreeRTOS\source/queue.c **** 		}
1972:FreeRTOS\source/queue.c **** 	}
1973:FreeRTOS\source/queue.c **** 	#else
1974:FreeRTOS\source/queue.c **** 	{
1975:FreeRTOS\source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1976:FreeRTOS\source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1977:FreeRTOS\source/queue.c **** 		( void ) pxQueue;
1978:FreeRTOS\source/queue.c **** 	}
1979:FreeRTOS\source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1980:FreeRTOS\source/queue.c **** }
1981:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1982:FreeRTOS\source/queue.c **** 
1983:FreeRTOS\source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1984:FreeRTOS\source/queue.c **** 
1985:FreeRTOS\source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1986:FreeRTOS\source/queue.c **** 	{
1987:FreeRTOS\source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1988:FreeRTOS\source/queue.c **** 	}
1989:FreeRTOS\source/queue.c **** 
1990:FreeRTOS\source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1991:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
1992:FreeRTOS\source/queue.c **** 
1993:FreeRTOS\source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1994:FreeRTOS\source/queue.c **** 
1995:FreeRTOS\source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1996:FreeRTOS\source/queue.c **** 	{
1997:FreeRTOS\source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1998:FreeRTOS\source/queue.c **** 	}
1999:FreeRTOS\source/queue.c **** 
2000:FreeRTOS\source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2001:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2002:FreeRTOS\source/queue.c **** 
2003:FreeRTOS\source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2004:FreeRTOS\source/queue.c **** 
2005:FreeRTOS\source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2006:FreeRTOS\source/queue.c **** 	{
2007:FreeRTOS\source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2008:FreeRTOS\source/queue.c **** 	}
2009:FreeRTOS\source/queue.c **** 
2010:FreeRTOS\source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2011:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2012:FreeRTOS\source/queue.c **** 
2013:FreeRTOS\source/queue.c **** #if( configUSE_MUTEXES == 1 )
2014:FreeRTOS\source/queue.c **** 
2015:FreeRTOS\source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2016:FreeRTOS\source/queue.c **** 	{
  27              		.loc 1 2016 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2017:FreeRTOS\source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2018:FreeRTOS\source/queue.c **** 
2019:FreeRTOS\source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2020:FreeRTOS\source/queue.c **** 		priority, but the waiting task times out, then the holder should
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 37


2021:FreeRTOS\source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2022:FreeRTOS\source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2023:FreeRTOS\source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2024:FreeRTOS\source/queue.c **** 		mutex. */
2025:FreeRTOS\source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  33              		.loc 1 2025 0
  34 0000 436A     		ldr	r3, [r0, #36]
  35 0002 002B     		cmp	r3, #0
  36 0004 04D0     		beq	.L3
2026:FreeRTOS\source/queue.c **** 		{
2027:FreeRTOS\source/queue.c **** 			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( px
  37              		.loc 1 2027 0
  38 0006 036B     		ldr	r3, [r0, #48]
  39 0008 1868     		ldr	r0, [r3]
  40              	.LVL1:
  41 000a 0523     		movs	r3, #5
  42 000c 181A     		subs	r0, r3, r0
  43              	.LVL2:
  44 000e 00E0     		b	.L2
  45              	.LVL3:
  46              	.L3:
2028:FreeRTOS\source/queue.c **** 		}
2029:FreeRTOS\source/queue.c **** 		else
2030:FreeRTOS\source/queue.c **** 		{
2031:FreeRTOS\source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  47              		.loc 1 2031 0
  48 0010 0020     		movs	r0, #0
  49              	.LVL4:
  50              	.L2:
2032:FreeRTOS\source/queue.c **** 		}
2033:FreeRTOS\source/queue.c **** 
2034:FreeRTOS\source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2035:FreeRTOS\source/queue.c **** 	}
  51              		.loc 1 2035 0
  52              		@ sp needed
  53 0012 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE49:
  56              		.size	prvGetDisinheritPriorityAfterTimeout, .-prvGetDisinheritPriorityAfterTimeout
  57              		.section	.text.prvIsQueueFull,"ax",%progbits
  58              		.align	2
  59              		.code	16
  60              		.thumb_func
  61              		.type	prvIsQueueFull, %function
  62              	prvIsQueueFull:
  63              	.LFB55:
2036:FreeRTOS\source/queue.c **** 
2037:FreeRTOS\source/queue.c **** #endif /* configUSE_MUTEXES */
2038:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2039:FreeRTOS\source/queue.c **** 
2040:FreeRTOS\source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2041:FreeRTOS\source/queue.c **** {
2042:FreeRTOS\source/queue.c **** BaseType_t xReturn = pdFALSE;
2043:FreeRTOS\source/queue.c **** UBaseType_t uxMessagesWaiting;
2044:FreeRTOS\source/queue.c **** 
2045:FreeRTOS\source/queue.c **** 	/* This function is called from a critical section. */
2046:FreeRTOS\source/queue.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 38


2047:FreeRTOS\source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2048:FreeRTOS\source/queue.c **** 
2049:FreeRTOS\source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2050:FreeRTOS\source/queue.c **** 	{
2051:FreeRTOS\source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2052:FreeRTOS\source/queue.c **** 		{
2053:FreeRTOS\source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2054:FreeRTOS\source/queue.c **** 			{
2055:FreeRTOS\source/queue.c **** 				/* The mutex is no longer being held. */
2056:FreeRTOS\source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
2057:FreeRTOS\source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
2058:FreeRTOS\source/queue.c **** 			}
2059:FreeRTOS\source/queue.c **** 			else
2060:FreeRTOS\source/queue.c **** 			{
2061:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2062:FreeRTOS\source/queue.c **** 			}
2063:FreeRTOS\source/queue.c **** 		}
2064:FreeRTOS\source/queue.c **** 		#endif /* configUSE_MUTEXES */
2065:FreeRTOS\source/queue.c **** 	}
2066:FreeRTOS\source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2067:FreeRTOS\source/queue.c **** 	{
2068:FreeRTOS\source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2069:FreeRTOS\source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
2070:FreeRTOS\source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
2071:FreeRTOS\source/queue.c **** 		{
2072:FreeRTOS\source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2073:FreeRTOS\source/queue.c **** 		}
2074:FreeRTOS\source/queue.c **** 		else
2075:FreeRTOS\source/queue.c **** 		{
2076:FreeRTOS\source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2077:FreeRTOS\source/queue.c **** 		}
2078:FreeRTOS\source/queue.c **** 	}
2079:FreeRTOS\source/queue.c **** 	else
2080:FreeRTOS\source/queue.c **** 	{
2081:FreeRTOS\source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
2082:FreeRTOS\source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
2083:FreeRTOS\source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
2084:FreeRTOS\source/queue.c **** 		{
2085:FreeRTOS\source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
2086:FreeRTOS\source/queue.c **** 		}
2087:FreeRTOS\source/queue.c **** 		else
2088:FreeRTOS\source/queue.c **** 		{
2089:FreeRTOS\source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2090:FreeRTOS\source/queue.c **** 		}
2091:FreeRTOS\source/queue.c **** 
2092:FreeRTOS\source/queue.c **** 		if( xPosition == queueOVERWRITE )
2093:FreeRTOS\source/queue.c **** 		{
2094:FreeRTOS\source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2095:FreeRTOS\source/queue.c **** 			{
2096:FreeRTOS\source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2097:FreeRTOS\source/queue.c **** 				one from the recorded number of items in the queue so when
2098:FreeRTOS\source/queue.c **** 				one is added again below the number of recorded items remains
2099:FreeRTOS\source/queue.c **** 				correct. */
2100:FreeRTOS\source/queue.c **** 				--uxMessagesWaiting;
2101:FreeRTOS\source/queue.c **** 			}
2102:FreeRTOS\source/queue.c **** 			else
2103:FreeRTOS\source/queue.c **** 			{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 39


2104:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2105:FreeRTOS\source/queue.c **** 			}
2106:FreeRTOS\source/queue.c **** 		}
2107:FreeRTOS\source/queue.c **** 		else
2108:FreeRTOS\source/queue.c **** 		{
2109:FreeRTOS\source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2110:FreeRTOS\source/queue.c **** 		}
2111:FreeRTOS\source/queue.c **** 	}
2112:FreeRTOS\source/queue.c **** 
2113:FreeRTOS\source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2114:FreeRTOS\source/queue.c **** 
2115:FreeRTOS\source/queue.c **** 	return xReturn;
2116:FreeRTOS\source/queue.c **** }
2117:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2118:FreeRTOS\source/queue.c **** 
2119:FreeRTOS\source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2120:FreeRTOS\source/queue.c **** {
2121:FreeRTOS\source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2122:FreeRTOS\source/queue.c **** 	{
2123:FreeRTOS\source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2124:FreeRTOS\source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
2125:FreeRTOS\source/queue.c **** 		{
2126:FreeRTOS\source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
2127:FreeRTOS\source/queue.c **** 		}
2128:FreeRTOS\source/queue.c **** 		else
2129:FreeRTOS\source/queue.c **** 		{
2130:FreeRTOS\source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2131:FreeRTOS\source/queue.c **** 		}
2132:FreeRTOS\source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
2133:FreeRTOS\source/queue.c **** 	}
2134:FreeRTOS\source/queue.c **** }
2135:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2136:FreeRTOS\source/queue.c **** 
2137:FreeRTOS\source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2138:FreeRTOS\source/queue.c **** {
2139:FreeRTOS\source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2140:FreeRTOS\source/queue.c **** 
2141:FreeRTOS\source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2142:FreeRTOS\source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2143:FreeRTOS\source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2144:FreeRTOS\source/queue.c **** 	updated. */
2145:FreeRTOS\source/queue.c **** 	taskENTER_CRITICAL();
2146:FreeRTOS\source/queue.c **** 	{
2147:FreeRTOS\source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2148:FreeRTOS\source/queue.c **** 
2149:FreeRTOS\source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2150:FreeRTOS\source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2151:FreeRTOS\source/queue.c **** 		{
2152:FreeRTOS\source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2153:FreeRTOS\source/queue.c **** 			blocked waiting for data to become available? */
2154:FreeRTOS\source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2155:FreeRTOS\source/queue.c **** 			{
2156:FreeRTOS\source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2157:FreeRTOS\source/queue.c **** 				{
2158:FreeRTOS\source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2159:FreeRTOS\source/queue.c **** 					{
2160:FreeRTOS\source/queue.c **** 						/* The queue is a member of a queue set, and posting to
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 40


2161:FreeRTOS\source/queue.c **** 						the queue set caused a higher priority task to unblock.
2162:FreeRTOS\source/queue.c **** 						A context switch is required. */
2163:FreeRTOS\source/queue.c **** 						vTaskMissedYield();
2164:FreeRTOS\source/queue.c **** 					}
2165:FreeRTOS\source/queue.c **** 					else
2166:FreeRTOS\source/queue.c **** 					{
2167:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2168:FreeRTOS\source/queue.c **** 					}
2169:FreeRTOS\source/queue.c **** 				}
2170:FreeRTOS\source/queue.c **** 				else
2171:FreeRTOS\source/queue.c **** 				{
2172:FreeRTOS\source/queue.c **** 					/* Tasks that are removed from the event list will get
2173:FreeRTOS\source/queue.c **** 					added to the pending ready list as the scheduler is still
2174:FreeRTOS\source/queue.c **** 					suspended. */
2175:FreeRTOS\source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:FreeRTOS\source/queue.c **** 					{
2177:FreeRTOS\source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:FreeRTOS\source/queue.c **** 						{
2179:FreeRTOS\source/queue.c **** 							/* The task waiting has a higher priority so record that a
2180:FreeRTOS\source/queue.c **** 							context	switch is required. */
2181:FreeRTOS\source/queue.c **** 							vTaskMissedYield();
2182:FreeRTOS\source/queue.c **** 						}
2183:FreeRTOS\source/queue.c **** 						else
2184:FreeRTOS\source/queue.c **** 						{
2185:FreeRTOS\source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2186:FreeRTOS\source/queue.c **** 						}
2187:FreeRTOS\source/queue.c **** 					}
2188:FreeRTOS\source/queue.c **** 					else
2189:FreeRTOS\source/queue.c **** 					{
2190:FreeRTOS\source/queue.c **** 						break;
2191:FreeRTOS\source/queue.c **** 					}
2192:FreeRTOS\source/queue.c **** 				}
2193:FreeRTOS\source/queue.c **** 			}
2194:FreeRTOS\source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2195:FreeRTOS\source/queue.c **** 			{
2196:FreeRTOS\source/queue.c **** 				/* Tasks that are removed from the event list will get added to
2197:FreeRTOS\source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2198:FreeRTOS\source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2199:FreeRTOS\source/queue.c **** 				{
2200:FreeRTOS\source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2201:FreeRTOS\source/queue.c **** 					{
2202:FreeRTOS\source/queue.c **** 						/* The task waiting has a higher priority so record that
2203:FreeRTOS\source/queue.c **** 						a context switch is required. */
2204:FreeRTOS\source/queue.c **** 						vTaskMissedYield();
2205:FreeRTOS\source/queue.c **** 					}
2206:FreeRTOS\source/queue.c **** 					else
2207:FreeRTOS\source/queue.c **** 					{
2208:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2209:FreeRTOS\source/queue.c **** 					}
2210:FreeRTOS\source/queue.c **** 				}
2211:FreeRTOS\source/queue.c **** 				else
2212:FreeRTOS\source/queue.c **** 				{
2213:FreeRTOS\source/queue.c **** 					break;
2214:FreeRTOS\source/queue.c **** 				}
2215:FreeRTOS\source/queue.c **** 			}
2216:FreeRTOS\source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2217:FreeRTOS\source/queue.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 41


2218:FreeRTOS\source/queue.c **** 			--cTxLock;
2219:FreeRTOS\source/queue.c **** 		}
2220:FreeRTOS\source/queue.c **** 
2221:FreeRTOS\source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2222:FreeRTOS\source/queue.c **** 	}
2223:FreeRTOS\source/queue.c **** 	taskEXIT_CRITICAL();
2224:FreeRTOS\source/queue.c **** 
2225:FreeRTOS\source/queue.c **** 	/* Do the same for the Rx lock. */
2226:FreeRTOS\source/queue.c **** 	taskENTER_CRITICAL();
2227:FreeRTOS\source/queue.c **** 	{
2228:FreeRTOS\source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2229:FreeRTOS\source/queue.c **** 
2230:FreeRTOS\source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2231:FreeRTOS\source/queue.c **** 		{
2232:FreeRTOS\source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2233:FreeRTOS\source/queue.c **** 			{
2234:FreeRTOS\source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2235:FreeRTOS\source/queue.c **** 				{
2236:FreeRTOS\source/queue.c **** 					vTaskMissedYield();
2237:FreeRTOS\source/queue.c **** 				}
2238:FreeRTOS\source/queue.c **** 				else
2239:FreeRTOS\source/queue.c **** 				{
2240:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2241:FreeRTOS\source/queue.c **** 				}
2242:FreeRTOS\source/queue.c **** 
2243:FreeRTOS\source/queue.c **** 				--cRxLock;
2244:FreeRTOS\source/queue.c **** 			}
2245:FreeRTOS\source/queue.c **** 			else
2246:FreeRTOS\source/queue.c **** 			{
2247:FreeRTOS\source/queue.c **** 				break;
2248:FreeRTOS\source/queue.c **** 			}
2249:FreeRTOS\source/queue.c **** 		}
2250:FreeRTOS\source/queue.c **** 
2251:FreeRTOS\source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2252:FreeRTOS\source/queue.c **** 	}
2253:FreeRTOS\source/queue.c **** 	taskEXIT_CRITICAL();
2254:FreeRTOS\source/queue.c **** }
2255:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2256:FreeRTOS\source/queue.c **** 
2257:FreeRTOS\source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2258:FreeRTOS\source/queue.c **** {
2259:FreeRTOS\source/queue.c **** BaseType_t xReturn;
2260:FreeRTOS\source/queue.c **** 
2261:FreeRTOS\source/queue.c **** 	taskENTER_CRITICAL();
2262:FreeRTOS\source/queue.c **** 	{
2263:FreeRTOS\source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2264:FreeRTOS\source/queue.c **** 		{
2265:FreeRTOS\source/queue.c **** 			xReturn = pdTRUE;
2266:FreeRTOS\source/queue.c **** 		}
2267:FreeRTOS\source/queue.c **** 		else
2268:FreeRTOS\source/queue.c **** 		{
2269:FreeRTOS\source/queue.c **** 			xReturn = pdFALSE;
2270:FreeRTOS\source/queue.c **** 		}
2271:FreeRTOS\source/queue.c **** 	}
2272:FreeRTOS\source/queue.c **** 	taskEXIT_CRITICAL();
2273:FreeRTOS\source/queue.c **** 
2274:FreeRTOS\source/queue.c **** 	return xReturn;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 42


2275:FreeRTOS\source/queue.c **** }
2276:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2277:FreeRTOS\source/queue.c **** 
2278:FreeRTOS\source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2279:FreeRTOS\source/queue.c **** {
2280:FreeRTOS\source/queue.c **** BaseType_t xReturn;
2281:FreeRTOS\source/queue.c **** 
2282:FreeRTOS\source/queue.c **** 	configASSERT( xQueue );
2283:FreeRTOS\source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
2284:FreeRTOS\source/queue.c **** 	{
2285:FreeRTOS\source/queue.c **** 		xReturn = pdTRUE;
2286:FreeRTOS\source/queue.c **** 	}
2287:FreeRTOS\source/queue.c **** 	else
2288:FreeRTOS\source/queue.c **** 	{
2289:FreeRTOS\source/queue.c **** 		xReturn = pdFALSE;
2290:FreeRTOS\source/queue.c **** 	}
2291:FreeRTOS\source/queue.c **** 
2292:FreeRTOS\source/queue.c **** 	return xReturn;
2293:FreeRTOS\source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2294:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2295:FreeRTOS\source/queue.c **** 
2296:FreeRTOS\source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2297:FreeRTOS\source/queue.c **** {
  64              		.loc 1 2297 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              	.LVL5:
  69 0000 10B5     		push	{r4, lr}
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 4, -8
  72              		.cfi_offset 14, -4
  73 0002 0400     		movs	r4, r0
2298:FreeRTOS\source/queue.c **** BaseType_t xReturn;
2299:FreeRTOS\source/queue.c **** 
2300:FreeRTOS\source/queue.c **** 	taskENTER_CRITICAL();
  74              		.loc 1 2300 0
  75 0004 FFF7FEFF 		bl	vPortEnterCritical
  76              	.LVL6:
2301:FreeRTOS\source/queue.c **** 	{
2302:FreeRTOS\source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  77              		.loc 1 2302 0
  78 0008 A26B     		ldr	r2, [r4, #56]
  79 000a E36B     		ldr	r3, [r4, #60]
  80 000c 9A42     		cmp	r2, r3
  81 000e 01D1     		bne	.L6
2303:FreeRTOS\source/queue.c **** 		{
2304:FreeRTOS\source/queue.c **** 			xReturn = pdTRUE;
  82              		.loc 1 2304 0
  83 0010 0124     		movs	r4, #1
  84              	.LVL7:
  85 0012 00E0     		b	.L5
  86              	.LVL8:
  87              	.L6:
2305:FreeRTOS\source/queue.c **** 		}
2306:FreeRTOS\source/queue.c **** 		else
2307:FreeRTOS\source/queue.c **** 		{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 43


2308:FreeRTOS\source/queue.c **** 			xReturn = pdFALSE;
  88              		.loc 1 2308 0
  89 0014 0024     		movs	r4, #0
  90              	.LVL9:
  91              	.L5:
2309:FreeRTOS\source/queue.c **** 		}
2310:FreeRTOS\source/queue.c **** 	}
2311:FreeRTOS\source/queue.c **** 	taskEXIT_CRITICAL();
  92              		.loc 1 2311 0
  93 0016 FFF7FEFF 		bl	vPortExitCritical
  94              	.LVL10:
2312:FreeRTOS\source/queue.c **** 
2313:FreeRTOS\source/queue.c **** 	return xReturn;
2314:FreeRTOS\source/queue.c **** }
  95              		.loc 1 2314 0
  96 001a 2000     		movs	r0, r4
  97              		@ sp needed
  98              	.LVL11:
  99 001c 10BD     		pop	{r4, pc}
 100              		.cfi_endproc
 101              	.LFE55:
 102              		.size	prvIsQueueFull, .-prvIsQueueFull
 103 001e C046     		.section	.text.prvIsQueueEmpty,"ax",%progbits
 104              		.align	2
 105              		.code	16
 106              		.thumb_func
 107              		.type	prvIsQueueEmpty, %function
 108              	prvIsQueueEmpty:
 109              	.LFB53:
2258:FreeRTOS\source/queue.c **** BaseType_t xReturn;
 110              		.loc 1 2258 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              	.LVL12:
 115 0000 10B5     		push	{r4, lr}
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 4, -8
 118              		.cfi_offset 14, -4
 119 0002 0400     		movs	r4, r0
2261:FreeRTOS\source/queue.c **** 	{
 120              		.loc 1 2261 0
 121 0004 FFF7FEFF 		bl	vPortEnterCritical
 122              	.LVL13:
2263:FreeRTOS\source/queue.c **** 		{
 123              		.loc 1 2263 0
 124 0008 A36B     		ldr	r3, [r4, #56]
 125 000a 002B     		cmp	r3, #0
 126 000c 01D1     		bne	.L9
2265:FreeRTOS\source/queue.c **** 		}
 127              		.loc 1 2265 0
 128 000e 0124     		movs	r4, #1
 129              	.LVL14:
 130 0010 00E0     		b	.L8
 131              	.LVL15:
 132              	.L9:
2269:FreeRTOS\source/queue.c **** 		}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 44


 133              		.loc 1 2269 0
 134 0012 0024     		movs	r4, #0
 135              	.LVL16:
 136              	.L8:
2272:FreeRTOS\source/queue.c **** 
 137              		.loc 1 2272 0
 138 0014 FFF7FEFF 		bl	vPortExitCritical
 139              	.LVL17:
2275:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 140              		.loc 1 2275 0
 141 0018 2000     		movs	r0, r4
 142              		@ sp needed
 143              	.LVL18:
 144 001a 10BD     		pop	{r4, pc}
 145              		.cfi_endproc
 146              	.LFE53:
 147              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 148              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 149              		.align	2
 150              		.code	16
 151              		.thumb_func
 152              		.type	prvCopyDataToQueue, %function
 153              	prvCopyDataToQueue:
 154              	.LFB50:
2041:FreeRTOS\source/queue.c **** BaseType_t xReturn = pdFALSE;
 155              		.loc 1 2041 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              	.LVL19:
 160 0000 70B5     		push	{r4, r5, r6, lr}
 161              		.cfi_def_cfa_offset 16
 162              		.cfi_offset 4, -16
 163              		.cfi_offset 5, -12
 164              		.cfi_offset 6, -8
 165              		.cfi_offset 14, -4
 166 0002 0400     		movs	r4, r0
 167 0004 1600     		movs	r6, r2
 168              	.LVL20:
2047:FreeRTOS\source/queue.c **** 
 169              		.loc 1 2047 0
 170 0006 856B     		ldr	r5, [r0, #56]
 171              	.LVL21:
2049:FreeRTOS\source/queue.c **** 	{
 172              		.loc 1 2049 0
 173 0008 026C     		ldr	r2, [r0, #64]
 174              	.LVL22:
 175 000a 002A     		cmp	r2, #0
 176 000c 08D1     		bne	.L11
2053:FreeRTOS\source/queue.c **** 			{
 177              		.loc 1 2053 0
 178 000e 0368     		ldr	r3, [r0]
 179 0010 002B     		cmp	r3, #0
 180 0012 2CD1     		bne	.L15
2056:FreeRTOS\source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 181              		.loc 1 2056 0
 182 0014 4068     		ldr	r0, [r0, #4]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 45


 183              	.LVL23:
 184 0016 FFF7FEFF 		bl	xTaskPriorityDisinherit
 185              	.LVL24:
2057:FreeRTOS\source/queue.c **** 			}
 186              		.loc 1 2057 0
 187 001a 0023     		movs	r3, #0
 188 001c 6360     		str	r3, [r4, #4]
 189 001e 2DE0     		b	.L12
 190              	.LVL25:
 191              	.L11:
2066:FreeRTOS\source/queue.c **** 	{
 192              		.loc 1 2066 0
 193 0020 002E     		cmp	r6, #0
 194 0022 0ED1     		bne	.L13
2068:FreeRTOS\source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 195              		.loc 1 2068 0
 196 0024 8068     		ldr	r0, [r0, #8]
 197              	.LVL26:
 198 0026 FFF7FEFF 		bl	memcpy
 199              	.LVL27:
2069:FreeRTOS\source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 200              		.loc 1 2069 0
 201 002a A368     		ldr	r3, [r4, #8]
 202 002c 226C     		ldr	r2, [r4, #64]
 203 002e 9446     		mov	ip, r2
 204 0030 6344     		add	r3, r3, ip
 205 0032 A360     		str	r3, [r4, #8]
2070:FreeRTOS\source/queue.c **** 		{
 206              		.loc 1 2070 0
 207 0034 6268     		ldr	r2, [r4, #4]
 208 0036 9342     		cmp	r3, r2
 209 0038 1BD3     		bcc	.L16
2072:FreeRTOS\source/queue.c **** 		}
 210              		.loc 1 2072 0
 211 003a 2368     		ldr	r3, [r4]
 212 003c A360     		str	r3, [r4, #8]
2042:FreeRTOS\source/queue.c **** UBaseType_t uxMessagesWaiting;
 213              		.loc 1 2042 0
 214 003e 0020     		movs	r0, #0
 215 0040 1CE0     		b	.L12
 216              	.LVL28:
 217              	.L13:
2081:FreeRTOS\source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 218              		.loc 1 2081 0
 219 0042 C068     		ldr	r0, [r0, #12]
 220              	.LVL29:
 221 0044 FFF7FEFF 		bl	memcpy
 222              	.LVL30:
2082:FreeRTOS\source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 223              		.loc 1 2082 0
 224 0048 236C     		ldr	r3, [r4, #64]
 225 004a 5B42     		rsbs	r3, r3, #0
 226 004c E268     		ldr	r2, [r4, #12]
 227 004e D218     		adds	r2, r2, r3
 228 0050 E260     		str	r2, [r4, #12]
2083:FreeRTOS\source/queue.c **** 		{
 229              		.loc 1 2083 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 46


 230 0052 2168     		ldr	r1, [r4]
 231 0054 8A42     		cmp	r2, r1
 232 0056 03D2     		bcs	.L14
2085:FreeRTOS\source/queue.c **** 		}
 233              		.loc 1 2085 0
 234 0058 6268     		ldr	r2, [r4, #4]
 235 005a 9446     		mov	ip, r2
 236 005c 6344     		add	r3, r3, ip
 237 005e E360     		str	r3, [r4, #12]
 238              	.L14:
2092:FreeRTOS\source/queue.c **** 		{
 239              		.loc 1 2092 0
 240 0060 022E     		cmp	r6, #2
 241 0062 08D1     		bne	.L17
2094:FreeRTOS\source/queue.c **** 			{
 242              		.loc 1 2094 0
 243 0064 002D     		cmp	r5, #0
 244 0066 08D0     		beq	.L18
2100:FreeRTOS\source/queue.c **** 			}
 245              		.loc 1 2100 0
 246 0068 013D     		subs	r5, r5, #1
 247              	.LVL31:
2042:FreeRTOS\source/queue.c **** UBaseType_t uxMessagesWaiting;
 248              		.loc 1 2042 0
 249 006a 0020     		movs	r0, #0
 250 006c 06E0     		b	.L12
 251              	.LVL32:
 252              	.L15:
 253 006e 0020     		movs	r0, #0
 254              	.LVL33:
 255 0070 04E0     		b	.L12
 256              	.LVL34:
 257              	.L16:
 258 0072 0020     		movs	r0, #0
 259 0074 02E0     		b	.L12
 260              	.L17:
 261 0076 0020     		movs	r0, #0
 262 0078 00E0     		b	.L12
 263              	.L18:
 264 007a 0020     		movs	r0, #0
 265              	.LVL35:
 266              	.L12:
2113:FreeRTOS\source/queue.c **** 
 267              		.loc 1 2113 0
 268 007c 0135     		adds	r5, r5, #1
 269              	.LVL36:
 270 007e A563     		str	r5, [r4, #56]
2116:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 271              		.loc 1 2116 0
 272              		@ sp needed
 273              	.LVL37:
 274              	.LVL38:
 275              	.LVL39:
 276 0080 70BD     		pop	{r4, r5, r6, pc}
 277              		.cfi_endproc
 278              	.LFE50:
 279              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 47


 280 0082 C046     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 281              		.align	2
 282              		.code	16
 283              		.thumb_func
 284              		.type	prvCopyDataFromQueue, %function
 285              	prvCopyDataFromQueue:
 286              	.LFB51:
2120:FreeRTOS\source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 287              		.loc 1 2120 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              	.LVL40:
 292 0000 10B5     		push	{r4, lr}
 293              		.cfi_def_cfa_offset 8
 294              		.cfi_offset 4, -8
 295              		.cfi_offset 14, -4
 296 0002 0C00     		movs	r4, r1
2121:FreeRTOS\source/queue.c **** 	{
 297              		.loc 1 2121 0
 298 0004 026C     		ldr	r2, [r0, #64]
 299 0006 002A     		cmp	r2, #0
 300 0008 0BD0     		beq	.L19
2123:FreeRTOS\source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 301              		.loc 1 2123 0
 302 000a C368     		ldr	r3, [r0, #12]
 303 000c 9B18     		adds	r3, r3, r2
 304 000e C360     		str	r3, [r0, #12]
2124:FreeRTOS\source/queue.c **** 		{
 305              		.loc 1 2124 0
 306 0010 4168     		ldr	r1, [r0, #4]
 307              	.LVL41:
 308 0012 8B42     		cmp	r3, r1
 309 0014 01D3     		bcc	.L21
2126:FreeRTOS\source/queue.c **** 		}
 310              		.loc 1 2126 0
 311 0016 0368     		ldr	r3, [r0]
 312 0018 C360     		str	r3, [r0, #12]
 313              	.L21:
2132:FreeRTOS\source/queue.c **** 	}
 314              		.loc 1 2132 0
 315 001a C168     		ldr	r1, [r0, #12]
 316 001c 2000     		movs	r0, r4
 317              	.LVL42:
 318 001e FFF7FEFF 		bl	memcpy
 319              	.LVL43:
 320              	.L19:
2134:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 321              		.loc 1 2134 0
 322              		@ sp needed
 323              	.LVL44:
 324 0022 10BD     		pop	{r4, pc}
 325              		.cfi_endproc
 326              	.LFE51:
 327              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 328              		.section	.text.prvUnlockQueue,"ax",%progbits
 329              		.align	2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 48


 330              		.code	16
 331              		.thumb_func
 332              		.type	prvUnlockQueue, %function
 333              	prvUnlockQueue:
 334              	.LFB52:
2138:FreeRTOS\source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 335              		.loc 1 2138 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              	.LVL45:
 340 0000 70B5     		push	{r4, r5, r6, lr}
 341              		.cfi_def_cfa_offset 16
 342              		.cfi_offset 4, -16
 343              		.cfi_offset 5, -12
 344              		.cfi_offset 6, -8
 345              		.cfi_offset 14, -4
 346 0002 0500     		movs	r5, r0
2145:FreeRTOS\source/queue.c **** 	{
 347              		.loc 1 2145 0
 348 0004 FFF7FEFF 		bl	vPortEnterCritical
 349              	.LVL46:
 350              	.LBB2:
2147:FreeRTOS\source/queue.c **** 
 351              		.loc 1 2147 0
 352 0008 4523     		movs	r3, #69
 353 000a EC5C     		ldrb	r4, [r5, r3]
 354 000c 64B2     		sxtb	r4, r4
 355              	.LVL47:
2150:FreeRTOS\source/queue.c **** 		{
 356              		.loc 1 2150 0
 357 000e 0CE0     		b	.L23
 358              	.L26:
2198:FreeRTOS\source/queue.c **** 				{
 359              		.loc 1 2198 0
 360 0010 6B6A     		ldr	r3, [r5, #36]
 361 0012 002B     		cmp	r3, #0
 362 0014 0BD0     		beq	.L24
2200:FreeRTOS\source/queue.c **** 					{
 363              		.loc 1 2200 0
 364 0016 2800     		movs	r0, r5
 365 0018 2430     		adds	r0, r0, #36
 366 001a FFF7FEFF 		bl	xTaskRemoveFromEventList
 367              	.LVL48:
 368 001e 0028     		cmp	r0, #0
 369 0020 01D0     		beq	.L25
2204:FreeRTOS\source/queue.c **** 					}
 370              		.loc 1 2204 0
 371 0022 FFF7FEFF 		bl	vTaskMissedYield
 372              	.LVL49:
 373              	.L25:
2218:FreeRTOS\source/queue.c **** 		}
 374              		.loc 1 2218 0
 375 0026 013C     		subs	r4, r4, #1
 376              	.LVL50:
 377 0028 64B2     		sxtb	r4, r4
 378              	.LVL51:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 49


 379              	.L23:
2150:FreeRTOS\source/queue.c **** 		{
 380              		.loc 1 2150 0
 381 002a 002C     		cmp	r4, #0
 382 002c F0DC     		bgt	.L26
 383              	.L24:
2221:FreeRTOS\source/queue.c **** 	}
 384              		.loc 1 2221 0
 385 002e FF22     		movs	r2, #255
 386 0030 4523     		movs	r3, #69
 387 0032 EA54     		strb	r2, [r5, r3]
 388              	.LBE2:
2223:FreeRTOS\source/queue.c **** 
 389              		.loc 1 2223 0
 390 0034 FFF7FEFF 		bl	vPortExitCritical
 391              	.LVL52:
2226:FreeRTOS\source/queue.c **** 	{
 392              		.loc 1 2226 0
 393 0038 FFF7FEFF 		bl	vPortEnterCritical
 394              	.LVL53:
 395              	.LBB3:
2228:FreeRTOS\source/queue.c **** 
 396              		.loc 1 2228 0
 397 003c 4423     		movs	r3, #68
 398 003e EC5C     		ldrb	r4, [r5, r3]
 399              	.LVL54:
 400 0040 64B2     		sxtb	r4, r4
 401              	.LVL55:
2230:FreeRTOS\source/queue.c **** 		{
 402              		.loc 1 2230 0
 403 0042 0CE0     		b	.L27
 404              	.L30:
2232:FreeRTOS\source/queue.c **** 			{
 405              		.loc 1 2232 0
 406 0044 2B69     		ldr	r3, [r5, #16]
 407 0046 002B     		cmp	r3, #0
 408 0048 0BD0     		beq	.L28
2234:FreeRTOS\source/queue.c **** 				{
 409              		.loc 1 2234 0
 410 004a 2800     		movs	r0, r5
 411 004c 1030     		adds	r0, r0, #16
 412 004e FFF7FEFF 		bl	xTaskRemoveFromEventList
 413              	.LVL56:
 414 0052 0028     		cmp	r0, #0
 415 0054 01D0     		beq	.L29
2236:FreeRTOS\source/queue.c **** 				}
 416              		.loc 1 2236 0
 417 0056 FFF7FEFF 		bl	vTaskMissedYield
 418              	.LVL57:
 419              	.L29:
2243:FreeRTOS\source/queue.c **** 			}
 420              		.loc 1 2243 0
 421 005a 013C     		subs	r4, r4, #1
 422              	.LVL58:
 423 005c 64B2     		sxtb	r4, r4
 424              	.LVL59:
 425              	.L27:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 50


2230:FreeRTOS\source/queue.c **** 		{
 426              		.loc 1 2230 0
 427 005e 002C     		cmp	r4, #0
 428 0060 F0DC     		bgt	.L30
 429              	.L28:
2251:FreeRTOS\source/queue.c **** 	}
 430              		.loc 1 2251 0
 431 0062 FF22     		movs	r2, #255
 432 0064 4423     		movs	r3, #68
 433 0066 EA54     		strb	r2, [r5, r3]
 434              	.LBE3:
2253:FreeRTOS\source/queue.c **** }
 435              		.loc 1 2253 0
 436 0068 FFF7FEFF 		bl	vPortExitCritical
 437              	.LVL60:
2254:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 438              		.loc 1 2254 0
 439              		@ sp needed
 440              	.LVL61:
 441              	.LVL62:
 442 006c 70BD     		pop	{r4, r5, r6, pc}
 443              		.cfi_endproc
 444              	.LFE52:
 445              		.size	prvUnlockQueue, .-prvUnlockQueue
 446 006e C046     		.section	.text.xQueueGenericReset,"ax",%progbits
 447              		.align	2
 448              		.global	xQueueGenericReset
 449              		.code	16
 450              		.thumb_func
 451              		.type	xQueueGenericReset, %function
 452              	xQueueGenericReset:
 453              	.LFB32:
 248:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 454              		.loc 1 248 0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 458              	.LVL63:
 459 0000 70B5     		push	{r4, r5, r6, lr}
 460              		.cfi_def_cfa_offset 16
 461              		.cfi_offset 4, -16
 462              		.cfi_offset 5, -12
 463              		.cfi_offset 6, -8
 464              		.cfi_offset 14, -4
 465 0002 0400     		movs	r4, r0
 466 0004 0D00     		movs	r5, r1
 467              	.LVL64:
 251:FreeRTOS\source/queue.c **** 
 468              		.loc 1 251 0
 469 0006 0028     		cmp	r0, #0
 470 0008 01D1     		bne	.L32
 251:FreeRTOS\source/queue.c **** 
 471              		.loc 1 251 0 is_stmt 0 discriminator 1
 472              		.syntax divided
 473              	@ 251 "FreeRTOS\source\queue.c" 1
 474 000a 72B6     		 cpsid i 
 475              	@ 0 "" 2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 51


 476              		.thumb
 477              		.syntax unified
 478              	.L33:
 479 000c FEE7     		b	.L33
 480              	.L32:
 253:FreeRTOS\source/queue.c **** 	{
 481              		.loc 1 253 0 is_stmt 1
 482 000e FFF7FEFF 		bl	vPortEnterCritical
 483              	.LVL65:
 255:FreeRTOS\source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 484              		.loc 1 255 0
 485 0012 2268     		ldr	r2, [r4]
 486 0014 E36B     		ldr	r3, [r4, #60]
 487 0016 206C     		ldr	r0, [r4, #64]
 488 0018 0100     		movs	r1, r0
 489 001a 5943     		muls	r1, r3
 490 001c 5118     		adds	r1, r2, r1
 491 001e 6160     		str	r1, [r4, #4]
 256:FreeRTOS\source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 492              		.loc 1 256 0
 493 0020 0021     		movs	r1, #0
 494 0022 A163     		str	r1, [r4, #56]
 257:FreeRTOS\source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 495              		.loc 1 257 0
 496 0024 A260     		str	r2, [r4, #8]
 258:FreeRTOS\source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 497              		.loc 1 258 0
 498 0026 013B     		subs	r3, r3, #1
 499 0028 4343     		muls	r3, r0
 500 002a D318     		adds	r3, r2, r3
 501 002c E360     		str	r3, [r4, #12]
 259:FreeRTOS\source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 502              		.loc 1 259 0
 503 002e FF23     		movs	r3, #255
 504 0030 4422     		movs	r2, #68
 505 0032 A354     		strb	r3, [r4, r2]
 260:FreeRTOS\source/queue.c **** 
 506              		.loc 1 260 0
 507 0034 0132     		adds	r2, r2, #1
 508 0036 A354     		strb	r3, [r4, r2]
 262:FreeRTOS\source/queue.c **** 		{
 509              		.loc 1 262 0
 510 0038 002D     		cmp	r5, #0
 511 003a 0BD1     		bne	.L34
 269:FreeRTOS\source/queue.c **** 			{
 512              		.loc 1 269 0
 513 003c 2369     		ldr	r3, [r4, #16]
 514 003e 002B     		cmp	r3, #0
 515 0040 10D0     		beq	.L35
 271:FreeRTOS\source/queue.c **** 				{
 516              		.loc 1 271 0
 517 0042 2000     		movs	r0, r4
 518 0044 1030     		adds	r0, r0, #16
 519 0046 FFF7FEFF 		bl	xTaskRemoveFromEventList
 520              	.LVL66:
 521 004a 0028     		cmp	r0, #0
 522 004c 0AD0     		beq	.L35
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 52


 273:FreeRTOS\source/queue.c **** 				}
 523              		.loc 1 273 0
 524 004e FFF7FEFF 		bl	vPortYield
 525              	.LVL67:
 526 0052 07E0     		b	.L35
 527              	.L34:
 288:FreeRTOS\source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 528              		.loc 1 288 0
 529 0054 2000     		movs	r0, r4
 530 0056 1030     		adds	r0, r0, #16
 531 0058 FFF7FEFF 		bl	vListInitialise
 532              	.LVL68:
 289:FreeRTOS\source/queue.c **** 		}
 533              		.loc 1 289 0
 534 005c 2000     		movs	r0, r4
 535 005e 2430     		adds	r0, r0, #36
 536 0060 FFF7FEFF 		bl	vListInitialise
 537              	.LVL69:
 538              	.L35:
 292:FreeRTOS\source/queue.c **** 
 539              		.loc 1 292 0
 540 0064 FFF7FEFF 		bl	vPortExitCritical
 541              	.LVL70:
 297:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 542              		.loc 1 297 0
 543 0068 0120     		movs	r0, #1
 544              		@ sp needed
 545              	.LVL71:
 546              	.LVL72:
 547 006a 70BD     		pop	{r4, r5, r6, pc}
 548              		.cfi_endproc
 549              	.LFE32:
 550              		.size	xQueueGenericReset, .-xQueueGenericReset
 551              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 552              		.align	2
 553              		.code	16
 554              		.thumb_func
 555              		.type	prvInitialiseNewQueue, %function
 556              	prvInitialiseNewQueue:
 557              	.LFB34:
 409:FreeRTOS\source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 558              		.loc 1 409 0
 559              		.cfi_startproc
 560              		@ args = 4, pretend = 0, frame = 0
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 562              	.LVL73:
 563 0000 10B5     		push	{r4, lr}
 564              		.cfi_def_cfa_offset 8
 565              		.cfi_offset 4, -8
 566              		.cfi_offset 14, -4
 567 0002 029B     		ldr	r3, [sp, #8]
 568              	.LVL74:
 414:FreeRTOS\source/queue.c **** 	{
 569              		.loc 1 414 0
 570 0004 0029     		cmp	r1, #0
 571 0006 01D1     		bne	.L37
 420:FreeRTOS\source/queue.c **** 	}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 53


 572              		.loc 1 420 0
 573 0008 1B60     		str	r3, [r3]
 574 000a 00E0     		b	.L38
 575              	.L37:
 425:FreeRTOS\source/queue.c **** 	}
 576              		.loc 1 425 0
 577 000c 1A60     		str	r2, [r3]
 578              	.L38:
 430:FreeRTOS\source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 579              		.loc 1 430 0
 580 000e D863     		str	r0, [r3, #60]
 431:FreeRTOS\source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 581              		.loc 1 431 0
 582 0010 1964     		str	r1, [r3, #64]
 432:FreeRTOS\source/queue.c **** 
 583              		.loc 1 432 0
 584 0012 0121     		movs	r1, #1
 585              	.LVL75:
 586 0014 1800     		movs	r0, r3
 587              	.LVL76:
 588 0016 FFF7FEFF 		bl	xQueueGenericReset
 589              	.LVL77:
 447:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 590              		.loc 1 447 0
 591              		@ sp needed
 592 001a 10BD     		pop	{r4, pc}
 593              		.cfi_endproc
 594              	.LFE34:
 595              		.size	prvInitialiseNewQueue, .-prvInitialiseNewQueue
 596              		.section	.text.xQueueGenericCreate,"ax",%progbits
 597              		.align	2
 598              		.global	xQueueGenericCreate
 599              		.code	16
 600              		.thumb_func
 601              		.type	xQueueGenericCreate, %function
 602              	xQueueGenericCreate:
 603              	.LFB33:
 359:FreeRTOS\source/queue.c **** 	Queue_t *pxNewQueue;
 604              		.loc 1 359 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 0
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608              	.LVL78:
 609 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 610              		.cfi_def_cfa_offset 20
 611              		.cfi_offset 4, -20
 612              		.cfi_offset 5, -16
 613              		.cfi_offset 6, -12
 614              		.cfi_offset 7, -8
 615              		.cfi_offset 14, -4
 616 0002 83B0     		sub	sp, sp, #12
 617              		.cfi_def_cfa_offset 32
 618 0004 0600     		movs	r6, r0
 619 0006 0F00     		movs	r7, r1
 620 0008 1500     		movs	r5, r2
 364:FreeRTOS\source/queue.c **** 
 621              		.loc 1 364 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 54


 622 000a 0028     		cmp	r0, #0
 623 000c 01D1     		bne	.L40
 364:FreeRTOS\source/queue.c **** 
 624              		.loc 1 364 0 is_stmt 0 discriminator 1
 625              		.syntax divided
 626              	@ 364 "FreeRTOS\source\queue.c" 1
 627 000e 72B6     		 cpsid i 
 628              	@ 0 "" 2
 629              		.thumb
 630              		.syntax unified
 631              	.L41:
 632 0010 FEE7     		b	.L41
 633              	.L40:
 366:FreeRTOS\source/queue.c **** 		{
 634              		.loc 1 366 0 is_stmt 1
 635 0012 0029     		cmp	r1, #0
 636 0014 02D0     		beq	.L44
 375:FreeRTOS\source/queue.c **** 		}
 637              		.loc 1 375 0
 638 0016 0800     		movs	r0, r1
 639              	.LVL79:
 640 0018 7043     		muls	r0, r6
 641              	.LVL80:
 642 001a 00E0     		b	.L42
 643              	.LVL81:
 644              	.L44:
 369:FreeRTOS\source/queue.c **** 		}
 645              		.loc 1 369 0
 646 001c 0020     		movs	r0, #0
 647              	.LVL82:
 648              	.L42:
 378:FreeRTOS\source/queue.c **** 
 649              		.loc 1 378 0
 650 001e 4830     		adds	r0, r0, #72
 651              	.LVL83:
 652 0020 FFF7FEFF 		bl	pvPortMalloc
 653              	.LVL84:
 654 0024 041E     		subs	r4, r0, #0
 655              	.LVL85:
 380:FreeRTOS\source/queue.c **** 		{
 656              		.loc 1 380 0
 657 0026 07D0     		beq	.L43
 384:FreeRTOS\source/queue.c **** 
 658              		.loc 1 384 0
 659 0028 0200     		movs	r2, r0
 660 002a 4832     		adds	r2, r2, #72
 395:FreeRTOS\source/queue.c **** 		}
 661              		.loc 1 395 0
 662 002c 0090     		str	r0, [sp]
 663 002e 2B00     		movs	r3, r5
 664 0030 3900     		movs	r1, r7
 665 0032 3000     		movs	r0, r6
 666              	.LVL86:
 667 0034 FFF7FEFF 		bl	prvInitialiseNewQueue
 668              	.LVL87:
 669              	.L43:
 403:FreeRTOS\source/queue.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 55


 670              		.loc 1 403 0
 671 0038 2000     		movs	r0, r4
 672 003a 03B0     		add	sp, sp, #12
 673              		@ sp needed
 674              	.LVL88:
 675              	.LVL89:
 676              	.LVL90:
 677 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 678              		.cfi_endproc
 679              	.LFE33:
 680              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 681 003e C046     		.section	.text.xQueueGenericSend,"ax",%progbits
 682              		.align	2
 683              		.global	xQueueGenericSend
 684              		.code	16
 685              		.thumb_func
 686              		.type	xQueueGenericSend, %function
 687              	xQueueGenericSend:
 688              	.LFB37:
 726:FreeRTOS\source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 689              		.loc 1 726 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 16
 692              		@ frame_needed = 0, uses_anonymous_args = 0
 693              	.LVL91:
 694 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 695              		.cfi_def_cfa_offset 20
 696              		.cfi_offset 4, -20
 697              		.cfi_offset 5, -16
 698              		.cfi_offset 6, -12
 699              		.cfi_offset 7, -8
 700              		.cfi_offset 14, -4
 701 0002 85B0     		sub	sp, sp, #20
 702              		.cfi_def_cfa_offset 40
 703 0004 0400     		movs	r4, r0
 704 0006 0E00     		movs	r6, r1
 705 0008 0192     		str	r2, [sp, #4]
 706 000a 1D00     		movs	r5, r3
 707              	.LVL92:
 731:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 708              		.loc 1 731 0
 709 000c 0028     		cmp	r0, #0
 710 000e 01D1     		bne	.L46
 731:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 711              		.loc 1 731 0 is_stmt 0 discriminator 1
 712              		.syntax divided
 713              	@ 731 "FreeRTOS\source\queue.c" 1
 714 0010 72B6     		 cpsid i 
 715              	@ 0 "" 2
 716              		.thumb
 717              		.syntax unified
 718              	.L47:
 719 0012 FEE7     		b	.L47
 720              	.L46:
 732:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 721              		.loc 1 732 0 is_stmt 1
 722 0014 0029     		cmp	r1, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 56


 723 0016 04D1     		bne	.L69
 732:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 724              		.loc 1 732 0 is_stmt 0 discriminator 2
 725 0018 036C     		ldr	r3, [r0, #64]
 726              	.LVL93:
 727 001a 002B     		cmp	r3, #0
 728 001c 03D1     		bne	.L70
 732:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 729              		.loc 1 732 0
 730 001e 0133     		adds	r3, r3, #1
 731 0020 02E0     		b	.L48
 732              	.LVL94:
 733              	.L69:
 734 0022 0123     		movs	r3, #1
 735              	.LVL95:
 736 0024 00E0     		b	.L48
 737              	.L70:
 738 0026 0023     		movs	r3, #0
 739              	.L48:
 732:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 740              		.loc 1 732 0 discriminator 6
 741 0028 002B     		cmp	r3, #0
 742 002a 01D1     		bne	.L49
 732:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 743              		.loc 1 732 0 discriminator 7
 744              		.syntax divided
 745              	@ 732 "FreeRTOS\source\queue.c" 1
 746 002c 72B6     		 cpsid i 
 747              	@ 0 "" 2
 748              		.thumb
 749              		.syntax unified
 750              	.L50:
 751 002e FEE7     		b	.L50
 752              	.L49:
 733:FreeRTOS\source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 753              		.loc 1 733 0 is_stmt 1
 754 0030 022D     		cmp	r5, #2
 755 0032 03D1     		bne	.L71
 733:FreeRTOS\source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 756              		.loc 1 733 0 is_stmt 0 discriminator 2
 757 0034 E36B     		ldr	r3, [r4, #60]
 758 0036 012B     		cmp	r3, #1
 759 0038 02D1     		bne	.L72
 760 003a 02E0     		b	.L51
 761              	.L71:
 733:FreeRTOS\source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 762              		.loc 1 733 0
 763 003c 0123     		movs	r3, #1
 764 003e 00E0     		b	.L51
 765              	.L72:
 766 0040 0023     		movs	r3, #0
 767              	.L51:
 733:FreeRTOS\source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 768              		.loc 1 733 0 discriminator 6
 769 0042 002B     		cmp	r3, #0
 770 0044 01D1     		bne	.L52
 733:FreeRTOS\source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 57


 771              		.loc 1 733 0 discriminator 7
 772              		.syntax divided
 773              	@ 733 "FreeRTOS\source\queue.c" 1
 774 0046 72B6     		 cpsid i 
 775              	@ 0 "" 2
 776              		.thumb
 777              		.syntax unified
 778              	.L53:
 779 0048 FEE7     		b	.L53
 780              	.L52:
 736:FreeRTOS\source/queue.c **** 	}
 781              		.loc 1 736 0 is_stmt 1
 782 004a FFF7FEFF 		bl	xTaskGetSchedulerState
 783              	.LVL96:
 784 004e 0028     		cmp	r0, #0
 785 0050 04D1     		bne	.L73
 736:FreeRTOS\source/queue.c **** 	}
 786              		.loc 1 736 0 is_stmt 0 discriminator 2
 787 0052 019B     		ldr	r3, [sp, #4]
 788 0054 002B     		cmp	r3, #0
 789 0056 03D1     		bne	.L74
 736:FreeRTOS\source/queue.c **** 	}
 790              		.loc 1 736 0
 791 0058 0133     		adds	r3, r3, #1
 792 005a 02E0     		b	.L54
 793              	.L73:
 794 005c 0123     		movs	r3, #1
 795 005e 00E0     		b	.L54
 796              	.L74:
 797 0060 0023     		movs	r3, #0
 798              	.L54:
 736:FreeRTOS\source/queue.c **** 	}
 799              		.loc 1 736 0 discriminator 6
 800 0062 002B     		cmp	r3, #0
 801 0064 01D1     		bne	.L75
 736:FreeRTOS\source/queue.c **** 	}
 802              		.loc 1 736 0 discriminator 7
 803              		.syntax divided
 804              	@ 736 "FreeRTOS\source\queue.c" 1
 805 0066 72B6     		 cpsid i 
 806              	@ 0 "" 2
 807              		.thumb
 808              		.syntax unified
 809              	.L56:
 810 0068 FEE7     		b	.L56
 811              	.L75:
 812 006a 0027     		movs	r7, #0
 813              	.LVL97:
 814              	.L55:
 746:FreeRTOS\source/queue.c **** 		{
 815              		.loc 1 746 0 is_stmt 1
 816 006c FFF7FEFF 		bl	vPortEnterCritical
 817              	.LVL98:
 752:FreeRTOS\source/queue.c **** 			{
 818              		.loc 1 752 0
 819 0070 A36B     		ldr	r3, [r4, #56]
 820 0072 E26B     		ldr	r2, [r4, #60]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 58


 821 0074 9342     		cmp	r3, r2
 822 0076 01D3     		bcc	.L57
 752:FreeRTOS\source/queue.c **** 			{
 823              		.loc 1 752 0 is_stmt 0 discriminator 1
 824 0078 022D     		cmp	r5, #2
 825 007a 18D1     		bne	.L58
 826              	.L57:
 755:FreeRTOS\source/queue.c **** 
 827              		.loc 1 755 0 is_stmt 1
 828 007c 2A00     		movs	r2, r5
 829 007e 3100     		movs	r1, r6
 830 0080 2000     		movs	r0, r4
 831 0082 FFF7FEFF 		bl	prvCopyDataToQueue
 832              	.LVL99:
 810:FreeRTOS\source/queue.c **** 					{
 833              		.loc 1 810 0
 834 0086 636A     		ldr	r3, [r4, #36]
 835 0088 002B     		cmp	r3, #0
 836 008a 08D0     		beq	.L59
 812:FreeRTOS\source/queue.c **** 						{
 837              		.loc 1 812 0
 838 008c 2000     		movs	r0, r4
 839              	.LVL100:
 840 008e 2430     		adds	r0, r0, #36
 841 0090 FFF7FEFF 		bl	xTaskRemoveFromEventList
 842              	.LVL101:
 843 0094 0028     		cmp	r0, #0
 844 0096 06D0     		beq	.L60
 818:FreeRTOS\source/queue.c **** 						}
 845              		.loc 1 818 0
 846 0098 FFF7FEFF 		bl	vPortYield
 847              	.LVL102:
 848 009c 03E0     		b	.L60
 849              	.LVL103:
 850              	.L59:
 825:FreeRTOS\source/queue.c **** 					{
 851              		.loc 1 825 0
 852 009e 0028     		cmp	r0, #0
 853 00a0 01D0     		beq	.L60
 831:FreeRTOS\source/queue.c **** 					}
 854              		.loc 1 831 0
 855 00a2 FFF7FEFF 		bl	vPortYield
 856              	.LVL104:
 857              	.L60:
 840:FreeRTOS\source/queue.c **** 				return pdPASS;
 858              		.loc 1 840 0
 859 00a6 FFF7FEFF 		bl	vPortExitCritical
 860              	.LVL105:
 841:FreeRTOS\source/queue.c **** 			}
 861              		.loc 1 841 0
 862 00aa 0120     		movs	r0, #1
 863 00ac 4AE0     		b	.L61
 864              	.L58:
 845:FreeRTOS\source/queue.c **** 				{
 865              		.loc 1 845 0
 866 00ae 019B     		ldr	r3, [sp, #4]
 867 00b0 002B     		cmp	r3, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 59


 868 00b2 03D1     		bne	.L62
 849:FreeRTOS\source/queue.c **** 
 869              		.loc 1 849 0
 870 00b4 FFF7FEFF 		bl	vPortExitCritical
 871              	.LVL106:
 854:FreeRTOS\source/queue.c **** 				}
 872              		.loc 1 854 0
 873 00b8 0020     		movs	r0, #0
 874 00ba 43E0     		b	.L61
 875              	.L62:
 856:FreeRTOS\source/queue.c **** 				{
 876              		.loc 1 856 0
 877 00bc 002F     		cmp	r7, #0
 878 00be 03D1     		bne	.L63
 860:FreeRTOS\source/queue.c **** 					xEntryTimeSet = pdTRUE;
 879              		.loc 1 860 0
 880 00c0 02A8     		add	r0, sp, #8
 881 00c2 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 882              	.LVL107:
 861:FreeRTOS\source/queue.c **** 				}
 883              		.loc 1 861 0
 884 00c6 0137     		adds	r7, r7, #1
 885              	.LVL108:
 886              	.L63:
 870:FreeRTOS\source/queue.c **** 
 887              		.loc 1 870 0
 888 00c8 FFF7FEFF 		bl	vPortExitCritical
 889              	.LVL109:
 875:FreeRTOS\source/queue.c **** 		prvLockQueue( pxQueue );
 890              		.loc 1 875 0
 891 00cc FFF7FEFF 		bl	vTaskSuspendAll
 892              	.LVL110:
 876:FreeRTOS\source/queue.c **** 
 893              		.loc 1 876 0
 894 00d0 FFF7FEFF 		bl	vPortEnterCritical
 895              	.LVL111:
 896 00d4 4423     		movs	r3, #68
 897 00d6 E35C     		ldrb	r3, [r4, r3]
 898 00d8 5BB2     		sxtb	r3, r3
 899 00da 0133     		adds	r3, r3, #1
 900 00dc 02D1     		bne	.L64
 876:FreeRTOS\source/queue.c **** 
 901              		.loc 1 876 0 is_stmt 0 discriminator 1
 902 00de 0022     		movs	r2, #0
 903 00e0 4423     		movs	r3, #68
 904 00e2 E254     		strb	r2, [r4, r3]
 905              	.L64:
 876:FreeRTOS\source/queue.c **** 
 906              		.loc 1 876 0 discriminator 3
 907 00e4 4523     		movs	r3, #69
 908 00e6 E35C     		ldrb	r3, [r4, r3]
 909 00e8 5BB2     		sxtb	r3, r3
 910 00ea 0133     		adds	r3, r3, #1
 911 00ec 02D1     		bne	.L65
 876:FreeRTOS\source/queue.c **** 
 912              		.loc 1 876 0 discriminator 4
 913 00ee 0022     		movs	r2, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 60


 914 00f0 4523     		movs	r3, #69
 915 00f2 E254     		strb	r2, [r4, r3]
 916              	.L65:
 876:FreeRTOS\source/queue.c **** 
 917              		.loc 1 876 0 discriminator 6
 918 00f4 FFF7FEFF 		bl	vPortExitCritical
 919              	.LVL112:
 879:FreeRTOS\source/queue.c **** 		{
 920              		.loc 1 879 0 is_stmt 1 discriminator 6
 921 00f8 01A9     		add	r1, sp, #4
 922              	.LVL113:
 923 00fa 02A8     		add	r0, sp, #8
 924 00fc FFF7FEFF 		bl	xTaskCheckForTimeOut
 925              	.LVL114:
 926 0100 0028     		cmp	r0, #0
 927 0102 19D1     		bne	.L66
 881:FreeRTOS\source/queue.c **** 			{
 928              		.loc 1 881 0
 929 0104 2000     		movs	r0, r4
 930 0106 FFF7FEFF 		bl	prvIsQueueFull
 931              	.LVL115:
 932 010a 0028     		cmp	r0, #0
 933 010c 0ED0     		beq	.L67
 884:FreeRTOS\source/queue.c **** 
 934              		.loc 1 884 0
 935 010e 2000     		movs	r0, r4
 936 0110 1030     		adds	r0, r0, #16
 937 0112 0199     		ldr	r1, [sp, #4]
 938 0114 FFF7FEFF 		bl	vTaskPlaceOnEventList
 939              	.LVL116:
 891:FreeRTOS\source/queue.c **** 
 940              		.loc 1 891 0
 941 0118 2000     		movs	r0, r4
 942 011a FFF7FEFF 		bl	prvUnlockQueue
 943              	.LVL117:
 898:FreeRTOS\source/queue.c **** 				{
 944              		.loc 1 898 0
 945 011e FFF7FEFF 		bl	xTaskResumeAll
 946              	.LVL118:
 947 0122 0028     		cmp	r0, #0
 948 0124 A2D1     		bne	.L55
 900:FreeRTOS\source/queue.c **** 				}
 949              		.loc 1 900 0
 950 0126 FFF7FEFF 		bl	vPortYield
 951              	.LVL119:
 952 012a 9FE7     		b	.L55
 953              	.L67:
 906:FreeRTOS\source/queue.c **** 				( void ) xTaskResumeAll();
 954              		.loc 1 906 0
 955 012c 2000     		movs	r0, r4
 956 012e FFF7FEFF 		bl	prvUnlockQueue
 957              	.LVL120:
 907:FreeRTOS\source/queue.c **** 			}
 958              		.loc 1 907 0
 959 0132 FFF7FEFF 		bl	xTaskResumeAll
 960              	.LVL121:
 961 0136 99E7     		b	.L55
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 61


 962              	.L66:
 913:FreeRTOS\source/queue.c **** 			( void ) xTaskResumeAll();
 963              		.loc 1 913 0
 964 0138 2000     		movs	r0, r4
 965 013a FFF7FEFF 		bl	prvUnlockQueue
 966              	.LVL122:
 914:FreeRTOS\source/queue.c **** 
 967              		.loc 1 914 0
 968 013e FFF7FEFF 		bl	xTaskResumeAll
 969              	.LVL123:
 917:FreeRTOS\source/queue.c **** 		}
 970              		.loc 1 917 0
 971 0142 0020     		movs	r0, #0
 972              	.L61:
 920:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 973              		.loc 1 920 0
 974 0144 05B0     		add	sp, sp, #20
 975              		@ sp needed
 976              	.LVL124:
 977              	.LVL125:
 978              	.LVL126:
 979              	.LVL127:
 980 0146 F0BD     		pop	{r4, r5, r6, r7, pc}
 981              		.cfi_endproc
 982              	.LFE37:
 983              		.size	xQueueGenericSend, .-xQueueGenericSend
 984              		.section	.text.prvInitialiseMutex,"ax",%progbits
 985              		.align	2
 986              		.code	16
 987              		.thumb_func
 988              		.type	prvInitialiseMutex, %function
 989              	prvInitialiseMutex:
 990              	.LFB35:
 453:FreeRTOS\source/queue.c **** 		if( pxNewQueue != NULL )
 991              		.loc 1 453 0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 0
 994              		@ frame_needed = 0, uses_anonymous_args = 0
 995              	.LVL128:
 996 0000 10B5     		push	{r4, lr}
 997              		.cfi_def_cfa_offset 8
 998              		.cfi_offset 4, -8
 999              		.cfi_offset 14, -4
 454:FreeRTOS\source/queue.c **** 		{
 1000              		.loc 1 454 0
 1001 0002 0028     		cmp	r0, #0
 1002 0004 07D0     		beq	.L76
 460:FreeRTOS\source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1003              		.loc 1 460 0
 1004 0006 0023     		movs	r3, #0
 1005 0008 4360     		str	r3, [r0, #4]
 461:FreeRTOS\source/queue.c **** 
 1006              		.loc 1 461 0
 1007 000a 0360     		str	r3, [r0]
 464:FreeRTOS\source/queue.c **** 
 1008              		.loc 1 464 0
 1009 000c C360     		str	r3, [r0, #12]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 62


 469:FreeRTOS\source/queue.c **** 		}
 1010              		.loc 1 469 0
 1011 000e 0022     		movs	r2, #0
 1012 0010 0021     		movs	r1, #0
 1013 0012 FFF7FEFF 		bl	xQueueGenericSend
 1014              	.LVL129:
 1015              	.L76:
 475:FreeRTOS\source/queue.c **** 
 1016              		.loc 1 475 0
 1017              		@ sp needed
 1018 0016 10BD     		pop	{r4, pc}
 1019              		.cfi_endproc
 1020              	.LFE35:
 1021              		.size	prvInitialiseMutex, .-prvInitialiseMutex
 1022              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1023              		.align	2
 1024              		.global	xQueueCreateMutex
 1025              		.code	16
 1026              		.thumb_func
 1027              		.type	xQueueCreateMutex, %function
 1028              	xQueueCreateMutex:
 1029              	.LFB36:
 483:FreeRTOS\source/queue.c **** 	Queue_t *pxNewQueue;
 1030              		.loc 1 483 0
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 0
 1033              		@ frame_needed = 0, uses_anonymous_args = 0
 1034              	.LVL130:
 1035 0000 10B5     		push	{r4, lr}
 1036              		.cfi_def_cfa_offset 8
 1037              		.cfi_offset 4, -8
 1038              		.cfi_offset 14, -4
 1039 0002 0200     		movs	r2, r0
 1040              	.LVL131:
 487:FreeRTOS\source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1041              		.loc 1 487 0
 1042 0004 0021     		movs	r1, #0
 1043 0006 0120     		movs	r0, #1
 1044              	.LVL132:
 1045 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1046              	.LVL133:
 1047 000c 0400     		movs	r4, r0
 1048              	.LVL134:
 488:FreeRTOS\source/queue.c **** 
 1049              		.loc 1 488 0
 1050 000e FFF7FEFF 		bl	prvInitialiseMutex
 1051              	.LVL135:
 491:FreeRTOS\source/queue.c **** 
 1052              		.loc 1 491 0
 1053 0012 2000     		movs	r0, r4
 1054              		@ sp needed
 1055              	.LVL136:
 1056 0014 10BD     		pop	{r4, pc}
 1057              		.cfi_endproc
 1058              	.LFE36:
 1059              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 1060 0016 C046     		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 63


 1061              		.align	2
 1062              		.global	xQueueGenericSendFromISR
 1063              		.code	16
 1064              		.thumb_func
 1065              		.type	xQueueGenericSendFromISR, %function
 1066              	xQueueGenericSendFromISR:
 1067              	.LFB38:
 924:FreeRTOS\source/queue.c **** BaseType_t xReturn;
 1068              		.loc 1 924 0
 1069              		.cfi_startproc
 1070              		@ args = 0, pretend = 0, frame = 8
 1071              		@ frame_needed = 0, uses_anonymous_args = 0
 1072              	.LVL137:
 1073 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1074              		.cfi_def_cfa_offset 20
 1075              		.cfi_offset 4, -20
 1076              		.cfi_offset 5, -16
 1077              		.cfi_offset 6, -12
 1078              		.cfi_offset 7, -8
 1079              		.cfi_offset 14, -4
 1080 0002 83B0     		sub	sp, sp, #12
 1081              		.cfi_def_cfa_offset 32
 1082 0004 0400     		movs	r4, r0
 1083 0006 0091     		str	r1, [sp]
 1084 0008 1600     		movs	r6, r2
 1085 000a 1F00     		movs	r7, r3
 1086              	.LVL138:
 929:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1087              		.loc 1 929 0
 1088 000c 0028     		cmp	r0, #0
 1089 000e 01D1     		bne	.L80
 929:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1090              		.loc 1 929 0 is_stmt 0 discriminator 1
 1091              		.syntax divided
 1092              	@ 929 "FreeRTOS\source\queue.c" 1
 1093 0010 72B6     		 cpsid i 
 1094              	@ 0 "" 2
 1095              		.thumb
 1096              		.syntax unified
 1097              	.L81:
 1098 0012 FEE7     		b	.L81
 1099              	.L80:
 930:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1100              		.loc 1 930 0 is_stmt 1
 1101 0014 009B     		ldr	r3, [sp]
 1102              	.LVL139:
 1103 0016 002B     		cmp	r3, #0
 1104 0018 04D1     		bne	.L91
 930:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1105              		.loc 1 930 0 is_stmt 0 discriminator 2
 1106 001a 036C     		ldr	r3, [r0, #64]
 1107 001c 002B     		cmp	r3, #0
 1108 001e 03D1     		bne	.L92
 930:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1109              		.loc 1 930 0
 1110 0020 0133     		adds	r3, r3, #1
 1111 0022 02E0     		b	.L82
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 64


 1112              	.L91:
 1113 0024 0123     		movs	r3, #1
 1114 0026 00E0     		b	.L82
 1115              	.L92:
 1116 0028 0023     		movs	r3, #0
 1117              	.L82:
 930:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1118              		.loc 1 930 0 discriminator 6
 1119 002a 002B     		cmp	r3, #0
 1120 002c 01D1     		bne	.L83
 930:FreeRTOS\source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1121              		.loc 1 930 0 discriminator 7
 1122              		.syntax divided
 1123              	@ 930 "FreeRTOS\source\queue.c" 1
 1124 002e 72B6     		 cpsid i 
 1125              	@ 0 "" 2
 1126              		.thumb
 1127              		.syntax unified
 1128              	.L84:
 1129 0030 FEE7     		b	.L84
 1130              	.L83:
 931:FreeRTOS\source/queue.c **** 
 1131              		.loc 1 931 0 is_stmt 1
 1132 0032 022F     		cmp	r7, #2
 1133 0034 03D1     		bne	.L93
 931:FreeRTOS\source/queue.c **** 
 1134              		.loc 1 931 0 is_stmt 0 discriminator 2
 1135 0036 E36B     		ldr	r3, [r4, #60]
 1136 0038 012B     		cmp	r3, #1
 1137 003a 02D1     		bne	.L94
 1138 003c 02E0     		b	.L85
 1139              	.L93:
 931:FreeRTOS\source/queue.c **** 
 1140              		.loc 1 931 0
 1141 003e 0123     		movs	r3, #1
 1142 0040 00E0     		b	.L85
 1143              	.L94:
 1144 0042 0023     		movs	r3, #0
 1145              	.L85:
 931:FreeRTOS\source/queue.c **** 
 1146              		.loc 1 931 0 discriminator 6
 1147 0044 002B     		cmp	r3, #0
 1148 0046 01D1     		bne	.L86
 931:FreeRTOS\source/queue.c **** 
 1149              		.loc 1 931 0 discriminator 7
 1150              		.syntax divided
 1151              	@ 931 "FreeRTOS\source\queue.c" 1
 1152 0048 72B6     		 cpsid i 
 1153              	@ 0 "" 2
 1154              		.thumb
 1155              		.syntax unified
 1156              	.L87:
 1157 004a FEE7     		b	.L87
 1158              	.L86:
 954:FreeRTOS\source/queue.c **** 	{
 1159              		.loc 1 954 0 is_stmt 1
 1160 004c FFF7FEFF 		bl	ulSetInterruptMaskFromISR
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 65


 1161              	.LVL140:
 1162 0050 0190     		str	r0, [sp, #4]
 1163              	.LVL141:
 956:FreeRTOS\source/queue.c **** 		{
 1164              		.loc 1 956 0
 1165 0052 A36B     		ldr	r3, [r4, #56]
 1166 0054 E26B     		ldr	r2, [r4, #60]
 1167 0056 9342     		cmp	r3, r2
 1168 0058 01D3     		bcc	.L88
 956:FreeRTOS\source/queue.c **** 		{
 1169              		.loc 1 956 0 is_stmt 0 discriminator 1
 1170 005a 022F     		cmp	r7, #2
 1171 005c 1ED1     		bne	.L95
 1172              	.L88:
 1173              	.LBB4:
 958:FreeRTOS\source/queue.c **** 
 1174              		.loc 1 958 0 is_stmt 1
 1175 005e 4523     		movs	r3, #69
 1176 0060 E55C     		ldrb	r5, [r4, r3]
 1177 0062 6DB2     		sxtb	r5, r5
 1178              	.LVL142:
 967:FreeRTOS\source/queue.c **** 
 1179              		.loc 1 967 0
 1180 0064 3A00     		movs	r2, r7
 1181 0066 0099     		ldr	r1, [sp]
 1182 0068 2000     		movs	r0, r4
 1183              	.LVL143:
 1184 006a FFF7FEFF 		bl	prvCopyDataToQueue
 1185              	.LVL144:
 971:FreeRTOS\source/queue.c **** 			{
 1186              		.loc 1 971 0
 1187 006e 6B1C     		adds	r3, r5, #1
 1188 0070 0ED1     		bne	.L90
1026:FreeRTOS\source/queue.c **** 					{
 1189              		.loc 1 1026 0
 1190 0072 636A     		ldr	r3, [r4, #36]
 1191 0074 002B     		cmp	r3, #0
 1192 0076 13D0     		beq	.L96
1028:FreeRTOS\source/queue.c **** 						{
 1193              		.loc 1 1028 0
 1194 0078 2000     		movs	r0, r4
 1195 007a 2430     		adds	r0, r0, #36
 1196 007c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1197              	.LVL145:
 1198 0080 0028     		cmp	r0, #0
 1199 0082 0FD0     		beq	.L97
1032:FreeRTOS\source/queue.c **** 							{
 1200              		.loc 1 1032 0
 1201 0084 002E     		cmp	r6, #0
 1202 0086 0FD0     		beq	.L98
1034:FreeRTOS\source/queue.c **** 							}
 1203              		.loc 1 1034 0
 1204 0088 0123     		movs	r3, #1
 1205 008a 3360     		str	r3, [r6]
1060:FreeRTOS\source/queue.c **** 		}
 1206              		.loc 1 1060 0
 1207 008c 0124     		movs	r4, #1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 66


 1208              	.LVL146:
 1209 008e 0CE0     		b	.L89
 1210              	.LVL147:
 1211              	.L90:
1057:FreeRTOS\source/queue.c **** 			}
 1212              		.loc 1 1057 0
 1213 0090 0135     		adds	r5, r5, #1
 1214              	.LVL148:
 1215 0092 6DB2     		sxtb	r5, r5
 1216              	.LVL149:
 1217 0094 4523     		movs	r3, #69
 1218 0096 E554     		strb	r5, [r4, r3]
1060:FreeRTOS\source/queue.c **** 		}
 1219              		.loc 1 1060 0
 1220 0098 0124     		movs	r4, #1
 1221              	.LVL150:
 1222 009a 06E0     		b	.L89
 1223              	.LVL151:
 1224              	.L95:
 1225              	.LBE4:
1065:FreeRTOS\source/queue.c **** 		}
 1226              		.loc 1 1065 0
 1227 009c 0024     		movs	r4, #0
 1228              	.LVL152:
 1229 009e 04E0     		b	.L89
 1230              	.LVL153:
 1231              	.L96:
 1232              	.LBB5:
1060:FreeRTOS\source/queue.c **** 		}
 1233              		.loc 1 1060 0
 1234 00a0 0124     		movs	r4, #1
 1235              	.LVL154:
 1236 00a2 02E0     		b	.L89
 1237              	.LVL155:
 1238              	.L97:
 1239 00a4 0124     		movs	r4, #1
 1240              	.LVL156:
 1241 00a6 00E0     		b	.L89
 1242              	.LVL157:
 1243              	.L98:
 1244 00a8 0124     		movs	r4, #1
 1245              	.LVL158:
 1246              	.L89:
 1247              	.LBE5:
1068:FreeRTOS\source/queue.c **** 
 1248              		.loc 1 1068 0
 1249 00aa 0198     		ldr	r0, [sp, #4]
 1250 00ac FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1251              	.LVL159:
1071:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 1252              		.loc 1 1071 0
 1253 00b0 2000     		movs	r0, r4
 1254 00b2 03B0     		add	sp, sp, #12
 1255              	.LVL160:
 1256              		@ sp needed
 1257              	.LVL161:
 1258              	.LVL162:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 67


 1259              	.LVL163:
 1260 00b4 F0BD     		pop	{r4, r5, r6, r7, pc}
 1261              		.cfi_endproc
 1262              	.LFE38:
 1263              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 1264 00b6 C046     		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1265              		.align	2
 1266              		.global	xQueueGiveFromISR
 1267              		.code	16
 1268              		.thumb_func
 1269              		.type	xQueueGiveFromISR, %function
 1270              	xQueueGiveFromISR:
 1271              	.LFB39:
1075:FreeRTOS\source/queue.c **** BaseType_t xReturn;
 1272              		.loc 1 1075 0
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 0
 1275              		@ frame_needed = 0, uses_anonymous_args = 0
 1276              	.LVL164:
 1277 0000 70B5     		push	{r4, r5, r6, lr}
 1278              		.cfi_def_cfa_offset 16
 1279              		.cfi_offset 4, -16
 1280              		.cfi_offset 5, -12
 1281              		.cfi_offset 6, -8
 1282              		.cfi_offset 14, -4
 1283 0002 0400     		movs	r4, r0
 1284 0004 0E00     		movs	r6, r1
 1285              	.LVL165:
1086:FreeRTOS\source/queue.c **** 
 1286              		.loc 1 1086 0
 1287 0006 0028     		cmp	r0, #0
 1288 0008 01D1     		bne	.L100
1086:FreeRTOS\source/queue.c **** 
 1289              		.loc 1 1086 0 is_stmt 0 discriminator 1
 1290              		.syntax divided
 1291              	@ 1086 "FreeRTOS\source\queue.c" 1
 1292 000a 72B6     		 cpsid i 
 1293              	@ 0 "" 2
 1294              		.thumb
 1295              		.syntax unified
 1296              	.L101:
 1297 000c FEE7     		b	.L101
 1298              	.L100:
1090:FreeRTOS\source/queue.c **** 
 1299              		.loc 1 1090 0 is_stmt 1
 1300 000e 036C     		ldr	r3, [r0, #64]
 1301 0010 002B     		cmp	r3, #0
 1302 0012 01D0     		beq	.L102
1090:FreeRTOS\source/queue.c **** 
 1303              		.loc 1 1090 0 is_stmt 0 discriminator 1
 1304              		.syntax divided
 1305              	@ 1090 "FreeRTOS\source\queue.c" 1
 1306 0014 72B6     		 cpsid i 
 1307              	@ 0 "" 2
 1308              		.thumb
 1309              		.syntax unified
 1310              	.L103:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 68


 1311 0016 FEE7     		b	.L103
 1312              	.L102:
1095:FreeRTOS\source/queue.c **** 
 1313              		.loc 1 1095 0 is_stmt 1
 1314 0018 0368     		ldr	r3, [r0]
 1315 001a 002B     		cmp	r3, #0
 1316 001c 04D1     		bne	.L109
1095:FreeRTOS\source/queue.c **** 
 1317              		.loc 1 1095 0 is_stmt 0 discriminator 2
 1318 001e 4368     		ldr	r3, [r0, #4]
 1319 0020 002B     		cmp	r3, #0
 1320 0022 03D1     		bne	.L110
1095:FreeRTOS\source/queue.c **** 
 1321              		.loc 1 1095 0
 1322 0024 0133     		adds	r3, r3, #1
 1323 0026 02E0     		b	.L104
 1324              	.L109:
 1325 0028 0123     		movs	r3, #1
 1326 002a 00E0     		b	.L104
 1327              	.L110:
 1328 002c 0023     		movs	r3, #0
 1329              	.L104:
1095:FreeRTOS\source/queue.c **** 
 1330              		.loc 1 1095 0 discriminator 6
 1331 002e 002B     		cmp	r3, #0
 1332 0030 01D1     		bne	.L105
1095:FreeRTOS\source/queue.c **** 
 1333              		.loc 1 1095 0 discriminator 7
 1334              		.syntax divided
 1335              	@ 1095 "FreeRTOS\source\queue.c" 1
 1336 0032 72B6     		 cpsid i 
 1337              	@ 0 "" 2
 1338              		.thumb
 1339              		.syntax unified
 1340              	.L106:
 1341 0034 FEE7     		b	.L106
 1342              	.L105:
1113:FreeRTOS\source/queue.c **** 	{
 1343              		.loc 1 1113 0 is_stmt 1
 1344 0036 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1345              	.LVL166:
 1346 003a 0500     		movs	r5, r0
 1347              	.LVL167:
 1348              	.LBB6:
1115:FreeRTOS\source/queue.c **** 
 1349              		.loc 1 1115 0
 1350 003c A26B     		ldr	r2, [r4, #56]
 1351              	.LVL168:
1120:FreeRTOS\source/queue.c **** 		{
 1352              		.loc 1 1120 0
 1353 003e E36B     		ldr	r3, [r4, #60]
 1354 0040 9A42     		cmp	r2, r3
 1355 0042 1BD2     		bcs	.L111
 1356              	.LBB7:
1122:FreeRTOS\source/queue.c **** 
 1357              		.loc 1 1122 0
 1358 0044 4523     		movs	r3, #69
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 69


 1359 0046 E35C     		ldrb	r3, [r4, r3]
 1360 0048 5BB2     		sxtb	r3, r3
 1361              	.LVL169:
1132:FreeRTOS\source/queue.c **** 
 1362              		.loc 1 1132 0
 1363 004a 0132     		adds	r2, r2, #1
 1364              	.LVL170:
 1365 004c A263     		str	r2, [r4, #56]
1136:FreeRTOS\source/queue.c **** 			{
 1366              		.loc 1 1136 0
 1367 004e 5A1C     		adds	r2, r3, #1
 1368 0050 0ED1     		bne	.L108
 1369              	.LVL171:
1191:FreeRTOS\source/queue.c **** 					{
 1370              		.loc 1 1191 0
 1371 0052 636A     		ldr	r3, [r4, #36]
 1372              	.LVL172:
 1373 0054 002B     		cmp	r3, #0
 1374 0056 13D0     		beq	.L112
1193:FreeRTOS\source/queue.c **** 						{
 1375              		.loc 1 1193 0
 1376 0058 2000     		movs	r0, r4
 1377              	.LVL173:
 1378 005a 2430     		adds	r0, r0, #36
 1379 005c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1380              	.LVL174:
 1381 0060 0028     		cmp	r0, #0
 1382 0062 0FD0     		beq	.L113
1197:FreeRTOS\source/queue.c **** 							{
 1383              		.loc 1 1197 0
 1384 0064 002E     		cmp	r6, #0
 1385 0066 0FD0     		beq	.L114
1199:FreeRTOS\source/queue.c **** 							}
 1386              		.loc 1 1199 0
 1387 0068 0123     		movs	r3, #1
 1388 006a 3360     		str	r3, [r6]
1225:FreeRTOS\source/queue.c **** 		}
 1389              		.loc 1 1225 0
 1390 006c 0124     		movs	r4, #1
 1391              	.LVL175:
 1392 006e 0CE0     		b	.L107
 1393              	.LVL176:
 1394              	.L108:
1222:FreeRTOS\source/queue.c **** 			}
 1395              		.loc 1 1222 0
 1396 0070 0133     		adds	r3, r3, #1
 1397              	.LVL177:
 1398 0072 5BB2     		sxtb	r3, r3
 1399              	.LVL178:
 1400 0074 4522     		movs	r2, #69
 1401 0076 A354     		strb	r3, [r4, r2]
 1402              	.LVL179:
1225:FreeRTOS\source/queue.c **** 		}
 1403              		.loc 1 1225 0
 1404 0078 0124     		movs	r4, #1
 1405              	.LVL180:
 1406 007a 06E0     		b	.L107
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 70


 1407              	.LVL181:
 1408              	.L111:
 1409              	.LBE7:
1230:FreeRTOS\source/queue.c **** 		}
 1410              		.loc 1 1230 0
 1411 007c 0024     		movs	r4, #0
 1412              	.LVL182:
 1413 007e 04E0     		b	.L107
 1414              	.LVL183:
 1415              	.L112:
 1416              	.LBB8:
1225:FreeRTOS\source/queue.c **** 		}
 1417              		.loc 1 1225 0
 1418 0080 0124     		movs	r4, #1
 1419              	.LVL184:
 1420 0082 02E0     		b	.L107
 1421              	.LVL185:
 1422              	.L113:
 1423 0084 0124     		movs	r4, #1
 1424              	.LVL186:
 1425 0086 00E0     		b	.L107
 1426              	.LVL187:
 1427              	.L114:
 1428 0088 0124     		movs	r4, #1
 1429              	.LVL188:
 1430              	.L107:
 1431              	.LBE8:
 1432              	.LBE6:
1233:FreeRTOS\source/queue.c **** 
 1433              		.loc 1 1233 0
 1434 008a 2800     		movs	r0, r5
 1435 008c FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1436              	.LVL189:
1236:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 1437              		.loc 1 1236 0
 1438 0090 2000     		movs	r0, r4
 1439              		@ sp needed
 1440              	.LVL190:
 1441              	.LVL191:
 1442              	.LVL192:
 1443 0092 70BD     		pop	{r4, r5, r6, pc}
 1444              		.cfi_endproc
 1445              	.LFE39:
 1446              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1447              		.section	.text.xQueueReceive,"ax",%progbits
 1448              		.align	2
 1449              		.global	xQueueReceive
 1450              		.code	16
 1451              		.thumb_func
 1452              		.type	xQueueReceive, %function
 1453              	xQueueReceive:
 1454              	.LFB40:
1240:FreeRTOS\source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1455              		.loc 1 1240 0
 1456              		.cfi_startproc
 1457              		@ args = 0, pretend = 0, frame = 16
 1458              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 71


 1459              	.LVL193:
 1460 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1461              		.cfi_def_cfa_offset 20
 1462              		.cfi_offset 4, -20
 1463              		.cfi_offset 5, -16
 1464              		.cfi_offset 6, -12
 1465              		.cfi_offset 7, -8
 1466              		.cfi_offset 14, -4
 1467 0002 85B0     		sub	sp, sp, #20
 1468              		.cfi_def_cfa_offset 40
 1469 0004 0400     		movs	r4, r0
 1470 0006 0E00     		movs	r6, r1
 1471 0008 0192     		str	r2, [sp, #4]
 1472              	.LVL194:
1246:FreeRTOS\source/queue.c **** 
 1473              		.loc 1 1246 0
 1474 000a 0028     		cmp	r0, #0
 1475 000c 01D1     		bne	.L116
1246:FreeRTOS\source/queue.c **** 
 1476              		.loc 1 1246 0 is_stmt 0 discriminator 1
 1477              		.syntax divided
 1478              	@ 1246 "FreeRTOS\source\queue.c" 1
 1479 000e 72B6     		 cpsid i 
 1480              	@ 0 "" 2
 1481              		.thumb
 1482              		.syntax unified
 1483              	.L117:
 1484 0010 FEE7     		b	.L117
 1485              	.L116:
1250:FreeRTOS\source/queue.c **** 
 1486              		.loc 1 1250 0 is_stmt 1
 1487 0012 0029     		cmp	r1, #0
 1488 0014 04D1     		bne	.L134
1250:FreeRTOS\source/queue.c **** 
 1489              		.loc 1 1250 0 is_stmt 0 discriminator 2
 1490 0016 036C     		ldr	r3, [r0, #64]
 1491 0018 002B     		cmp	r3, #0
 1492 001a 03D1     		bne	.L135
1250:FreeRTOS\source/queue.c **** 
 1493              		.loc 1 1250 0
 1494 001c 0133     		adds	r3, r3, #1
 1495 001e 02E0     		b	.L118
 1496              	.L134:
 1497 0020 0123     		movs	r3, #1
 1498 0022 00E0     		b	.L118
 1499              	.L135:
 1500 0024 0023     		movs	r3, #0
 1501              	.L118:
1250:FreeRTOS\source/queue.c **** 
 1502              		.loc 1 1250 0 discriminator 6
 1503 0026 002B     		cmp	r3, #0
 1504 0028 01D1     		bne	.L119
1250:FreeRTOS\source/queue.c **** 
 1505              		.loc 1 1250 0 discriminator 7
 1506              		.syntax divided
 1507              	@ 1250 "FreeRTOS\source\queue.c" 1
 1508 002a 72B6     		 cpsid i 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 72


 1509              	@ 0 "" 2
 1510              		.thumb
 1511              		.syntax unified
 1512              	.L120:
 1513 002c FEE7     		b	.L120
 1514              	.L119:
1255:FreeRTOS\source/queue.c **** 	}
 1515              		.loc 1 1255 0 is_stmt 1
 1516 002e FFF7FEFF 		bl	xTaskGetSchedulerState
 1517              	.LVL195:
 1518 0032 0028     		cmp	r0, #0
 1519 0034 04D1     		bne	.L136
1255:FreeRTOS\source/queue.c **** 	}
 1520              		.loc 1 1255 0 is_stmt 0 discriminator 2
 1521 0036 019B     		ldr	r3, [sp, #4]
 1522 0038 002B     		cmp	r3, #0
 1523 003a 03D1     		bne	.L137
1255:FreeRTOS\source/queue.c **** 	}
 1524              		.loc 1 1255 0
 1525 003c 0133     		adds	r3, r3, #1
 1526 003e 02E0     		b	.L121
 1527              	.L136:
 1528 0040 0123     		movs	r3, #1
 1529 0042 00E0     		b	.L121
 1530              	.L137:
 1531 0044 0023     		movs	r3, #0
 1532              	.L121:
1255:FreeRTOS\source/queue.c **** 	}
 1533              		.loc 1 1255 0 discriminator 6
 1534 0046 002B     		cmp	r3, #0
 1535 0048 01D1     		bne	.L138
1255:FreeRTOS\source/queue.c **** 	}
 1536              		.loc 1 1255 0 discriminator 7
 1537              		.syntax divided
 1538              	@ 1255 "FreeRTOS\source\queue.c" 1
 1539 004a 72B6     		 cpsid i 
 1540              	@ 0 "" 2
 1541              		.thumb
 1542              		.syntax unified
 1543              	.L123:
 1544 004c FEE7     		b	.L123
 1545              	.L138:
 1546 004e 0027     		movs	r7, #0
 1547              	.LVL196:
 1548              	.L122:
1266:FreeRTOS\source/queue.c **** 		{
 1549              		.loc 1 1266 0 is_stmt 1
 1550 0050 FFF7FEFF 		bl	vPortEnterCritical
 1551              	.LVL197:
 1552              	.LBB9:
1268:FreeRTOS\source/queue.c **** 
 1553              		.loc 1 1268 0
 1554 0054 A56B     		ldr	r5, [r4, #56]
 1555              	.LVL198:
1272:FreeRTOS\source/queue.c **** 			{
 1556              		.loc 1 1272 0
 1557 0056 002D     		cmp	r5, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 73


 1558 0058 14D0     		beq	.L124
1275:FreeRTOS\source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1559              		.loc 1 1275 0
 1560 005a 3100     		movs	r1, r6
 1561 005c 2000     		movs	r0, r4
 1562 005e FFF7FEFF 		bl	prvCopyDataFromQueue
 1563              	.LVL199:
1277:FreeRTOS\source/queue.c **** 
 1564              		.loc 1 1277 0
 1565 0062 013D     		subs	r5, r5, #1
 1566              	.LVL200:
 1567 0064 A563     		str	r5, [r4, #56]
1282:FreeRTOS\source/queue.c **** 				{
 1568              		.loc 1 1282 0
 1569 0066 2369     		ldr	r3, [r4, #16]
 1570 0068 002B     		cmp	r3, #0
 1571 006a 07D0     		beq	.L125
1284:FreeRTOS\source/queue.c **** 					{
 1572              		.loc 1 1284 0
 1573 006c 2000     		movs	r0, r4
 1574 006e 1030     		adds	r0, r0, #16
 1575 0070 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1576              	.LVL201:
 1577 0074 0028     		cmp	r0, #0
 1578 0076 01D0     		beq	.L125
1286:FreeRTOS\source/queue.c **** 					}
 1579              		.loc 1 1286 0
 1580 0078 FFF7FEFF 		bl	vPortYield
 1581              	.LVL202:
 1582              	.L125:
1298:FreeRTOS\source/queue.c **** 				return pdPASS;
 1583              		.loc 1 1298 0
 1584 007c FFF7FEFF 		bl	vPortExitCritical
 1585              	.LVL203:
1299:FreeRTOS\source/queue.c **** 			}
 1586              		.loc 1 1299 0
 1587 0080 0120     		movs	r0, #1
 1588 0082 4FE0     		b	.L126
 1589              	.LVL204:
 1590              	.L124:
1303:FreeRTOS\source/queue.c **** 				{
 1591              		.loc 1 1303 0
 1592 0084 019B     		ldr	r3, [sp, #4]
 1593 0086 002B     		cmp	r3, #0
 1594 0088 03D1     		bne	.L127
1307:FreeRTOS\source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1595              		.loc 1 1307 0
 1596 008a FFF7FEFF 		bl	vPortExitCritical
 1597              	.LVL205:
1309:FreeRTOS\source/queue.c **** 				}
 1598              		.loc 1 1309 0
 1599 008e 0020     		movs	r0, #0
 1600 0090 48E0     		b	.L126
 1601              	.L127:
1311:FreeRTOS\source/queue.c **** 				{
 1602              		.loc 1 1311 0
 1603 0092 002F     		cmp	r7, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 74


 1604 0094 03D1     		bne	.L128
1315:FreeRTOS\source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1605              		.loc 1 1315 0
 1606 0096 02A8     		add	r0, sp, #8
 1607 0098 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1608              	.LVL206:
1316:FreeRTOS\source/queue.c **** 				}
 1609              		.loc 1 1316 0
 1610 009c 0137     		adds	r7, r7, #1
 1611              	.LVL207:
 1612              	.L128:
 1613              	.LBE9:
1325:FreeRTOS\source/queue.c **** 
 1614              		.loc 1 1325 0
 1615 009e FFF7FEFF 		bl	vPortExitCritical
 1616              	.LVL208:
1330:FreeRTOS\source/queue.c **** 		prvLockQueue( pxQueue );
 1617              		.loc 1 1330 0
 1618 00a2 FFF7FEFF 		bl	vTaskSuspendAll
 1619              	.LVL209:
1331:FreeRTOS\source/queue.c **** 
 1620              		.loc 1 1331 0
 1621 00a6 FFF7FEFF 		bl	vPortEnterCritical
 1622              	.LVL210:
 1623 00aa 4423     		movs	r3, #68
 1624 00ac E35C     		ldrb	r3, [r4, r3]
 1625 00ae 5BB2     		sxtb	r3, r3
 1626 00b0 0133     		adds	r3, r3, #1
 1627 00b2 02D1     		bne	.L129
1331:FreeRTOS\source/queue.c **** 
 1628              		.loc 1 1331 0 is_stmt 0 discriminator 1
 1629 00b4 0022     		movs	r2, #0
 1630 00b6 4423     		movs	r3, #68
 1631 00b8 E254     		strb	r2, [r4, r3]
 1632              	.L129:
1331:FreeRTOS\source/queue.c **** 
 1633              		.loc 1 1331 0 discriminator 3
 1634 00ba 4523     		movs	r3, #69
 1635 00bc E35C     		ldrb	r3, [r4, r3]
 1636 00be 5BB2     		sxtb	r3, r3
 1637 00c0 0133     		adds	r3, r3, #1
 1638 00c2 02D1     		bne	.L130
1331:FreeRTOS\source/queue.c **** 
 1639              		.loc 1 1331 0 discriminator 4
 1640 00c4 0022     		movs	r2, #0
 1641 00c6 4523     		movs	r3, #69
 1642 00c8 E254     		strb	r2, [r4, r3]
 1643              	.L130:
1331:FreeRTOS\source/queue.c **** 
 1644              		.loc 1 1331 0 discriminator 6
 1645 00ca FFF7FEFF 		bl	vPortExitCritical
 1646              	.LVL211:
1334:FreeRTOS\source/queue.c **** 		{
 1647              		.loc 1 1334 0 is_stmt 1 discriminator 6
 1648 00ce 01A9     		add	r1, sp, #4
 1649              	.LVL212:
 1650 00d0 02A8     		add	r0, sp, #8
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 75


 1651 00d2 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1652              	.LVL213:
 1653 00d6 0028     		cmp	r0, #0
 1654 00d8 19D1     		bne	.L131
1338:FreeRTOS\source/queue.c **** 			{
 1655              		.loc 1 1338 0
 1656 00da 2000     		movs	r0, r4
 1657 00dc FFF7FEFF 		bl	prvIsQueueEmpty
 1658              	.LVL214:
 1659 00e0 0028     		cmp	r0, #0
 1660 00e2 0ED0     		beq	.L132
1341:FreeRTOS\source/queue.c **** 				prvUnlockQueue( pxQueue );
 1661              		.loc 1 1341 0
 1662 00e4 2000     		movs	r0, r4
 1663 00e6 2430     		adds	r0, r0, #36
 1664 00e8 0199     		ldr	r1, [sp, #4]
 1665 00ea FFF7FEFF 		bl	vTaskPlaceOnEventList
 1666              	.LVL215:
1342:FreeRTOS\source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1667              		.loc 1 1342 0
 1668 00ee 2000     		movs	r0, r4
 1669 00f0 FFF7FEFF 		bl	prvUnlockQueue
 1670              	.LVL216:
1343:FreeRTOS\source/queue.c **** 				{
 1671              		.loc 1 1343 0
 1672 00f4 FFF7FEFF 		bl	xTaskResumeAll
 1673              	.LVL217:
 1674 00f8 0028     		cmp	r0, #0
 1675 00fa A9D1     		bne	.L122
1345:FreeRTOS\source/queue.c **** 				}
 1676              		.loc 1 1345 0
 1677 00fc FFF7FEFF 		bl	vPortYield
 1678              	.LVL218:
 1679 0100 A6E7     		b	.L122
 1680              	.L132:
1356:FreeRTOS\source/queue.c **** 				( void ) xTaskResumeAll();
 1681              		.loc 1 1356 0
 1682 0102 2000     		movs	r0, r4
 1683 0104 FFF7FEFF 		bl	prvUnlockQueue
 1684              	.LVL219:
1357:FreeRTOS\source/queue.c **** 			}
 1685              		.loc 1 1357 0
 1686 0108 FFF7FEFF 		bl	xTaskResumeAll
 1687              	.LVL220:
 1688 010c A0E7     		b	.L122
 1689              	.L131:
1364:FreeRTOS\source/queue.c **** 			( void ) xTaskResumeAll();
 1690              		.loc 1 1364 0
 1691 010e 2000     		movs	r0, r4
 1692 0110 FFF7FEFF 		bl	prvUnlockQueue
 1693              	.LVL221:
1365:FreeRTOS\source/queue.c **** 
 1694              		.loc 1 1365 0
 1695 0114 FFF7FEFF 		bl	xTaskResumeAll
 1696              	.LVL222:
1367:FreeRTOS\source/queue.c **** 			{
 1697              		.loc 1 1367 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 76


 1698 0118 2000     		movs	r0, r4
 1699 011a FFF7FEFF 		bl	prvIsQueueEmpty
 1700              	.LVL223:
 1701 011e 0028     		cmp	r0, #0
 1702 0120 96D0     		beq	.L122
1370:FreeRTOS\source/queue.c **** 			}
 1703              		.loc 1 1370 0
 1704 0122 0020     		movs	r0, #0
 1705              	.LVL224:
 1706              	.L126:
1378:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 1707              		.loc 1 1378 0
 1708 0124 05B0     		add	sp, sp, #20
 1709              		@ sp needed
 1710              	.LVL225:
 1711              	.LVL226:
 1712              	.LVL227:
 1713 0126 F0BD     		pop	{r4, r5, r6, r7, pc}
 1714              		.cfi_endproc
 1715              	.LFE40:
 1716              		.size	xQueueReceive, .-xQueueReceive
 1717              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1718              		.align	2
 1719              		.global	xQueueSemaphoreTake
 1720              		.code	16
 1721              		.thumb_func
 1722              		.type	xQueueSemaphoreTake, %function
 1723              	xQueueSemaphoreTake:
 1724              	.LFB41:
1382:FreeRTOS\source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1725              		.loc 1 1382 0
 1726              		.cfi_startproc
 1727              		@ args = 0, pretend = 0, frame = 16
 1728              		@ frame_needed = 0, uses_anonymous_args = 0
 1729              	.LVL228:
 1730 0000 70B5     		push	{r4, r5, r6, lr}
 1731              		.cfi_def_cfa_offset 16
 1732              		.cfi_offset 4, -16
 1733              		.cfi_offset 5, -12
 1734              		.cfi_offset 6, -8
 1735              		.cfi_offset 14, -4
 1736 0002 84B0     		sub	sp, sp, #16
 1737              		.cfi_def_cfa_offset 32
 1738 0004 041E     		subs	r4, r0, #0
 1739 0006 0191     		str	r1, [sp, #4]
 1740              	.LVL229:
1392:FreeRTOS\source/queue.c **** 
 1741              		.loc 1 1392 0
 1742 0008 01D1     		bne	.L140
1392:FreeRTOS\source/queue.c **** 
 1743              		.loc 1 1392 0 is_stmt 0 discriminator 1
 1744              		.syntax divided
 1745              	@ 1392 "FreeRTOS\source\queue.c" 1
 1746 000a 72B6     		 cpsid i 
 1747              	@ 0 "" 2
 1748              		.thumb
 1749              		.syntax unified
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 77


 1750              	.L141:
 1751 000c FEE7     		b	.L141
 1752              	.L140:
1396:FreeRTOS\source/queue.c **** 
 1753              		.loc 1 1396 0 is_stmt 1
 1754 000e 036C     		ldr	r3, [r0, #64]
 1755 0010 002B     		cmp	r3, #0
 1756 0012 01D0     		beq	.L142
1396:FreeRTOS\source/queue.c **** 
 1757              		.loc 1 1396 0 is_stmt 0 discriminator 1
 1758              		.syntax divided
 1759              	@ 1396 "FreeRTOS\source\queue.c" 1
 1760 0014 72B6     		 cpsid i 
 1761              	@ 0 "" 2
 1762              		.thumb
 1763              		.syntax unified
 1764              	.L143:
 1765 0016 FEE7     		b	.L143
 1766              	.L142:
1401:FreeRTOS\source/queue.c **** 	}
 1767              		.loc 1 1401 0 is_stmt 1
 1768 0018 FFF7FEFF 		bl	xTaskGetSchedulerState
 1769              	.LVL230:
 1770 001c 0028     		cmp	r0, #0
 1771 001e 04D1     		bne	.L161
1401:FreeRTOS\source/queue.c **** 	}
 1772              		.loc 1 1401 0 is_stmt 0 discriminator 2
 1773 0020 019B     		ldr	r3, [sp, #4]
 1774 0022 002B     		cmp	r3, #0
 1775 0024 03D1     		bne	.L162
1401:FreeRTOS\source/queue.c **** 	}
 1776              		.loc 1 1401 0
 1777 0026 0133     		adds	r3, r3, #1
 1778 0028 02E0     		b	.L144
 1779              	.L161:
 1780 002a 0123     		movs	r3, #1
 1781 002c 00E0     		b	.L144
 1782              	.L162:
 1783 002e 0023     		movs	r3, #0
 1784              	.L144:
1401:FreeRTOS\source/queue.c **** 	}
 1785              		.loc 1 1401 0 discriminator 6
 1786 0030 002B     		cmp	r3, #0
 1787 0032 01D1     		bne	.L163
1401:FreeRTOS\source/queue.c **** 	}
 1788              		.loc 1 1401 0 discriminator 7
 1789              		.syntax divided
 1790              	@ 1401 "FreeRTOS\source\queue.c" 1
 1791 0034 72B6     		 cpsid i 
 1792              	@ 0 "" 2
 1793              		.thumb
 1794              		.syntax unified
 1795              	.L146:
 1796 0036 FEE7     		b	.L146
 1797              	.L163:
 1798 0038 0025     		movs	r5, #0
 1799 003a 0026     		movs	r6, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 78


 1800              	.LVL231:
 1801              	.L145:
1412:FreeRTOS\source/queue.c **** 		{
 1802              		.loc 1 1412 0 is_stmt 1
 1803 003c FFF7FEFF 		bl	vPortEnterCritical
 1804              	.LVL232:
 1805              	.LBB10:
1416:FreeRTOS\source/queue.c **** 
 1806              		.loc 1 1416 0
 1807 0040 A36B     		ldr	r3, [r4, #56]
 1808              	.LVL233:
1420:FreeRTOS\source/queue.c **** 			{
 1809              		.loc 1 1420 0
 1810 0042 002B     		cmp	r3, #0
 1811 0044 16D0     		beq	.L147
1426:FreeRTOS\source/queue.c **** 
 1812              		.loc 1 1426 0
 1813 0046 013B     		subs	r3, r3, #1
 1814              	.LVL234:
 1815 0048 A363     		str	r3, [r4, #56]
1430:FreeRTOS\source/queue.c **** 					{
 1816              		.loc 1 1430 0
 1817 004a 2368     		ldr	r3, [r4]
 1818              	.LVL235:
 1819 004c 002B     		cmp	r3, #0
 1820 004e 02D1     		bne	.L148
1434:FreeRTOS\source/queue.c **** 					}
 1821              		.loc 1 1434 0
 1822 0050 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1823              	.LVL236:
 1824 0054 6060     		str	r0, [r4, #4]
 1825              	.L148:
1445:FreeRTOS\source/queue.c **** 				{
 1826              		.loc 1 1445 0
 1827 0056 2369     		ldr	r3, [r4, #16]
 1828 0058 002B     		cmp	r3, #0
 1829 005a 07D0     		beq	.L149
1447:FreeRTOS\source/queue.c **** 					{
 1830              		.loc 1 1447 0
 1831 005c 2000     		movs	r0, r4
 1832 005e 1030     		adds	r0, r0, #16
 1833 0060 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1834              	.LVL237:
 1835 0064 0028     		cmp	r0, #0
 1836 0066 01D0     		beq	.L149
1449:FreeRTOS\source/queue.c **** 					}
 1837              		.loc 1 1449 0
 1838 0068 FFF7FEFF 		bl	vPortYield
 1839              	.LVL238:
 1840              	.L149:
1461:FreeRTOS\source/queue.c **** 				return pdPASS;
 1841              		.loc 1 1461 0
 1842 006c FFF7FEFF 		bl	vPortExitCritical
 1843              	.LVL239:
1462:FreeRTOS\source/queue.c **** 			}
 1844              		.loc 1 1462 0
 1845 0070 0120     		movs	r0, #1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 79


 1846 0072 6DE0     		b	.L150
 1847              	.LVL240:
 1848              	.L147:
1466:FreeRTOS\source/queue.c **** 				{
 1849              		.loc 1 1466 0
 1850 0074 019B     		ldr	r3, [sp, #4]
 1851              	.LVL241:
 1852 0076 002B     		cmp	r3, #0
 1853 0078 07D1     		bne	.L151
1473:FreeRTOS\source/queue.c **** 					}
 1854              		.loc 1 1473 0
 1855 007a 002D     		cmp	r5, #0
 1856 007c 01D0     		beq	.L152
1473:FreeRTOS\source/queue.c **** 					}
 1857              		.loc 1 1473 0 is_stmt 0 discriminator 1
 1858              		.syntax divided
 1859              	@ 1473 "FreeRTOS\source\queue.c" 1
 1860 007e 72B6     		 cpsid i 
 1861              	@ 0 "" 2
 1862              		.thumb
 1863              		.syntax unified
 1864              	.L153:
 1865 0080 FEE7     		b	.L153
 1866              	.L152:
1479:FreeRTOS\source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1867              		.loc 1 1479 0 is_stmt 1
 1868 0082 FFF7FEFF 		bl	vPortExitCritical
 1869              	.LVL242:
1481:FreeRTOS\source/queue.c **** 				}
 1870              		.loc 1 1481 0
 1871 0086 0020     		movs	r0, #0
 1872 0088 62E0     		b	.L150
 1873              	.L151:
1483:FreeRTOS\source/queue.c **** 				{
 1874              		.loc 1 1483 0
 1875 008a 002E     		cmp	r6, #0
 1876 008c 03D1     		bne	.L154
1487:FreeRTOS\source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1877              		.loc 1 1487 0
 1878 008e 02A8     		add	r0, sp, #8
 1879 0090 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1880              	.LVL243:
1488:FreeRTOS\source/queue.c **** 				}
 1881              		.loc 1 1488 0
 1882 0094 0136     		adds	r6, r6, #1
 1883              	.LVL244:
 1884              	.L154:
 1885              	.LBE10:
1497:FreeRTOS\source/queue.c **** 
 1886              		.loc 1 1497 0
 1887 0096 FFF7FEFF 		bl	vPortExitCritical
 1888              	.LVL245:
1502:FreeRTOS\source/queue.c **** 		prvLockQueue( pxQueue );
 1889              		.loc 1 1502 0
 1890 009a FFF7FEFF 		bl	vTaskSuspendAll
 1891              	.LVL246:
1503:FreeRTOS\source/queue.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 80


 1892              		.loc 1 1503 0
 1893 009e FFF7FEFF 		bl	vPortEnterCritical
 1894              	.LVL247:
 1895 00a2 4423     		movs	r3, #68
 1896 00a4 E35C     		ldrb	r3, [r4, r3]
 1897 00a6 5BB2     		sxtb	r3, r3
 1898 00a8 0133     		adds	r3, r3, #1
 1899 00aa 02D1     		bne	.L155
1503:FreeRTOS\source/queue.c **** 
 1900              		.loc 1 1503 0 is_stmt 0 discriminator 1
 1901 00ac 0022     		movs	r2, #0
 1902 00ae 4423     		movs	r3, #68
 1903 00b0 E254     		strb	r2, [r4, r3]
 1904              	.L155:
1503:FreeRTOS\source/queue.c **** 
 1905              		.loc 1 1503 0 discriminator 3
 1906 00b2 4523     		movs	r3, #69
 1907 00b4 E35C     		ldrb	r3, [r4, r3]
 1908 00b6 5BB2     		sxtb	r3, r3
 1909 00b8 0133     		adds	r3, r3, #1
 1910 00ba 02D1     		bne	.L156
1503:FreeRTOS\source/queue.c **** 
 1911              		.loc 1 1503 0 discriminator 4
 1912 00bc 0022     		movs	r2, #0
 1913 00be 4523     		movs	r3, #69
 1914 00c0 E254     		strb	r2, [r4, r3]
 1915              	.L156:
1503:FreeRTOS\source/queue.c **** 
 1916              		.loc 1 1503 0 discriminator 6
 1917 00c2 FFF7FEFF 		bl	vPortExitCritical
 1918              	.LVL248:
1506:FreeRTOS\source/queue.c **** 		{
 1919              		.loc 1 1506 0 is_stmt 1 discriminator 6
 1920 00c6 01A9     		add	r1, sp, #4
 1921              	.LVL249:
 1922 00c8 02A8     		add	r0, sp, #8
 1923 00ca FFF7FEFF 		bl	xTaskCheckForTimeOut
 1924              	.LVL250:
 1925 00ce 0028     		cmp	r0, #0
 1926 00d0 24D1     		bne	.L157
1512:FreeRTOS\source/queue.c **** 			{
 1927              		.loc 1 1512 0
 1928 00d2 2000     		movs	r0, r4
 1929 00d4 FFF7FEFF 		bl	prvIsQueueEmpty
 1930              	.LVL251:
 1931 00d8 0028     		cmp	r0, #0
 1932 00da 19D0     		beq	.L158
1518:FreeRTOS\source/queue.c **** 					{
 1933              		.loc 1 1518 0
 1934 00dc 2368     		ldr	r3, [r4]
 1935 00de 002B     		cmp	r3, #0
 1936 00e0 07D1     		bne	.L159
1520:FreeRTOS\source/queue.c **** 						{
 1937              		.loc 1 1520 0
 1938 00e2 FFF7FEFF 		bl	vPortEnterCritical
 1939              	.LVL252:
1522:FreeRTOS\source/queue.c **** 						}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 81


 1940              		.loc 1 1522 0
 1941 00e6 6068     		ldr	r0, [r4, #4]
 1942 00e8 FFF7FEFF 		bl	xTaskPriorityInherit
 1943              	.LVL253:
 1944 00ec 0500     		movs	r5, r0
 1945              	.LVL254:
1524:FreeRTOS\source/queue.c **** 					}
 1946              		.loc 1 1524 0
 1947 00ee FFF7FEFF 		bl	vPortExitCritical
 1948              	.LVL255:
 1949              	.L159:
1533:FreeRTOS\source/queue.c **** 				prvUnlockQueue( pxQueue );
 1950              		.loc 1 1533 0
 1951 00f2 2000     		movs	r0, r4
 1952 00f4 2430     		adds	r0, r0, #36
 1953 00f6 0199     		ldr	r1, [sp, #4]
 1954 00f8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1955              	.LVL256:
1534:FreeRTOS\source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1956              		.loc 1 1534 0
 1957 00fc 2000     		movs	r0, r4
 1958 00fe FFF7FEFF 		bl	prvUnlockQueue
 1959              	.LVL257:
1535:FreeRTOS\source/queue.c **** 				{
 1960              		.loc 1 1535 0
 1961 0102 FFF7FEFF 		bl	xTaskResumeAll
 1962              	.LVL258:
 1963 0106 0028     		cmp	r0, #0
 1964 0108 98D1     		bne	.L145
1537:FreeRTOS\source/queue.c **** 				}
 1965              		.loc 1 1537 0
 1966 010a FFF7FEFF 		bl	vPortYield
 1967              	.LVL259:
 1968 010e 95E7     		b	.L145
 1969              	.L158:
1548:FreeRTOS\source/queue.c **** 				( void ) xTaskResumeAll();
 1970              		.loc 1 1548 0
 1971 0110 2000     		movs	r0, r4
 1972 0112 FFF7FEFF 		bl	prvUnlockQueue
 1973              	.LVL260:
1549:FreeRTOS\source/queue.c **** 			}
 1974              		.loc 1 1549 0
 1975 0116 FFF7FEFF 		bl	xTaskResumeAll
 1976              	.LVL261:
 1977 011a 8FE7     		b	.L145
 1978              	.L157:
1555:FreeRTOS\source/queue.c **** 			( void ) xTaskResumeAll();
 1979              		.loc 1 1555 0
 1980 011c 2000     		movs	r0, r4
 1981 011e FFF7FEFF 		bl	prvUnlockQueue
 1982              	.LVL262:
1556:FreeRTOS\source/queue.c **** 
 1983              		.loc 1 1556 0
 1984 0122 FFF7FEFF 		bl	xTaskResumeAll
 1985              	.LVL263:
1562:FreeRTOS\source/queue.c **** 			{
 1986              		.loc 1 1562 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 82


 1987 0126 2000     		movs	r0, r4
 1988 0128 FFF7FEFF 		bl	prvIsQueueEmpty
 1989              	.LVL264:
 1990 012c 0028     		cmp	r0, #0
 1991 012e 85D0     		beq	.L145
1569:FreeRTOS\source/queue.c **** 					{
 1992              		.loc 1 1569 0
 1993 0130 002D     		cmp	r5, #0
 1994 0132 0CD0     		beq	.L164
1571:FreeRTOS\source/queue.c **** 						{
 1995              		.loc 1 1571 0
 1996 0134 FFF7FEFF 		bl	vPortEnterCritical
 1997              	.LVL265:
 1998              	.LBB11:
1580:FreeRTOS\source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
 1999              		.loc 1 1580 0
 2000 0138 2000     		movs	r0, r4
 2001 013a FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2002              	.LVL266:
 2003 013e 0100     		movs	r1, r0
 2004              	.LVL267:
1581:FreeRTOS\source/queue.c **** 						}
 2005              		.loc 1 1581 0
 2006 0140 6068     		ldr	r0, [r4, #4]
 2007              	.LVL268:
 2008 0142 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2009              	.LVL269:
 2010              	.LBE11:
1583:FreeRTOS\source/queue.c **** 					}
 2011              		.loc 1 1583 0
 2012 0146 FFF7FEFF 		bl	vPortExitCritical
 2013              	.LVL270:
1589:FreeRTOS\source/queue.c **** 			}
 2014              		.loc 1 1589 0
 2015 014a 0020     		movs	r0, #0
 2016 014c 00E0     		b	.L150
 2017              	.L164:
 2018 014e 0020     		movs	r0, #0
 2019              	.L150:
1597:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 2020              		.loc 1 1597 0
 2021 0150 04B0     		add	sp, sp, #16
 2022              		@ sp needed
 2023              	.LVL271:
 2024              	.LVL272:
 2025              	.LVL273:
 2026 0152 70BD     		pop	{r4, r5, r6, pc}
 2027              		.cfi_endproc
 2028              	.LFE41:
 2029              		.size	xQueueSemaphoreTake, .-xQueueSemaphoreTake
 2030              		.section	.text.xQueuePeek,"ax",%progbits
 2031              		.align	2
 2032              		.global	xQueuePeek
 2033              		.code	16
 2034              		.thumb_func
 2035              		.type	xQueuePeek, %function
 2036              	xQueuePeek:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 83


 2037              	.LFB42:
1601:FreeRTOS\source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2038              		.loc 1 1601 0
 2039              		.cfi_startproc
 2040              		@ args = 0, pretend = 0, frame = 16
 2041              		@ frame_needed = 0, uses_anonymous_args = 0
 2042              	.LVL274:
 2043 0000 70B5     		push	{r4, r5, r6, lr}
 2044              		.cfi_def_cfa_offset 16
 2045              		.cfi_offset 4, -16
 2046              		.cfi_offset 5, -12
 2047              		.cfi_offset 6, -8
 2048              		.cfi_offset 14, -4
 2049 0002 84B0     		sub	sp, sp, #16
 2050              		.cfi_def_cfa_offset 32
 2051 0004 0400     		movs	r4, r0
 2052 0006 0D00     		movs	r5, r1
 2053 0008 0192     		str	r2, [sp, #4]
 2054              	.LVL275:
1608:FreeRTOS\source/queue.c **** 
 2055              		.loc 1 1608 0
 2056 000a 0028     		cmp	r0, #0
 2057 000c 01D1     		bne	.L166
1608:FreeRTOS\source/queue.c **** 
 2058              		.loc 1 1608 0 is_stmt 0 discriminator 1
 2059              		.syntax divided
 2060              	@ 1608 "FreeRTOS\source\queue.c" 1
 2061 000e 72B6     		 cpsid i 
 2062              	@ 0 "" 2
 2063              		.thumb
 2064              		.syntax unified
 2065              	.L167:
 2066 0010 FEE7     		b	.L167
 2067              	.L166:
1612:FreeRTOS\source/queue.c **** 
 2068              		.loc 1 1612 0 is_stmt 1
 2069 0012 0029     		cmp	r1, #0
 2070 0014 04D1     		bne	.L184
1612:FreeRTOS\source/queue.c **** 
 2071              		.loc 1 1612 0 is_stmt 0 discriminator 2
 2072 0016 036C     		ldr	r3, [r0, #64]
 2073 0018 002B     		cmp	r3, #0
 2074 001a 03D1     		bne	.L185
1612:FreeRTOS\source/queue.c **** 
 2075              		.loc 1 1612 0
 2076 001c 0133     		adds	r3, r3, #1
 2077 001e 02E0     		b	.L168
 2078              	.L184:
 2079 0020 0123     		movs	r3, #1
 2080 0022 00E0     		b	.L168
 2081              	.L185:
 2082 0024 0023     		movs	r3, #0
 2083              	.L168:
1612:FreeRTOS\source/queue.c **** 
 2084              		.loc 1 1612 0 discriminator 6
 2085 0026 002B     		cmp	r3, #0
 2086 0028 01D1     		bne	.L169
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 84


1612:FreeRTOS\source/queue.c **** 
 2087              		.loc 1 1612 0 discriminator 7
 2088              		.syntax divided
 2089              	@ 1612 "FreeRTOS\source\queue.c" 1
 2090 002a 72B6     		 cpsid i 
 2091              	@ 0 "" 2
 2092              		.thumb
 2093              		.syntax unified
 2094              	.L170:
 2095 002c FEE7     		b	.L170
 2096              	.L169:
1617:FreeRTOS\source/queue.c **** 	}
 2097              		.loc 1 1617 0 is_stmt 1
 2098 002e FFF7FEFF 		bl	xTaskGetSchedulerState
 2099              	.LVL276:
 2100 0032 0028     		cmp	r0, #0
 2101 0034 04D1     		bne	.L186
1617:FreeRTOS\source/queue.c **** 	}
 2102              		.loc 1 1617 0 is_stmt 0 discriminator 2
 2103 0036 019B     		ldr	r3, [sp, #4]
 2104 0038 002B     		cmp	r3, #0
 2105 003a 03D1     		bne	.L187
1617:FreeRTOS\source/queue.c **** 	}
 2106              		.loc 1 1617 0
 2107 003c 0133     		adds	r3, r3, #1
 2108 003e 02E0     		b	.L171
 2109              	.L186:
 2110 0040 0123     		movs	r3, #1
 2111 0042 00E0     		b	.L171
 2112              	.L187:
 2113 0044 0023     		movs	r3, #0
 2114              	.L171:
1617:FreeRTOS\source/queue.c **** 	}
 2115              		.loc 1 1617 0 discriminator 6
 2116 0046 002B     		cmp	r3, #0
 2117 0048 01D1     		bne	.L188
1617:FreeRTOS\source/queue.c **** 	}
 2118              		.loc 1 1617 0 discriminator 7
 2119              		.syntax divided
 2120              	@ 1617 "FreeRTOS\source\queue.c" 1
 2121 004a 72B6     		 cpsid i 
 2122              	@ 0 "" 2
 2123              		.thumb
 2124              		.syntax unified
 2125              	.L173:
 2126 004c FEE7     		b	.L173
 2127              	.L188:
 2128 004e 0026     		movs	r6, #0
 2129              	.LVL277:
 2130              	.L172:
1628:FreeRTOS\source/queue.c **** 		{
 2131              		.loc 1 1628 0 is_stmt 1
 2132 0050 FFF7FEFF 		bl	vPortEnterCritical
 2133              	.LVL278:
 2134              	.LBB12:
1630:FreeRTOS\source/queue.c **** 
 2135              		.loc 1 1630 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 85


 2136 0054 A36B     		ldr	r3, [r4, #56]
 2137              	.LVL279:
1634:FreeRTOS\source/queue.c **** 			{
 2138              		.loc 1 1634 0
 2139 0056 002B     		cmp	r3, #0
 2140 0058 14D0     		beq	.L174
1639:FreeRTOS\source/queue.c **** 
 2141              		.loc 1 1639 0
 2142 005a E668     		ldr	r6, [r4, #12]
 2143              	.LVL280:
1641:FreeRTOS\source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2144              		.loc 1 1641 0
 2145 005c 2900     		movs	r1, r5
 2146 005e 2000     		movs	r0, r4
 2147 0060 FFF7FEFF 		bl	prvCopyDataFromQueue
 2148              	.LVL281:
1645:FreeRTOS\source/queue.c **** 
 2149              		.loc 1 1645 0
 2150 0064 E660     		str	r6, [r4, #12]
1649:FreeRTOS\source/queue.c **** 				{
 2151              		.loc 1 1649 0
 2152 0066 636A     		ldr	r3, [r4, #36]
 2153 0068 002B     		cmp	r3, #0
 2154 006a 07D0     		beq	.L175
1651:FreeRTOS\source/queue.c **** 					{
 2155              		.loc 1 1651 0
 2156 006c 2000     		movs	r0, r4
 2157 006e 2430     		adds	r0, r0, #36
 2158 0070 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2159              	.LVL282:
 2160 0074 0028     		cmp	r0, #0
 2161 0076 01D0     		beq	.L175
1654:FreeRTOS\source/queue.c **** 					}
 2162              		.loc 1 1654 0
 2163 0078 FFF7FEFF 		bl	vPortYield
 2164              	.LVL283:
 2165              	.L175:
1666:FreeRTOS\source/queue.c **** 				return pdPASS;
 2166              		.loc 1 1666 0
 2167 007c FFF7FEFF 		bl	vPortExitCritical
 2168              	.LVL284:
1667:FreeRTOS\source/queue.c **** 			}
 2169              		.loc 1 1667 0
 2170 0080 0120     		movs	r0, #1
 2171 0082 4FE0     		b	.L176
 2172              	.LVL285:
 2173              	.L174:
1671:FreeRTOS\source/queue.c **** 				{
 2174              		.loc 1 1671 0
 2175 0084 019B     		ldr	r3, [sp, #4]
 2176              	.LVL286:
 2177 0086 002B     		cmp	r3, #0
 2178 0088 03D1     		bne	.L177
1675:FreeRTOS\source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2179              		.loc 1 1675 0
 2180 008a FFF7FEFF 		bl	vPortExitCritical
 2181              	.LVL287:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 86


1677:FreeRTOS\source/queue.c **** 				}
 2182              		.loc 1 1677 0
 2183 008e 0020     		movs	r0, #0
 2184 0090 48E0     		b	.L176
 2185              	.L177:
1679:FreeRTOS\source/queue.c **** 				{
 2186              		.loc 1 1679 0
 2187 0092 002E     		cmp	r6, #0
 2188 0094 03D1     		bne	.L178
1684:FreeRTOS\source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2189              		.loc 1 1684 0
 2190 0096 02A8     		add	r0, sp, #8
 2191 0098 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2192              	.LVL288:
1685:FreeRTOS\source/queue.c **** 				}
 2193              		.loc 1 1685 0
 2194 009c 0136     		adds	r6, r6, #1
 2195              	.LVL289:
 2196              	.L178:
 2197              	.LBE12:
1694:FreeRTOS\source/queue.c **** 
 2198              		.loc 1 1694 0
 2199 009e FFF7FEFF 		bl	vPortExitCritical
 2200              	.LVL290:
1699:FreeRTOS\source/queue.c **** 		prvLockQueue( pxQueue );
 2201              		.loc 1 1699 0
 2202 00a2 FFF7FEFF 		bl	vTaskSuspendAll
 2203              	.LVL291:
1700:FreeRTOS\source/queue.c **** 
 2204              		.loc 1 1700 0
 2205 00a6 FFF7FEFF 		bl	vPortEnterCritical
 2206              	.LVL292:
 2207 00aa 4423     		movs	r3, #68
 2208 00ac E35C     		ldrb	r3, [r4, r3]
 2209 00ae 5BB2     		sxtb	r3, r3
 2210 00b0 0133     		adds	r3, r3, #1
 2211 00b2 02D1     		bne	.L179
1700:FreeRTOS\source/queue.c **** 
 2212              		.loc 1 1700 0 is_stmt 0 discriminator 1
 2213 00b4 0022     		movs	r2, #0
 2214 00b6 4423     		movs	r3, #68
 2215 00b8 E254     		strb	r2, [r4, r3]
 2216              	.L179:
1700:FreeRTOS\source/queue.c **** 
 2217              		.loc 1 1700 0 discriminator 3
 2218 00ba 4523     		movs	r3, #69
 2219 00bc E35C     		ldrb	r3, [r4, r3]
 2220 00be 5BB2     		sxtb	r3, r3
 2221 00c0 0133     		adds	r3, r3, #1
 2222 00c2 02D1     		bne	.L180
1700:FreeRTOS\source/queue.c **** 
 2223              		.loc 1 1700 0 discriminator 4
 2224 00c4 0022     		movs	r2, #0
 2225 00c6 4523     		movs	r3, #69
 2226 00c8 E254     		strb	r2, [r4, r3]
 2227              	.L180:
1700:FreeRTOS\source/queue.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 87


 2228              		.loc 1 1700 0 discriminator 6
 2229 00ca FFF7FEFF 		bl	vPortExitCritical
 2230              	.LVL293:
1703:FreeRTOS\source/queue.c **** 		{
 2231              		.loc 1 1703 0 is_stmt 1 discriminator 6
 2232 00ce 01A9     		add	r1, sp, #4
 2233              	.LVL294:
 2234 00d0 02A8     		add	r0, sp, #8
 2235 00d2 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2236              	.LVL295:
 2237 00d6 0028     		cmp	r0, #0
 2238 00d8 19D1     		bne	.L181
1707:FreeRTOS\source/queue.c **** 			{
 2239              		.loc 1 1707 0
 2240 00da 2000     		movs	r0, r4
 2241 00dc FFF7FEFF 		bl	prvIsQueueEmpty
 2242              	.LVL296:
 2243 00e0 0028     		cmp	r0, #0
 2244 00e2 0ED0     		beq	.L182
1710:FreeRTOS\source/queue.c **** 				prvUnlockQueue( pxQueue );
 2245              		.loc 1 1710 0
 2246 00e4 2000     		movs	r0, r4
 2247 00e6 2430     		adds	r0, r0, #36
 2248 00e8 0199     		ldr	r1, [sp, #4]
 2249 00ea FFF7FEFF 		bl	vTaskPlaceOnEventList
 2250              	.LVL297:
1711:FreeRTOS\source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2251              		.loc 1 1711 0
 2252 00ee 2000     		movs	r0, r4
 2253 00f0 FFF7FEFF 		bl	prvUnlockQueue
 2254              	.LVL298:
1712:FreeRTOS\source/queue.c **** 				{
 2255              		.loc 1 1712 0
 2256 00f4 FFF7FEFF 		bl	xTaskResumeAll
 2257              	.LVL299:
 2258 00f8 0028     		cmp	r0, #0
 2259 00fa A9D1     		bne	.L172
1714:FreeRTOS\source/queue.c **** 				}
 2260              		.loc 1 1714 0
 2261 00fc FFF7FEFF 		bl	vPortYield
 2262              	.LVL300:
 2263 0100 A6E7     		b	.L172
 2264              	.L182:
1725:FreeRTOS\source/queue.c **** 				( void ) xTaskResumeAll();
 2265              		.loc 1 1725 0
 2266 0102 2000     		movs	r0, r4
 2267 0104 FFF7FEFF 		bl	prvUnlockQueue
 2268              	.LVL301:
1726:FreeRTOS\source/queue.c **** 			}
 2269              		.loc 1 1726 0
 2270 0108 FFF7FEFF 		bl	xTaskResumeAll
 2271              	.LVL302:
 2272 010c A0E7     		b	.L172
 2273              	.L181:
1733:FreeRTOS\source/queue.c **** 			( void ) xTaskResumeAll();
 2274              		.loc 1 1733 0
 2275 010e 2000     		movs	r0, r4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 88


 2276 0110 FFF7FEFF 		bl	prvUnlockQueue
 2277              	.LVL303:
1734:FreeRTOS\source/queue.c **** 
 2278              		.loc 1 1734 0
 2279 0114 FFF7FEFF 		bl	xTaskResumeAll
 2280              	.LVL304:
1736:FreeRTOS\source/queue.c **** 			{
 2281              		.loc 1 1736 0
 2282 0118 2000     		movs	r0, r4
 2283 011a FFF7FEFF 		bl	prvIsQueueEmpty
 2284              	.LVL305:
 2285 011e 0028     		cmp	r0, #0
 2286 0120 96D0     		beq	.L172
1739:FreeRTOS\source/queue.c **** 			}
 2287              		.loc 1 1739 0
 2288 0122 0020     		movs	r0, #0
 2289              	.LVL306:
 2290              	.L176:
1747:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 2291              		.loc 1 1747 0
 2292 0124 04B0     		add	sp, sp, #16
 2293              		@ sp needed
 2294              	.LVL307:
 2295              	.LVL308:
 2296 0126 70BD     		pop	{r4, r5, r6, pc}
 2297              		.cfi_endproc
 2298              	.LFE42:
 2299              		.size	xQueuePeek, .-xQueuePeek
 2300              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2301              		.align	2
 2302              		.global	xQueueReceiveFromISR
 2303              		.code	16
 2304              		.thumb_func
 2305              		.type	xQueueReceiveFromISR, %function
 2306              	xQueueReceiveFromISR:
 2307              	.LFB43:
1751:FreeRTOS\source/queue.c **** BaseType_t xReturn;
 2308              		.loc 1 1751 0
 2309              		.cfi_startproc
 2310              		@ args = 0, pretend = 0, frame = 8
 2311              		@ frame_needed = 0, uses_anonymous_args = 0
 2312              	.LVL309:
 2313 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2314              		.cfi_def_cfa_offset 20
 2315              		.cfi_offset 4, -20
 2316              		.cfi_offset 5, -16
 2317              		.cfi_offset 6, -12
 2318              		.cfi_offset 7, -8
 2319              		.cfi_offset 14, -4
 2320 0002 83B0     		sub	sp, sp, #12
 2321              		.cfi_def_cfa_offset 32
 2322 0004 0400     		movs	r4, r0
 2323 0006 0091     		str	r1, [sp]
 2324 0008 1600     		movs	r6, r2
 2325              	.LVL310:
1756:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2326              		.loc 1 1756 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 89


 2327 000a 0028     		cmp	r0, #0
 2328 000c 01D1     		bne	.L190
1756:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2329              		.loc 1 1756 0 is_stmt 0 discriminator 1
 2330              		.syntax divided
 2331              	@ 1756 "FreeRTOS\source\queue.c" 1
 2332 000e 72B6     		 cpsid i 
 2333              	@ 0 "" 2
 2334              		.thumb
 2335              		.syntax unified
 2336              	.L191:
 2337 0010 FEE7     		b	.L191
 2338              	.L190:
1757:FreeRTOS\source/queue.c **** 
 2339              		.loc 1 1757 0 is_stmt 1
 2340 0012 009B     		ldr	r3, [sp]
 2341 0014 002B     		cmp	r3, #0
 2342 0016 04D1     		bne	.L197
1757:FreeRTOS\source/queue.c **** 
 2343              		.loc 1 1757 0 is_stmt 0 discriminator 2
 2344 0018 036C     		ldr	r3, [r0, #64]
 2345 001a 002B     		cmp	r3, #0
 2346 001c 03D1     		bne	.L198
1757:FreeRTOS\source/queue.c **** 
 2347              		.loc 1 1757 0
 2348 001e 0133     		adds	r3, r3, #1
 2349 0020 02E0     		b	.L192
 2350              	.L197:
 2351 0022 0123     		movs	r3, #1
 2352 0024 00E0     		b	.L192
 2353              	.L198:
 2354 0026 0023     		movs	r3, #0
 2355              	.L192:
1757:FreeRTOS\source/queue.c **** 
 2356              		.loc 1 1757 0 discriminator 6
 2357 0028 002B     		cmp	r3, #0
 2358 002a 01D1     		bne	.L193
1757:FreeRTOS\source/queue.c **** 
 2359              		.loc 1 1757 0 discriminator 7
 2360              		.syntax divided
 2361              	@ 1757 "FreeRTOS\source\queue.c" 1
 2362 002c 72B6     		 cpsid i 
 2363              	@ 0 "" 2
 2364              		.thumb
 2365              		.syntax unified
 2366              	.L194:
 2367 002e FEE7     		b	.L194
 2368              	.L193:
1775:FreeRTOS\source/queue.c **** 	{
 2369              		.loc 1 1775 0 is_stmt 1
 2370 0030 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 2371              	.LVL311:
 2372 0034 0190     		str	r0, [sp, #4]
 2373              	.LVL312:
 2374              	.LBB13:
1777:FreeRTOS\source/queue.c **** 
 2375              		.loc 1 1777 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 90


 2376 0036 A76B     		ldr	r7, [r4, #56]
 2377              	.LVL313:
1780:FreeRTOS\source/queue.c **** 		{
 2378              		.loc 1 1780 0
 2379 0038 002F     		cmp	r7, #0
 2380 003a 1FD0     		beq	.L199
 2381              	.LBB14:
1782:FreeRTOS\source/queue.c **** 
 2382              		.loc 1 1782 0
 2383 003c 4423     		movs	r3, #68
 2384 003e E55C     		ldrb	r5, [r4, r3]
 2385 0040 6DB2     		sxtb	r5, r5
 2386              	.LVL314:
1786:FreeRTOS\source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2387              		.loc 1 1786 0
 2388 0042 0099     		ldr	r1, [sp]
 2389 0044 2000     		movs	r0, r4
 2390              	.LVL315:
 2391 0046 FFF7FEFF 		bl	prvCopyDataFromQueue
 2392              	.LVL316:
1787:FreeRTOS\source/queue.c **** 
 2393              		.loc 1 1787 0
 2394 004a 7B1E     		subs	r3, r7, #1
 2395 004c A363     		str	r3, [r4, #56]
1793:FreeRTOS\source/queue.c **** 			{
 2396              		.loc 1 1793 0
 2397 004e 6B1C     		adds	r3, r5, #1
 2398 0050 0ED1     		bne	.L196
1795:FreeRTOS\source/queue.c **** 				{
 2399              		.loc 1 1795 0
 2400 0052 2369     		ldr	r3, [r4, #16]
 2401 0054 002B     		cmp	r3, #0
 2402 0056 13D0     		beq	.L200
1797:FreeRTOS\source/queue.c **** 					{
 2403              		.loc 1 1797 0
 2404 0058 2000     		movs	r0, r4
 2405 005a 1030     		adds	r0, r0, #16
 2406 005c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2407              	.LVL317:
 2408 0060 0028     		cmp	r0, #0
 2409 0062 0FD0     		beq	.L201
1801:FreeRTOS\source/queue.c **** 						{
 2410              		.loc 1 1801 0
 2411 0064 002E     		cmp	r6, #0
 2412 0066 0FD0     		beq	.L202
1803:FreeRTOS\source/queue.c **** 						}
 2413              		.loc 1 1803 0
 2414 0068 0123     		movs	r3, #1
 2415 006a 3360     		str	r3, [r6]
1827:FreeRTOS\source/queue.c **** 		}
 2416              		.loc 1 1827 0
 2417 006c 0124     		movs	r4, #1
 2418              	.LVL318:
 2419 006e 0CE0     		b	.L195
 2420              	.LVL319:
 2421              	.L196:
1824:FreeRTOS\source/queue.c **** 			}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 91


 2422              		.loc 1 1824 0
 2423 0070 0135     		adds	r5, r5, #1
 2424              	.LVL320:
 2425 0072 6DB2     		sxtb	r5, r5
 2426              	.LVL321:
 2427 0074 4423     		movs	r3, #68
 2428 0076 E554     		strb	r5, [r4, r3]
1827:FreeRTOS\source/queue.c **** 		}
 2429              		.loc 1 1827 0
 2430 0078 0124     		movs	r4, #1
 2431              	.LVL322:
 2432 007a 06E0     		b	.L195
 2433              	.LVL323:
 2434              	.L199:
 2435              	.LBE14:
1831:FreeRTOS\source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2436              		.loc 1 1831 0
 2437 007c 0024     		movs	r4, #0
 2438              	.LVL324:
 2439 007e 04E0     		b	.L195
 2440              	.LVL325:
 2441              	.L200:
 2442              	.LBB15:
1827:FreeRTOS\source/queue.c **** 		}
 2443              		.loc 1 1827 0
 2444 0080 0124     		movs	r4, #1
 2445              	.LVL326:
 2446 0082 02E0     		b	.L195
 2447              	.LVL327:
 2448              	.L201:
 2449 0084 0124     		movs	r4, #1
 2450              	.LVL328:
 2451 0086 00E0     		b	.L195
 2452              	.LVL329:
 2453              	.L202:
 2454 0088 0124     		movs	r4, #1
 2455              	.LVL330:
 2456              	.L195:
 2457              	.LBE15:
 2458              	.LBE13:
1835:FreeRTOS\source/queue.c **** 
 2459              		.loc 1 1835 0
 2460 008a 0198     		ldr	r0, [sp, #4]
 2461 008c FFF7FEFF 		bl	vClearInterruptMaskFromISR
 2462              	.LVL331:
1838:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 2463              		.loc 1 1838 0
 2464 0090 2000     		movs	r0, r4
 2465 0092 03B0     		add	sp, sp, #12
 2466              	.LVL332:
 2467              		@ sp needed
 2468              	.LVL333:
 2469              	.LVL334:
 2470              	.LVL335:
 2471 0094 F0BD     		pop	{r4, r5, r6, r7, pc}
 2472              		.cfi_endproc
 2473              	.LFE43:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 92


 2474              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 2475 0096 C046     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2476              		.align	2
 2477              		.global	xQueuePeekFromISR
 2478              		.code	16
 2479              		.thumb_func
 2480              		.type	xQueuePeekFromISR, %function
 2481              	xQueuePeekFromISR:
 2482              	.LFB44:
1842:FreeRTOS\source/queue.c **** BaseType_t xReturn;
 2483              		.loc 1 1842 0
 2484              		.cfi_startproc
 2485              		@ args = 0, pretend = 0, frame = 0
 2486              		@ frame_needed = 0, uses_anonymous_args = 0
 2487              	.LVL336:
 2488 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2489              		.cfi_def_cfa_offset 24
 2490              		.cfi_offset 3, -24
 2491              		.cfi_offset 4, -20
 2492              		.cfi_offset 5, -16
 2493              		.cfi_offset 6, -12
 2494              		.cfi_offset 7, -8
 2495              		.cfi_offset 14, -4
 2496 0002 0400     		movs	r4, r0
 2497 0004 0D00     		movs	r5, r1
 2498              	.LVL337:
1848:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2499              		.loc 1 1848 0
 2500 0006 0028     		cmp	r0, #0
 2501 0008 01D1     		bne	.L204
1848:FreeRTOS\source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2502              		.loc 1 1848 0 is_stmt 0 discriminator 1
 2503              		.syntax divided
 2504              	@ 1848 "FreeRTOS\source\queue.c" 1
 2505 000a 72B6     		 cpsid i 
 2506              	@ 0 "" 2
 2507              		.thumb
 2508              		.syntax unified
 2509              	.L205:
 2510 000c FEE7     		b	.L205
 2511              	.L204:
1849:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2512              		.loc 1 1849 0 is_stmt 1
 2513 000e 0029     		cmp	r1, #0
 2514 0010 04D1     		bne	.L212
1849:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2515              		.loc 1 1849 0 is_stmt 0 discriminator 2
 2516 0012 036C     		ldr	r3, [r0, #64]
 2517 0014 002B     		cmp	r3, #0
 2518 0016 03D1     		bne	.L213
1849:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2519              		.loc 1 1849 0
 2520 0018 0133     		adds	r3, r3, #1
 2521 001a 02E0     		b	.L206
 2522              	.L212:
 2523 001c 0123     		movs	r3, #1
 2524 001e 00E0     		b	.L206
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 93


 2525              	.L213:
 2526 0020 0023     		movs	r3, #0
 2527              	.L206:
1849:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2528              		.loc 1 1849 0 discriminator 6
 2529 0022 002B     		cmp	r3, #0
 2530 0024 01D1     		bne	.L207
1849:FreeRTOS\source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2531              		.loc 1 1849 0 discriminator 7
 2532              		.syntax divided
 2533              	@ 1849 "FreeRTOS\source\queue.c" 1
 2534 0026 72B6     		 cpsid i 
 2535              	@ 0 "" 2
 2536              		.thumb
 2537              		.syntax unified
 2538              	.L208:
 2539 0028 FEE7     		b	.L208
 2540              	.L207:
1850:FreeRTOS\source/queue.c **** 
 2541              		.loc 1 1850 0 is_stmt 1
 2542 002a 236C     		ldr	r3, [r4, #64]
 2543 002c 002B     		cmp	r3, #0
 2544 002e 01D1     		bne	.L209
1850:FreeRTOS\source/queue.c **** 
 2545              		.loc 1 1850 0 is_stmt 0 discriminator 1
 2546              		.syntax divided
 2547              	@ 1850 "FreeRTOS\source\queue.c" 1
 2548 0030 72B6     		 cpsid i 
 2549              	@ 0 "" 2
 2550              		.thumb
 2551              		.syntax unified
 2552              	.L210:
 2553 0032 FEE7     		b	.L210
 2554              	.L209:
1868:FreeRTOS\source/queue.c **** 	{
 2555              		.loc 1 1868 0 is_stmt 1
 2556 0034 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 2557              	.LVL338:
 2558 0038 0600     		movs	r6, r0
 2559              	.LVL339:
1871:FreeRTOS\source/queue.c **** 		{
 2560              		.loc 1 1871 0
 2561 003a A36B     		ldr	r3, [r4, #56]
 2562 003c 002B     		cmp	r3, #0
 2563 003e 07D0     		beq	.L214
1877:FreeRTOS\source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2564              		.loc 1 1877 0
 2565 0040 E768     		ldr	r7, [r4, #12]
 2566              	.LVL340:
1878:FreeRTOS\source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2567              		.loc 1 1878 0
 2568 0042 2900     		movs	r1, r5
 2569 0044 2000     		movs	r0, r4
 2570              	.LVL341:
 2571 0046 FFF7FEFF 		bl	prvCopyDataFromQueue
 2572              	.LVL342:
1879:FreeRTOS\source/queue.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 94


 2573              		.loc 1 1879 0
 2574 004a E760     		str	r7, [r4, #12]
 2575              	.LVL343:
1881:FreeRTOS\source/queue.c **** 		}
 2576              		.loc 1 1881 0
 2577 004c 0124     		movs	r4, #1
 2578              	.LVL344:
 2579 004e 00E0     		b	.L211
 2580              	.LVL345:
 2581              	.L214:
1885:FreeRTOS\source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2582              		.loc 1 1885 0
 2583 0050 0024     		movs	r4, #0
 2584              	.LVL346:
 2585              	.L211:
1889:FreeRTOS\source/queue.c **** 
 2586              		.loc 1 1889 0
 2587 0052 3000     		movs	r0, r6
 2588 0054 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 2589              	.LVL347:
1892:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 2590              		.loc 1 1892 0
 2591 0058 2000     		movs	r0, r4
 2592              		@ sp needed
 2593              	.LVL348:
 2594              	.LVL349:
 2595              	.LVL350:
 2596 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2597              		.cfi_endproc
 2598              	.LFE44:
 2599              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 2600              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2601              		.align	2
 2602              		.global	uxQueueMessagesWaiting
 2603              		.code	16
 2604              		.thumb_func
 2605              		.type	uxQueueMessagesWaiting, %function
 2606              	uxQueueMessagesWaiting:
 2607              	.LFB45:
1896:FreeRTOS\source/queue.c **** UBaseType_t uxReturn;
 2608              		.loc 1 1896 0
 2609              		.cfi_startproc
 2610              		@ args = 0, pretend = 0, frame = 0
 2611              		@ frame_needed = 0, uses_anonymous_args = 0
 2612              	.LVL351:
 2613 0000 10B5     		push	{r4, lr}
 2614              		.cfi_def_cfa_offset 8
 2615              		.cfi_offset 4, -8
 2616              		.cfi_offset 14, -4
 2617 0002 041E     		subs	r4, r0, #0
1899:FreeRTOS\source/queue.c **** 
 2618              		.loc 1 1899 0
 2619 0004 01D1     		bne	.L216
1899:FreeRTOS\source/queue.c **** 
 2620              		.loc 1 1899 0 is_stmt 0 discriminator 1
 2621              		.syntax divided
 2622              	@ 1899 "FreeRTOS\source\queue.c" 1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 95


 2623 0006 72B6     		 cpsid i 
 2624              	@ 0 "" 2
 2625              		.thumb
 2626              		.syntax unified
 2627              	.L217:
 2628 0008 FEE7     		b	.L217
 2629              	.L216:
1901:FreeRTOS\source/queue.c **** 	{
 2630              		.loc 1 1901 0 is_stmt 1
 2631 000a FFF7FEFF 		bl	vPortEnterCritical
 2632              	.LVL352:
1903:FreeRTOS\source/queue.c **** 	}
 2633              		.loc 1 1903 0
 2634 000e A46B     		ldr	r4, [r4, #56]
 2635              	.LVL353:
1905:FreeRTOS\source/queue.c **** 
 2636              		.loc 1 1905 0
 2637 0010 FFF7FEFF 		bl	vPortExitCritical
 2638              	.LVL354:
1908:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 2639              		.loc 1 1908 0
 2640 0014 2000     		movs	r0, r4
 2641              		@ sp needed
 2642              	.LVL355:
 2643 0016 10BD     		pop	{r4, pc}
 2644              		.cfi_endproc
 2645              	.LFE45:
 2646              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 2647              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2648              		.align	2
 2649              		.global	uxQueueSpacesAvailable
 2650              		.code	16
 2651              		.thumb_func
 2652              		.type	uxQueueSpacesAvailable, %function
 2653              	uxQueueSpacesAvailable:
 2654              	.LFB46:
1912:FreeRTOS\source/queue.c **** UBaseType_t uxReturn;
 2655              		.loc 1 1912 0
 2656              		.cfi_startproc
 2657              		@ args = 0, pretend = 0, frame = 0
 2658              		@ frame_needed = 0, uses_anonymous_args = 0
 2659              	.LVL356:
 2660 0000 10B5     		push	{r4, lr}
 2661              		.cfi_def_cfa_offset 8
 2662              		.cfi_offset 4, -8
 2663              		.cfi_offset 14, -4
 2664 0002 041E     		subs	r4, r0, #0
 2665              	.LVL357:
1917:FreeRTOS\source/queue.c **** 
 2666              		.loc 1 1917 0
 2667 0004 01D1     		bne	.L219
1917:FreeRTOS\source/queue.c **** 
 2668              		.loc 1 1917 0 is_stmt 0 discriminator 1
 2669              		.syntax divided
 2670              	@ 1917 "FreeRTOS\source\queue.c" 1
 2671 0006 72B6     		 cpsid i 
 2672              	@ 0 "" 2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 96


 2673              		.thumb
 2674              		.syntax unified
 2675              	.L220:
 2676 0008 FEE7     		b	.L220
 2677              	.L219:
1919:FreeRTOS\source/queue.c **** 	{
 2678              		.loc 1 1919 0 is_stmt 1
 2679 000a FFF7FEFF 		bl	vPortEnterCritical
 2680              	.LVL358:
1921:FreeRTOS\source/queue.c **** 	}
 2681              		.loc 1 1921 0
 2682 000e E36B     		ldr	r3, [r4, #60]
 2683 0010 A46B     		ldr	r4, [r4, #56]
 2684              	.LVL359:
 2685 0012 1C1B     		subs	r4, r3, r4
 2686              	.LVL360:
1923:FreeRTOS\source/queue.c **** 
 2687              		.loc 1 1923 0
 2688 0014 FFF7FEFF 		bl	vPortExitCritical
 2689              	.LVL361:
1926:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 2690              		.loc 1 1926 0
 2691 0018 2000     		movs	r0, r4
 2692              		@ sp needed
 2693              	.LVL362:
 2694 001a 10BD     		pop	{r4, pc}
 2695              		.cfi_endproc
 2696              	.LFE46:
 2697              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 2698              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2699              		.align	2
 2700              		.global	uxQueueMessagesWaitingFromISR
 2701              		.code	16
 2702              		.thumb_func
 2703              		.type	uxQueueMessagesWaitingFromISR, %function
 2704              	uxQueueMessagesWaitingFromISR:
 2705              	.LFB47:
1930:FreeRTOS\source/queue.c **** UBaseType_t uxReturn;
 2706              		.loc 1 1930 0
 2707              		.cfi_startproc
 2708              		@ args = 0, pretend = 0, frame = 0
 2709              		@ frame_needed = 0, uses_anonymous_args = 0
 2710              		@ link register save eliminated.
 2711              	.LVL363:
1933:FreeRTOS\source/queue.c **** 
 2712              		.loc 1 1933 0
 2713 0000 0028     		cmp	r0, #0
 2714 0002 01D1     		bne	.L222
1933:FreeRTOS\source/queue.c **** 
 2715              		.loc 1 1933 0 is_stmt 0 discriminator 1
 2716              		.syntax divided
 2717              	@ 1933 "FreeRTOS\source\queue.c" 1
 2718 0004 72B6     		 cpsid i 
 2719              	@ 0 "" 2
 2720              		.thumb
 2721              		.syntax unified
 2722              	.L223:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 97


 2723 0006 FEE7     		b	.L223
 2724              	.L222:
1935:FreeRTOS\source/queue.c **** 
 2725              		.loc 1 1935 0 is_stmt 1
 2726 0008 806B     		ldr	r0, [r0, #56]
 2727              	.LVL364:
1938:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 2728              		.loc 1 1938 0
 2729              		@ sp needed
 2730 000a 7047     		bx	lr
 2731              		.cfi_endproc
 2732              	.LFE47:
 2733              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 2734              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2735              		.align	2
 2736              		.global	xQueueIsQueueEmptyFromISR
 2737              		.code	16
 2738              		.thumb_func
 2739              		.type	xQueueIsQueueEmptyFromISR, %function
 2740              	xQueueIsQueueEmptyFromISR:
 2741              	.LFB54:
2279:FreeRTOS\source/queue.c **** BaseType_t xReturn;
 2742              		.loc 1 2279 0
 2743              		.cfi_startproc
 2744              		@ args = 0, pretend = 0, frame = 0
 2745              		@ frame_needed = 0, uses_anonymous_args = 0
 2746              		@ link register save eliminated.
 2747              	.LVL365:
2282:FreeRTOS\source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2748              		.loc 1 2282 0
 2749 0000 0028     		cmp	r0, #0
 2750 0002 01D1     		bne	.L225
2282:FreeRTOS\source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2751              		.loc 1 2282 0 is_stmt 0 discriminator 1
 2752              		.syntax divided
 2753              	@ 2282 "FreeRTOS\source\queue.c" 1
 2754 0004 72B6     		 cpsid i 
 2755              	@ 0 "" 2
 2756              		.thumb
 2757              		.syntax unified
 2758              	.L226:
 2759 0006 FEE7     		b	.L226
 2760              	.L225:
2283:FreeRTOS\source/queue.c **** 	{
 2761              		.loc 1 2283 0 is_stmt 1
 2762 0008 836B     		ldr	r3, [r0, #56]
 2763 000a 002B     		cmp	r3, #0
 2764 000c 01D1     		bne	.L228
2285:FreeRTOS\source/queue.c **** 	}
 2765              		.loc 1 2285 0
 2766 000e 0120     		movs	r0, #1
 2767              	.LVL366:
 2768 0010 00E0     		b	.L227
 2769              	.LVL367:
 2770              	.L228:
2289:FreeRTOS\source/queue.c **** 	}
 2771              		.loc 1 2289 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 98


 2772 0012 0020     		movs	r0, #0
 2773              	.LVL368:
 2774              	.L227:
2293:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 2775              		.loc 1 2293 0
 2776              		@ sp needed
 2777 0014 7047     		bx	lr
 2778              		.cfi_endproc
 2779              	.LFE54:
 2780              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 2781 0016 C046     		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2782              		.align	2
 2783              		.global	xQueueIsQueueFullFromISR
 2784              		.code	16
 2785              		.thumb_func
 2786              		.type	xQueueIsQueueFullFromISR, %function
 2787              	xQueueIsQueueFullFromISR:
 2788              	.LFB56:
2315:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2316:FreeRTOS\source/queue.c **** 
2317:FreeRTOS\source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2318:FreeRTOS\source/queue.c **** {
 2789              		.loc 1 2318 0
 2790              		.cfi_startproc
 2791              		@ args = 0, pretend = 0, frame = 0
 2792              		@ frame_needed = 0, uses_anonymous_args = 0
 2793              		@ link register save eliminated.
 2794              	.LVL369:
2319:FreeRTOS\source/queue.c **** BaseType_t xReturn;
2320:FreeRTOS\source/queue.c **** 
2321:FreeRTOS\source/queue.c **** 	configASSERT( xQueue );
 2795              		.loc 1 2321 0
 2796 0000 0028     		cmp	r0, #0
 2797 0002 01D1     		bne	.L230
 2798              		.loc 1 2321 0 is_stmt 0 discriminator 1
 2799              		.syntax divided
 2800              	@ 2321 "FreeRTOS\source\queue.c" 1
 2801 0004 72B6     		 cpsid i 
 2802              	@ 0 "" 2
 2803              		.thumb
 2804              		.syntax unified
 2805              	.L231:
 2806 0006 FEE7     		b	.L231
 2807              	.L230:
2322:FreeRTOS\source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2808              		.loc 1 2322 0 is_stmt 1
 2809 0008 826B     		ldr	r2, [r0, #56]
 2810 000a C36B     		ldr	r3, [r0, #60]
 2811 000c 9A42     		cmp	r2, r3
 2812 000e 01D1     		bne	.L233
2323:FreeRTOS\source/queue.c **** 	{
2324:FreeRTOS\source/queue.c **** 		xReturn = pdTRUE;
 2813              		.loc 1 2324 0
 2814 0010 0120     		movs	r0, #1
 2815              	.LVL370:
 2816 0012 00E0     		b	.L232
 2817              	.LVL371:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 99


 2818              	.L233:
2325:FreeRTOS\source/queue.c **** 	}
2326:FreeRTOS\source/queue.c **** 	else
2327:FreeRTOS\source/queue.c **** 	{
2328:FreeRTOS\source/queue.c **** 		xReturn = pdFALSE;
 2819              		.loc 1 2328 0
 2820 0014 0020     		movs	r0, #0
 2821              	.LVL372:
 2822              	.L232:
2329:FreeRTOS\source/queue.c **** 	}
2330:FreeRTOS\source/queue.c **** 
2331:FreeRTOS\source/queue.c **** 	return xReturn;
2332:FreeRTOS\source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2823              		.loc 1 2332 0
 2824              		@ sp needed
 2825 0016 7047     		bx	lr
 2826              		.cfi_endproc
 2827              	.LFE56:
 2828              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 2829              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2830              		.align	2
 2831              		.global	vQueueAddToRegistry
 2832              		.code	16
 2833              		.thumb_func
 2834              		.type	vQueueAddToRegistry, %function
 2835              	vQueueAddToRegistry:
 2836              	.LFB57:
2333:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2334:FreeRTOS\source/queue.c **** 
2335:FreeRTOS\source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2336:FreeRTOS\source/queue.c **** 
2337:FreeRTOS\source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2338:FreeRTOS\source/queue.c **** 	{
2339:FreeRTOS\source/queue.c **** 	BaseType_t xReturn;
2340:FreeRTOS\source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2341:FreeRTOS\source/queue.c **** 
2342:FreeRTOS\source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2343:FreeRTOS\source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2344:FreeRTOS\source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2345:FreeRTOS\source/queue.c **** 		portDISABLE_INTERRUPTS();
2346:FreeRTOS\source/queue.c **** 		{
2347:FreeRTOS\source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2348:FreeRTOS\source/queue.c **** 			{
2349:FreeRTOS\source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2350:FreeRTOS\source/queue.c **** 				posting? */
2351:FreeRTOS\source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2352:FreeRTOS\source/queue.c **** 				{
2353:FreeRTOS\source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2354:FreeRTOS\source/queue.c **** 					return indicating that we need to block. */
2355:FreeRTOS\source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2356:FreeRTOS\source/queue.c **** 					portENABLE_INTERRUPTS();
2357:FreeRTOS\source/queue.c **** 					return errQUEUE_BLOCKED;
2358:FreeRTOS\source/queue.c **** 				}
2359:FreeRTOS\source/queue.c **** 				else
2360:FreeRTOS\source/queue.c **** 				{
2361:FreeRTOS\source/queue.c **** 					portENABLE_INTERRUPTS();
2362:FreeRTOS\source/queue.c **** 					return errQUEUE_FULL;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 100


2363:FreeRTOS\source/queue.c **** 				}
2364:FreeRTOS\source/queue.c **** 			}
2365:FreeRTOS\source/queue.c **** 		}
2366:FreeRTOS\source/queue.c **** 		portENABLE_INTERRUPTS();
2367:FreeRTOS\source/queue.c **** 
2368:FreeRTOS\source/queue.c **** 		portDISABLE_INTERRUPTS();
2369:FreeRTOS\source/queue.c **** 		{
2370:FreeRTOS\source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2371:FreeRTOS\source/queue.c **** 			{
2372:FreeRTOS\source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2373:FreeRTOS\source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2374:FreeRTOS\source/queue.c **** 				xReturn = pdPASS;
2375:FreeRTOS\source/queue.c **** 
2376:FreeRTOS\source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2377:FreeRTOS\source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2378:FreeRTOS\source/queue.c **** 				{
2379:FreeRTOS\source/queue.c **** 					/* In this instance the co-routine could be placed directly
2380:FreeRTOS\source/queue.c **** 					into the ready list as we are within a critical section.
2381:FreeRTOS\source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2382:FreeRTOS\source/queue.c **** 					the event were caused from within an interrupt. */
2383:FreeRTOS\source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2384:FreeRTOS\source/queue.c **** 					{
2385:FreeRTOS\source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2386:FreeRTOS\source/queue.c **** 						that a yield might be appropriate. */
2387:FreeRTOS\source/queue.c **** 						xReturn = errQUEUE_YIELD;
2388:FreeRTOS\source/queue.c **** 					}
2389:FreeRTOS\source/queue.c **** 					else
2390:FreeRTOS\source/queue.c **** 					{
2391:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2392:FreeRTOS\source/queue.c **** 					}
2393:FreeRTOS\source/queue.c **** 				}
2394:FreeRTOS\source/queue.c **** 				else
2395:FreeRTOS\source/queue.c **** 				{
2396:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2397:FreeRTOS\source/queue.c **** 				}
2398:FreeRTOS\source/queue.c **** 			}
2399:FreeRTOS\source/queue.c **** 			else
2400:FreeRTOS\source/queue.c **** 			{
2401:FreeRTOS\source/queue.c **** 				xReturn = errQUEUE_FULL;
2402:FreeRTOS\source/queue.c **** 			}
2403:FreeRTOS\source/queue.c **** 		}
2404:FreeRTOS\source/queue.c **** 		portENABLE_INTERRUPTS();
2405:FreeRTOS\source/queue.c **** 
2406:FreeRTOS\source/queue.c **** 		return xReturn;
2407:FreeRTOS\source/queue.c **** 	}
2408:FreeRTOS\source/queue.c **** 
2409:FreeRTOS\source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2410:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2411:FreeRTOS\source/queue.c **** 
2412:FreeRTOS\source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2413:FreeRTOS\source/queue.c **** 
2414:FreeRTOS\source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2415:FreeRTOS\source/queue.c **** 	{
2416:FreeRTOS\source/queue.c **** 	BaseType_t xReturn;
2417:FreeRTOS\source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2418:FreeRTOS\source/queue.c **** 
2419:FreeRTOS\source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 101


2420:FreeRTOS\source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2421:FreeRTOS\source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2422:FreeRTOS\source/queue.c **** 		portDISABLE_INTERRUPTS();
2423:FreeRTOS\source/queue.c **** 		{
2424:FreeRTOS\source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2425:FreeRTOS\source/queue.c **** 			{
2426:FreeRTOS\source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2427:FreeRTOS\source/queue.c **** 				leave with nothing? */
2428:FreeRTOS\source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2429:FreeRTOS\source/queue.c **** 				{
2430:FreeRTOS\source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2431:FreeRTOS\source/queue.c **** 					indicating that we need to block. */
2432:FreeRTOS\source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2433:FreeRTOS\source/queue.c **** 					portENABLE_INTERRUPTS();
2434:FreeRTOS\source/queue.c **** 					return errQUEUE_BLOCKED;
2435:FreeRTOS\source/queue.c **** 				}
2436:FreeRTOS\source/queue.c **** 				else
2437:FreeRTOS\source/queue.c **** 				{
2438:FreeRTOS\source/queue.c **** 					portENABLE_INTERRUPTS();
2439:FreeRTOS\source/queue.c **** 					return errQUEUE_FULL;
2440:FreeRTOS\source/queue.c **** 				}
2441:FreeRTOS\source/queue.c **** 			}
2442:FreeRTOS\source/queue.c **** 			else
2443:FreeRTOS\source/queue.c **** 			{
2444:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2445:FreeRTOS\source/queue.c **** 			}
2446:FreeRTOS\source/queue.c **** 		}
2447:FreeRTOS\source/queue.c **** 		portENABLE_INTERRUPTS();
2448:FreeRTOS\source/queue.c **** 
2449:FreeRTOS\source/queue.c **** 		portDISABLE_INTERRUPTS();
2450:FreeRTOS\source/queue.c **** 		{
2451:FreeRTOS\source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2452:FreeRTOS\source/queue.c **** 			{
2453:FreeRTOS\source/queue.c **** 				/* Data is available from the queue. */
2454:FreeRTOS\source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2455:FreeRTOS\source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2456:FreeRTOS\source/queue.c **** 				{
2457:FreeRTOS\source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2458:FreeRTOS\source/queue.c **** 				}
2459:FreeRTOS\source/queue.c **** 				else
2460:FreeRTOS\source/queue.c **** 				{
2461:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2462:FreeRTOS\source/queue.c **** 				}
2463:FreeRTOS\source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2464:FreeRTOS\source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2465:FreeRTOS\source/queue.c **** 
2466:FreeRTOS\source/queue.c **** 				xReturn = pdPASS;
2467:FreeRTOS\source/queue.c **** 
2468:FreeRTOS\source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2469:FreeRTOS\source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2470:FreeRTOS\source/queue.c **** 				{
2471:FreeRTOS\source/queue.c **** 					/* In this instance the co-routine could be placed directly
2472:FreeRTOS\source/queue.c **** 					into the ready list as we are within a critical section.
2473:FreeRTOS\source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2474:FreeRTOS\source/queue.c **** 					the event were caused from within an interrupt. */
2475:FreeRTOS\source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2476:FreeRTOS\source/queue.c **** 					{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 102


2477:FreeRTOS\source/queue.c **** 						xReturn = errQUEUE_YIELD;
2478:FreeRTOS\source/queue.c **** 					}
2479:FreeRTOS\source/queue.c **** 					else
2480:FreeRTOS\source/queue.c **** 					{
2481:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2482:FreeRTOS\source/queue.c **** 					}
2483:FreeRTOS\source/queue.c **** 				}
2484:FreeRTOS\source/queue.c **** 				else
2485:FreeRTOS\source/queue.c **** 				{
2486:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2487:FreeRTOS\source/queue.c **** 				}
2488:FreeRTOS\source/queue.c **** 			}
2489:FreeRTOS\source/queue.c **** 			else
2490:FreeRTOS\source/queue.c **** 			{
2491:FreeRTOS\source/queue.c **** 				xReturn = pdFAIL;
2492:FreeRTOS\source/queue.c **** 			}
2493:FreeRTOS\source/queue.c **** 		}
2494:FreeRTOS\source/queue.c **** 		portENABLE_INTERRUPTS();
2495:FreeRTOS\source/queue.c **** 
2496:FreeRTOS\source/queue.c **** 		return xReturn;
2497:FreeRTOS\source/queue.c **** 	}
2498:FreeRTOS\source/queue.c **** 
2499:FreeRTOS\source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2500:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2501:FreeRTOS\source/queue.c **** 
2502:FreeRTOS\source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2503:FreeRTOS\source/queue.c **** 
2504:FreeRTOS\source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2505:FreeRTOS\source/queue.c **** 	{
2506:FreeRTOS\source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2507:FreeRTOS\source/queue.c **** 
2508:FreeRTOS\source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2509:FreeRTOS\source/queue.c **** 		exit without doing anything. */
2510:FreeRTOS\source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2511:FreeRTOS\source/queue.c **** 		{
2512:FreeRTOS\source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2513:FreeRTOS\source/queue.c **** 
2514:FreeRTOS\source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2515:FreeRTOS\source/queue.c **** 			co-routine has not already been woken. */
2516:FreeRTOS\source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2517:FreeRTOS\source/queue.c **** 			{
2518:FreeRTOS\source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2519:FreeRTOS\source/queue.c **** 				{
2520:FreeRTOS\source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2521:FreeRTOS\source/queue.c **** 					{
2522:FreeRTOS\source/queue.c **** 						return pdTRUE;
2523:FreeRTOS\source/queue.c **** 					}
2524:FreeRTOS\source/queue.c **** 					else
2525:FreeRTOS\source/queue.c **** 					{
2526:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2527:FreeRTOS\source/queue.c **** 					}
2528:FreeRTOS\source/queue.c **** 				}
2529:FreeRTOS\source/queue.c **** 				else
2530:FreeRTOS\source/queue.c **** 				{
2531:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2532:FreeRTOS\source/queue.c **** 				}
2533:FreeRTOS\source/queue.c **** 			}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 103


2534:FreeRTOS\source/queue.c **** 			else
2535:FreeRTOS\source/queue.c **** 			{
2536:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2537:FreeRTOS\source/queue.c **** 			}
2538:FreeRTOS\source/queue.c **** 		}
2539:FreeRTOS\source/queue.c **** 		else
2540:FreeRTOS\source/queue.c **** 		{
2541:FreeRTOS\source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2542:FreeRTOS\source/queue.c **** 		}
2543:FreeRTOS\source/queue.c **** 
2544:FreeRTOS\source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2545:FreeRTOS\source/queue.c **** 	}
2546:FreeRTOS\source/queue.c **** 
2547:FreeRTOS\source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2548:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2549:FreeRTOS\source/queue.c **** 
2550:FreeRTOS\source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2551:FreeRTOS\source/queue.c **** 
2552:FreeRTOS\source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2553:FreeRTOS\source/queue.c **** 	{
2554:FreeRTOS\source/queue.c **** 	BaseType_t xReturn;
2555:FreeRTOS\source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2556:FreeRTOS\source/queue.c **** 
2557:FreeRTOS\source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2558:FreeRTOS\source/queue.c **** 		not then just leave without doing anything. */
2559:FreeRTOS\source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2560:FreeRTOS\source/queue.c **** 		{
2561:FreeRTOS\source/queue.c **** 			/* Copy the data from the queue. */
2562:FreeRTOS\source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2563:FreeRTOS\source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2564:FreeRTOS\source/queue.c **** 			{
2565:FreeRTOS\source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2566:FreeRTOS\source/queue.c **** 			}
2567:FreeRTOS\source/queue.c **** 			else
2568:FreeRTOS\source/queue.c **** 			{
2569:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2570:FreeRTOS\source/queue.c **** 			}
2571:FreeRTOS\source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2572:FreeRTOS\source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2573:FreeRTOS\source/queue.c **** 
2574:FreeRTOS\source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2575:FreeRTOS\source/queue.c **** 			{
2576:FreeRTOS\source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2577:FreeRTOS\source/queue.c **** 				{
2578:FreeRTOS\source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2579:FreeRTOS\source/queue.c **** 					{
2580:FreeRTOS\source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2581:FreeRTOS\source/queue.c **** 					}
2582:FreeRTOS\source/queue.c **** 					else
2583:FreeRTOS\source/queue.c **** 					{
2584:FreeRTOS\source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2585:FreeRTOS\source/queue.c **** 					}
2586:FreeRTOS\source/queue.c **** 				}
2587:FreeRTOS\source/queue.c **** 				else
2588:FreeRTOS\source/queue.c **** 				{
2589:FreeRTOS\source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2590:FreeRTOS\source/queue.c **** 				}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 104


2591:FreeRTOS\source/queue.c **** 			}
2592:FreeRTOS\source/queue.c **** 			else
2593:FreeRTOS\source/queue.c **** 			{
2594:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2595:FreeRTOS\source/queue.c **** 			}
2596:FreeRTOS\source/queue.c **** 
2597:FreeRTOS\source/queue.c **** 			xReturn = pdPASS;
2598:FreeRTOS\source/queue.c **** 		}
2599:FreeRTOS\source/queue.c **** 		else
2600:FreeRTOS\source/queue.c **** 		{
2601:FreeRTOS\source/queue.c **** 			xReturn = pdFAIL;
2602:FreeRTOS\source/queue.c **** 		}
2603:FreeRTOS\source/queue.c **** 
2604:FreeRTOS\source/queue.c **** 		return xReturn;
2605:FreeRTOS\source/queue.c **** 	}
2606:FreeRTOS\source/queue.c **** 
2607:FreeRTOS\source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2608:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2609:FreeRTOS\source/queue.c **** 
2610:FreeRTOS\source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2611:FreeRTOS\source/queue.c **** 
2612:FreeRTOS\source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2613:FreeRTOS\source/queue.c **** 	{
 2837              		.loc 1 2613 0
 2838              		.cfi_startproc
 2839              		@ args = 0, pretend = 0, frame = 0
 2840              		@ frame_needed = 0, uses_anonymous_args = 0
 2841              	.LVL373:
 2842 0000 10B5     		push	{r4, lr}
 2843              		.cfi_def_cfa_offset 8
 2844              		.cfi_offset 4, -8
 2845              		.cfi_offset 14, -4
 2846              	.LVL374:
2614:FreeRTOS\source/queue.c **** 	UBaseType_t ux;
2615:FreeRTOS\source/queue.c **** 
2616:FreeRTOS\source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2617:FreeRTOS\source/queue.c **** 		a free slot. */
2618:FreeRTOS\source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2847              		.loc 1 2618 0
 2848 0002 0023     		movs	r3, #0
 2849 0004 0AE0     		b	.L235
 2850              	.LVL375:
 2851              	.L238:
2619:FreeRTOS\source/queue.c **** 		{
2620:FreeRTOS\source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2852              		.loc 1 2620 0
 2853 0006 DA00     		lsls	r2, r3, #3
 2854 0008 064C     		ldr	r4, .L239
 2855 000a 1259     		ldr	r2, [r2, r4]
 2856 000c 002A     		cmp	r2, #0
 2857 000e 04D1     		bne	.L236
2621:FreeRTOS\source/queue.c **** 			{
2622:FreeRTOS\source/queue.c **** 				/* Store the information on this queue. */
2623:FreeRTOS\source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2858              		.loc 1 2623 0
 2859 0010 DB00     		lsls	r3, r3, #3
 2860              	.LVL376:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 105


 2861 0012 1951     		str	r1, [r3, r4]
2624:FreeRTOS\source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2862              		.loc 1 2624 0
 2863 0014 E318     		adds	r3, r4, r3
 2864 0016 5860     		str	r0, [r3, #4]
2625:FreeRTOS\source/queue.c **** 
2626:FreeRTOS\source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2627:FreeRTOS\source/queue.c **** 				break;
 2865              		.loc 1 2627 0
 2866 0018 02E0     		b	.L234
 2867              	.LVL377:
 2868              	.L236:
2618:FreeRTOS\source/queue.c **** 		{
 2869              		.loc 1 2618 0 discriminator 2
 2870 001a 0133     		adds	r3, r3, #1
 2871              	.LVL378:
 2872              	.L235:
2618:FreeRTOS\source/queue.c **** 		{
 2873              		.loc 1 2618 0 is_stmt 0 discriminator 1
 2874 001c 092B     		cmp	r3, #9
 2875 001e F2D9     		bls	.L238
 2876              	.LVL379:
 2877              	.L234:
2628:FreeRTOS\source/queue.c **** 			}
2629:FreeRTOS\source/queue.c **** 			else
2630:FreeRTOS\source/queue.c **** 			{
2631:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2632:FreeRTOS\source/queue.c **** 			}
2633:FreeRTOS\source/queue.c **** 		}
2634:FreeRTOS\source/queue.c **** 	}
 2878              		.loc 1 2634 0 is_stmt 1
 2879              		@ sp needed
 2880 0020 10BD     		pop	{r4, pc}
 2881              	.L240:
 2882 0022 C046     		.align	2
 2883              	.L239:
 2884 0024 00000000 		.word	xQueueRegistry
 2885              		.cfi_endproc
 2886              	.LFE57:
 2887              		.size	vQueueAddToRegistry, .-vQueueAddToRegistry
 2888              		.section	.text.pcQueueGetName,"ax",%progbits
 2889              		.align	2
 2890              		.global	pcQueueGetName
 2891              		.code	16
 2892              		.thumb_func
 2893              		.type	pcQueueGetName, %function
 2894              	pcQueueGetName:
 2895              	.LFB58:
2635:FreeRTOS\source/queue.c **** 
2636:FreeRTOS\source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2637:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2638:FreeRTOS\source/queue.c **** 
2639:FreeRTOS\source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2640:FreeRTOS\source/queue.c **** 
2641:FreeRTOS\source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2642:FreeRTOS\source/queue.c **** 	{
 2896              		.loc 1 2642 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 106


 2897              		.cfi_startproc
 2898              		@ args = 0, pretend = 0, frame = 0
 2899              		@ frame_needed = 0, uses_anonymous_args = 0
 2900              		@ link register save eliminated.
 2901              	.LVL380:
2643:FreeRTOS\source/queue.c **** 	UBaseType_t ux;
2644:FreeRTOS\source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2645:FreeRTOS\source/queue.c **** 
2646:FreeRTOS\source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2647:FreeRTOS\source/queue.c **** 		removing entries from the registry while it is being searched. */
2648:FreeRTOS\source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2902              		.loc 1 2648 0
 2903 0000 0022     		movs	r2, #0
 2904 0002 09E0     		b	.L242
 2905              	.LVL381:
 2906              	.L245:
2649:FreeRTOS\source/queue.c **** 		{
2650:FreeRTOS\source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2907              		.loc 1 2650 0
 2908 0004 D300     		lsls	r3, r2, #3
 2909 0006 0649     		ldr	r1, .L246
 2910 0008 CB18     		adds	r3, r1, r3
 2911 000a 5B68     		ldr	r3, [r3, #4]
 2912 000c 8342     		cmp	r3, r0
 2913 000e 02D1     		bne	.L243
2651:FreeRTOS\source/queue.c **** 			{
2652:FreeRTOS\source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2914              		.loc 1 2652 0
 2915 0010 D200     		lsls	r2, r2, #3
 2916              	.LVL382:
 2917 0012 5058     		ldr	r0, [r2, r1]
 2918              	.LVL383:
2653:FreeRTOS\source/queue.c **** 				break;
 2919              		.loc 1 2653 0
 2920 0014 03E0     		b	.L244
 2921              	.LVL384:
 2922              	.L243:
2648:FreeRTOS\source/queue.c **** 		{
 2923              		.loc 1 2648 0 discriminator 2
 2924 0016 0132     		adds	r2, r2, #1
 2925              	.LVL385:
 2926              	.L242:
2648:FreeRTOS\source/queue.c **** 		{
 2927              		.loc 1 2648 0 is_stmt 0 discriminator 1
 2928 0018 092A     		cmp	r2, #9
 2929 001a F3D9     		bls	.L245
2644:FreeRTOS\source/queue.c **** 
 2930              		.loc 1 2644 0 is_stmt 1
 2931 001c 0020     		movs	r0, #0
 2932              	.LVL386:
 2933              	.L244:
2654:FreeRTOS\source/queue.c **** 			}
2655:FreeRTOS\source/queue.c **** 			else
2656:FreeRTOS\source/queue.c **** 			{
2657:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2658:FreeRTOS\source/queue.c **** 			}
2659:FreeRTOS\source/queue.c **** 		}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 107


2660:FreeRTOS\source/queue.c **** 
2661:FreeRTOS\source/queue.c **** 		return pcReturn;
2662:FreeRTOS\source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 2934              		.loc 1 2662 0
 2935              		@ sp needed
 2936 001e 7047     		bx	lr
 2937              	.L247:
 2938              		.align	2
 2939              	.L246:
 2940 0020 00000000 		.word	xQueueRegistry
 2941              		.cfi_endproc
 2942              	.LFE58:
 2943              		.size	pcQueueGetName, .-pcQueueGetName
 2944              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2945              		.align	2
 2946              		.global	vQueueUnregisterQueue
 2947              		.code	16
 2948              		.thumb_func
 2949              		.type	vQueueUnregisterQueue, %function
 2950              	vQueueUnregisterQueue:
 2951              	.LFB59:
2663:FreeRTOS\source/queue.c **** 
2664:FreeRTOS\source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2665:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
2666:FreeRTOS\source/queue.c **** 
2667:FreeRTOS\source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2668:FreeRTOS\source/queue.c **** 
2669:FreeRTOS\source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2670:FreeRTOS\source/queue.c **** 	{
 2952              		.loc 1 2670 0
 2953              		.cfi_startproc
 2954              		@ args = 0, pretend = 0, frame = 0
 2955              		@ frame_needed = 0, uses_anonymous_args = 0
 2956              		@ link register save eliminated.
 2957              	.LVL387:
2671:FreeRTOS\source/queue.c **** 	UBaseType_t ux;
2672:FreeRTOS\source/queue.c **** 
2673:FreeRTOS\source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2674:FreeRTOS\source/queue.c **** 		registry. */
2675:FreeRTOS\source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2958              		.loc 1 2675 0
 2959 0000 0022     		movs	r2, #0
 2960 0002 0CE0     		b	.L249
 2961              	.LVL388:
 2962              	.L252:
2676:FreeRTOS\source/queue.c **** 		{
2677:FreeRTOS\source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2963              		.loc 1 2677 0
 2964 0004 D300     		lsls	r3, r2, #3
 2965 0006 0749     		ldr	r1, .L253
 2966 0008 CB18     		adds	r3, r1, r3
 2967 000a 5B68     		ldr	r3, [r3, #4]
 2968 000c 8342     		cmp	r3, r0
 2969 000e 05D1     		bne	.L250
2678:FreeRTOS\source/queue.c **** 			{
2679:FreeRTOS\source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2680:FreeRTOS\source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 108


 2970              		.loc 1 2680 0
 2971 0010 D200     		lsls	r2, r2, #3
 2972              	.LVL389:
 2973 0012 0023     		movs	r3, #0
 2974 0014 5350     		str	r3, [r2, r1]
2681:FreeRTOS\source/queue.c **** 
2682:FreeRTOS\source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2683:FreeRTOS\source/queue.c **** 				appear in the registry twice if it is added, removed, then
2684:FreeRTOS\source/queue.c **** 				added again. */
2685:FreeRTOS\source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2975              		.loc 1 2685 0
 2976 0016 8A18     		adds	r2, r1, r2
 2977 0018 5360     		str	r3, [r2, #4]
2686:FreeRTOS\source/queue.c **** 				break;
 2978              		.loc 1 2686 0
 2979 001a 02E0     		b	.L248
 2980              	.LVL390:
 2981              	.L250:
2675:FreeRTOS\source/queue.c **** 		{
 2982              		.loc 1 2675 0 discriminator 2
 2983 001c 0132     		adds	r2, r2, #1
 2984              	.LVL391:
 2985              	.L249:
2675:FreeRTOS\source/queue.c **** 		{
 2986              		.loc 1 2675 0 is_stmt 0 discriminator 1
 2987 001e 092A     		cmp	r2, #9
 2988 0020 F0D9     		bls	.L252
 2989              	.LVL392:
 2990              	.L248:
2687:FreeRTOS\source/queue.c **** 			}
2688:FreeRTOS\source/queue.c **** 			else
2689:FreeRTOS\source/queue.c **** 			{
2690:FreeRTOS\source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2691:FreeRTOS\source/queue.c **** 			}
2692:FreeRTOS\source/queue.c **** 		}
2693:FreeRTOS\source/queue.c **** 
2694:FreeRTOS\source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2991              		.loc 1 2694 0 is_stmt 1
 2992              		@ sp needed
 2993 0022 7047     		bx	lr
 2994              	.L254:
 2995              		.align	2
 2996              	.L253:
 2997 0024 00000000 		.word	xQueueRegistry
 2998              		.cfi_endproc
 2999              	.LFE59:
 3000              		.size	vQueueUnregisterQueue, .-vQueueUnregisterQueue
 3001              		.section	.text.vQueueDelete,"ax",%progbits
 3002              		.align	2
 3003              		.global	vQueueDelete
 3004              		.code	16
 3005              		.thumb_func
 3006              		.type	vQueueDelete, %function
 3007              	vQueueDelete:
 3008              	.LFB48:
1942:FreeRTOS\source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3009              		.loc 1 1942 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 109


 3010              		.cfi_startproc
 3011              		@ args = 0, pretend = 0, frame = 0
 3012              		@ frame_needed = 0, uses_anonymous_args = 0
 3013              	.LVL393:
 3014 0000 10B5     		push	{r4, lr}
 3015              		.cfi_def_cfa_offset 8
 3016              		.cfi_offset 4, -8
 3017              		.cfi_offset 14, -4
 3018 0002 041E     		subs	r4, r0, #0
 3019              	.LVL394:
1945:FreeRTOS\source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3020              		.loc 1 1945 0
 3021 0004 01D1     		bne	.L256
1945:FreeRTOS\source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3022              		.loc 1 1945 0 is_stmt 0 discriminator 1
 3023              		.syntax divided
 3024              	@ 1945 "FreeRTOS\source\queue.c" 1
 3025 0006 72B6     		 cpsid i 
 3026              	@ 0 "" 2
 3027              		.thumb
 3028              		.syntax unified
 3029              	.L257:
 3030 0008 FEE7     		b	.L257
 3031              	.L256:
1950:FreeRTOS\source/queue.c **** 	}
 3032              		.loc 1 1950 0 is_stmt 1
 3033 000a FFF7FEFF 		bl	vQueueUnregisterQueue
 3034              	.LVL395:
1958:FreeRTOS\source/queue.c **** 	}
 3035              		.loc 1 1958 0
 3036 000e 2000     		movs	r0, r4
 3037 0010 FFF7FEFF 		bl	vPortFree
 3038              	.LVL396:
1980:FreeRTOS\source/queue.c **** /*-----------------------------------------------------------*/
 3039              		.loc 1 1980 0
 3040              		@ sp needed
 3041              	.LVL397:
 3042 0014 10BD     		pop	{r4, pc}
 3043              		.cfi_endproc
 3044              	.LFE48:
 3045              		.size	vQueueDelete, .-vQueueDelete
 3046              		.comm	xQueueRegistry,80,4
 3047 0016 C046     		.text
 3048              	.Letext0:
 3049              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3050              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3051              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3052              		.file 5 ".\\FreeRTOS/portmacro.h"
 3053              		.file 6 ".\\FreeRTOS/list.h"
 3054              		.file 7 ".\\FreeRTOS/task.h"
 3055              		.file 8 ".\\FreeRTOS/queue.h"
 3056              		.file 9 ".\\FreeRTOS/portable.h"
 3057              		.section	.debug_info,"",%progbits
 3058              	.Ldebug_info0:
 3059 0000 11170000 		.4byte	0x1711
 3060 0004 0400     		.2byte	0x4
 3061 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 110


 3062 000a 04       		.byte	0x4
 3063 000b 01       		.uleb128 0x1
 3064 000c B2020000 		.4byte	.LASF139
 3065 0010 0C       		.byte	0xc
 3066 0011 C3040000 		.4byte	.LASF140
 3067 0015 15090000 		.4byte	.LASF141
 3068 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 3069 001d 00000000 		.4byte	0
 3070 0021 00000000 		.4byte	.Ldebug_line0
 3071 0025 02       		.uleb128 0x2
 3072 0026 4E030000 		.4byte	.LASF3
 3073 002a 02       		.byte	0x2
 3074 002b D8       		.byte	0xd8
 3075 002c 30000000 		.4byte	0x30
 3076 0030 03       		.uleb128 0x3
 3077 0031 04       		.byte	0x4
 3078 0032 07       		.byte	0x7
 3079 0033 95000000 		.4byte	.LASF0
 3080 0037 04       		.uleb128 0x4
 3081 0038 04       		.byte	0x4
 3082 0039 05       		.byte	0x5
 3083 003a 696E7400 		.ascii	"int\000"
 3084 003e 03       		.uleb128 0x3
 3085 003f 08       		.byte	0x8
 3086 0040 05       		.byte	0x5
 3087 0041 01050000 		.4byte	.LASF1
 3088 0045 03       		.uleb128 0x3
 3089 0046 08       		.byte	0x8
 3090 0047 04       		.byte	0x4
 3091 0048 20060000 		.4byte	.LASF2
 3092 004c 02       		.uleb128 0x2
 3093 004d 09060000 		.4byte	.LASF4
 3094 0051 03       		.byte	0x3
 3095 0052 1B       		.byte	0x1b
 3096 0053 57000000 		.4byte	0x57
 3097 0057 03       		.uleb128 0x3
 3098 0058 01       		.byte	0x1
 3099 0059 06       		.byte	0x6
 3100 005a 85080000 		.4byte	.LASF5
 3101 005e 02       		.uleb128 0x2
 3102 005f 11070000 		.4byte	.LASF6
 3103 0063 03       		.byte	0x3
 3104 0064 1D       		.byte	0x1d
 3105 0065 69000000 		.4byte	0x69
 3106 0069 03       		.uleb128 0x3
 3107 006a 01       		.byte	0x1
 3108 006b 08       		.byte	0x8
 3109 006c AC070000 		.4byte	.LASF7
 3110 0070 03       		.uleb128 0x3
 3111 0071 02       		.byte	0x2
 3112 0072 05       		.byte	0x5
 3113 0073 6E060000 		.4byte	.LASF8
 3114 0077 03       		.uleb128 0x3
 3115 0078 02       		.byte	0x2
 3116 0079 07       		.byte	0x7
 3117 007a 91080000 		.4byte	.LASF9
 3118 007e 03       		.uleb128 0x3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 111


 3119 007f 04       		.byte	0x4
 3120 0080 05       		.byte	0x5
 3121 0081 83060000 		.4byte	.LASF10
 3122 0085 02       		.uleb128 0x2
 3123 0086 BA070000 		.4byte	.LASF11
 3124 008a 03       		.byte	0x3
 3125 008b 41       		.byte	0x41
 3126 008c 90000000 		.4byte	0x90
 3127 0090 03       		.uleb128 0x3
 3128 0091 04       		.byte	0x4
 3129 0092 07       		.byte	0x7
 3130 0093 45070000 		.4byte	.LASF12
 3131 0097 03       		.uleb128 0x3
 3132 0098 08       		.byte	0x8
 3133 0099 07       		.byte	0x7
 3134 009a 18020000 		.4byte	.LASF13
 3135 009e 03       		.uleb128 0x3
 3136 009f 04       		.byte	0x4
 3137 00a0 07       		.byte	0x7
 3138 00a1 2B070000 		.4byte	.LASF14
 3139 00a5 05       		.uleb128 0x5
 3140 00a6 04       		.byte	0x4
 3141 00a7 03       		.uleb128 0x3
 3142 00a8 01       		.byte	0x1
 3143 00a9 08       		.byte	0x8
 3144 00aa 2B040000 		.4byte	.LASF15
 3145 00ae 06       		.uleb128 0x6
 3146 00af 04       		.byte	0x4
 3147 00b0 B4000000 		.4byte	0xb4
 3148 00b4 07       		.uleb128 0x7
 3149 00b5 A7000000 		.4byte	0xa7
 3150 00b9 06       		.uleb128 0x6
 3151 00ba 04       		.byte	0x4
 3152 00bb BF000000 		.4byte	0xbf
 3153 00bf 08       		.uleb128 0x8
 3154 00c0 02       		.uleb128 0x2
 3155 00c1 CA010000 		.4byte	.LASF16
 3156 00c5 04       		.byte	0x4
 3157 00c6 14       		.byte	0x14
 3158 00c7 4C000000 		.4byte	0x4c
 3159 00cb 02       		.uleb128 0x2
 3160 00cc BB040000 		.4byte	.LASF17
 3161 00d0 04       		.byte	0x4
 3162 00d1 18       		.byte	0x18
 3163 00d2 5E000000 		.4byte	0x5e
 3164 00d6 02       		.uleb128 0x2
 3165 00d7 C1010000 		.4byte	.LASF18
 3166 00db 04       		.byte	0x4
 3167 00dc 30       		.byte	0x30
 3168 00dd 85000000 		.4byte	0x85
 3169 00e1 03       		.uleb128 0x3
 3170 00e2 04       		.byte	0x4
 3171 00e3 04       		.byte	0x4
 3172 00e4 F3010000 		.4byte	.LASF19
 3173 00e8 03       		.uleb128 0x3
 3174 00e9 08       		.byte	0x8
 3175 00ea 04       		.byte	0x4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 112


 3176 00eb C9080000 		.4byte	.LASF20
 3177 00ef 02       		.uleb128 0x2
 3178 00f0 22050000 		.4byte	.LASF21
 3179 00f4 05       		.byte	0x5
 3180 00f5 38       		.byte	0x38
 3181 00f6 7E000000 		.4byte	0x7e
 3182 00fa 02       		.uleb128 0x2
 3183 00fb 4A040000 		.4byte	.LASF22
 3184 00ff 05       		.byte	0x5
 3185 0100 39       		.byte	0x39
 3186 0101 90000000 		.4byte	0x90
 3187 0105 02       		.uleb128 0x2
 3188 0106 FE050000 		.4byte	.LASF23
 3189 010a 05       		.byte	0x5
 3190 010b 3F       		.byte	0x3f
 3191 010c D6000000 		.4byte	0xd6
 3192 0110 06       		.uleb128 0x6
 3193 0111 04       		.byte	0x4
 3194 0112 CB000000 		.4byte	0xcb
 3195 0116 09       		.uleb128 0x9
 3196 0117 BF000000 		.4byte	.LASF30
 3197 011b 14       		.byte	0x14
 3198 011c 06       		.byte	0x6
 3199 011d 8B       		.byte	0x8b
 3200 011e 5F010000 		.4byte	0x15f
 3201 0122 0A       		.uleb128 0xa
 3202 0123 78060000 		.4byte	.LASF24
 3203 0127 06       		.byte	0x6
 3204 0128 8E       		.byte	0x8e
 3205 0129 05010000 		.4byte	0x105
 3206 012d 00       		.byte	0
 3207 012e 0A       		.uleb128 0xa
 3208 012f 61050000 		.4byte	.LASF25
 3209 0133 06       		.byte	0x6
 3210 0134 8F       		.byte	0x8f
 3211 0135 5F010000 		.4byte	0x15f
 3212 0139 04       		.byte	0x4
 3213 013a 0A       		.uleb128 0xa
 3214 013b 6D020000 		.4byte	.LASF26
 3215 013f 06       		.byte	0x6
 3216 0140 90       		.byte	0x90
 3217 0141 5F010000 		.4byte	0x15f
 3218 0145 08       		.byte	0x8
 3219 0146 0A       		.uleb128 0xa
 3220 0147 1B080000 		.4byte	.LASF27
 3221 014b 06       		.byte	0x6
 3222 014c 91       		.byte	0x91
 3223 014d A5000000 		.4byte	0xa5
 3224 0151 0C       		.byte	0xc
 3225 0152 0A       		.uleb128 0xa
 3226 0153 41060000 		.4byte	.LASF28
 3227 0157 06       		.byte	0x6
 3228 0158 92       		.byte	0x92
 3229 0159 A5000000 		.4byte	0xa5
 3230 015d 10       		.byte	0x10
 3231 015e 00       		.byte	0
 3232 015f 06       		.uleb128 0x6
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 113


 3233 0160 04       		.byte	0x4
 3234 0161 16010000 		.4byte	0x116
 3235 0165 02       		.uleb128 0x2
 3236 0166 30040000 		.4byte	.LASF29
 3237 016a 06       		.byte	0x6
 3238 016b 95       		.byte	0x95
 3239 016c 16010000 		.4byte	0x116
 3240 0170 09       		.uleb128 0x9
 3241 0171 72030000 		.4byte	.LASF31
 3242 0175 0C       		.byte	0xc
 3243 0176 06       		.byte	0x6
 3244 0177 97       		.byte	0x97
 3245 0178 A1010000 		.4byte	0x1a1
 3246 017c 0A       		.uleb128 0xa
 3247 017d 78060000 		.4byte	.LASF24
 3248 0181 06       		.byte	0x6
 3249 0182 9A       		.byte	0x9a
 3250 0183 05010000 		.4byte	0x105
 3251 0187 00       		.byte	0
 3252 0188 0A       		.uleb128 0xa
 3253 0189 61050000 		.4byte	.LASF25
 3254 018d 06       		.byte	0x6
 3255 018e 9B       		.byte	0x9b
 3256 018f 5F010000 		.4byte	0x15f
 3257 0193 04       		.byte	0x4
 3258 0194 0A       		.uleb128 0xa
 3259 0195 6D020000 		.4byte	.LASF26
 3260 0199 06       		.byte	0x6
 3261 019a 9C       		.byte	0x9c
 3262 019b 5F010000 		.4byte	0x15f
 3263 019f 08       		.byte	0x8
 3264 01a0 00       		.byte	0
 3265 01a1 02       		.uleb128 0x2
 3266 01a2 AC040000 		.4byte	.LASF32
 3267 01a6 06       		.byte	0x6
 3268 01a7 9E       		.byte	0x9e
 3269 01a8 70010000 		.4byte	0x170
 3270 01ac 09       		.uleb128 0x9
 3271 01ad 82030000 		.4byte	.LASF33
 3272 01b1 14       		.byte	0x14
 3273 01b2 06       		.byte	0x6
 3274 01b3 A3       		.byte	0xa3
 3275 01b4 DD010000 		.4byte	0x1dd
 3276 01b8 0A       		.uleb128 0xa
 3277 01b9 00000000 		.4byte	.LASF34
 3278 01bd 06       		.byte	0x6
 3279 01be A6       		.byte	0xa6
 3280 01bf DD010000 		.4byte	0x1dd
 3281 01c3 00       		.byte	0
 3282 01c4 0A       		.uleb128 0xa
 3283 01c5 A2000000 		.4byte	.LASF35
 3284 01c9 06       		.byte	0x6
 3285 01ca A7       		.byte	0xa7
 3286 01cb E2010000 		.4byte	0x1e2
 3287 01cf 04       		.byte	0x4
 3288 01d0 0A       		.uleb128 0xa
 3289 01d1 85040000 		.4byte	.LASF36
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 114


 3290 01d5 06       		.byte	0x6
 3291 01d6 A8       		.byte	0xa8
 3292 01d7 A1010000 		.4byte	0x1a1
 3293 01db 08       		.byte	0x8
 3294 01dc 00       		.byte	0
 3295 01dd 0B       		.uleb128 0xb
 3296 01de FA000000 		.4byte	0xfa
 3297 01e2 06       		.uleb128 0x6
 3298 01e3 04       		.byte	0x4
 3299 01e4 65010000 		.4byte	0x165
 3300 01e8 02       		.uleb128 0x2
 3301 01e9 DC050000 		.4byte	.LASF37
 3302 01ed 06       		.byte	0x6
 3303 01ee AA       		.byte	0xaa
 3304 01ef AC010000 		.4byte	0x1ac
 3305 01f3 09       		.uleb128 0x9
 3306 01f4 AA000000 		.4byte	.LASF38
 3307 01f8 08       		.byte	0x8
 3308 01f9 07       		.byte	0x7
 3309 01fa 5D       		.byte	0x5d
 3310 01fb 18020000 		.4byte	0x218
 3311 01ff 0A       		.uleb128 0xa
 3312 0200 11010000 		.4byte	.LASF39
 3313 0204 07       		.byte	0x7
 3314 0205 5F       		.byte	0x5f
 3315 0206 EF000000 		.4byte	0xef
 3316 020a 00       		.byte	0
 3317 020b 0A       		.uleb128 0xa
 3318 020c 3D050000 		.4byte	.LASF40
 3319 0210 07       		.byte	0x7
 3320 0211 60       		.byte	0x60
 3321 0212 05010000 		.4byte	0x105
 3322 0216 04       		.byte	0x4
 3323 0217 00       		.byte	0
 3324 0218 02       		.uleb128 0x2
 3325 0219 72050000 		.4byte	.LASF41
 3326 021d 07       		.byte	0x7
 3327 021e 61       		.byte	0x61
 3328 021f F3010000 		.4byte	0x1f3
 3329 0223 02       		.uleb128 0x2
 3330 0224 77040000 		.4byte	.LASF42
 3331 0228 08       		.byte	0x8
 3332 0229 2E       		.byte	0x2e
 3333 022a A5000000 		.4byte	0xa5
 3334 022e 0C       		.uleb128 0xc
 3335 022f 04       		.byte	0x4
 3336 0230 01       		.byte	0x1
 3337 0231 5E       		.byte	0x5e
 3338 0232 4D020000 		.4byte	0x24d
 3339 0236 0D       		.uleb128 0xd
 3340 0237 73010000 		.4byte	.LASF43
 3341 023b 01       		.byte	0x1
 3342 023c 60       		.byte	0x60
 3343 023d 4D020000 		.4byte	0x24d
 3344 0241 0D       		.uleb128 0xd
 3345 0242 6C070000 		.4byte	.LASF44
 3346 0246 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 115


 3347 0247 61       		.byte	0x61
 3348 0248 FA000000 		.4byte	0xfa
 3349 024c 00       		.byte	0
 3350 024d 06       		.uleb128 0x6
 3351 024e 04       		.byte	0x4
 3352 024f C0000000 		.4byte	0xc0
 3353 0253 09       		.uleb128 0x9
 3354 0254 08020000 		.4byte	.LASF45
 3355 0258 48       		.byte	0x48
 3356 0259 01       		.byte	0x1
 3357 025a 58       		.byte	0x58
 3358 025b E2020000 		.4byte	0x2e2
 3359 025f 0A       		.uleb128 0xa
 3360 0260 3E080000 		.4byte	.LASF46
 3361 0264 01       		.byte	0x1
 3362 0265 5A       		.byte	0x5a
 3363 0266 4D020000 		.4byte	0x24d
 3364 026a 00       		.byte	0
 3365 026b 0A       		.uleb128 0xa
 3366 026c 0A070000 		.4byte	.LASF47
 3367 0270 01       		.byte	0x1
 3368 0271 5B       		.byte	0x5b
 3369 0272 4D020000 		.4byte	0x24d
 3370 0276 04       		.byte	0x4
 3371 0277 0A       		.uleb128 0xa
 3372 0278 F4050000 		.4byte	.LASF48
 3373 027c 01       		.byte	0x1
 3374 027d 5C       		.byte	0x5c
 3375 027e 4D020000 		.4byte	0x24d
 3376 0282 08       		.byte	0x8
 3377 0283 0E       		.uleb128 0xe
 3378 0284 7500     		.ascii	"u\000"
 3379 0286 01       		.byte	0x1
 3380 0287 62       		.byte	0x62
 3381 0288 2E020000 		.4byte	0x22e
 3382 028c 0C       		.byte	0xc
 3383 028d 0A       		.uleb128 0xa
 3384 028e DE000000 		.4byte	.LASF49
 3385 0292 01       		.byte	0x1
 3386 0293 64       		.byte	0x64
 3387 0294 E8010000 		.4byte	0x1e8
 3388 0298 10       		.byte	0x10
 3389 0299 0A       		.uleb128 0xa
 3390 029a 50000000 		.4byte	.LASF50
 3391 029e 01       		.byte	0x1
 3392 029f 65       		.byte	0x65
 3393 02a0 E8010000 		.4byte	0x1e8
 3394 02a4 24       		.byte	0x24
 3395 02a5 0A       		.uleb128 0xa
 3396 02a6 78020000 		.4byte	.LASF51
 3397 02aa 01       		.byte	0x1
 3398 02ab 67       		.byte	0x67
 3399 02ac DD010000 		.4byte	0x1dd
 3400 02b0 38       		.byte	0x38
 3401 02b1 0A       		.uleb128 0xa
 3402 02b2 65060000 		.4byte	.LASF52
 3403 02b6 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 116


 3404 02b7 68       		.byte	0x68
 3405 02b8 FA000000 		.4byte	0xfa
 3406 02bc 3C       		.byte	0x3c
 3407 02bd 0A       		.uleb128 0xa
 3408 02be FA030000 		.4byte	.LASF53
 3409 02c2 01       		.byte	0x1
 3410 02c3 69       		.byte	0x69
 3411 02c4 FA000000 		.4byte	0xfa
 3412 02c8 40       		.byte	0x40
 3413 02c9 0A       		.uleb128 0xa
 3414 02ca DA080000 		.4byte	.LASF54
 3415 02ce 01       		.byte	0x1
 3416 02cf 6B       		.byte	0x6b
 3417 02d0 E2020000 		.4byte	0x2e2
 3418 02d4 44       		.byte	0x44
 3419 02d5 0A       		.uleb128 0xa
 3420 02d6 09010000 		.4byte	.LASF55
 3421 02da 01       		.byte	0x1
 3422 02db 6C       		.byte	0x6c
 3423 02dc E2020000 		.4byte	0x2e2
 3424 02e0 45       		.byte	0x45
 3425 02e1 00       		.byte	0
 3426 02e2 0B       		.uleb128 0xb
 3427 02e3 C0000000 		.4byte	0xc0
 3428 02e7 02       		.uleb128 0x2
 3429 02e8 AB080000 		.4byte	.LASF56
 3430 02ec 01       		.byte	0x1
 3431 02ed 7B       		.byte	0x7b
 3432 02ee 53020000 		.4byte	0x253
 3433 02f2 02       		.uleb128 0x2
 3434 02f3 33010000 		.4byte	.LASF57
 3435 02f7 01       		.byte	0x1
 3436 02f8 7F       		.byte	0x7f
 3437 02f9 E7020000 		.4byte	0x2e7
 3438 02fd 09       		.uleb128 0x9
 3439 02fe CA000000 		.4byte	.LASF58
 3440 0302 08       		.byte	0x8
 3441 0303 01       		.byte	0x1
 3442 0304 8C       		.byte	0x8c
 3443 0305 22030000 		.4byte	0x322
 3444 0309 0A       		.uleb128 0xa
 3445 030a 66030000 		.4byte	.LASF59
 3446 030e 01       		.byte	0x1
 3447 030f 8E       		.byte	0x8e
 3448 0310 AE000000 		.4byte	0xae
 3449 0314 00       		.byte	0
 3450 0315 0A       		.uleb128 0xa
 3451 0316 5E030000 		.4byte	.LASF60
 3452 031a 01       		.byte	0x1
 3453 031b 8F       		.byte	0x8f
 3454 031c 23020000 		.4byte	0x223
 3455 0320 04       		.byte	0x4
 3456 0321 00       		.byte	0
 3457 0322 02       		.uleb128 0x2
 3458 0323 45080000 		.4byte	.LASF61
 3459 0327 01       		.byte	0x1
 3460 0328 90       		.byte	0x90
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 117


 3461 0329 FD020000 		.4byte	0x2fd
 3462 032d 02       		.uleb128 0x2
 3463 032e 52010000 		.4byte	.LASF62
 3464 0332 01       		.byte	0x1
 3465 0333 95       		.byte	0x95
 3466 0334 22030000 		.4byte	0x322
 3467 0338 0F       		.uleb128 0xf
 3468 0339 48020000 		.4byte	.LASF63
 3469 033d 01       		.byte	0x1
 3470 033e DF07     		.2byte	0x7df
 3471 0340 FA000000 		.4byte	0xfa
 3472 0344 00000000 		.4byte	.LFB49
 3473 0348 14000000 		.4byte	.LFE49-.LFB49
 3474 034c 01       		.uleb128 0x1
 3475 034d 9C       		.byte	0x9c
 3476 034e 73030000 		.4byte	0x373
 3477 0352 10       		.uleb128 0x10
 3478 0353 1B070000 		.4byte	.LASF65
 3479 0357 01       		.byte	0x1
 3480 0358 DF07     		.2byte	0x7df
 3481 035a 7E030000 		.4byte	0x37e
 3482 035e 00000000 		.4byte	.LLST0
 3483 0362 11       		.uleb128 0x11
 3484 0363 B0050000 		.4byte	.LASF66
 3485 0367 01       		.byte	0x1
 3486 0368 E107     		.2byte	0x7e1
 3487 036a FA000000 		.4byte	0xfa
 3488 036e 3A000000 		.4byte	.LLST1
 3489 0372 00       		.byte	0
 3490 0373 06       		.uleb128 0x6
 3491 0374 04       		.byte	0x4
 3492 0375 79030000 		.4byte	0x379
 3493 0379 07       		.uleb128 0x7
 3494 037a F2020000 		.4byte	0x2f2
 3495 037e 07       		.uleb128 0x7
 3496 037f 73030000 		.4byte	0x373
 3497 0383 0F       		.uleb128 0xf
 3498 0384 3B040000 		.4byte	.LASF64
 3499 0388 01       		.byte	0x1
 3500 0389 F808     		.2byte	0x8f8
 3501 038b EF000000 		.4byte	0xef
 3502 038f 00000000 		.4byte	.LFB55
 3503 0393 1E000000 		.4byte	.LFE55-.LFB55
 3504 0397 01       		.uleb128 0x1
 3505 0398 9C       		.byte	0x9c
 3506 0399 D0030000 		.4byte	0x3d0
 3507 039d 10       		.uleb128 0x10
 3508 039e 1B070000 		.4byte	.LASF65
 3509 03a2 01       		.byte	0x1
 3510 03a3 F808     		.2byte	0x8f8
 3511 03a5 73030000 		.4byte	0x373
 3512 03a9 58000000 		.4byte	.LLST2
 3513 03ad 11       		.uleb128 0x11
 3514 03ae 23070000 		.4byte	.LASF67
 3515 03b2 01       		.byte	0x1
 3516 03b3 FA08     		.2byte	0x8fa
 3517 03b5 EF000000 		.4byte	0xef
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 118


 3518 03b9 9D000000 		.4byte	.LLST3
 3519 03bd 12       		.uleb128 0x12
 3520 03be 08000000 		.4byte	.LVL6
 3521 03c2 22160000 		.4byte	0x1622
 3522 03c6 12       		.uleb128 0x12
 3523 03c7 1A000000 		.4byte	.LVL10
 3524 03cb 2D160000 		.4byte	0x162d
 3525 03cf 00       		.byte	0
 3526 03d0 0F       		.uleb128 0xf
 3527 03d1 2F020000 		.4byte	.LASF68
 3528 03d5 01       		.byte	0x1
 3529 03d6 D108     		.2byte	0x8d1
 3530 03d8 EF000000 		.4byte	0xef
 3531 03dc 00000000 		.4byte	.LFB53
 3532 03e0 1C000000 		.4byte	.LFE53-.LFB53
 3533 03e4 01       		.uleb128 0x1
 3534 03e5 9C       		.byte	0x9c
 3535 03e6 1D040000 		.4byte	0x41d
 3536 03ea 10       		.uleb128 0x10
 3537 03eb 1B070000 		.4byte	.LASF65
 3538 03ef 01       		.byte	0x1
 3539 03f0 D108     		.2byte	0x8d1
 3540 03f2 73030000 		.4byte	0x373
 3541 03f6 BB000000 		.4byte	.LLST4
 3542 03fa 11       		.uleb128 0x11
 3543 03fb 23070000 		.4byte	.LASF67
 3544 03ff 01       		.byte	0x1
 3545 0400 D308     		.2byte	0x8d3
 3546 0402 EF000000 		.4byte	0xef
 3547 0406 00010000 		.4byte	.LLST5
 3548 040a 12       		.uleb128 0x12
 3549 040b 08000000 		.4byte	.LVL13
 3550 040f 22160000 		.4byte	0x1622
 3551 0413 12       		.uleb128 0x12
 3552 0414 18000000 		.4byte	.LVL17
 3553 0418 2D160000 		.4byte	0x162d
 3554 041c 00       		.byte	0
 3555 041d 0F       		.uleb128 0xf
 3556 041e A1030000 		.4byte	.LASF69
 3557 0422 01       		.byte	0x1
 3558 0423 F807     		.2byte	0x7f8
 3559 0425 EF000000 		.4byte	0xef
 3560 0429 00000000 		.4byte	.LFB50
 3561 042d 82000000 		.4byte	.LFE50-.LFB50
 3562 0431 01       		.uleb128 0x1
 3563 0432 9C       		.byte	0x9c
 3564 0433 A3040000 		.4byte	0x4a3
 3565 0437 10       		.uleb128 0x10
 3566 0438 1B070000 		.4byte	.LASF65
 3567 043c 01       		.byte	0x1
 3568 043d F807     		.2byte	0x7f8
 3569 043f A9040000 		.4byte	0x4a9
 3570 0443 1E010000 		.4byte	.LLST6
 3571 0447 10       		.uleb128 0x10
 3572 0448 AD060000 		.4byte	.LASF70
 3573 044c 01       		.byte	0x1
 3574 044d F807     		.2byte	0x7f8
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 119


 3575 044f B9000000 		.4byte	0xb9
 3576 0453 8C010000 		.4byte	.LLST7
 3577 0457 10       		.uleb128 0x10
 3578 0458 D0080000 		.4byte	.LASF71
 3579 045c 01       		.byte	0x1
 3580 045d F807     		.2byte	0x7f8
 3581 045f AE040000 		.4byte	0x4ae
 3582 0463 F8010000 		.4byte	.LLST8
 3583 0467 11       		.uleb128 0x11
 3584 0468 23070000 		.4byte	.LASF67
 3585 046c 01       		.byte	0x1
 3586 046d FA07     		.2byte	0x7fa
 3587 046f EF000000 		.4byte	0xef
 3588 0473 24020000 		.4byte	.LLST9
 3589 0477 11       		.uleb128 0x11
 3590 0478 78020000 		.4byte	.LASF51
 3591 047c 01       		.byte	0x1
 3592 047d FB07     		.2byte	0x7fb
 3593 047f FA000000 		.4byte	0xfa
 3594 0483 5A020000 		.4byte	.LLST10
 3595 0487 12       		.uleb128 0x12
 3596 0488 1A000000 		.4byte	.LVL24
 3597 048c 38160000 		.4byte	0x1638
 3598 0490 12       		.uleb128 0x12
 3599 0491 2A000000 		.4byte	.LVL27
 3600 0495 44160000 		.4byte	0x1644
 3601 0499 12       		.uleb128 0x12
 3602 049a 48000000 		.4byte	.LVL30
 3603 049e 44160000 		.4byte	0x1644
 3604 04a2 00       		.byte	0
 3605 04a3 06       		.uleb128 0x6
 3606 04a4 04       		.byte	0x4
 3607 04a5 F2020000 		.4byte	0x2f2
 3608 04a9 07       		.uleb128 0x7
 3609 04aa A3040000 		.4byte	0x4a3
 3610 04ae 07       		.uleb128 0x7
 3611 04af EF000000 		.4byte	0xef
 3612 04b3 13       		.uleb128 0x13
 3613 04b4 D5070000 		.4byte	.LASF73
 3614 04b8 01       		.byte	0x1
 3615 04b9 4708     		.2byte	0x847
 3616 04bb 00000000 		.4byte	.LFB51
 3617 04bf 24000000 		.4byte	.LFE51-.LFB51
 3618 04c3 01       		.uleb128 0x1
 3619 04c4 9C       		.byte	0x9c
 3620 04c5 FA040000 		.4byte	0x4fa
 3621 04c9 10       		.uleb128 0x10
 3622 04ca 1B070000 		.4byte	.LASF65
 3623 04ce 01       		.byte	0x1
 3624 04cf 4708     		.2byte	0x847
 3625 04d1 A9040000 		.4byte	0x4a9
 3626 04d5 8D020000 		.4byte	.LLST11
 3627 04d9 10       		.uleb128 0x10
 3628 04da 3F020000 		.4byte	.LASF72
 3629 04de 01       		.byte	0x1
 3630 04df 4708     		.2byte	0x847
 3631 04e1 FA040000 		.4byte	0x4fa
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 120


 3632 04e5 AE020000 		.4byte	.LLST12
 3633 04e9 14       		.uleb128 0x14
 3634 04ea 22000000 		.4byte	.LVL43
 3635 04ee 44160000 		.4byte	0x1644
 3636 04f2 15       		.uleb128 0x15
 3637 04f3 01       		.uleb128 0x1
 3638 04f4 50       		.byte	0x50
 3639 04f5 02       		.uleb128 0x2
 3640 04f6 74       		.byte	0x74
 3641 04f7 00       		.sleb128 0
 3642 04f8 00       		.byte	0
 3643 04f9 00       		.byte	0
 3644 04fa 07       		.uleb128 0x7
 3645 04fb A5000000 		.4byte	0xa5
 3646 04ff 13       		.uleb128 0x13
 3647 0500 F9010000 		.4byte	.LASF74
 3648 0504 01       		.byte	0x1
 3649 0505 5908     		.2byte	0x859
 3650 0507 00000000 		.4byte	.LFB52
 3651 050b 6E000000 		.4byte	.LFE52-.LFB52
 3652 050f 01       		.uleb128 0x1
 3653 0510 9C       		.byte	0x9c
 3654 0511 C0050000 		.4byte	0x5c0
 3655 0515 10       		.uleb128 0x10
 3656 0516 1B070000 		.4byte	.LASF65
 3657 051a 01       		.byte	0x1
 3658 051b 5908     		.2byte	0x859
 3659 051d A9040000 		.4byte	0x4a9
 3660 0521 DA020000 		.4byte	.LLST13
 3661 0525 16       		.uleb128 0x16
 3662 0526 08000000 		.4byte	.LBB2
 3663 052a 2C000000 		.4byte	.LBE2-.LBB2
 3664 052e 60050000 		.4byte	0x560
 3665 0532 11       		.uleb128 0x11
 3666 0533 09010000 		.4byte	.LASF55
 3667 0537 01       		.byte	0x1
 3668 0538 6308     		.2byte	0x863
 3669 053a C0000000 		.4byte	0xc0
 3670 053e 06030000 		.4byte	.LLST14
 3671 0542 17       		.uleb128 0x17
 3672 0543 1E000000 		.4byte	.LVL48
 3673 0547 4D160000 		.4byte	0x164d
 3674 054b 56050000 		.4byte	0x556
 3675 054f 15       		.uleb128 0x15
 3676 0550 01       		.uleb128 0x1
 3677 0551 50       		.byte	0x50
 3678 0552 02       		.uleb128 0x2
 3679 0553 75       		.byte	0x75
 3680 0554 24       		.sleb128 36
 3681 0555 00       		.byte	0
 3682 0556 12       		.uleb128 0x12
 3683 0557 26000000 		.4byte	.LVL49
 3684 055b 59160000 		.4byte	0x1659
 3685 055f 00       		.byte	0
 3686 0560 16       		.uleb128 0x16
 3687 0561 3C000000 		.4byte	.LBB3
 3688 0565 2C000000 		.4byte	.LBE3-.LBB3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 121


 3689 0569 9B050000 		.4byte	0x59b
 3690 056d 11       		.uleb128 0x11
 3691 056e DA080000 		.4byte	.LASF54
 3692 0572 01       		.byte	0x1
 3693 0573 B408     		.2byte	0x8b4
 3694 0575 C0000000 		.4byte	0xc0
 3695 0579 24030000 		.4byte	.LLST15
 3696 057d 17       		.uleb128 0x17
 3697 057e 52000000 		.4byte	.LVL56
 3698 0582 4D160000 		.4byte	0x164d
 3699 0586 91050000 		.4byte	0x591
 3700 058a 15       		.uleb128 0x15
 3701 058b 01       		.uleb128 0x1
 3702 058c 50       		.byte	0x50
 3703 058d 02       		.uleb128 0x2
 3704 058e 75       		.byte	0x75
 3705 058f 10       		.sleb128 16
 3706 0590 00       		.byte	0
 3707 0591 12       		.uleb128 0x12
 3708 0592 5A000000 		.4byte	.LVL57
 3709 0596 59160000 		.4byte	0x1659
 3710 059a 00       		.byte	0
 3711 059b 12       		.uleb128 0x12
 3712 059c 08000000 		.4byte	.LVL46
 3713 05a0 22160000 		.4byte	0x1622
 3714 05a4 12       		.uleb128 0x12
 3715 05a5 38000000 		.4byte	.LVL52
 3716 05a9 2D160000 		.4byte	0x162d
 3717 05ad 12       		.uleb128 0x12
 3718 05ae 3C000000 		.4byte	.LVL53
 3719 05b2 22160000 		.4byte	0x1622
 3720 05b6 12       		.uleb128 0x12
 3721 05b7 6C000000 		.4byte	.LVL60
 3722 05bb 2D160000 		.4byte	0x162d
 3723 05bf 00       		.byte	0
 3724 05c0 18       		.uleb128 0x18
 3725 05c1 58080000 		.4byte	.LASF82
 3726 05c5 01       		.byte	0x1
 3727 05c6 F7       		.byte	0xf7
 3728 05c7 EF000000 		.4byte	0xef
 3729 05cb 00000000 		.4byte	.LFB32
 3730 05cf 6C000000 		.4byte	.LFE32-.LFB32
 3731 05d3 01       		.uleb128 0x1
 3732 05d4 9C       		.byte	0x9c
 3733 05d5 5E060000 		.4byte	0x65e
 3734 05d9 19       		.uleb128 0x19
 3735 05da EC010000 		.4byte	.LASF75
 3736 05de 01       		.byte	0x1
 3737 05df F7       		.byte	0xf7
 3738 05e0 23020000 		.4byte	0x223
 3739 05e4 42030000 		.4byte	.LLST16
 3740 05e8 19       		.uleb128 0x19
 3741 05e9 68050000 		.4byte	.LASF76
 3742 05ed 01       		.byte	0x1
 3743 05ee F7       		.byte	0xf7
 3744 05ef EF000000 		.4byte	0xef
 3745 05f3 6E030000 		.4byte	.LLST17
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 122


 3746 05f7 1A       		.uleb128 0x1a
 3747 05f8 1B070000 		.4byte	.LASF65
 3748 05fc 01       		.byte	0x1
 3749 05fd F9       		.byte	0xf9
 3750 05fe A9040000 		.4byte	0x4a9
 3751 0602 9A030000 		.4byte	.LLST18
 3752 0606 12       		.uleb128 0x12
 3753 0607 12000000 		.4byte	.LVL65
 3754 060b 22160000 		.4byte	0x1622
 3755 060f 17       		.uleb128 0x17
 3756 0610 4A000000 		.4byte	.LVL66
 3757 0614 4D160000 		.4byte	0x164d
 3758 0618 23060000 		.4byte	0x623
 3759 061c 15       		.uleb128 0x15
 3760 061d 01       		.uleb128 0x1
 3761 061e 50       		.byte	0x50
 3762 061f 02       		.uleb128 0x2
 3763 0620 74       		.byte	0x74
 3764 0621 10       		.sleb128 16
 3765 0622 00       		.byte	0
 3766 0623 12       		.uleb128 0x12
 3767 0624 52000000 		.4byte	.LVL67
 3768 0628 65160000 		.4byte	0x1665
 3769 062c 17       		.uleb128 0x17
 3770 062d 5C000000 		.4byte	.LVL68
 3771 0631 70160000 		.4byte	0x1670
 3772 0635 40060000 		.4byte	0x640
 3773 0639 15       		.uleb128 0x15
 3774 063a 01       		.uleb128 0x1
 3775 063b 50       		.byte	0x50
 3776 063c 02       		.uleb128 0x2
 3777 063d 74       		.byte	0x74
 3778 063e 10       		.sleb128 16
 3779 063f 00       		.byte	0
 3780 0640 17       		.uleb128 0x17
 3781 0641 64000000 		.4byte	.LVL69
 3782 0645 70160000 		.4byte	0x1670
 3783 0649 54060000 		.4byte	0x654
 3784 064d 15       		.uleb128 0x15
 3785 064e 01       		.uleb128 0x1
 3786 064f 50       		.byte	0x50
 3787 0650 02       		.uleb128 0x2
 3788 0651 74       		.byte	0x74
 3789 0652 24       		.sleb128 36
 3790 0653 00       		.byte	0
 3791 0654 12       		.uleb128 0x12
 3792 0655 68000000 		.4byte	.LVL70
 3793 0659 2D160000 		.4byte	0x162d
 3794 065d 00       		.byte	0
 3795 065e 13       		.uleb128 0x13
 3796 065f AB010000 		.4byte	.LASF77
 3797 0663 01       		.byte	0x1
 3798 0664 9801     		.2byte	0x198
 3799 0666 00000000 		.4byte	.LFB34
 3800 066a 1C000000 		.4byte	.LFE34-.LFB34
 3801 066e 01       		.uleb128 0x1
 3802 066f 9C       		.byte	0x9c
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 123


 3803 0670 DA060000 		.4byte	0x6da
 3804 0674 10       		.uleb128 0x10
 3805 0675 12060000 		.4byte	.LASF78
 3806 0679 01       		.byte	0x1
 3807 067a 9801     		.2byte	0x198
 3808 067c DA060000 		.4byte	0x6da
 3809 0680 C6030000 		.4byte	.LLST19
 3810 0684 10       		.uleb128 0x10
 3811 0685 FA030000 		.4byte	.LASF53
 3812 0689 01       		.byte	0x1
 3813 068a 9801     		.2byte	0x198
 3814 068c DA060000 		.4byte	0x6da
 3815 0690 F3030000 		.4byte	.LLST20
 3816 0694 10       		.uleb128 0x10
 3817 0695 2D050000 		.4byte	.LASF79
 3818 0699 01       		.byte	0x1
 3819 069a 9801     		.2byte	0x198
 3820 069c 10010000 		.4byte	0x110
 3821 06a0 21040000 		.4byte	.LLST21
 3822 06a4 10       		.uleb128 0x10
 3823 06a5 D0050000 		.4byte	.LASF80
 3824 06a9 01       		.byte	0x1
 3825 06aa 9801     		.2byte	0x198
 3826 06ac DF060000 		.4byte	0x6df
 3827 06b0 42040000 		.4byte	.LLST22
 3828 06b4 1B       		.uleb128 0x1b
 3829 06b5 B4000000 		.4byte	.LASF81
 3830 06b9 01       		.byte	0x1
 3831 06ba 9801     		.2byte	0x198
 3832 06bc A3040000 		.4byte	0x4a3
 3833 06c0 02       		.uleb128 0x2
 3834 06c1 91       		.byte	0x91
 3835 06c2 00       		.sleb128 0
 3836 06c3 14       		.uleb128 0x14
 3837 06c4 1A000000 		.4byte	.LVL77
 3838 06c8 C0050000 		.4byte	0x5c0
 3839 06cc 15       		.uleb128 0x15
 3840 06cd 01       		.uleb128 0x1
 3841 06ce 50       		.byte	0x50
 3842 06cf 03       		.uleb128 0x3
 3843 06d0 91       		.byte	0x91
 3844 06d1 00       		.sleb128 0
 3845 06d2 06       		.byte	0x6
 3846 06d3 15       		.uleb128 0x15
 3847 06d4 01       		.uleb128 0x1
 3848 06d5 51       		.byte	0x51
 3849 06d6 01       		.uleb128 0x1
 3850 06d7 31       		.byte	0x31
 3851 06d8 00       		.byte	0
 3852 06d9 00       		.byte	0
 3853 06da 07       		.uleb128 0x7
 3854 06db FA000000 		.4byte	0xfa
 3855 06df 07       		.uleb128 0x7
 3856 06e0 CB000000 		.4byte	0xcb
 3857 06e4 1C       		.uleb128 0x1c
 3858 06e5 DB040000 		.4byte	.LASF83
 3859 06e9 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 124


 3860 06ea 6601     		.2byte	0x166
 3861 06ec 23020000 		.4byte	0x223
 3862 06f0 00000000 		.4byte	.LFB33
 3863 06f4 3E000000 		.4byte	.LFE33-.LFB33
 3864 06f8 01       		.uleb128 0x1
 3865 06f9 9C       		.byte	0x9c
 3866 06fa 90070000 		.4byte	0x790
 3867 06fe 10       		.uleb128 0x10
 3868 06ff 12060000 		.4byte	.LASF78
 3869 0703 01       		.byte	0x1
 3870 0704 6601     		.2byte	0x166
 3871 0706 DA060000 		.4byte	0x6da
 3872 070a 63040000 		.4byte	.LLST23
 3873 070e 10       		.uleb128 0x10
 3874 070f FA030000 		.4byte	.LASF53
 3875 0713 01       		.byte	0x1
 3876 0714 6601     		.2byte	0x166
 3877 0716 DA060000 		.4byte	0x6da
 3878 071a A5040000 		.4byte	.LLST24
 3879 071e 10       		.uleb128 0x10
 3880 071f D0050000 		.4byte	.LASF80
 3881 0723 01       		.byte	0x1
 3882 0724 6601     		.2byte	0x166
 3883 0726 DF060000 		.4byte	0x6df
 3884 072a D1040000 		.4byte	.LLST25
 3885 072e 11       		.uleb128 0x11
 3886 072f B4000000 		.4byte	.LASF81
 3887 0733 01       		.byte	0x1
 3888 0734 6801     		.2byte	0x168
 3889 0736 A3040000 		.4byte	0x4a3
 3890 073a F2040000 		.4byte	.LLST26
 3891 073e 11       		.uleb128 0x11
 3892 073f 8C060000 		.4byte	.LASF84
 3893 0743 01       		.byte	0x1
 3894 0744 6901     		.2byte	0x169
 3895 0746 25000000 		.4byte	0x25
 3896 074a 1B050000 		.4byte	.LLST27
 3897 074e 1D       		.uleb128 0x1d
 3898 074f 2D050000 		.4byte	.LASF79
 3899 0753 01       		.byte	0x1
 3900 0754 6A01     		.2byte	0x16a
 3901 0756 10010000 		.4byte	0x110
 3902 075a 01       		.uleb128 0x1
 3903 075b 52       		.byte	0x52
 3904 075c 12       		.uleb128 0x12
 3905 075d 24000000 		.4byte	.LVL84
 3906 0761 7C160000 		.4byte	0x167c
 3907 0765 14       		.uleb128 0x14
 3908 0766 38000000 		.4byte	.LVL87
 3909 076a 5E060000 		.4byte	0x65e
 3910 076e 15       		.uleb128 0x15
 3911 076f 01       		.uleb128 0x1
 3912 0770 50       		.byte	0x50
 3913 0771 02       		.uleb128 0x2
 3914 0772 76       		.byte	0x76
 3915 0773 00       		.sleb128 0
 3916 0774 15       		.uleb128 0x15
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 125


 3917 0775 01       		.uleb128 0x1
 3918 0776 51       		.byte	0x51
 3919 0777 02       		.uleb128 0x2
 3920 0778 77       		.byte	0x77
 3921 0779 00       		.sleb128 0
 3922 077a 15       		.uleb128 0x15
 3923 077b 01       		.uleb128 0x1
 3924 077c 52       		.byte	0x52
 3925 077d 03       		.uleb128 0x3
 3926 077e 74       		.byte	0x74
 3927 077f C800     		.sleb128 72
 3928 0781 15       		.uleb128 0x15
 3929 0782 01       		.uleb128 0x1
 3930 0783 53       		.byte	0x53
 3931 0784 02       		.uleb128 0x2
 3932 0785 75       		.byte	0x75
 3933 0786 00       		.sleb128 0
 3934 0787 15       		.uleb128 0x15
 3935 0788 02       		.uleb128 0x2
 3936 0789 7D       		.byte	0x7d
 3937 078a 00       		.sleb128 0
 3938 078b 02       		.uleb128 0x2
 3939 078c 74       		.byte	0x74
 3940 078d 00       		.sleb128 0
 3941 078e 00       		.byte	0
 3942 078f 00       		.byte	0
 3943 0790 1C       		.uleb128 0x1c
 3944 0791 B4030000 		.4byte	.LASF85
 3945 0795 01       		.byte	0x1
 3946 0796 D502     		.2byte	0x2d5
 3947 0798 EF000000 		.4byte	0xef
 3948 079c 00000000 		.4byte	.LFB37
 3949 07a0 48010000 		.4byte	.LFE37-.LFB37
 3950 07a4 01       		.uleb128 0x1
 3951 07a5 9C       		.byte	0x9c
 3952 07a6 6E090000 		.4byte	0x96e
 3953 07aa 10       		.uleb128 0x10
 3954 07ab EC010000 		.4byte	.LASF75
 3955 07af 01       		.byte	0x1
 3956 07b0 D502     		.2byte	0x2d5
 3957 07b2 23020000 		.4byte	0x223
 3958 07b6 47050000 		.4byte	.LLST28
 3959 07ba 10       		.uleb128 0x10
 3960 07bb AD060000 		.4byte	.LASF70
 3961 07bf 01       		.byte	0x1
 3962 07c0 D502     		.2byte	0x2d5
 3963 07c2 6E090000 		.4byte	0x96e
 3964 07c6 73050000 		.4byte	.LLST29
 3965 07ca 10       		.uleb128 0x10
 3966 07cb 0E080000 		.4byte	.LASF86
 3967 07cf 01       		.byte	0x1
 3968 07d0 D502     		.2byte	0x2d5
 3969 07d2 05010000 		.4byte	0x105
 3970 07d6 9F050000 		.4byte	.LLST30
 3971 07da 10       		.uleb128 0x10
 3972 07db 3B010000 		.4byte	.LASF87
 3973 07df 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 126


 3974 07e0 D502     		.2byte	0x2d5
 3975 07e2 AE040000 		.4byte	0x4ae
 3976 07e6 D6050000 		.4byte	.LLST31
 3977 07ea 11       		.uleb128 0x11
 3978 07eb 40030000 		.4byte	.LASF88
 3979 07ef 01       		.byte	0x1
 3980 07f0 D702     		.2byte	0x2d7
 3981 07f2 EF000000 		.4byte	0xef
 3982 07f6 18060000 		.4byte	.LLST32
 3983 07fa 11       		.uleb128 0x11
 3984 07fb DD010000 		.4byte	.LASF89
 3985 07ff 01       		.byte	0x1
 3986 0800 D702     		.2byte	0x2d7
 3987 0802 EF000000 		.4byte	0xef
 3988 0806 4E060000 		.4byte	.LLST33
 3989 080a 1D       		.uleb128 0x1d
 3990 080b 55030000 		.4byte	.LASF90
 3991 080f 01       		.byte	0x1
 3992 0810 D802     		.2byte	0x2d8
 3993 0812 18020000 		.4byte	0x218
 3994 0816 02       		.uleb128 0x2
 3995 0817 91       		.byte	0x91
 3996 0818 60       		.sleb128 -32
 3997 0819 11       		.uleb128 0x11
 3998 081a 1B070000 		.4byte	.LASF65
 3999 081e 01       		.byte	0x1
 4000 081f D902     		.2byte	0x2d9
 4001 0821 A9040000 		.4byte	0x4a9
 4002 0825 6C060000 		.4byte	.LLST34
 4003 0829 12       		.uleb128 0x12
 4004 082a 4E000000 		.4byte	.LVL96
 4005 082e 87160000 		.4byte	0x1687
 4006 0832 12       		.uleb128 0x12
 4007 0833 70000000 		.4byte	.LVL98
 4008 0837 22160000 		.4byte	0x1622
 4009 083b 17       		.uleb128 0x17
 4010 083c 86000000 		.4byte	.LVL99
 4011 0840 1D040000 		.4byte	0x41d
 4012 0844 5B080000 		.4byte	0x85b
 4013 0848 15       		.uleb128 0x15
 4014 0849 01       		.uleb128 0x1
 4015 084a 50       		.byte	0x50
 4016 084b 02       		.uleb128 0x2
 4017 084c 74       		.byte	0x74
 4018 084d 00       		.sleb128 0
 4019 084e 15       		.uleb128 0x15
 4020 084f 01       		.uleb128 0x1
 4021 0850 51       		.byte	0x51
 4022 0851 02       		.uleb128 0x2
 4023 0852 76       		.byte	0x76
 4024 0853 00       		.sleb128 0
 4025 0854 15       		.uleb128 0x15
 4026 0855 01       		.uleb128 0x1
 4027 0856 52       		.byte	0x52
 4028 0857 02       		.uleb128 0x2
 4029 0858 75       		.byte	0x75
 4030 0859 00       		.sleb128 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 127


 4031 085a 00       		.byte	0
 4032 085b 17       		.uleb128 0x17
 4033 085c 94000000 		.4byte	.LVL101
 4034 0860 4D160000 		.4byte	0x164d
 4035 0864 6F080000 		.4byte	0x86f
 4036 0868 15       		.uleb128 0x15
 4037 0869 01       		.uleb128 0x1
 4038 086a 50       		.byte	0x50
 4039 086b 02       		.uleb128 0x2
 4040 086c 74       		.byte	0x74
 4041 086d 24       		.sleb128 36
 4042 086e 00       		.byte	0
 4043 086f 12       		.uleb128 0x12
 4044 0870 9C000000 		.4byte	.LVL102
 4045 0874 65160000 		.4byte	0x1665
 4046 0878 12       		.uleb128 0x12
 4047 0879 A6000000 		.4byte	.LVL104
 4048 087d 65160000 		.4byte	0x1665
 4049 0881 12       		.uleb128 0x12
 4050 0882 AA000000 		.4byte	.LVL105
 4051 0886 2D160000 		.4byte	0x162d
 4052 088a 12       		.uleb128 0x12
 4053 088b B8000000 		.4byte	.LVL106
 4054 088f 2D160000 		.4byte	0x162d
 4055 0893 17       		.uleb128 0x17
 4056 0894 C6000000 		.4byte	.LVL107
 4057 0898 93160000 		.4byte	0x1693
 4058 089c A7080000 		.4byte	0x8a7
 4059 08a0 15       		.uleb128 0x15
 4060 08a1 01       		.uleb128 0x1
 4061 08a2 50       		.byte	0x50
 4062 08a3 02       		.uleb128 0x2
 4063 08a4 91       		.byte	0x91
 4064 08a5 60       		.sleb128 -32
 4065 08a6 00       		.byte	0
 4066 08a7 12       		.uleb128 0x12
 4067 08a8 CC000000 		.4byte	.LVL109
 4068 08ac 2D160000 		.4byte	0x162d
 4069 08b0 12       		.uleb128 0x12
 4070 08b1 D0000000 		.4byte	.LVL110
 4071 08b5 9F160000 		.4byte	0x169f
 4072 08b9 12       		.uleb128 0x12
 4073 08ba D4000000 		.4byte	.LVL111
 4074 08be 22160000 		.4byte	0x1622
 4075 08c2 12       		.uleb128 0x12
 4076 08c3 F8000000 		.4byte	.LVL112
 4077 08c7 2D160000 		.4byte	0x162d
 4078 08cb 17       		.uleb128 0x17
 4079 08cc 00010000 		.4byte	.LVL114
 4080 08d0 AB160000 		.4byte	0x16ab
 4081 08d4 E5080000 		.4byte	0x8e5
 4082 08d8 15       		.uleb128 0x15
 4083 08d9 01       		.uleb128 0x1
 4084 08da 50       		.byte	0x50
 4085 08db 02       		.uleb128 0x2
 4086 08dc 91       		.byte	0x91
 4087 08dd 60       		.sleb128 -32
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 128


 4088 08de 15       		.uleb128 0x15
 4089 08df 01       		.uleb128 0x1
 4090 08e0 51       		.byte	0x51
 4091 08e1 02       		.uleb128 0x2
 4092 08e2 91       		.byte	0x91
 4093 08e3 5C       		.sleb128 -36
 4094 08e4 00       		.byte	0
 4095 08e5 17       		.uleb128 0x17
 4096 08e6 0A010000 		.4byte	.LVL115
 4097 08ea 83030000 		.4byte	0x383
 4098 08ee F9080000 		.4byte	0x8f9
 4099 08f2 15       		.uleb128 0x15
 4100 08f3 01       		.uleb128 0x1
 4101 08f4 50       		.byte	0x50
 4102 08f5 02       		.uleb128 0x2
 4103 08f6 74       		.byte	0x74
 4104 08f7 00       		.sleb128 0
 4105 08f8 00       		.byte	0
 4106 08f9 17       		.uleb128 0x17
 4107 08fa 18010000 		.4byte	.LVL116
 4108 08fe B7160000 		.4byte	0x16b7
 4109 0902 0D090000 		.4byte	0x90d
 4110 0906 15       		.uleb128 0x15
 4111 0907 01       		.uleb128 0x1
 4112 0908 50       		.byte	0x50
 4113 0909 02       		.uleb128 0x2
 4114 090a 74       		.byte	0x74
 4115 090b 10       		.sleb128 16
 4116 090c 00       		.byte	0
 4117 090d 17       		.uleb128 0x17
 4118 090e 1E010000 		.4byte	.LVL117
 4119 0912 FF040000 		.4byte	0x4ff
 4120 0916 21090000 		.4byte	0x921
 4121 091a 15       		.uleb128 0x15
 4122 091b 01       		.uleb128 0x1
 4123 091c 50       		.byte	0x50
 4124 091d 02       		.uleb128 0x2
 4125 091e 74       		.byte	0x74
 4126 091f 00       		.sleb128 0
 4127 0920 00       		.byte	0
 4128 0921 12       		.uleb128 0x12
 4129 0922 22010000 		.4byte	.LVL118
 4130 0926 C3160000 		.4byte	0x16c3
 4131 092a 12       		.uleb128 0x12
 4132 092b 2A010000 		.4byte	.LVL119
 4133 092f 65160000 		.4byte	0x1665
 4134 0933 17       		.uleb128 0x17
 4135 0934 32010000 		.4byte	.LVL120
 4136 0938 FF040000 		.4byte	0x4ff
 4137 093c 47090000 		.4byte	0x947
 4138 0940 15       		.uleb128 0x15
 4139 0941 01       		.uleb128 0x1
 4140 0942 50       		.byte	0x50
 4141 0943 02       		.uleb128 0x2
 4142 0944 74       		.byte	0x74
 4143 0945 00       		.sleb128 0
 4144 0946 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 129


 4145 0947 12       		.uleb128 0x12
 4146 0948 36010000 		.4byte	.LVL121
 4147 094c C3160000 		.4byte	0x16c3
 4148 0950 17       		.uleb128 0x17
 4149 0951 3E010000 		.4byte	.LVL122
 4150 0955 FF040000 		.4byte	0x4ff
 4151 0959 64090000 		.4byte	0x964
 4152 095d 15       		.uleb128 0x15
 4153 095e 01       		.uleb128 0x1
 4154 095f 50       		.byte	0x50
 4155 0960 02       		.uleb128 0x2
 4156 0961 74       		.byte	0x74
 4157 0962 00       		.sleb128 0
 4158 0963 00       		.byte	0
 4159 0964 12       		.uleb128 0x12
 4160 0965 42010000 		.4byte	.LVL123
 4161 0969 C3160000 		.4byte	0x16c3
 4162 096d 00       		.byte	0
 4163 096e 07       		.uleb128 0x7
 4164 096f B9000000 		.4byte	0xb9
 4165 0973 13       		.uleb128 0x13
 4166 0974 0F050000 		.4byte	.LASF91
 4167 0978 01       		.byte	0x1
 4168 0979 C401     		.2byte	0x1c4
 4169 097b 00000000 		.4byte	.LFB35
 4170 097f 18000000 		.4byte	.LFE35-.LFB35
 4171 0983 01       		.uleb128 0x1
 4172 0984 9C       		.byte	0x9c
 4173 0985 BA090000 		.4byte	0x9ba
 4174 0989 10       		.uleb128 0x10
 4175 098a B4000000 		.4byte	.LASF81
 4176 098e 01       		.byte	0x1
 4177 098f C401     		.2byte	0x1c4
 4178 0991 A3040000 		.4byte	0x4a3
 4179 0995 98060000 		.4byte	.LLST35
 4180 0999 14       		.uleb128 0x14
 4181 099a 16000000 		.4byte	.LVL129
 4182 099e 90070000 		.4byte	0x790
 4183 09a2 15       		.uleb128 0x15
 4184 09a3 01       		.uleb128 0x1
 4185 09a4 50       		.byte	0x50
 4186 09a5 03       		.uleb128 0x3
 4187 09a6 F3       		.byte	0xf3
 4188 09a7 01       		.uleb128 0x1
 4189 09a8 50       		.byte	0x50
 4190 09a9 15       		.uleb128 0x15
 4191 09aa 01       		.uleb128 0x1
 4192 09ab 51       		.byte	0x51
 4193 09ac 01       		.uleb128 0x1
 4194 09ad 30       		.byte	0x30
 4195 09ae 15       		.uleb128 0x15
 4196 09af 01       		.uleb128 0x1
 4197 09b0 52       		.byte	0x52
 4198 09b1 01       		.uleb128 0x1
 4199 09b2 30       		.byte	0x30
 4200 09b3 15       		.uleb128 0x15
 4201 09b4 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 130


 4202 09b5 53       		.byte	0x53
 4203 09b6 01       		.uleb128 0x1
 4204 09b7 30       		.byte	0x30
 4205 09b8 00       		.byte	0
 4206 09b9 00       		.byte	0
 4207 09ba 1C       		.uleb128 0x1c
 4208 09bb EF040000 		.4byte	.LASF92
 4209 09bf 01       		.byte	0x1
 4210 09c0 E201     		.2byte	0x1e2
 4211 09c2 23020000 		.4byte	0x223
 4212 09c6 00000000 		.4byte	.LFB36
 4213 09ca 16000000 		.4byte	.LFE36-.LFB36
 4214 09ce 01       		.uleb128 0x1
 4215 09cf 9C       		.byte	0x9c
 4216 09d0 370A0000 		.4byte	0xa37
 4217 09d4 10       		.uleb128 0x10
 4218 09d5 D0050000 		.4byte	.LASF80
 4219 09d9 01       		.byte	0x1
 4220 09da E201     		.2byte	0x1e2
 4221 09dc DF060000 		.4byte	0x6df
 4222 09e0 B9060000 		.4byte	.LLST36
 4223 09e4 11       		.uleb128 0x11
 4224 09e5 B4000000 		.4byte	.LASF81
 4225 09e9 01       		.byte	0x1
 4226 09ea E401     		.2byte	0x1e4
 4227 09ec A3040000 		.4byte	0x4a3
 4228 09f0 DA060000 		.4byte	.LLST37
 4229 09f4 1E       		.uleb128 0x1e
 4230 09f5 1D040000 		.4byte	.LASF93
 4231 09f9 01       		.byte	0x1
 4232 09fa E501     		.2byte	0x1e5
 4233 09fc DA060000 		.4byte	0x6da
 4234 0a00 01       		.byte	0x1
 4235 0a01 1E       		.uleb128 0x1e
 4236 0a02 D1010000 		.4byte	.LASF94
 4237 0a06 01       		.byte	0x1
 4238 0a07 E501     		.2byte	0x1e5
 4239 0a09 DA060000 		.4byte	0x6da
 4240 0a0d 00       		.byte	0
 4241 0a0e 17       		.uleb128 0x17
 4242 0a0f 0C000000 		.4byte	.LVL133
 4243 0a13 E4060000 		.4byte	0x6e4
 4244 0a17 260A0000 		.4byte	0xa26
 4245 0a1b 15       		.uleb128 0x15
 4246 0a1c 01       		.uleb128 0x1
 4247 0a1d 50       		.byte	0x50
 4248 0a1e 01       		.uleb128 0x1
 4249 0a1f 31       		.byte	0x31
 4250 0a20 15       		.uleb128 0x15
 4251 0a21 01       		.uleb128 0x1
 4252 0a22 51       		.byte	0x51
 4253 0a23 01       		.uleb128 0x1
 4254 0a24 30       		.byte	0x30
 4255 0a25 00       		.byte	0
 4256 0a26 14       		.uleb128 0x14
 4257 0a27 12000000 		.4byte	.LVL135
 4258 0a2b 73090000 		.4byte	0x973
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 131


 4259 0a2f 15       		.uleb128 0x15
 4260 0a30 01       		.uleb128 0x1
 4261 0a31 50       		.byte	0x50
 4262 0a32 02       		.uleb128 0x2
 4263 0a33 74       		.byte	0x74
 4264 0a34 00       		.sleb128 0
 4265 0a35 00       		.byte	0
 4266 0a36 00       		.byte	0
 4267 0a37 1C       		.uleb128 0x1c
 4268 0a38 88030000 		.4byte	.LASF95
 4269 0a3c 01       		.byte	0x1
 4270 0a3d 9B03     		.2byte	0x39b
 4271 0a3f EF000000 		.4byte	0xef
 4272 0a43 00000000 		.4byte	.LFB38
 4273 0a47 B6000000 		.4byte	.LFE38-.LFB38
 4274 0a4b 01       		.uleb128 0x1
 4275 0a4c 9C       		.byte	0x9c
 4276 0a4d 270B0000 		.4byte	0xb27
 4277 0a51 10       		.uleb128 0x10
 4278 0a52 EC010000 		.4byte	.LASF75
 4279 0a56 01       		.byte	0x1
 4280 0a57 9B03     		.2byte	0x39b
 4281 0a59 23020000 		.4byte	0x223
 4282 0a5d 03070000 		.4byte	.LLST38
 4283 0a61 10       		.uleb128 0x10
 4284 0a62 AD060000 		.4byte	.LASF70
 4285 0a66 01       		.byte	0x1
 4286 0a67 9B03     		.2byte	0x39b
 4287 0a69 6E090000 		.4byte	0x96e
 4288 0a6d AC070000 		.4byte	.LLST39
 4289 0a71 10       		.uleb128 0x10
 4290 0a72 67000000 		.4byte	.LASF96
 4291 0a76 01       		.byte	0x1
 4292 0a77 9B03     		.2byte	0x39b
 4293 0a79 2D0B0000 		.4byte	0xb2d
 4294 0a7d D7070000 		.4byte	.LLST40
 4295 0a81 10       		.uleb128 0x10
 4296 0a82 3B010000 		.4byte	.LASF87
 4297 0a86 01       		.byte	0x1
 4298 0a87 9B03     		.2byte	0x39b
 4299 0a89 AE040000 		.4byte	0x4ae
 4300 0a8d 03080000 		.4byte	.LLST41
 4301 0a91 11       		.uleb128 0x11
 4302 0a92 23070000 		.4byte	.LASF67
 4303 0a96 01       		.byte	0x1
 4304 0a97 9D03     		.2byte	0x39d
 4305 0a99 EF000000 		.4byte	0xef
 4306 0a9d 2F080000 		.4byte	.LLST42
 4307 0aa1 11       		.uleb128 0x11
 4308 0aa2 94010000 		.4byte	.LASF97
 4309 0aa6 01       		.byte	0x1
 4310 0aa7 9E03     		.2byte	0x39e
 4311 0aa9 FA000000 		.4byte	0xfa
 4312 0aad 4D080000 		.4byte	.LLST43
 4313 0ab1 11       		.uleb128 0x11
 4314 0ab2 1B070000 		.4byte	.LASF65
 4315 0ab6 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 132


 4316 0ab7 9F03     		.2byte	0x39f
 4317 0ab9 A9040000 		.4byte	0x4a9
 4318 0abd 83080000 		.4byte	.LLST44
 4319 0ac1 1F       		.uleb128 0x1f
 4320 0ac2 00000000 		.4byte	.Ldebug_ranges0+0
 4321 0ac6 0C0B0000 		.4byte	0xb0c
 4322 0aca 11       		.uleb128 0x11
 4323 0acb 09010000 		.4byte	.LASF55
 4324 0acf 01       		.byte	0x1
 4325 0ad0 BE03     		.2byte	0x3be
 4326 0ad2 320B0000 		.4byte	0xb32
 4327 0ad6 2C090000 		.4byte	.LLST45
 4328 0ada 17       		.uleb128 0x17
 4329 0adb 6E000000 		.4byte	.LVL144
 4330 0adf 1D040000 		.4byte	0x41d
 4331 0ae3 FB0A0000 		.4byte	0xafb
 4332 0ae7 15       		.uleb128 0x15
 4333 0ae8 01       		.uleb128 0x1
 4334 0ae9 50       		.byte	0x50
 4335 0aea 02       		.uleb128 0x2
 4336 0aeb 74       		.byte	0x74
 4337 0aec 00       		.sleb128 0
 4338 0aed 15       		.uleb128 0x15
 4339 0aee 01       		.uleb128 0x1
 4340 0aef 51       		.byte	0x51
 4341 0af0 03       		.uleb128 0x3
 4342 0af1 7D       		.byte	0x7d
 4343 0af2 00       		.sleb128 0
 4344 0af3 06       		.byte	0x6
 4345 0af4 15       		.uleb128 0x15
 4346 0af5 01       		.uleb128 0x1
 4347 0af6 52       		.byte	0x52
 4348 0af7 02       		.uleb128 0x2
 4349 0af8 77       		.byte	0x77
 4350 0af9 00       		.sleb128 0
 4351 0afa 00       		.byte	0
 4352 0afb 14       		.uleb128 0x14
 4353 0afc 80000000 		.4byte	.LVL145
 4354 0b00 4D160000 		.4byte	0x164d
 4355 0b04 15       		.uleb128 0x15
 4356 0b05 01       		.uleb128 0x1
 4357 0b06 50       		.byte	0x50
 4358 0b07 02       		.uleb128 0x2
 4359 0b08 74       		.byte	0x74
 4360 0b09 24       		.sleb128 36
 4361 0b0a 00       		.byte	0
 4362 0b0b 00       		.byte	0
 4363 0b0c 12       		.uleb128 0x12
 4364 0b0d 50000000 		.4byte	.LVL140
 4365 0b11 CF160000 		.4byte	0x16cf
 4366 0b15 14       		.uleb128 0x14
 4367 0b16 B0000000 		.4byte	.LVL159
 4368 0b1a DA160000 		.4byte	0x16da
 4369 0b1e 15       		.uleb128 0x15
 4370 0b1f 01       		.uleb128 0x1
 4371 0b20 50       		.byte	0x50
 4372 0b21 03       		.uleb128 0x3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 133


 4373 0b22 91       		.byte	0x91
 4374 0b23 64       		.sleb128 -28
 4375 0b24 06       		.byte	0x6
 4376 0b25 00       		.byte	0
 4377 0b26 00       		.byte	0
 4378 0b27 06       		.uleb128 0x6
 4379 0b28 04       		.byte	0x4
 4380 0b29 EF000000 		.4byte	0xef
 4381 0b2d 07       		.uleb128 0x7
 4382 0b2e 270B0000 		.4byte	0xb27
 4383 0b32 07       		.uleb128 0x7
 4384 0b33 C0000000 		.4byte	0xc0
 4385 0b37 1C       		.uleb128 0x1c
 4386 0b38 56040000 		.4byte	.LASF98
 4387 0b3c 01       		.byte	0x1
 4388 0b3d 3204     		.2byte	0x432
 4389 0b3f EF000000 		.4byte	0xef
 4390 0b43 00000000 		.4byte	.LFB39
 4391 0b47 94000000 		.4byte	.LFE39-.LFB39
 4392 0b4b 01       		.uleb128 0x1
 4393 0b4c 9C       		.byte	0x9c
 4394 0b4d FF0B0000 		.4byte	0xbff
 4395 0b51 10       		.uleb128 0x10
 4396 0b52 EC010000 		.4byte	.LASF75
 4397 0b56 01       		.byte	0x1
 4398 0b57 3204     		.2byte	0x432
 4399 0b59 23020000 		.4byte	0x223
 4400 0b5d 57090000 		.4byte	.LLST46
 4401 0b61 10       		.uleb128 0x10
 4402 0b62 67000000 		.4byte	.LASF96
 4403 0b66 01       		.byte	0x1
 4404 0b67 3204     		.2byte	0x432
 4405 0b69 2D0B0000 		.4byte	0xb2d
 4406 0b6d 000A0000 		.4byte	.LLST47
 4407 0b71 11       		.uleb128 0x11
 4408 0b72 23070000 		.4byte	.LASF67
 4409 0b76 01       		.byte	0x1
 4410 0b77 3404     		.2byte	0x434
 4411 0b79 EF000000 		.4byte	0xef
 4412 0b7d 2C0A0000 		.4byte	.LLST48
 4413 0b81 11       		.uleb128 0x11
 4414 0b82 94010000 		.4byte	.LASF97
 4415 0b86 01       		.byte	0x1
 4416 0b87 3504     		.2byte	0x435
 4417 0b89 FA000000 		.4byte	0xfa
 4418 0b8d 4A0A0000 		.4byte	.LLST49
 4419 0b91 11       		.uleb128 0x11
 4420 0b92 1B070000 		.4byte	.LASF65
 4421 0b96 01       		.byte	0x1
 4422 0b97 3604     		.2byte	0x436
 4423 0b99 A9040000 		.4byte	0x4a9
 4424 0b9d 7E0A0000 		.4byte	.LLST50
 4425 0ba1 16       		.uleb128 0x16
 4426 0ba2 3C000000 		.4byte	.LBB6
 4427 0ba6 4E000000 		.4byte	.LBE6-.LBB6
 4428 0baa E50B0000 		.4byte	0xbe5
 4429 0bae 11       		.uleb128 0x11
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 134


 4430 0baf 78020000 		.4byte	.LASF51
 4431 0bb3 01       		.byte	0x1
 4432 0bb4 5B04     		.2byte	0x45b
 4433 0bb6 DA060000 		.4byte	0x6da
 4434 0bba 270B0000 		.4byte	.LLST51
 4435 0bbe 20       		.uleb128 0x20
 4436 0bbf 18000000 		.4byte	.Ldebug_ranges0+0x18
 4437 0bc3 11       		.uleb128 0x11
 4438 0bc4 09010000 		.4byte	.LASF55
 4439 0bc8 01       		.byte	0x1
 4440 0bc9 6204     		.2byte	0x462
 4441 0bcb 320B0000 		.4byte	0xb32
 4442 0bcf 950B0000 		.4byte	.LLST52
 4443 0bd3 14       		.uleb128 0x14
 4444 0bd4 60000000 		.4byte	.LVL174
 4445 0bd8 4D160000 		.4byte	0x164d
 4446 0bdc 15       		.uleb128 0x15
 4447 0bdd 01       		.uleb128 0x1
 4448 0bde 50       		.byte	0x50
 4449 0bdf 02       		.uleb128 0x2
 4450 0be0 74       		.byte	0x74
 4451 0be1 24       		.sleb128 36
 4452 0be2 00       		.byte	0
 4453 0be3 00       		.byte	0
 4454 0be4 00       		.byte	0
 4455 0be5 12       		.uleb128 0x12
 4456 0be6 3A000000 		.4byte	.LVL166
 4457 0bea CF160000 		.4byte	0x16cf
 4458 0bee 14       		.uleb128 0x14
 4459 0bef 90000000 		.4byte	.LVL189
 4460 0bf3 DA160000 		.4byte	0x16da
 4461 0bf7 15       		.uleb128 0x15
 4462 0bf8 01       		.uleb128 0x1
 4463 0bf9 50       		.byte	0x50
 4464 0bfa 02       		.uleb128 0x2
 4465 0bfb 75       		.byte	0x75
 4466 0bfc 00       		.sleb128 0
 4467 0bfd 00       		.byte	0
 4468 0bfe 00       		.byte	0
 4469 0bff 1C       		.uleb128 0x1c
 4470 0c00 2D000000 		.4byte	.LASF99
 4471 0c04 01       		.byte	0x1
 4472 0c05 D704     		.2byte	0x4d7
 4473 0c07 EF000000 		.4byte	0xef
 4474 0c0b 00000000 		.4byte	.LFB40
 4475 0c0f 28010000 		.4byte	.LFE40-.LFB40
 4476 0c13 01       		.uleb128 0x1
 4477 0c14 9C       		.byte	0x9c
 4478 0c15 D80D0000 		.4byte	0xdd8
 4479 0c19 10       		.uleb128 0x10
 4480 0c1a EC010000 		.4byte	.LASF75
 4481 0c1e 01       		.byte	0x1
 4482 0c1f D704     		.2byte	0x4d7
 4483 0c21 23020000 		.4byte	0x223
 4484 0c25 C00B0000 		.4byte	.LLST53
 4485 0c29 10       		.uleb128 0x10
 4486 0c2a 3F020000 		.4byte	.LASF72
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 135


 4487 0c2e 01       		.byte	0x1
 4488 0c2f D704     		.2byte	0x4d7
 4489 0c31 FA040000 		.4byte	0x4fa
 4490 0c35 EC0B0000 		.4byte	.LLST54
 4491 0c39 10       		.uleb128 0x10
 4492 0c3a 0E080000 		.4byte	.LASF86
 4493 0c3e 01       		.byte	0x1
 4494 0c3f D704     		.2byte	0x4d7
 4495 0c41 05010000 		.4byte	0x105
 4496 0c45 180C0000 		.4byte	.LLST55
 4497 0c49 11       		.uleb128 0x11
 4498 0c4a 40030000 		.4byte	.LASF88
 4499 0c4e 01       		.byte	0x1
 4500 0c4f D904     		.2byte	0x4d9
 4501 0c51 EF000000 		.4byte	0xef
 4502 0c55 4F0C0000 		.4byte	.LLST56
 4503 0c59 1D       		.uleb128 0x1d
 4504 0c5a 55030000 		.4byte	.LASF90
 4505 0c5e 01       		.byte	0x1
 4506 0c5f DA04     		.2byte	0x4da
 4507 0c61 18020000 		.4byte	0x218
 4508 0c65 02       		.uleb128 0x2
 4509 0c66 91       		.byte	0x91
 4510 0c67 60       		.sleb128 -32
 4511 0c68 11       		.uleb128 0x11
 4512 0c69 1B070000 		.4byte	.LASF65
 4513 0c6d 01       		.byte	0x1
 4514 0c6e DB04     		.2byte	0x4db
 4515 0c70 A9040000 		.4byte	0x4a9
 4516 0c74 850C0000 		.4byte	.LLST57
 4517 0c78 16       		.uleb128 0x16
 4518 0c79 54000000 		.4byte	.LBB9
 4519 0c7d 4A000000 		.4byte	.LBE9-.LBB9
 4520 0c81 EF0C0000 		.4byte	0xcef
 4521 0c85 11       		.uleb128 0x11
 4522 0c86 78020000 		.4byte	.LASF51
 4523 0c8a 01       		.byte	0x1
 4524 0c8b F404     		.2byte	0x4f4
 4525 0c8d DA060000 		.4byte	0x6da
 4526 0c91 B10C0000 		.4byte	.LLST58
 4527 0c95 17       		.uleb128 0x17
 4528 0c96 62000000 		.4byte	.LVL199
 4529 0c9a B3040000 		.4byte	0x4b3
 4530 0c9e AF0C0000 		.4byte	0xcaf
 4531 0ca2 15       		.uleb128 0x15
 4532 0ca3 01       		.uleb128 0x1
 4533 0ca4 50       		.byte	0x50
 4534 0ca5 02       		.uleb128 0x2
 4535 0ca6 74       		.byte	0x74
 4536 0ca7 00       		.sleb128 0
 4537 0ca8 15       		.uleb128 0x15
 4538 0ca9 01       		.uleb128 0x1
 4539 0caa 51       		.byte	0x51
 4540 0cab 02       		.uleb128 0x2
 4541 0cac 76       		.byte	0x76
 4542 0cad 00       		.sleb128 0
 4543 0cae 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 136


 4544 0caf 17       		.uleb128 0x17
 4545 0cb0 74000000 		.4byte	.LVL201
 4546 0cb4 4D160000 		.4byte	0x164d
 4547 0cb8 C30C0000 		.4byte	0xcc3
 4548 0cbc 15       		.uleb128 0x15
 4549 0cbd 01       		.uleb128 0x1
 4550 0cbe 50       		.byte	0x50
 4551 0cbf 02       		.uleb128 0x2
 4552 0cc0 74       		.byte	0x74
 4553 0cc1 10       		.sleb128 16
 4554 0cc2 00       		.byte	0
 4555 0cc3 12       		.uleb128 0x12
 4556 0cc4 7C000000 		.4byte	.LVL202
 4557 0cc8 65160000 		.4byte	0x1665
 4558 0ccc 12       		.uleb128 0x12
 4559 0ccd 80000000 		.4byte	.LVL203
 4560 0cd1 2D160000 		.4byte	0x162d
 4561 0cd5 12       		.uleb128 0x12
 4562 0cd6 8E000000 		.4byte	.LVL205
 4563 0cda 2D160000 		.4byte	0x162d
 4564 0cde 14       		.uleb128 0x14
 4565 0cdf 9C000000 		.4byte	.LVL206
 4566 0ce3 93160000 		.4byte	0x1693
 4567 0ce7 15       		.uleb128 0x15
 4568 0ce8 01       		.uleb128 0x1
 4569 0ce9 50       		.byte	0x50
 4570 0cea 02       		.uleb128 0x2
 4571 0ceb 91       		.byte	0x91
 4572 0cec 60       		.sleb128 -32
 4573 0ced 00       		.byte	0
 4574 0cee 00       		.byte	0
 4575 0cef 12       		.uleb128 0x12
 4576 0cf0 32000000 		.4byte	.LVL195
 4577 0cf4 87160000 		.4byte	0x1687
 4578 0cf8 12       		.uleb128 0x12
 4579 0cf9 54000000 		.4byte	.LVL197
 4580 0cfd 22160000 		.4byte	0x1622
 4581 0d01 12       		.uleb128 0x12
 4582 0d02 A2000000 		.4byte	.LVL208
 4583 0d06 2D160000 		.4byte	0x162d
 4584 0d0a 12       		.uleb128 0x12
 4585 0d0b A6000000 		.4byte	.LVL209
 4586 0d0f 9F160000 		.4byte	0x169f
 4587 0d13 12       		.uleb128 0x12
 4588 0d14 AA000000 		.4byte	.LVL210
 4589 0d18 22160000 		.4byte	0x1622
 4590 0d1c 12       		.uleb128 0x12
 4591 0d1d CE000000 		.4byte	.LVL211
 4592 0d21 2D160000 		.4byte	0x162d
 4593 0d25 17       		.uleb128 0x17
 4594 0d26 D6000000 		.4byte	.LVL213
 4595 0d2a AB160000 		.4byte	0x16ab
 4596 0d2e 3F0D0000 		.4byte	0xd3f
 4597 0d32 15       		.uleb128 0x15
 4598 0d33 01       		.uleb128 0x1
 4599 0d34 50       		.byte	0x50
 4600 0d35 02       		.uleb128 0x2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 137


 4601 0d36 91       		.byte	0x91
 4602 0d37 60       		.sleb128 -32
 4603 0d38 15       		.uleb128 0x15
 4604 0d39 01       		.uleb128 0x1
 4605 0d3a 51       		.byte	0x51
 4606 0d3b 02       		.uleb128 0x2
 4607 0d3c 91       		.byte	0x91
 4608 0d3d 5C       		.sleb128 -36
 4609 0d3e 00       		.byte	0
 4610 0d3f 17       		.uleb128 0x17
 4611 0d40 E0000000 		.4byte	.LVL214
 4612 0d44 D0030000 		.4byte	0x3d0
 4613 0d48 530D0000 		.4byte	0xd53
 4614 0d4c 15       		.uleb128 0x15
 4615 0d4d 01       		.uleb128 0x1
 4616 0d4e 50       		.byte	0x50
 4617 0d4f 02       		.uleb128 0x2
 4618 0d50 74       		.byte	0x74
 4619 0d51 00       		.sleb128 0
 4620 0d52 00       		.byte	0
 4621 0d53 17       		.uleb128 0x17
 4622 0d54 EE000000 		.4byte	.LVL215
 4623 0d58 B7160000 		.4byte	0x16b7
 4624 0d5c 670D0000 		.4byte	0xd67
 4625 0d60 15       		.uleb128 0x15
 4626 0d61 01       		.uleb128 0x1
 4627 0d62 50       		.byte	0x50
 4628 0d63 02       		.uleb128 0x2
 4629 0d64 74       		.byte	0x74
 4630 0d65 24       		.sleb128 36
 4631 0d66 00       		.byte	0
 4632 0d67 17       		.uleb128 0x17
 4633 0d68 F4000000 		.4byte	.LVL216
 4634 0d6c FF040000 		.4byte	0x4ff
 4635 0d70 7B0D0000 		.4byte	0xd7b
 4636 0d74 15       		.uleb128 0x15
 4637 0d75 01       		.uleb128 0x1
 4638 0d76 50       		.byte	0x50
 4639 0d77 02       		.uleb128 0x2
 4640 0d78 74       		.byte	0x74
 4641 0d79 00       		.sleb128 0
 4642 0d7a 00       		.byte	0
 4643 0d7b 12       		.uleb128 0x12
 4644 0d7c F8000000 		.4byte	.LVL217
 4645 0d80 C3160000 		.4byte	0x16c3
 4646 0d84 12       		.uleb128 0x12
 4647 0d85 00010000 		.4byte	.LVL218
 4648 0d89 65160000 		.4byte	0x1665
 4649 0d8d 17       		.uleb128 0x17
 4650 0d8e 08010000 		.4byte	.LVL219
 4651 0d92 FF040000 		.4byte	0x4ff
 4652 0d96 A10D0000 		.4byte	0xda1
 4653 0d9a 15       		.uleb128 0x15
 4654 0d9b 01       		.uleb128 0x1
 4655 0d9c 50       		.byte	0x50
 4656 0d9d 02       		.uleb128 0x2
 4657 0d9e 74       		.byte	0x74
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 138


 4658 0d9f 00       		.sleb128 0
 4659 0da0 00       		.byte	0
 4660 0da1 12       		.uleb128 0x12
 4661 0da2 0C010000 		.4byte	.LVL220
 4662 0da6 C3160000 		.4byte	0x16c3
 4663 0daa 17       		.uleb128 0x17
 4664 0dab 14010000 		.4byte	.LVL221
 4665 0daf FF040000 		.4byte	0x4ff
 4666 0db3 BE0D0000 		.4byte	0xdbe
 4667 0db7 15       		.uleb128 0x15
 4668 0db8 01       		.uleb128 0x1
 4669 0db9 50       		.byte	0x50
 4670 0dba 02       		.uleb128 0x2
 4671 0dbb 74       		.byte	0x74
 4672 0dbc 00       		.sleb128 0
 4673 0dbd 00       		.byte	0
 4674 0dbe 12       		.uleb128 0x12
 4675 0dbf 18010000 		.4byte	.LVL222
 4676 0dc3 C3160000 		.4byte	0x16c3
 4677 0dc7 14       		.uleb128 0x14
 4678 0dc8 1E010000 		.4byte	.LVL223
 4679 0dcc D0030000 		.4byte	0x3d0
 4680 0dd0 15       		.uleb128 0x15
 4681 0dd1 01       		.uleb128 0x1
 4682 0dd2 50       		.byte	0x50
 4683 0dd3 02       		.uleb128 0x2
 4684 0dd4 74       		.byte	0x74
 4685 0dd5 00       		.sleb128 0
 4686 0dd6 00       		.byte	0
 4687 0dd7 00       		.byte	0
 4688 0dd8 1C       		.uleb128 0x1c
 4689 0dd9 81000000 		.4byte	.LASF100
 4690 0ddd 01       		.byte	0x1
 4691 0dde 6505     		.2byte	0x565
 4692 0de0 EF000000 		.4byte	0xef
 4693 0de4 00000000 		.4byte	.LFB41
 4694 0de8 54010000 		.4byte	.LFE41-.LFB41
 4695 0dec 01       		.uleb128 0x1
 4696 0ded 9C       		.byte	0x9c
 4697 0dee 0C100000 		.4byte	0x100c
 4698 0df2 10       		.uleb128 0x10
 4699 0df3 EC010000 		.4byte	.LASF75
 4700 0df7 01       		.byte	0x1
 4701 0df8 6505     		.2byte	0x565
 4702 0dfa 23020000 		.4byte	0x223
 4703 0dfe DC0C0000 		.4byte	.LLST59
 4704 0e02 10       		.uleb128 0x10
 4705 0e03 0E080000 		.4byte	.LASF86
 4706 0e07 01       		.byte	0x1
 4707 0e08 6505     		.2byte	0x565
 4708 0e0a 05010000 		.4byte	0x105
 4709 0e0e 080D0000 		.4byte	.LLST60
 4710 0e12 11       		.uleb128 0x11
 4711 0e13 40030000 		.4byte	.LASF88
 4712 0e17 01       		.byte	0x1
 4713 0e18 6705     		.2byte	0x567
 4714 0e1a EF000000 		.4byte	0xef
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 139


 4715 0e1e 3F0D0000 		.4byte	.LLST61
 4716 0e22 1D       		.uleb128 0x1d
 4717 0e23 55030000 		.4byte	.LASF90
 4718 0e27 01       		.byte	0x1
 4719 0e28 6805     		.2byte	0x568
 4720 0e2a 18020000 		.4byte	0x218
 4721 0e2e 02       		.uleb128 0x2
 4722 0e2f 91       		.byte	0x91
 4723 0e30 68       		.sleb128 -24
 4724 0e31 11       		.uleb128 0x11
 4725 0e32 1B070000 		.4byte	.LASF65
 4726 0e36 01       		.byte	0x1
 4727 0e37 6905     		.2byte	0x569
 4728 0e39 A9040000 		.4byte	0x4a9
 4729 0e3d 750D0000 		.4byte	.LLST62
 4730 0e41 11       		.uleb128 0x11
 4731 0e42 2C060000 		.4byte	.LASF101
 4732 0e46 01       		.byte	0x1
 4733 0e47 6C05     		.2byte	0x56c
 4734 0e49 EF000000 		.4byte	0xef
 4735 0e4d A10D0000 		.4byte	.LLST63
 4736 0e51 16       		.uleb128 0x16
 4737 0e52 40000000 		.4byte	.LBB10
 4738 0e56 56000000 		.4byte	.LBE10-.LBB10
 4739 0e5a B70E0000 		.4byte	0xeb7
 4740 0e5e 11       		.uleb128 0x11
 4741 0e5f E3050000 		.4byte	.LASF102
 4742 0e63 01       		.byte	0x1
 4743 0e64 8805     		.2byte	0x588
 4744 0e66 DA060000 		.4byte	0x6da
 4745 0e6a D60D0000 		.4byte	.LLST64
 4746 0e6e 12       		.uleb128 0x12
 4747 0e6f 54000000 		.4byte	.LVL236
 4748 0e73 E5160000 		.4byte	0x16e5
 4749 0e77 17       		.uleb128 0x17
 4750 0e78 64000000 		.4byte	.LVL237
 4751 0e7c 4D160000 		.4byte	0x164d
 4752 0e80 8B0E0000 		.4byte	0xe8b
 4753 0e84 15       		.uleb128 0x15
 4754 0e85 01       		.uleb128 0x1
 4755 0e86 50       		.byte	0x50
 4756 0e87 02       		.uleb128 0x2
 4757 0e88 74       		.byte	0x74
 4758 0e89 10       		.sleb128 16
 4759 0e8a 00       		.byte	0
 4760 0e8b 12       		.uleb128 0x12
 4761 0e8c 6C000000 		.4byte	.LVL238
 4762 0e90 65160000 		.4byte	0x1665
 4763 0e94 12       		.uleb128 0x12
 4764 0e95 70000000 		.4byte	.LVL239
 4765 0e99 2D160000 		.4byte	0x162d
 4766 0e9d 12       		.uleb128 0x12
 4767 0e9e 86000000 		.4byte	.LVL242
 4768 0ea2 2D160000 		.4byte	0x162d
 4769 0ea6 14       		.uleb128 0x14
 4770 0ea7 94000000 		.4byte	.LVL243
 4771 0eab 93160000 		.4byte	0x1693
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 140


 4772 0eaf 15       		.uleb128 0x15
 4773 0eb0 01       		.uleb128 0x1
 4774 0eb1 50       		.byte	0x50
 4775 0eb2 02       		.uleb128 0x2
 4776 0eb3 91       		.byte	0x91
 4777 0eb4 68       		.sleb128 -24
 4778 0eb5 00       		.byte	0
 4779 0eb6 00       		.byte	0
 4780 0eb7 16       		.uleb128 0x16
 4781 0eb8 38010000 		.4byte	.LBB11
 4782 0ebc 0E000000 		.4byte	.LBE11-.LBB11
 4783 0ec0 F20E0000 		.4byte	0xef2
 4784 0ec4 11       		.uleb128 0x11
 4785 0ec5 93070000 		.4byte	.LASF103
 4786 0ec9 01       		.byte	0x1
 4787 0eca 2506     		.2byte	0x625
 4788 0ecc FA000000 		.4byte	0xfa
 4789 0ed0 110E0000 		.4byte	.LLST65
 4790 0ed4 17       		.uleb128 0x17
 4791 0ed5 3E010000 		.4byte	.LVL266
 4792 0ed9 38030000 		.4byte	0x338
 4793 0edd E80E0000 		.4byte	0xee8
 4794 0ee1 15       		.uleb128 0x15
 4795 0ee2 01       		.uleb128 0x1
 4796 0ee3 50       		.byte	0x50
 4797 0ee4 02       		.uleb128 0x2
 4798 0ee5 74       		.byte	0x74
 4799 0ee6 00       		.sleb128 0
 4800 0ee7 00       		.byte	0
 4801 0ee8 12       		.uleb128 0x12
 4802 0ee9 46010000 		.4byte	.LVL269
 4803 0eed F1160000 		.4byte	0x16f1
 4804 0ef1 00       		.byte	0
 4805 0ef2 12       		.uleb128 0x12
 4806 0ef3 1C000000 		.4byte	.LVL230
 4807 0ef7 87160000 		.4byte	0x1687
 4808 0efb 12       		.uleb128 0x12
 4809 0efc 40000000 		.4byte	.LVL232
 4810 0f00 22160000 		.4byte	0x1622
 4811 0f04 12       		.uleb128 0x12
 4812 0f05 9A000000 		.4byte	.LVL245
 4813 0f09 2D160000 		.4byte	0x162d
 4814 0f0d 12       		.uleb128 0x12
 4815 0f0e 9E000000 		.4byte	.LVL246
 4816 0f12 9F160000 		.4byte	0x169f
 4817 0f16 12       		.uleb128 0x12
 4818 0f17 A2000000 		.4byte	.LVL247
 4819 0f1b 22160000 		.4byte	0x1622
 4820 0f1f 12       		.uleb128 0x12
 4821 0f20 C6000000 		.4byte	.LVL248
 4822 0f24 2D160000 		.4byte	0x162d
 4823 0f28 17       		.uleb128 0x17
 4824 0f29 CE000000 		.4byte	.LVL250
 4825 0f2d AB160000 		.4byte	0x16ab
 4826 0f31 420F0000 		.4byte	0xf42
 4827 0f35 15       		.uleb128 0x15
 4828 0f36 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 141


 4829 0f37 50       		.byte	0x50
 4830 0f38 02       		.uleb128 0x2
 4831 0f39 91       		.byte	0x91
 4832 0f3a 68       		.sleb128 -24
 4833 0f3b 15       		.uleb128 0x15
 4834 0f3c 01       		.uleb128 0x1
 4835 0f3d 51       		.byte	0x51
 4836 0f3e 02       		.uleb128 0x2
 4837 0f3f 91       		.byte	0x91
 4838 0f40 64       		.sleb128 -28
 4839 0f41 00       		.byte	0
 4840 0f42 17       		.uleb128 0x17
 4841 0f43 D8000000 		.4byte	.LVL251
 4842 0f47 D0030000 		.4byte	0x3d0
 4843 0f4b 560F0000 		.4byte	0xf56
 4844 0f4f 15       		.uleb128 0x15
 4845 0f50 01       		.uleb128 0x1
 4846 0f51 50       		.byte	0x50
 4847 0f52 02       		.uleb128 0x2
 4848 0f53 74       		.byte	0x74
 4849 0f54 00       		.sleb128 0
 4850 0f55 00       		.byte	0
 4851 0f56 12       		.uleb128 0x12
 4852 0f57 E6000000 		.4byte	.LVL252
 4853 0f5b 22160000 		.4byte	0x1622
 4854 0f5f 12       		.uleb128 0x12
 4855 0f60 EC000000 		.4byte	.LVL253
 4856 0f64 FD160000 		.4byte	0x16fd
 4857 0f68 12       		.uleb128 0x12
 4858 0f69 F2000000 		.4byte	.LVL255
 4859 0f6d 2D160000 		.4byte	0x162d
 4860 0f71 17       		.uleb128 0x17
 4861 0f72 FC000000 		.4byte	.LVL256
 4862 0f76 B7160000 		.4byte	0x16b7
 4863 0f7a 850F0000 		.4byte	0xf85
 4864 0f7e 15       		.uleb128 0x15
 4865 0f7f 01       		.uleb128 0x1
 4866 0f80 50       		.byte	0x50
 4867 0f81 02       		.uleb128 0x2
 4868 0f82 74       		.byte	0x74
 4869 0f83 24       		.sleb128 36
 4870 0f84 00       		.byte	0
 4871 0f85 17       		.uleb128 0x17
 4872 0f86 02010000 		.4byte	.LVL257
 4873 0f8a FF040000 		.4byte	0x4ff
 4874 0f8e 990F0000 		.4byte	0xf99
 4875 0f92 15       		.uleb128 0x15
 4876 0f93 01       		.uleb128 0x1
 4877 0f94 50       		.byte	0x50
 4878 0f95 02       		.uleb128 0x2
 4879 0f96 74       		.byte	0x74
 4880 0f97 00       		.sleb128 0
 4881 0f98 00       		.byte	0
 4882 0f99 12       		.uleb128 0x12
 4883 0f9a 06010000 		.4byte	.LVL258
 4884 0f9e C3160000 		.4byte	0x16c3
 4885 0fa2 12       		.uleb128 0x12
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 142


 4886 0fa3 0E010000 		.4byte	.LVL259
 4887 0fa7 65160000 		.4byte	0x1665
 4888 0fab 17       		.uleb128 0x17
 4889 0fac 16010000 		.4byte	.LVL260
 4890 0fb0 FF040000 		.4byte	0x4ff
 4891 0fb4 BF0F0000 		.4byte	0xfbf
 4892 0fb8 15       		.uleb128 0x15
 4893 0fb9 01       		.uleb128 0x1
 4894 0fba 50       		.byte	0x50
 4895 0fbb 02       		.uleb128 0x2
 4896 0fbc 74       		.byte	0x74
 4897 0fbd 00       		.sleb128 0
 4898 0fbe 00       		.byte	0
 4899 0fbf 12       		.uleb128 0x12
 4900 0fc0 1A010000 		.4byte	.LVL261
 4901 0fc4 C3160000 		.4byte	0x16c3
 4902 0fc8 17       		.uleb128 0x17
 4903 0fc9 22010000 		.4byte	.LVL262
 4904 0fcd FF040000 		.4byte	0x4ff
 4905 0fd1 DC0F0000 		.4byte	0xfdc
 4906 0fd5 15       		.uleb128 0x15
 4907 0fd6 01       		.uleb128 0x1
 4908 0fd7 50       		.byte	0x50
 4909 0fd8 02       		.uleb128 0x2
 4910 0fd9 74       		.byte	0x74
 4911 0fda 00       		.sleb128 0
 4912 0fdb 00       		.byte	0
 4913 0fdc 12       		.uleb128 0x12
 4914 0fdd 26010000 		.4byte	.LVL263
 4915 0fe1 C3160000 		.4byte	0x16c3
 4916 0fe5 17       		.uleb128 0x17
 4917 0fe6 2C010000 		.4byte	.LVL264
 4918 0fea D0030000 		.4byte	0x3d0
 4919 0fee F90F0000 		.4byte	0xff9
 4920 0ff2 15       		.uleb128 0x15
 4921 0ff3 01       		.uleb128 0x1
 4922 0ff4 50       		.byte	0x50
 4923 0ff5 02       		.uleb128 0x2
 4924 0ff6 74       		.byte	0x74
 4925 0ff7 00       		.sleb128 0
 4926 0ff8 00       		.byte	0
 4927 0ff9 12       		.uleb128 0x12
 4928 0ffa 38010000 		.4byte	.LVL265
 4929 0ffe 22160000 		.4byte	0x1622
 4930 1002 12       		.uleb128 0x12
 4931 1003 4A010000 		.4byte	.LVL270
 4932 1007 2D160000 		.4byte	0x162d
 4933 100b 00       		.byte	0
 4934 100c 1C       		.uleb128 0x1c
 4935 100d A7020000 		.4byte	.LASF104
 4936 1011 01       		.byte	0x1
 4937 1012 4006     		.2byte	0x640
 4938 1014 EF000000 		.4byte	0xef
 4939 1018 00000000 		.4byte	.LFB42
 4940 101c 28010000 		.4byte	.LFE42-.LFB42
 4941 1020 01       		.uleb128 0x1
 4942 1021 9C       		.byte	0x9c
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 143


 4943 1022 F5110000 		.4byte	0x11f5
 4944 1026 10       		.uleb128 0x10
 4945 1027 EC010000 		.4byte	.LASF75
 4946 102b 01       		.byte	0x1
 4947 102c 4006     		.2byte	0x640
 4948 102e 23020000 		.4byte	0x223
 4949 1032 2F0E0000 		.4byte	.LLST66
 4950 1036 10       		.uleb128 0x10
 4951 1037 3F020000 		.4byte	.LASF72
 4952 103b 01       		.byte	0x1
 4953 103c 4006     		.2byte	0x640
 4954 103e FA040000 		.4byte	0x4fa
 4955 1042 5B0E0000 		.4byte	.LLST67
 4956 1046 10       		.uleb128 0x10
 4957 1047 0E080000 		.4byte	.LASF86
 4958 104b 01       		.byte	0x1
 4959 104c 4006     		.2byte	0x640
 4960 104e 05010000 		.4byte	0x105
 4961 1052 870E0000 		.4byte	.LLST68
 4962 1056 11       		.uleb128 0x11
 4963 1057 40030000 		.4byte	.LASF88
 4964 105b 01       		.byte	0x1
 4965 105c 4206     		.2byte	0x642
 4966 105e EF000000 		.4byte	0xef
 4967 1062 BE0E0000 		.4byte	.LLST69
 4968 1066 1D       		.uleb128 0x1d
 4969 1067 55030000 		.4byte	.LASF90
 4970 106b 01       		.byte	0x1
 4971 106c 4306     		.2byte	0x643
 4972 106e 18020000 		.4byte	0x218
 4973 1072 02       		.uleb128 0x2
 4974 1073 91       		.byte	0x91
 4975 1074 68       		.sleb128 -24
 4976 1075 11       		.uleb128 0x11
 4977 1076 99050000 		.4byte	.LASF105
 4978 107a 01       		.byte	0x1
 4979 107b 4406     		.2byte	0x644
 4980 107d 4D020000 		.4byte	0x24d
 4981 1081 FF0E0000 		.4byte	.LLST70
 4982 1085 11       		.uleb128 0x11
 4983 1086 1B070000 		.4byte	.LASF65
 4984 108a 01       		.byte	0x1
 4985 108b 4506     		.2byte	0x645
 4986 108d A9040000 		.4byte	0x4a9
 4987 1091 120F0000 		.4byte	.LLST71
 4988 1095 16       		.uleb128 0x16
 4989 1096 54000000 		.4byte	.LBB12
 4990 109a 4A000000 		.4byte	.LBE12-.LBB12
 4991 109e 0C110000 		.4byte	0x110c
 4992 10a2 11       		.uleb128 0x11
 4993 10a3 78020000 		.4byte	.LASF51
 4994 10a7 01       		.byte	0x1
 4995 10a8 5E06     		.2byte	0x65e
 4996 10aa DA060000 		.4byte	0x6da
 4997 10ae 3E0F0000 		.4byte	.LLST72
 4998 10b2 17       		.uleb128 0x17
 4999 10b3 64000000 		.4byte	.LVL281
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 144


 5000 10b7 B3040000 		.4byte	0x4b3
 5001 10bb CC100000 		.4byte	0x10cc
 5002 10bf 15       		.uleb128 0x15
 5003 10c0 01       		.uleb128 0x1
 5004 10c1 50       		.byte	0x50
 5005 10c2 02       		.uleb128 0x2
 5006 10c3 74       		.byte	0x74
 5007 10c4 00       		.sleb128 0
 5008 10c5 15       		.uleb128 0x15
 5009 10c6 01       		.uleb128 0x1
 5010 10c7 51       		.byte	0x51
 5011 10c8 02       		.uleb128 0x2
 5012 10c9 75       		.byte	0x75
 5013 10ca 00       		.sleb128 0
 5014 10cb 00       		.byte	0
 5015 10cc 17       		.uleb128 0x17
 5016 10cd 74000000 		.4byte	.LVL282
 5017 10d1 4D160000 		.4byte	0x164d
 5018 10d5 E0100000 		.4byte	0x10e0
 5019 10d9 15       		.uleb128 0x15
 5020 10da 01       		.uleb128 0x1
 5021 10db 50       		.byte	0x50
 5022 10dc 02       		.uleb128 0x2
 5023 10dd 74       		.byte	0x74
 5024 10de 24       		.sleb128 36
 5025 10df 00       		.byte	0
 5026 10e0 12       		.uleb128 0x12
 5027 10e1 7C000000 		.4byte	.LVL283
 5028 10e5 65160000 		.4byte	0x1665
 5029 10e9 12       		.uleb128 0x12
 5030 10ea 80000000 		.4byte	.LVL284
 5031 10ee 2D160000 		.4byte	0x162d
 5032 10f2 12       		.uleb128 0x12
 5033 10f3 8E000000 		.4byte	.LVL287
 5034 10f7 2D160000 		.4byte	0x162d
 5035 10fb 14       		.uleb128 0x14
 5036 10fc 9C000000 		.4byte	.LVL288
 5037 1100 93160000 		.4byte	0x1693
 5038 1104 15       		.uleb128 0x15
 5039 1105 01       		.uleb128 0x1
 5040 1106 50       		.byte	0x50
 5041 1107 02       		.uleb128 0x2
 5042 1108 91       		.byte	0x91
 5043 1109 68       		.sleb128 -24
 5044 110a 00       		.byte	0
 5045 110b 00       		.byte	0
 5046 110c 12       		.uleb128 0x12
 5047 110d 32000000 		.4byte	.LVL276
 5048 1111 87160000 		.4byte	0x1687
 5049 1115 12       		.uleb128 0x12
 5050 1116 54000000 		.4byte	.LVL278
 5051 111a 22160000 		.4byte	0x1622
 5052 111e 12       		.uleb128 0x12
 5053 111f A2000000 		.4byte	.LVL290
 5054 1123 2D160000 		.4byte	0x162d
 5055 1127 12       		.uleb128 0x12
 5056 1128 A6000000 		.4byte	.LVL291
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 145


 5057 112c 9F160000 		.4byte	0x169f
 5058 1130 12       		.uleb128 0x12
 5059 1131 AA000000 		.4byte	.LVL292
 5060 1135 22160000 		.4byte	0x1622
 5061 1139 12       		.uleb128 0x12
 5062 113a CE000000 		.4byte	.LVL293
 5063 113e 2D160000 		.4byte	0x162d
 5064 1142 17       		.uleb128 0x17
 5065 1143 D6000000 		.4byte	.LVL295
 5066 1147 AB160000 		.4byte	0x16ab
 5067 114b 5C110000 		.4byte	0x115c
 5068 114f 15       		.uleb128 0x15
 5069 1150 01       		.uleb128 0x1
 5070 1151 50       		.byte	0x50
 5071 1152 02       		.uleb128 0x2
 5072 1153 91       		.byte	0x91
 5073 1154 68       		.sleb128 -24
 5074 1155 15       		.uleb128 0x15
 5075 1156 01       		.uleb128 0x1
 5076 1157 51       		.byte	0x51
 5077 1158 02       		.uleb128 0x2
 5078 1159 91       		.byte	0x91
 5079 115a 64       		.sleb128 -28
 5080 115b 00       		.byte	0
 5081 115c 17       		.uleb128 0x17
 5082 115d E0000000 		.4byte	.LVL296
 5083 1161 D0030000 		.4byte	0x3d0
 5084 1165 70110000 		.4byte	0x1170
 5085 1169 15       		.uleb128 0x15
 5086 116a 01       		.uleb128 0x1
 5087 116b 50       		.byte	0x50
 5088 116c 02       		.uleb128 0x2
 5089 116d 74       		.byte	0x74
 5090 116e 00       		.sleb128 0
 5091 116f 00       		.byte	0
 5092 1170 17       		.uleb128 0x17
 5093 1171 EE000000 		.4byte	.LVL297
 5094 1175 B7160000 		.4byte	0x16b7
 5095 1179 84110000 		.4byte	0x1184
 5096 117d 15       		.uleb128 0x15
 5097 117e 01       		.uleb128 0x1
 5098 117f 50       		.byte	0x50
 5099 1180 02       		.uleb128 0x2
 5100 1181 74       		.byte	0x74
 5101 1182 24       		.sleb128 36
 5102 1183 00       		.byte	0
 5103 1184 17       		.uleb128 0x17
 5104 1185 F4000000 		.4byte	.LVL298
 5105 1189 FF040000 		.4byte	0x4ff
 5106 118d 98110000 		.4byte	0x1198
 5107 1191 15       		.uleb128 0x15
 5108 1192 01       		.uleb128 0x1
 5109 1193 50       		.byte	0x50
 5110 1194 02       		.uleb128 0x2
 5111 1195 74       		.byte	0x74
 5112 1196 00       		.sleb128 0
 5113 1197 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 146


 5114 1198 12       		.uleb128 0x12
 5115 1199 F8000000 		.4byte	.LVL299
 5116 119d C3160000 		.4byte	0x16c3
 5117 11a1 12       		.uleb128 0x12
 5118 11a2 00010000 		.4byte	.LVL300
 5119 11a6 65160000 		.4byte	0x1665
 5120 11aa 17       		.uleb128 0x17
 5121 11ab 08010000 		.4byte	.LVL301
 5122 11af FF040000 		.4byte	0x4ff
 5123 11b3 BE110000 		.4byte	0x11be
 5124 11b7 15       		.uleb128 0x15
 5125 11b8 01       		.uleb128 0x1
 5126 11b9 50       		.byte	0x50
 5127 11ba 02       		.uleb128 0x2
 5128 11bb 74       		.byte	0x74
 5129 11bc 00       		.sleb128 0
 5130 11bd 00       		.byte	0
 5131 11be 12       		.uleb128 0x12
 5132 11bf 0C010000 		.4byte	.LVL302
 5133 11c3 C3160000 		.4byte	0x16c3
 5134 11c7 17       		.uleb128 0x17
 5135 11c8 14010000 		.4byte	.LVL303
 5136 11cc FF040000 		.4byte	0x4ff
 5137 11d0 DB110000 		.4byte	0x11db
 5138 11d4 15       		.uleb128 0x15
 5139 11d5 01       		.uleb128 0x1
 5140 11d6 50       		.byte	0x50
 5141 11d7 02       		.uleb128 0x2
 5142 11d8 74       		.byte	0x74
 5143 11d9 00       		.sleb128 0
 5144 11da 00       		.byte	0
 5145 11db 12       		.uleb128 0x12
 5146 11dc 18010000 		.4byte	.LVL304
 5147 11e0 C3160000 		.4byte	0x16c3
 5148 11e4 14       		.uleb128 0x14
 5149 11e5 1E010000 		.4byte	.LVL305
 5150 11e9 D0030000 		.4byte	0x3d0
 5151 11ed 15       		.uleb128 0x15
 5152 11ee 01       		.uleb128 0x1
 5153 11ef 50       		.byte	0x50
 5154 11f0 02       		.uleb128 0x2
 5155 11f1 74       		.byte	0x74
 5156 11f2 00       		.sleb128 0
 5157 11f3 00       		.byte	0
 5158 11f4 00       		.byte	0
 5159 11f5 1C       		.uleb128 0x1c
 5160 11f6 3B000000 		.4byte	.LASF106
 5161 11fa 01       		.byte	0x1
 5162 11fb D606     		.2byte	0x6d6
 5163 11fd EF000000 		.4byte	0xef
 5164 1201 00000000 		.4byte	.LFB43
 5165 1205 96000000 		.4byte	.LFE43-.LFB43
 5166 1209 01       		.uleb128 0x1
 5167 120a 9C       		.byte	0x9c
 5168 120b E9120000 		.4byte	0x12e9
 5169 120f 10       		.uleb128 0x10
 5170 1210 EC010000 		.4byte	.LASF75
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 147


 5171 1214 01       		.byte	0x1
 5172 1215 D606     		.2byte	0x6d6
 5173 1217 23020000 		.4byte	0x223
 5174 121b 5C0F0000 		.4byte	.LLST73
 5175 121f 10       		.uleb128 0x10
 5176 1220 3F020000 		.4byte	.LASF72
 5177 1224 01       		.byte	0x1
 5178 1225 D606     		.2byte	0x6d6
 5179 1227 FA040000 		.4byte	0x4fa
 5180 122b 05100000 		.4byte	.LLST74
 5181 122f 10       		.uleb128 0x10
 5182 1230 67000000 		.4byte	.LASF96
 5183 1234 01       		.byte	0x1
 5184 1235 D606     		.2byte	0x6d6
 5185 1237 2D0B0000 		.4byte	0xb2d
 5186 123b 30100000 		.4byte	.LLST75
 5187 123f 11       		.uleb128 0x11
 5188 1240 23070000 		.4byte	.LASF67
 5189 1244 01       		.byte	0x1
 5190 1245 D806     		.2byte	0x6d8
 5191 1247 EF000000 		.4byte	0xef
 5192 124b 5C100000 		.4byte	.LLST76
 5193 124f 11       		.uleb128 0x11
 5194 1250 94010000 		.4byte	.LASF97
 5195 1254 01       		.byte	0x1
 5196 1255 D906     		.2byte	0x6d9
 5197 1257 FA000000 		.4byte	0xfa
 5198 125b 7A100000 		.4byte	.LLST77
 5199 125f 11       		.uleb128 0x11
 5200 1260 1B070000 		.4byte	.LASF65
 5201 1264 01       		.byte	0x1
 5202 1265 DA06     		.2byte	0x6da
 5203 1267 A9040000 		.4byte	0x4a9
 5204 126b B0100000 		.4byte	.LLST78
 5205 126f 16       		.uleb128 0x16
 5206 1270 36000000 		.4byte	.LBB13
 5207 1274 54000000 		.4byte	.LBE13-.LBB13
 5208 1278 CE120000 		.4byte	0x12ce
 5209 127c 11       		.uleb128 0x11
 5210 127d 78020000 		.4byte	.LASF51
 5211 1281 01       		.byte	0x1
 5212 1282 F106     		.2byte	0x6f1
 5213 1284 DA060000 		.4byte	0x6da
 5214 1288 59110000 		.4byte	.LLST79
 5215 128c 20       		.uleb128 0x20
 5216 128d 30000000 		.4byte	.Ldebug_ranges0+0x30
 5217 1291 11       		.uleb128 0x11
 5218 1292 DA080000 		.4byte	.LASF54
 5219 1296 01       		.byte	0x1
 5220 1297 F606     		.2byte	0x6f6
 5221 1299 320B0000 		.4byte	0xb32
 5222 129d 6C110000 		.4byte	.LLST80
 5223 12a1 17       		.uleb128 0x17
 5224 12a2 4A000000 		.4byte	.LVL316
 5225 12a6 B3040000 		.4byte	0x4b3
 5226 12aa BC120000 		.4byte	0x12bc
 5227 12ae 15       		.uleb128 0x15
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 148


 5228 12af 01       		.uleb128 0x1
 5229 12b0 50       		.byte	0x50
 5230 12b1 02       		.uleb128 0x2
 5231 12b2 74       		.byte	0x74
 5232 12b3 00       		.sleb128 0
 5233 12b4 15       		.uleb128 0x15
 5234 12b5 01       		.uleb128 0x1
 5235 12b6 51       		.byte	0x51
 5236 12b7 03       		.uleb128 0x3
 5237 12b8 7D       		.byte	0x7d
 5238 12b9 00       		.sleb128 0
 5239 12ba 06       		.byte	0x6
 5240 12bb 00       		.byte	0
 5241 12bc 14       		.uleb128 0x14
 5242 12bd 60000000 		.4byte	.LVL317
 5243 12c1 4D160000 		.4byte	0x164d
 5244 12c5 15       		.uleb128 0x15
 5245 12c6 01       		.uleb128 0x1
 5246 12c7 50       		.byte	0x50
 5247 12c8 02       		.uleb128 0x2
 5248 12c9 74       		.byte	0x74
 5249 12ca 10       		.sleb128 16
 5250 12cb 00       		.byte	0
 5251 12cc 00       		.byte	0
 5252 12cd 00       		.byte	0
 5253 12ce 12       		.uleb128 0x12
 5254 12cf 34000000 		.4byte	.LVL311
 5255 12d3 CF160000 		.4byte	0x16cf
 5256 12d7 14       		.uleb128 0x14
 5257 12d8 90000000 		.4byte	.LVL331
 5258 12dc DA160000 		.4byte	0x16da
 5259 12e0 15       		.uleb128 0x15
 5260 12e1 01       		.uleb128 0x1
 5261 12e2 50       		.byte	0x50
 5262 12e3 03       		.uleb128 0x3
 5263 12e4 91       		.byte	0x91
 5264 12e5 64       		.sleb128 -28
 5265 12e6 06       		.byte	0x6
 5266 12e7 00       		.byte	0
 5267 12e8 00       		.byte	0
 5268 12e9 1C       		.uleb128 0x1c
 5269 12ea 81070000 		.4byte	.LASF107
 5270 12ee 01       		.byte	0x1
 5271 12ef 3107     		.2byte	0x731
 5272 12f1 EF000000 		.4byte	0xef
 5273 12f5 00000000 		.4byte	.LFB44
 5274 12f9 5C000000 		.4byte	.LFE44-.LFB44
 5275 12fd 01       		.uleb128 0x1
 5276 12fe 9C       		.byte	0x9c
 5277 12ff 97130000 		.4byte	0x1397
 5278 1303 10       		.uleb128 0x10
 5279 1304 EC010000 		.4byte	.LASF75
 5280 1308 01       		.byte	0x1
 5281 1309 3107     		.2byte	0x731
 5282 130b 23020000 		.4byte	0x223
 5283 130f 97110000 		.4byte	.LLST81
 5284 1313 10       		.uleb128 0x10
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 149


 5285 1314 3F020000 		.4byte	.LASF72
 5286 1318 01       		.byte	0x1
 5287 1319 3107     		.2byte	0x731
 5288 131b FA040000 		.4byte	0x4fa
 5289 131f DC110000 		.4byte	.LLST82
 5290 1323 11       		.uleb128 0x11
 5291 1324 23070000 		.4byte	.LASF67
 5292 1328 01       		.byte	0x1
 5293 1329 3307     		.2byte	0x733
 5294 132b EF000000 		.4byte	0xef
 5295 132f 08120000 		.4byte	.LLST83
 5296 1333 11       		.uleb128 0x11
 5297 1334 94010000 		.4byte	.LASF97
 5298 1338 01       		.byte	0x1
 5299 1339 3407     		.2byte	0x734
 5300 133b FA000000 		.4byte	0xfa
 5301 133f 32120000 		.4byte	.LLST84
 5302 1343 11       		.uleb128 0x11
 5303 1344 99050000 		.4byte	.LASF105
 5304 1348 01       		.byte	0x1
 5305 1349 3507     		.2byte	0x735
 5306 134b 4D020000 		.4byte	0x24d
 5307 134f 66120000 		.4byte	.LLST85
 5308 1353 11       		.uleb128 0x11
 5309 1354 1B070000 		.4byte	.LASF65
 5310 1358 01       		.byte	0x1
 5311 1359 3607     		.2byte	0x736
 5312 135b A9040000 		.4byte	0x4a9
 5313 135f 79120000 		.4byte	.LLST86
 5314 1363 12       		.uleb128 0x12
 5315 1364 38000000 		.4byte	.LVL338
 5316 1368 CF160000 		.4byte	0x16cf
 5317 136c 17       		.uleb128 0x17
 5318 136d 4A000000 		.4byte	.LVL342
 5319 1371 B3040000 		.4byte	0x4b3
 5320 1375 86130000 		.4byte	0x1386
 5321 1379 15       		.uleb128 0x15
 5322 137a 01       		.uleb128 0x1
 5323 137b 50       		.byte	0x50
 5324 137c 02       		.uleb128 0x2
 5325 137d 74       		.byte	0x74
 5326 137e 00       		.sleb128 0
 5327 137f 15       		.uleb128 0x15
 5328 1380 01       		.uleb128 0x1
 5329 1381 51       		.byte	0x51
 5330 1382 02       		.uleb128 0x2
 5331 1383 75       		.byte	0x75
 5332 1384 00       		.sleb128 0
 5333 1385 00       		.byte	0
 5334 1386 14       		.uleb128 0x14
 5335 1387 58000000 		.4byte	.LVL347
 5336 138b DA160000 		.4byte	0x16da
 5337 138f 15       		.uleb128 0x15
 5338 1390 01       		.uleb128 0x1
 5339 1391 50       		.byte	0x50
 5340 1392 02       		.uleb128 0x2
 5341 1393 76       		.byte	0x76
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 150


 5342 1394 00       		.sleb128 0
 5343 1395 00       		.byte	0
 5344 1396 00       		.byte	0
 5345 1397 1C       		.uleb128 0x1c
 5346 1398 F3060000 		.4byte	.LASF108
 5347 139c 01       		.byte	0x1
 5348 139d 6707     		.2byte	0x767
 5349 139f FA000000 		.4byte	0xfa
 5350 13a3 00000000 		.4byte	.LFB45
 5351 13a7 18000000 		.4byte	.LFE45-.LFB45
 5352 13ab 01       		.uleb128 0x1
 5353 13ac 9C       		.byte	0x9c
 5354 13ad E4130000 		.4byte	0x13e4
 5355 13b1 10       		.uleb128 0x10
 5356 13b2 EC010000 		.4byte	.LASF75
 5357 13b6 01       		.byte	0x1
 5358 13b7 6707     		.2byte	0x767
 5359 13b9 E4130000 		.4byte	0x13e4
 5360 13bd BE120000 		.4byte	.LLST87
 5361 13c1 11       		.uleb128 0x11
 5362 13c2 49010000 		.4byte	.LASF109
 5363 13c6 01       		.byte	0x1
 5364 13c7 6907     		.2byte	0x769
 5365 13c9 FA000000 		.4byte	0xfa
 5366 13cd EA120000 		.4byte	.LLST88
 5367 13d1 12       		.uleb128 0x12
 5368 13d2 0E000000 		.4byte	.LVL352
 5369 13d6 22160000 		.4byte	0x1622
 5370 13da 12       		.uleb128 0x12
 5371 13db 14000000 		.4byte	.LVL354
 5372 13df 2D160000 		.4byte	0x162d
 5373 13e3 00       		.byte	0
 5374 13e4 07       		.uleb128 0x7
 5375 13e5 23020000 		.4byte	0x223
 5376 13e9 1C       		.uleb128 0x1c
 5377 13ea F2000000 		.4byte	.LASF110
 5378 13ee 01       		.byte	0x1
 5379 13ef 7707     		.2byte	0x777
 5380 13f1 FA000000 		.4byte	0xfa
 5381 13f5 00000000 		.4byte	.LFB46
 5382 13f9 1C000000 		.4byte	.LFE46-.LFB46
 5383 13fd 01       		.uleb128 0x1
 5384 13fe 9C       		.byte	0x9c
 5385 13ff 46140000 		.4byte	0x1446
 5386 1403 10       		.uleb128 0x10
 5387 1404 EC010000 		.4byte	.LASF75
 5388 1408 01       		.byte	0x1
 5389 1409 7707     		.2byte	0x777
 5390 140b E4130000 		.4byte	0x13e4
 5391 140f 08130000 		.4byte	.LLST89
 5392 1413 11       		.uleb128 0x11
 5393 1414 49010000 		.4byte	.LASF109
 5394 1418 01       		.byte	0x1
 5395 1419 7907     		.2byte	0x779
 5396 141b FA000000 		.4byte	0xfa
 5397 141f 34130000 		.4byte	.LLST90
 5398 1423 11       		.uleb128 0x11
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 151


 5399 1424 1B070000 		.4byte	.LASF65
 5400 1428 01       		.byte	0x1
 5401 1429 7A07     		.2byte	0x77a
 5402 142b A3040000 		.4byte	0x4a3
 5403 142f 52130000 		.4byte	.LLST91
 5404 1433 12       		.uleb128 0x12
 5405 1434 0E000000 		.4byte	.LVL358
 5406 1438 22160000 		.4byte	0x1622
 5407 143c 12       		.uleb128 0x12
 5408 143d 18000000 		.4byte	.LVL361
 5409 1441 2D160000 		.4byte	0x162d
 5410 1445 00       		.byte	0
 5411 1446 1C       		.uleb128 0x1c
 5412 1447 8E040000 		.4byte	.LASF111
 5413 144b 01       		.byte	0x1
 5414 144c 8907     		.2byte	0x789
 5415 144e FA000000 		.4byte	0xfa
 5416 1452 00000000 		.4byte	.LFB47
 5417 1456 0C000000 		.4byte	.LFE47-.LFB47
 5418 145a 01       		.uleb128 0x1
 5419 145b 9C       		.byte	0x9c
 5420 145c 7F140000 		.4byte	0x147f
 5421 1460 10       		.uleb128 0x10
 5422 1461 EC010000 		.4byte	.LASF75
 5423 1465 01       		.byte	0x1
 5424 1466 8907     		.2byte	0x789
 5425 1468 E4130000 		.4byte	0x13e4
 5426 146c 7E130000 		.4byte	.LLST92
 5427 1470 1D       		.uleb128 0x1d
 5428 1471 49010000 		.4byte	.LASF109
 5429 1475 01       		.byte	0x1
 5430 1476 8B07     		.2byte	0x78b
 5431 1478 FA000000 		.4byte	0xfa
 5432 147c 01       		.uleb128 0x1
 5433 147d 50       		.byte	0x50
 5434 147e 00       		.byte	0
 5435 147f 1C       		.uleb128 0x1c
 5436 1480 6B080000 		.4byte	.LASF112
 5437 1484 01       		.byte	0x1
 5438 1485 E608     		.2byte	0x8e6
 5439 1487 EF000000 		.4byte	0xef
 5440 148b 00000000 		.4byte	.LFB54
 5441 148f 16000000 		.4byte	.LFE54-.LFB54
 5442 1493 01       		.uleb128 0x1
 5443 1494 9C       		.byte	0x9c
 5444 1495 B8140000 		.4byte	0x14b8
 5445 1499 10       		.uleb128 0x10
 5446 149a EC010000 		.4byte	.LASF75
 5447 149e 01       		.byte	0x1
 5448 149f E608     		.2byte	0x8e6
 5449 14a1 E4130000 		.4byte	0x13e4
 5450 14a5 9F130000 		.4byte	.LLST93
 5451 14a9 1D       		.uleb128 0x1d
 5452 14aa 23070000 		.4byte	.LASF67
 5453 14ae 01       		.byte	0x1
 5454 14af E808     		.2byte	0x8e8
 5455 14b1 EF000000 		.4byte	0xef
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 152


 5456 14b5 01       		.uleb128 0x1
 5457 14b6 50       		.byte	0x50
 5458 14b7 00       		.byte	0
 5459 14b8 1C       		.uleb128 0x1c
 5460 14b9 DA060000 		.4byte	.LASF113
 5461 14bd 01       		.byte	0x1
 5462 14be 0D09     		.2byte	0x90d
 5463 14c0 EF000000 		.4byte	0xef
 5464 14c4 00000000 		.4byte	.LFB56
 5465 14c8 18000000 		.4byte	.LFE56-.LFB56
 5466 14cc 01       		.uleb128 0x1
 5467 14cd 9C       		.byte	0x9c
 5468 14ce F1140000 		.4byte	0x14f1
 5469 14d2 10       		.uleb128 0x10
 5470 14d3 EC010000 		.4byte	.LASF75
 5471 14d7 01       		.byte	0x1
 5472 14d8 0D09     		.2byte	0x90d
 5473 14da E4130000 		.4byte	0x13e4
 5474 14de D9130000 		.4byte	.LLST94
 5475 14e2 1D       		.uleb128 0x1d
 5476 14e3 23070000 		.4byte	.LASF67
 5477 14e7 01       		.byte	0x1
 5478 14e8 0F09     		.2byte	0x90f
 5479 14ea EF000000 		.4byte	0xef
 5480 14ee 01       		.uleb128 0x1
 5481 14ef 50       		.byte	0x50
 5482 14f0 00       		.byte	0
 5483 14f1 21       		.uleb128 0x21
 5484 14f2 4D050000 		.4byte	.LASF116
 5485 14f6 01       		.byte	0x1
 5486 14f7 340A     		.2byte	0xa34
 5487 14f9 00000000 		.4byte	.LFB57
 5488 14fd 28000000 		.4byte	.LFE57-.LFB57
 5489 1501 01       		.uleb128 0x1
 5490 1502 9C       		.byte	0x9c
 5491 1503 33150000 		.4byte	0x1533
 5492 1507 1B       		.uleb128 0x1b
 5493 1508 EC010000 		.4byte	.LASF75
 5494 150c 01       		.byte	0x1
 5495 150d 340A     		.2byte	0xa34
 5496 150f 23020000 		.4byte	0x223
 5497 1513 01       		.uleb128 0x1
 5498 1514 50       		.byte	0x50
 5499 1515 1B       		.uleb128 0x1b
 5500 1516 66030000 		.4byte	.LASF59
 5501 151a 01       		.byte	0x1
 5502 151b 340A     		.2byte	0xa34
 5503 151d AE000000 		.4byte	0xae
 5504 1521 01       		.uleb128 0x1
 5505 1522 51       		.byte	0x51
 5506 1523 22       		.uleb128 0x22
 5507 1524 757800   		.ascii	"ux\000"
 5508 1527 01       		.byte	0x1
 5509 1528 360A     		.2byte	0xa36
 5510 152a FA000000 		.4byte	0xfa
 5511 152e 13140000 		.4byte	.LLST95
 5512 1532 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 153


 5513 1533 1C       		.uleb128 0x1c
 5514 1534 4D060000 		.4byte	.LASF114
 5515 1538 01       		.byte	0x1
 5516 1539 510A     		.2byte	0xa51
 5517 153b AE000000 		.4byte	0xae
 5518 153f 00000000 		.4byte	.LFB58
 5519 1543 24000000 		.4byte	.LFE58-.LFB58
 5520 1547 01       		.uleb128 0x1
 5521 1548 9C       		.byte	0x9c
 5522 1549 7D150000 		.4byte	0x157d
 5523 154d 10       		.uleb128 0x10
 5524 154e EC010000 		.4byte	.LASF75
 5525 1552 01       		.byte	0x1
 5526 1553 510A     		.2byte	0xa51
 5527 1555 23020000 		.4byte	0x223
 5528 1559 3D140000 		.4byte	.LLST96
 5529 155d 22       		.uleb128 0x22
 5530 155e 757800   		.ascii	"ux\000"
 5531 1561 01       		.byte	0x1
 5532 1562 530A     		.2byte	0xa53
 5533 1564 FA000000 		.4byte	0xfa
 5534 1568 77140000 		.4byte	.LLST97
 5535 156c 11       		.uleb128 0x11
 5536 156d 5C060000 		.4byte	.LASF115
 5537 1571 01       		.byte	0x1
 5538 1572 540A     		.2byte	0xa54
 5539 1574 AE000000 		.4byte	0xae
 5540 1578 A1140000 		.4byte	.LLST98
 5541 157c 00       		.byte	0
 5542 157d 21       		.uleb128 0x21
 5543 157e 7E010000 		.4byte	.LASF117
 5544 1582 01       		.byte	0x1
 5545 1583 6D0A     		.2byte	0xa6d
 5546 1585 00000000 		.4byte	.LFB59
 5547 1589 28000000 		.4byte	.LFE59-.LFB59
 5548 158d 01       		.uleb128 0x1
 5549 158e 9C       		.byte	0x9c
 5550 158f B1150000 		.4byte	0x15b1
 5551 1593 1B       		.uleb128 0x1b
 5552 1594 EC010000 		.4byte	.LASF75
 5553 1598 01       		.byte	0x1
 5554 1599 6D0A     		.2byte	0xa6d
 5555 159b 23020000 		.4byte	0x223
 5556 159f 01       		.uleb128 0x1
 5557 15a0 50       		.byte	0x50
 5558 15a1 22       		.uleb128 0x22
 5559 15a2 757800   		.ascii	"ux\000"
 5560 15a5 01       		.byte	0x1
 5561 15a6 6F0A     		.2byte	0xa6f
 5562 15a8 FA000000 		.4byte	0xfa
 5563 15ac D7140000 		.4byte	.LLST99
 5564 15b0 00       		.byte	0
 5565 15b1 21       		.uleb128 0x21
 5566 15b2 66010000 		.4byte	.LASF118
 5567 15b6 01       		.byte	0x1
 5568 15b7 9507     		.2byte	0x795
 5569 15b9 00000000 		.4byte	.LFB48
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 154


 5570 15bd 16000000 		.4byte	.LFE48-.LFB48
 5571 15c1 01       		.uleb128 0x1
 5572 15c2 9C       		.byte	0x9c
 5573 15c3 01160000 		.4byte	0x1601
 5574 15c7 10       		.uleb128 0x10
 5575 15c8 EC010000 		.4byte	.LASF75
 5576 15cc 01       		.byte	0x1
 5577 15cd 9507     		.2byte	0x795
 5578 15cf 23020000 		.4byte	0x223
 5579 15d3 01150000 		.4byte	.LLST100
 5580 15d7 11       		.uleb128 0x11
 5581 15d8 1B070000 		.4byte	.LASF65
 5582 15dc 01       		.byte	0x1
 5583 15dd 9707     		.2byte	0x797
 5584 15df A9040000 		.4byte	0x4a9
 5585 15e3 2D150000 		.4byte	.LLST101
 5586 15e7 12       		.uleb128 0x12
 5587 15e8 0E000000 		.4byte	.LVL395
 5588 15ec 7D150000 		.4byte	0x157d
 5589 15f0 14       		.uleb128 0x14
 5590 15f1 14000000 		.4byte	.LVL396
 5591 15f5 09170000 		.4byte	0x1709
 5592 15f9 15       		.uleb128 0x15
 5593 15fa 01       		.uleb128 0x1
 5594 15fb 50       		.byte	0x50
 5595 15fc 02       		.uleb128 0x2
 5596 15fd 74       		.byte	0x74
 5597 15fe 00       		.sleb128 0
 5598 15ff 00       		.byte	0
 5599 1600 00       		.byte	0
 5600 1601 23       		.uleb128 0x23
 5601 1602 2D030000 		.4byte	0x32d
 5602 1606 11160000 		.4byte	0x1611
 5603 160a 24       		.uleb128 0x24
 5604 160b 9E000000 		.4byte	0x9e
 5605 160f 09       		.byte	0x9
 5606 1610 00       		.byte	0
 5607 1611 25       		.uleb128 0x25
 5608 1612 68040000 		.4byte	.LASF142
 5609 1616 01       		.byte	0x1
 5610 1617 9A       		.byte	0x9a
 5611 1618 01160000 		.4byte	0x1601
 5612 161c 05       		.uleb128 0x5
 5613 161d 03       		.byte	0x3
 5614 161e 00000000 		.4byte	xQueueRegistry
 5615 1622 26       		.uleb128 0x26
 5616 1623 20010000 		.4byte	.LASF119
 5617 1627 20010000 		.4byte	.LASF119
 5618 162b 05       		.byte	0x5
 5619 162c 5A       		.byte	0x5a
 5620 162d 26       		.uleb128 0x26
 5621 162e 10000000 		.4byte	.LASF120
 5622 1632 10000000 		.4byte	.LASF120
 5623 1636 05       		.byte	0x5
 5624 1637 5B       		.byte	0x5b
 5625 1638 27       		.uleb128 0x27
 5626 1639 05040000 		.4byte	.LASF121
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 155


 5627 163d 05040000 		.4byte	.LASF121
 5628 1641 07       		.byte	0x7
 5629 1642 DE08     		.2byte	0x8de
 5630 1644 28       		.uleb128 0x28
 5631 1645 A4080000 		.4byte	.LASF143
 5632 1649 A4080000 		.4byte	.LASF143
 5633 164d 27       		.uleb128 0x27
 5634 164e FC080000 		.4byte	.LASF122
 5635 1652 FC080000 		.4byte	.LASF122
 5636 1656 07       		.byte	0x7
 5637 1657 A508     		.2byte	0x8a5
 5638 1659 27       		.uleb128 0x27
 5639 165a 34070000 		.4byte	.LASF123
 5640 165e 34070000 		.4byte	.LASF123
 5641 1662 07       		.byte	0x7
 5642 1663 CC08     		.2byte	0x8cc
 5643 1665 26       		.uleb128 0x26
 5644 1666 22000000 		.4byte	.LASF124
 5645 166a 22000000 		.4byte	.LASF124
 5646 166e 05       		.byte	0x5
 5647 166f 50       		.byte	0x50
 5648 1670 27       		.uleb128 0x27
 5649 1671 C5070000 		.4byte	.LASF125
 5650 1675 C5070000 		.4byte	.LASF125
 5651 1679 06       		.byte	0x6
 5652 167a 5801     		.2byte	0x158
 5653 167c 26       		.uleb128 0x26
 5654 167d 8A020000 		.4byte	.LASF126
 5655 1681 8A020000 		.4byte	.LASF126
 5656 1685 09       		.byte	0x9
 5657 1686 81       		.byte	0x81
 5658 1687 27       		.uleb128 0x27
 5659 1688 B2080000 		.4byte	.LASF127
 5660 168c B2080000 		.4byte	.LASF127
 5661 1690 07       		.byte	0x7
 5662 1691 D208     		.2byte	0x8d2
 5663 1693 27       		.uleb128 0x27
 5664 1694 7C050000 		.4byte	.LASF128
 5665 1698 7C050000 		.4byte	.LASF128
 5666 169c 07       		.byte	0x7
 5667 169d 1909     		.2byte	0x919
 5668 169f 27       		.uleb128 0x27
 5669 16a0 97020000 		.4byte	.LASF129
 5670 16a4 97020000 		.4byte	.LASF129
 5671 16a8 07       		.byte	0x7
 5672 16a9 F904     		.2byte	0x4f9
 5673 16ab 27       		.uleb128 0x27
 5674 16ac BB060000 		.4byte	.LASF130
 5675 16b0 BB060000 		.4byte	.LASF130
 5676 16b4 07       		.byte	0x7
 5677 16b5 C608     		.2byte	0x8c6
 5678 16b7 27       		.uleb128 0x27
 5679 16b8 C6030000 		.4byte	.LASF131
 5680 16bc C6030000 		.4byte	.LASF131
 5681 16c0 07       		.byte	0x7
 5682 16c1 7D08     		.2byte	0x87d
 5683 16c3 27       		.uleb128 0x27
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 156


 5684 16c4 9E060000 		.4byte	.LASF132
 5685 16c8 9E060000 		.4byte	.LASF132
 5686 16cc 07       		.byte	0x7
 5687 16cd 2F05     		.2byte	0x52f
 5688 16cf 26       		.uleb128 0x26
 5689 16d0 E2080000 		.4byte	.LASF133
 5690 16d4 E2080000 		.4byte	.LASF133
 5691 16d8 05       		.byte	0x5
 5692 16d9 5C       		.byte	0x5c
 5693 16da 26       		.uleb128 0x26
 5694 16db 23080000 		.4byte	.LASF134
 5695 16df 23080000 		.4byte	.LASF134
 5696 16e3 05       		.byte	0x5
 5697 16e4 5D       		.byte	0x5d
 5698 16e5 27       		.uleb128 0x27
 5699 16e6 DC030000 		.4byte	.LASF135
 5700 16ea DC030000 		.4byte	.LASF135
 5701 16ee 07       		.byte	0x7
 5702 16ef 1309     		.2byte	0x913
 5703 16f1 27       		.uleb128 0x27
 5704 16f2 EA070000 		.4byte	.LASF136
 5705 16f6 EA070000 		.4byte	.LASF136
 5706 16fa 07       		.byte	0x7
 5707 16fb E808     		.2byte	0x8e8
 5708 16fd 27       		.uleb128 0x27
 5709 16fe 57070000 		.4byte	.LASF137
 5710 1702 57070000 		.4byte	.LASF137
 5711 1706 07       		.byte	0x7
 5712 1707 D808     		.2byte	0x8d8
 5713 1709 26       		.uleb128 0x26
 5714 170a D0060000 		.4byte	.LASF138
 5715 170e D0060000 		.4byte	.LASF138
 5716 1712 09       		.byte	0x9
 5717 1713 82       		.byte	0x82
 5718 1714 00       		.byte	0
 5719              		.section	.debug_abbrev,"",%progbits
 5720              	.Ldebug_abbrev0:
 5721 0000 01       		.uleb128 0x1
 5722 0001 11       		.uleb128 0x11
 5723 0002 01       		.byte	0x1
 5724 0003 25       		.uleb128 0x25
 5725 0004 0E       		.uleb128 0xe
 5726 0005 13       		.uleb128 0x13
 5727 0006 0B       		.uleb128 0xb
 5728 0007 03       		.uleb128 0x3
 5729 0008 0E       		.uleb128 0xe
 5730 0009 1B       		.uleb128 0x1b
 5731 000a 0E       		.uleb128 0xe
 5732 000b 55       		.uleb128 0x55
 5733 000c 17       		.uleb128 0x17
 5734 000d 11       		.uleb128 0x11
 5735 000e 01       		.uleb128 0x1
 5736 000f 10       		.uleb128 0x10
 5737 0010 17       		.uleb128 0x17
 5738 0011 00       		.byte	0
 5739 0012 00       		.byte	0
 5740 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 157


 5741 0014 16       		.uleb128 0x16
 5742 0015 00       		.byte	0
 5743 0016 03       		.uleb128 0x3
 5744 0017 0E       		.uleb128 0xe
 5745 0018 3A       		.uleb128 0x3a
 5746 0019 0B       		.uleb128 0xb
 5747 001a 3B       		.uleb128 0x3b
 5748 001b 0B       		.uleb128 0xb
 5749 001c 49       		.uleb128 0x49
 5750 001d 13       		.uleb128 0x13
 5751 001e 00       		.byte	0
 5752 001f 00       		.byte	0
 5753 0020 03       		.uleb128 0x3
 5754 0021 24       		.uleb128 0x24
 5755 0022 00       		.byte	0
 5756 0023 0B       		.uleb128 0xb
 5757 0024 0B       		.uleb128 0xb
 5758 0025 3E       		.uleb128 0x3e
 5759 0026 0B       		.uleb128 0xb
 5760 0027 03       		.uleb128 0x3
 5761 0028 0E       		.uleb128 0xe
 5762 0029 00       		.byte	0
 5763 002a 00       		.byte	0
 5764 002b 04       		.uleb128 0x4
 5765 002c 24       		.uleb128 0x24
 5766 002d 00       		.byte	0
 5767 002e 0B       		.uleb128 0xb
 5768 002f 0B       		.uleb128 0xb
 5769 0030 3E       		.uleb128 0x3e
 5770 0031 0B       		.uleb128 0xb
 5771 0032 03       		.uleb128 0x3
 5772 0033 08       		.uleb128 0x8
 5773 0034 00       		.byte	0
 5774 0035 00       		.byte	0
 5775 0036 05       		.uleb128 0x5
 5776 0037 0F       		.uleb128 0xf
 5777 0038 00       		.byte	0
 5778 0039 0B       		.uleb128 0xb
 5779 003a 0B       		.uleb128 0xb
 5780 003b 00       		.byte	0
 5781 003c 00       		.byte	0
 5782 003d 06       		.uleb128 0x6
 5783 003e 0F       		.uleb128 0xf
 5784 003f 00       		.byte	0
 5785 0040 0B       		.uleb128 0xb
 5786 0041 0B       		.uleb128 0xb
 5787 0042 49       		.uleb128 0x49
 5788 0043 13       		.uleb128 0x13
 5789 0044 00       		.byte	0
 5790 0045 00       		.byte	0
 5791 0046 07       		.uleb128 0x7
 5792 0047 26       		.uleb128 0x26
 5793 0048 00       		.byte	0
 5794 0049 49       		.uleb128 0x49
 5795 004a 13       		.uleb128 0x13
 5796 004b 00       		.byte	0
 5797 004c 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 158


 5798 004d 08       		.uleb128 0x8
 5799 004e 26       		.uleb128 0x26
 5800 004f 00       		.byte	0
 5801 0050 00       		.byte	0
 5802 0051 00       		.byte	0
 5803 0052 09       		.uleb128 0x9
 5804 0053 13       		.uleb128 0x13
 5805 0054 01       		.byte	0x1
 5806 0055 03       		.uleb128 0x3
 5807 0056 0E       		.uleb128 0xe
 5808 0057 0B       		.uleb128 0xb
 5809 0058 0B       		.uleb128 0xb
 5810 0059 3A       		.uleb128 0x3a
 5811 005a 0B       		.uleb128 0xb
 5812 005b 3B       		.uleb128 0x3b
 5813 005c 0B       		.uleb128 0xb
 5814 005d 01       		.uleb128 0x1
 5815 005e 13       		.uleb128 0x13
 5816 005f 00       		.byte	0
 5817 0060 00       		.byte	0
 5818 0061 0A       		.uleb128 0xa
 5819 0062 0D       		.uleb128 0xd
 5820 0063 00       		.byte	0
 5821 0064 03       		.uleb128 0x3
 5822 0065 0E       		.uleb128 0xe
 5823 0066 3A       		.uleb128 0x3a
 5824 0067 0B       		.uleb128 0xb
 5825 0068 3B       		.uleb128 0x3b
 5826 0069 0B       		.uleb128 0xb
 5827 006a 49       		.uleb128 0x49
 5828 006b 13       		.uleb128 0x13
 5829 006c 38       		.uleb128 0x38
 5830 006d 0B       		.uleb128 0xb
 5831 006e 00       		.byte	0
 5832 006f 00       		.byte	0
 5833 0070 0B       		.uleb128 0xb
 5834 0071 35       		.uleb128 0x35
 5835 0072 00       		.byte	0
 5836 0073 49       		.uleb128 0x49
 5837 0074 13       		.uleb128 0x13
 5838 0075 00       		.byte	0
 5839 0076 00       		.byte	0
 5840 0077 0C       		.uleb128 0xc
 5841 0078 17       		.uleb128 0x17
 5842 0079 01       		.byte	0x1
 5843 007a 0B       		.uleb128 0xb
 5844 007b 0B       		.uleb128 0xb
 5845 007c 3A       		.uleb128 0x3a
 5846 007d 0B       		.uleb128 0xb
 5847 007e 3B       		.uleb128 0x3b
 5848 007f 0B       		.uleb128 0xb
 5849 0080 01       		.uleb128 0x1
 5850 0081 13       		.uleb128 0x13
 5851 0082 00       		.byte	0
 5852 0083 00       		.byte	0
 5853 0084 0D       		.uleb128 0xd
 5854 0085 0D       		.uleb128 0xd
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 159


 5855 0086 00       		.byte	0
 5856 0087 03       		.uleb128 0x3
 5857 0088 0E       		.uleb128 0xe
 5858 0089 3A       		.uleb128 0x3a
 5859 008a 0B       		.uleb128 0xb
 5860 008b 3B       		.uleb128 0x3b
 5861 008c 0B       		.uleb128 0xb
 5862 008d 49       		.uleb128 0x49
 5863 008e 13       		.uleb128 0x13
 5864 008f 00       		.byte	0
 5865 0090 00       		.byte	0
 5866 0091 0E       		.uleb128 0xe
 5867 0092 0D       		.uleb128 0xd
 5868 0093 00       		.byte	0
 5869 0094 03       		.uleb128 0x3
 5870 0095 08       		.uleb128 0x8
 5871 0096 3A       		.uleb128 0x3a
 5872 0097 0B       		.uleb128 0xb
 5873 0098 3B       		.uleb128 0x3b
 5874 0099 0B       		.uleb128 0xb
 5875 009a 49       		.uleb128 0x49
 5876 009b 13       		.uleb128 0x13
 5877 009c 38       		.uleb128 0x38
 5878 009d 0B       		.uleb128 0xb
 5879 009e 00       		.byte	0
 5880 009f 00       		.byte	0
 5881 00a0 0F       		.uleb128 0xf
 5882 00a1 2E       		.uleb128 0x2e
 5883 00a2 01       		.byte	0x1
 5884 00a3 03       		.uleb128 0x3
 5885 00a4 0E       		.uleb128 0xe
 5886 00a5 3A       		.uleb128 0x3a
 5887 00a6 0B       		.uleb128 0xb
 5888 00a7 3B       		.uleb128 0x3b
 5889 00a8 05       		.uleb128 0x5
 5890 00a9 27       		.uleb128 0x27
 5891 00aa 19       		.uleb128 0x19
 5892 00ab 49       		.uleb128 0x49
 5893 00ac 13       		.uleb128 0x13
 5894 00ad 11       		.uleb128 0x11
 5895 00ae 01       		.uleb128 0x1
 5896 00af 12       		.uleb128 0x12
 5897 00b0 06       		.uleb128 0x6
 5898 00b1 40       		.uleb128 0x40
 5899 00b2 18       		.uleb128 0x18
 5900 00b3 9742     		.uleb128 0x2117
 5901 00b5 19       		.uleb128 0x19
 5902 00b6 01       		.uleb128 0x1
 5903 00b7 13       		.uleb128 0x13
 5904 00b8 00       		.byte	0
 5905 00b9 00       		.byte	0
 5906 00ba 10       		.uleb128 0x10
 5907 00bb 05       		.uleb128 0x5
 5908 00bc 00       		.byte	0
 5909 00bd 03       		.uleb128 0x3
 5910 00be 0E       		.uleb128 0xe
 5911 00bf 3A       		.uleb128 0x3a
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 160


 5912 00c0 0B       		.uleb128 0xb
 5913 00c1 3B       		.uleb128 0x3b
 5914 00c2 05       		.uleb128 0x5
 5915 00c3 49       		.uleb128 0x49
 5916 00c4 13       		.uleb128 0x13
 5917 00c5 02       		.uleb128 0x2
 5918 00c6 17       		.uleb128 0x17
 5919 00c7 00       		.byte	0
 5920 00c8 00       		.byte	0
 5921 00c9 11       		.uleb128 0x11
 5922 00ca 34       		.uleb128 0x34
 5923 00cb 00       		.byte	0
 5924 00cc 03       		.uleb128 0x3
 5925 00cd 0E       		.uleb128 0xe
 5926 00ce 3A       		.uleb128 0x3a
 5927 00cf 0B       		.uleb128 0xb
 5928 00d0 3B       		.uleb128 0x3b
 5929 00d1 05       		.uleb128 0x5
 5930 00d2 49       		.uleb128 0x49
 5931 00d3 13       		.uleb128 0x13
 5932 00d4 02       		.uleb128 0x2
 5933 00d5 17       		.uleb128 0x17
 5934 00d6 00       		.byte	0
 5935 00d7 00       		.byte	0
 5936 00d8 12       		.uleb128 0x12
 5937 00d9 898201   		.uleb128 0x4109
 5938 00dc 00       		.byte	0
 5939 00dd 11       		.uleb128 0x11
 5940 00de 01       		.uleb128 0x1
 5941 00df 31       		.uleb128 0x31
 5942 00e0 13       		.uleb128 0x13
 5943 00e1 00       		.byte	0
 5944 00e2 00       		.byte	0
 5945 00e3 13       		.uleb128 0x13
 5946 00e4 2E       		.uleb128 0x2e
 5947 00e5 01       		.byte	0x1
 5948 00e6 03       		.uleb128 0x3
 5949 00e7 0E       		.uleb128 0xe
 5950 00e8 3A       		.uleb128 0x3a
 5951 00e9 0B       		.uleb128 0xb
 5952 00ea 3B       		.uleb128 0x3b
 5953 00eb 05       		.uleb128 0x5
 5954 00ec 27       		.uleb128 0x27
 5955 00ed 19       		.uleb128 0x19
 5956 00ee 11       		.uleb128 0x11
 5957 00ef 01       		.uleb128 0x1
 5958 00f0 12       		.uleb128 0x12
 5959 00f1 06       		.uleb128 0x6
 5960 00f2 40       		.uleb128 0x40
 5961 00f3 18       		.uleb128 0x18
 5962 00f4 9742     		.uleb128 0x2117
 5963 00f6 19       		.uleb128 0x19
 5964 00f7 01       		.uleb128 0x1
 5965 00f8 13       		.uleb128 0x13
 5966 00f9 00       		.byte	0
 5967 00fa 00       		.byte	0
 5968 00fb 14       		.uleb128 0x14
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 161


 5969 00fc 898201   		.uleb128 0x4109
 5970 00ff 01       		.byte	0x1
 5971 0100 11       		.uleb128 0x11
 5972 0101 01       		.uleb128 0x1
 5973 0102 31       		.uleb128 0x31
 5974 0103 13       		.uleb128 0x13
 5975 0104 00       		.byte	0
 5976 0105 00       		.byte	0
 5977 0106 15       		.uleb128 0x15
 5978 0107 8A8201   		.uleb128 0x410a
 5979 010a 00       		.byte	0
 5980 010b 02       		.uleb128 0x2
 5981 010c 18       		.uleb128 0x18
 5982 010d 9142     		.uleb128 0x2111
 5983 010f 18       		.uleb128 0x18
 5984 0110 00       		.byte	0
 5985 0111 00       		.byte	0
 5986 0112 16       		.uleb128 0x16
 5987 0113 0B       		.uleb128 0xb
 5988 0114 01       		.byte	0x1
 5989 0115 11       		.uleb128 0x11
 5990 0116 01       		.uleb128 0x1
 5991 0117 12       		.uleb128 0x12
 5992 0118 06       		.uleb128 0x6
 5993 0119 01       		.uleb128 0x1
 5994 011a 13       		.uleb128 0x13
 5995 011b 00       		.byte	0
 5996 011c 00       		.byte	0
 5997 011d 17       		.uleb128 0x17
 5998 011e 898201   		.uleb128 0x4109
 5999 0121 01       		.byte	0x1
 6000 0122 11       		.uleb128 0x11
 6001 0123 01       		.uleb128 0x1
 6002 0124 31       		.uleb128 0x31
 6003 0125 13       		.uleb128 0x13
 6004 0126 01       		.uleb128 0x1
 6005 0127 13       		.uleb128 0x13
 6006 0128 00       		.byte	0
 6007 0129 00       		.byte	0
 6008 012a 18       		.uleb128 0x18
 6009 012b 2E       		.uleb128 0x2e
 6010 012c 01       		.byte	0x1
 6011 012d 3F       		.uleb128 0x3f
 6012 012e 19       		.uleb128 0x19
 6013 012f 03       		.uleb128 0x3
 6014 0130 0E       		.uleb128 0xe
 6015 0131 3A       		.uleb128 0x3a
 6016 0132 0B       		.uleb128 0xb
 6017 0133 3B       		.uleb128 0x3b
 6018 0134 0B       		.uleb128 0xb
 6019 0135 27       		.uleb128 0x27
 6020 0136 19       		.uleb128 0x19
 6021 0137 49       		.uleb128 0x49
 6022 0138 13       		.uleb128 0x13
 6023 0139 11       		.uleb128 0x11
 6024 013a 01       		.uleb128 0x1
 6025 013b 12       		.uleb128 0x12
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 162


 6026 013c 06       		.uleb128 0x6
 6027 013d 40       		.uleb128 0x40
 6028 013e 18       		.uleb128 0x18
 6029 013f 9742     		.uleb128 0x2117
 6030 0141 19       		.uleb128 0x19
 6031 0142 01       		.uleb128 0x1
 6032 0143 13       		.uleb128 0x13
 6033 0144 00       		.byte	0
 6034 0145 00       		.byte	0
 6035 0146 19       		.uleb128 0x19
 6036 0147 05       		.uleb128 0x5
 6037 0148 00       		.byte	0
 6038 0149 03       		.uleb128 0x3
 6039 014a 0E       		.uleb128 0xe
 6040 014b 3A       		.uleb128 0x3a
 6041 014c 0B       		.uleb128 0xb
 6042 014d 3B       		.uleb128 0x3b
 6043 014e 0B       		.uleb128 0xb
 6044 014f 49       		.uleb128 0x49
 6045 0150 13       		.uleb128 0x13
 6046 0151 02       		.uleb128 0x2
 6047 0152 17       		.uleb128 0x17
 6048 0153 00       		.byte	0
 6049 0154 00       		.byte	0
 6050 0155 1A       		.uleb128 0x1a
 6051 0156 34       		.uleb128 0x34
 6052 0157 00       		.byte	0
 6053 0158 03       		.uleb128 0x3
 6054 0159 0E       		.uleb128 0xe
 6055 015a 3A       		.uleb128 0x3a
 6056 015b 0B       		.uleb128 0xb
 6057 015c 3B       		.uleb128 0x3b
 6058 015d 0B       		.uleb128 0xb
 6059 015e 49       		.uleb128 0x49
 6060 015f 13       		.uleb128 0x13
 6061 0160 02       		.uleb128 0x2
 6062 0161 17       		.uleb128 0x17
 6063 0162 00       		.byte	0
 6064 0163 00       		.byte	0
 6065 0164 1B       		.uleb128 0x1b
 6066 0165 05       		.uleb128 0x5
 6067 0166 00       		.byte	0
 6068 0167 03       		.uleb128 0x3
 6069 0168 0E       		.uleb128 0xe
 6070 0169 3A       		.uleb128 0x3a
 6071 016a 0B       		.uleb128 0xb
 6072 016b 3B       		.uleb128 0x3b
 6073 016c 05       		.uleb128 0x5
 6074 016d 49       		.uleb128 0x49
 6075 016e 13       		.uleb128 0x13
 6076 016f 02       		.uleb128 0x2
 6077 0170 18       		.uleb128 0x18
 6078 0171 00       		.byte	0
 6079 0172 00       		.byte	0
 6080 0173 1C       		.uleb128 0x1c
 6081 0174 2E       		.uleb128 0x2e
 6082 0175 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 163


 6083 0176 3F       		.uleb128 0x3f
 6084 0177 19       		.uleb128 0x19
 6085 0178 03       		.uleb128 0x3
 6086 0179 0E       		.uleb128 0xe
 6087 017a 3A       		.uleb128 0x3a
 6088 017b 0B       		.uleb128 0xb
 6089 017c 3B       		.uleb128 0x3b
 6090 017d 05       		.uleb128 0x5
 6091 017e 27       		.uleb128 0x27
 6092 017f 19       		.uleb128 0x19
 6093 0180 49       		.uleb128 0x49
 6094 0181 13       		.uleb128 0x13
 6095 0182 11       		.uleb128 0x11
 6096 0183 01       		.uleb128 0x1
 6097 0184 12       		.uleb128 0x12
 6098 0185 06       		.uleb128 0x6
 6099 0186 40       		.uleb128 0x40
 6100 0187 18       		.uleb128 0x18
 6101 0188 9742     		.uleb128 0x2117
 6102 018a 19       		.uleb128 0x19
 6103 018b 01       		.uleb128 0x1
 6104 018c 13       		.uleb128 0x13
 6105 018d 00       		.byte	0
 6106 018e 00       		.byte	0
 6107 018f 1D       		.uleb128 0x1d
 6108 0190 34       		.uleb128 0x34
 6109 0191 00       		.byte	0
 6110 0192 03       		.uleb128 0x3
 6111 0193 0E       		.uleb128 0xe
 6112 0194 3A       		.uleb128 0x3a
 6113 0195 0B       		.uleb128 0xb
 6114 0196 3B       		.uleb128 0x3b
 6115 0197 05       		.uleb128 0x5
 6116 0198 49       		.uleb128 0x49
 6117 0199 13       		.uleb128 0x13
 6118 019a 02       		.uleb128 0x2
 6119 019b 18       		.uleb128 0x18
 6120 019c 00       		.byte	0
 6121 019d 00       		.byte	0
 6122 019e 1E       		.uleb128 0x1e
 6123 019f 34       		.uleb128 0x34
 6124 01a0 00       		.byte	0
 6125 01a1 03       		.uleb128 0x3
 6126 01a2 0E       		.uleb128 0xe
 6127 01a3 3A       		.uleb128 0x3a
 6128 01a4 0B       		.uleb128 0xb
 6129 01a5 3B       		.uleb128 0x3b
 6130 01a6 05       		.uleb128 0x5
 6131 01a7 49       		.uleb128 0x49
 6132 01a8 13       		.uleb128 0x13
 6133 01a9 1C       		.uleb128 0x1c
 6134 01aa 0B       		.uleb128 0xb
 6135 01ab 00       		.byte	0
 6136 01ac 00       		.byte	0
 6137 01ad 1F       		.uleb128 0x1f
 6138 01ae 0B       		.uleb128 0xb
 6139 01af 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 164


 6140 01b0 55       		.uleb128 0x55
 6141 01b1 17       		.uleb128 0x17
 6142 01b2 01       		.uleb128 0x1
 6143 01b3 13       		.uleb128 0x13
 6144 01b4 00       		.byte	0
 6145 01b5 00       		.byte	0
 6146 01b6 20       		.uleb128 0x20
 6147 01b7 0B       		.uleb128 0xb
 6148 01b8 01       		.byte	0x1
 6149 01b9 55       		.uleb128 0x55
 6150 01ba 17       		.uleb128 0x17
 6151 01bb 00       		.byte	0
 6152 01bc 00       		.byte	0
 6153 01bd 21       		.uleb128 0x21
 6154 01be 2E       		.uleb128 0x2e
 6155 01bf 01       		.byte	0x1
 6156 01c0 3F       		.uleb128 0x3f
 6157 01c1 19       		.uleb128 0x19
 6158 01c2 03       		.uleb128 0x3
 6159 01c3 0E       		.uleb128 0xe
 6160 01c4 3A       		.uleb128 0x3a
 6161 01c5 0B       		.uleb128 0xb
 6162 01c6 3B       		.uleb128 0x3b
 6163 01c7 05       		.uleb128 0x5
 6164 01c8 27       		.uleb128 0x27
 6165 01c9 19       		.uleb128 0x19
 6166 01ca 11       		.uleb128 0x11
 6167 01cb 01       		.uleb128 0x1
 6168 01cc 12       		.uleb128 0x12
 6169 01cd 06       		.uleb128 0x6
 6170 01ce 40       		.uleb128 0x40
 6171 01cf 18       		.uleb128 0x18
 6172 01d0 9742     		.uleb128 0x2117
 6173 01d2 19       		.uleb128 0x19
 6174 01d3 01       		.uleb128 0x1
 6175 01d4 13       		.uleb128 0x13
 6176 01d5 00       		.byte	0
 6177 01d6 00       		.byte	0
 6178 01d7 22       		.uleb128 0x22
 6179 01d8 34       		.uleb128 0x34
 6180 01d9 00       		.byte	0
 6181 01da 03       		.uleb128 0x3
 6182 01db 08       		.uleb128 0x8
 6183 01dc 3A       		.uleb128 0x3a
 6184 01dd 0B       		.uleb128 0xb
 6185 01de 3B       		.uleb128 0x3b
 6186 01df 05       		.uleb128 0x5
 6187 01e0 49       		.uleb128 0x49
 6188 01e1 13       		.uleb128 0x13
 6189 01e2 02       		.uleb128 0x2
 6190 01e3 17       		.uleb128 0x17
 6191 01e4 00       		.byte	0
 6192 01e5 00       		.byte	0
 6193 01e6 23       		.uleb128 0x23
 6194 01e7 01       		.uleb128 0x1
 6195 01e8 01       		.byte	0x1
 6196 01e9 49       		.uleb128 0x49
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 165


 6197 01ea 13       		.uleb128 0x13
 6198 01eb 01       		.uleb128 0x1
 6199 01ec 13       		.uleb128 0x13
 6200 01ed 00       		.byte	0
 6201 01ee 00       		.byte	0
 6202 01ef 24       		.uleb128 0x24
 6203 01f0 21       		.uleb128 0x21
 6204 01f1 00       		.byte	0
 6205 01f2 49       		.uleb128 0x49
 6206 01f3 13       		.uleb128 0x13
 6207 01f4 2F       		.uleb128 0x2f
 6208 01f5 0B       		.uleb128 0xb
 6209 01f6 00       		.byte	0
 6210 01f7 00       		.byte	0
 6211 01f8 25       		.uleb128 0x25
 6212 01f9 34       		.uleb128 0x34
 6213 01fa 00       		.byte	0
 6214 01fb 03       		.uleb128 0x3
 6215 01fc 0E       		.uleb128 0xe
 6216 01fd 3A       		.uleb128 0x3a
 6217 01fe 0B       		.uleb128 0xb
 6218 01ff 3B       		.uleb128 0x3b
 6219 0200 0B       		.uleb128 0xb
 6220 0201 49       		.uleb128 0x49
 6221 0202 13       		.uleb128 0x13
 6222 0203 3F       		.uleb128 0x3f
 6223 0204 19       		.uleb128 0x19
 6224 0205 02       		.uleb128 0x2
 6225 0206 18       		.uleb128 0x18
 6226 0207 00       		.byte	0
 6227 0208 00       		.byte	0
 6228 0209 26       		.uleb128 0x26
 6229 020a 2E       		.uleb128 0x2e
 6230 020b 00       		.byte	0
 6231 020c 3F       		.uleb128 0x3f
 6232 020d 19       		.uleb128 0x19
 6233 020e 3C       		.uleb128 0x3c
 6234 020f 19       		.uleb128 0x19
 6235 0210 6E       		.uleb128 0x6e
 6236 0211 0E       		.uleb128 0xe
 6237 0212 03       		.uleb128 0x3
 6238 0213 0E       		.uleb128 0xe
 6239 0214 3A       		.uleb128 0x3a
 6240 0215 0B       		.uleb128 0xb
 6241 0216 3B       		.uleb128 0x3b
 6242 0217 0B       		.uleb128 0xb
 6243 0218 00       		.byte	0
 6244 0219 00       		.byte	0
 6245 021a 27       		.uleb128 0x27
 6246 021b 2E       		.uleb128 0x2e
 6247 021c 00       		.byte	0
 6248 021d 3F       		.uleb128 0x3f
 6249 021e 19       		.uleb128 0x19
 6250 021f 3C       		.uleb128 0x3c
 6251 0220 19       		.uleb128 0x19
 6252 0221 6E       		.uleb128 0x6e
 6253 0222 0E       		.uleb128 0xe
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 166


 6254 0223 03       		.uleb128 0x3
 6255 0224 0E       		.uleb128 0xe
 6256 0225 3A       		.uleb128 0x3a
 6257 0226 0B       		.uleb128 0xb
 6258 0227 3B       		.uleb128 0x3b
 6259 0228 05       		.uleb128 0x5
 6260 0229 00       		.byte	0
 6261 022a 00       		.byte	0
 6262 022b 28       		.uleb128 0x28
 6263 022c 2E       		.uleb128 0x2e
 6264 022d 00       		.byte	0
 6265 022e 3F       		.uleb128 0x3f
 6266 022f 19       		.uleb128 0x19
 6267 0230 3C       		.uleb128 0x3c
 6268 0231 19       		.uleb128 0x19
 6269 0232 6E       		.uleb128 0x6e
 6270 0233 0E       		.uleb128 0xe
 6271 0234 03       		.uleb128 0x3
 6272 0235 0E       		.uleb128 0xe
 6273 0236 00       		.byte	0
 6274 0237 00       		.byte	0
 6275 0238 00       		.byte	0
 6276              		.section	.debug_loc,"",%progbits
 6277              	.Ldebug_loc0:
 6278              	.LLST0:
 6279 0000 00000000 		.4byte	.LVL0
 6280 0004 0A000000 		.4byte	.LVL1
 6281 0008 0100     		.2byte	0x1
 6282 000a 50       		.byte	0x50
 6283 000b 0A000000 		.4byte	.LVL1
 6284 000f 10000000 		.4byte	.LVL3
 6285 0013 0400     		.2byte	0x4
 6286 0015 F3       		.byte	0xf3
 6287 0016 01       		.uleb128 0x1
 6288 0017 50       		.byte	0x50
 6289 0018 9F       		.byte	0x9f
 6290 0019 10000000 		.4byte	.LVL3
 6291 001d 12000000 		.4byte	.LVL4
 6292 0021 0100     		.2byte	0x1
 6293 0023 50       		.byte	0x50
 6294 0024 12000000 		.4byte	.LVL4
 6295 0028 14000000 		.4byte	.LFE49
 6296 002c 0400     		.2byte	0x4
 6297 002e F3       		.byte	0xf3
 6298 002f 01       		.uleb128 0x1
 6299 0030 50       		.byte	0x50
 6300 0031 9F       		.byte	0x9f
 6301 0032 00000000 		.4byte	0
 6302 0036 00000000 		.4byte	0
 6303              	.LLST1:
 6304 003a 0E000000 		.4byte	.LVL2
 6305 003e 10000000 		.4byte	.LVL3
 6306 0042 0100     		.2byte	0x1
 6307 0044 50       		.byte	0x50
 6308 0045 12000000 		.4byte	.LVL4
 6309 0049 14000000 		.4byte	.LFE49
 6310 004d 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 167


 6311 004f 50       		.byte	0x50
 6312 0050 00000000 		.4byte	0
 6313 0054 00000000 		.4byte	0
 6314              	.LLST2:
 6315 0058 00000000 		.4byte	.LVL5
 6316 005c 07000000 		.4byte	.LVL6-1
 6317 0060 0100     		.2byte	0x1
 6318 0062 50       		.byte	0x50
 6319 0063 07000000 		.4byte	.LVL6-1
 6320 0067 12000000 		.4byte	.LVL7
 6321 006b 0100     		.2byte	0x1
 6322 006d 54       		.byte	0x54
 6323 006e 12000000 		.4byte	.LVL7
 6324 0072 14000000 		.4byte	.LVL8
 6325 0076 0400     		.2byte	0x4
 6326 0078 F3       		.byte	0xf3
 6327 0079 01       		.uleb128 0x1
 6328 007a 50       		.byte	0x50
 6329 007b 9F       		.byte	0x9f
 6330 007c 14000000 		.4byte	.LVL8
 6331 0080 16000000 		.4byte	.LVL9
 6332 0084 0100     		.2byte	0x1
 6333 0086 54       		.byte	0x54
 6334 0087 16000000 		.4byte	.LVL9
 6335 008b 1E000000 		.4byte	.LFE55
 6336 008f 0400     		.2byte	0x4
 6337 0091 F3       		.byte	0xf3
 6338 0092 01       		.uleb128 0x1
 6339 0093 50       		.byte	0x50
 6340 0094 9F       		.byte	0x9f
 6341 0095 00000000 		.4byte	0
 6342 0099 00000000 		.4byte	0
 6343              	.LLST3:
 6344 009d 16000000 		.4byte	.LVL9
 6345 00a1 1C000000 		.4byte	.LVL11
 6346 00a5 0100     		.2byte	0x1
 6347 00a7 54       		.byte	0x54
 6348 00a8 1C000000 		.4byte	.LVL11
 6349 00ac 1E000000 		.4byte	.LFE55
 6350 00b0 0100     		.2byte	0x1
 6351 00b2 50       		.byte	0x50
 6352 00b3 00000000 		.4byte	0
 6353 00b7 00000000 		.4byte	0
 6354              	.LLST4:
 6355 00bb 00000000 		.4byte	.LVL12
 6356 00bf 07000000 		.4byte	.LVL13-1
 6357 00c3 0100     		.2byte	0x1
 6358 00c5 50       		.byte	0x50
 6359 00c6 07000000 		.4byte	.LVL13-1
 6360 00ca 10000000 		.4byte	.LVL14
 6361 00ce 0100     		.2byte	0x1
 6362 00d0 54       		.byte	0x54
 6363 00d1 10000000 		.4byte	.LVL14
 6364 00d5 12000000 		.4byte	.LVL15
 6365 00d9 0400     		.2byte	0x4
 6366 00db F3       		.byte	0xf3
 6367 00dc 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 168


 6368 00dd 50       		.byte	0x50
 6369 00de 9F       		.byte	0x9f
 6370 00df 12000000 		.4byte	.LVL15
 6371 00e3 14000000 		.4byte	.LVL16
 6372 00e7 0100     		.2byte	0x1
 6373 00e9 54       		.byte	0x54
 6374 00ea 14000000 		.4byte	.LVL16
 6375 00ee 1C000000 		.4byte	.LFE53
 6376 00f2 0400     		.2byte	0x4
 6377 00f4 F3       		.byte	0xf3
 6378 00f5 01       		.uleb128 0x1
 6379 00f6 50       		.byte	0x50
 6380 00f7 9F       		.byte	0x9f
 6381 00f8 00000000 		.4byte	0
 6382 00fc 00000000 		.4byte	0
 6383              	.LLST5:
 6384 0100 14000000 		.4byte	.LVL16
 6385 0104 1A000000 		.4byte	.LVL18
 6386 0108 0100     		.2byte	0x1
 6387 010a 54       		.byte	0x54
 6388 010b 1A000000 		.4byte	.LVL18
 6389 010f 1C000000 		.4byte	.LFE53
 6390 0113 0100     		.2byte	0x1
 6391 0115 50       		.byte	0x50
 6392 0116 00000000 		.4byte	0
 6393 011a 00000000 		.4byte	0
 6394              	.LLST6:
 6395 011e 00000000 		.4byte	.LVL19
 6396 0122 16000000 		.4byte	.LVL23
 6397 0126 0100     		.2byte	0x1
 6398 0128 50       		.byte	0x50
 6399 0129 16000000 		.4byte	.LVL23
 6400 012d 20000000 		.4byte	.LVL25
 6401 0131 0100     		.2byte	0x1
 6402 0133 54       		.byte	0x54
 6403 0134 20000000 		.4byte	.LVL25
 6404 0138 26000000 		.4byte	.LVL26
 6405 013c 0100     		.2byte	0x1
 6406 013e 50       		.byte	0x50
 6407 013f 26000000 		.4byte	.LVL26
 6408 0143 42000000 		.4byte	.LVL28
 6409 0147 0100     		.2byte	0x1
 6410 0149 54       		.byte	0x54
 6411 014a 42000000 		.4byte	.LVL28
 6412 014e 44000000 		.4byte	.LVL29
 6413 0152 0100     		.2byte	0x1
 6414 0154 50       		.byte	0x50
 6415 0155 44000000 		.4byte	.LVL29
 6416 0159 6E000000 		.4byte	.LVL32
 6417 015d 0100     		.2byte	0x1
 6418 015f 54       		.byte	0x54
 6419 0160 6E000000 		.4byte	.LVL32
 6420 0164 70000000 		.4byte	.LVL33
 6421 0168 0100     		.2byte	0x1
 6422 016a 50       		.byte	0x50
 6423 016b 70000000 		.4byte	.LVL33
 6424 016f 80000000 		.4byte	.LVL37
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 169


 6425 0173 0100     		.2byte	0x1
 6426 0175 54       		.byte	0x54
 6427 0176 80000000 		.4byte	.LVL37
 6428 017a 82000000 		.4byte	.LFE50
 6429 017e 0400     		.2byte	0x4
 6430 0180 F3       		.byte	0xf3
 6431 0181 01       		.uleb128 0x1
 6432 0182 50       		.byte	0x50
 6433 0183 9F       		.byte	0x9f
 6434 0184 00000000 		.4byte	0
 6435 0188 00000000 		.4byte	0
 6436              	.LLST7:
 6437 018c 00000000 		.4byte	.LVL19
 6438 0190 19000000 		.4byte	.LVL24-1
 6439 0194 0100     		.2byte	0x1
 6440 0196 51       		.byte	0x51
 6441 0197 19000000 		.4byte	.LVL24-1
 6442 019b 20000000 		.4byte	.LVL25
 6443 019f 0400     		.2byte	0x4
 6444 01a1 F3       		.byte	0xf3
 6445 01a2 01       		.uleb128 0x1
 6446 01a3 51       		.byte	0x51
 6447 01a4 9F       		.byte	0x9f
 6448 01a5 20000000 		.4byte	.LVL25
 6449 01a9 29000000 		.4byte	.LVL27-1
 6450 01ad 0100     		.2byte	0x1
 6451 01af 51       		.byte	0x51
 6452 01b0 29000000 		.4byte	.LVL27-1
 6453 01b4 42000000 		.4byte	.LVL28
 6454 01b8 0400     		.2byte	0x4
 6455 01ba F3       		.byte	0xf3
 6456 01bb 01       		.uleb128 0x1
 6457 01bc 51       		.byte	0x51
 6458 01bd 9F       		.byte	0x9f
 6459 01be 42000000 		.4byte	.LVL28
 6460 01c2 47000000 		.4byte	.LVL30-1
 6461 01c6 0100     		.2byte	0x1
 6462 01c8 51       		.byte	0x51
 6463 01c9 47000000 		.4byte	.LVL30-1
 6464 01cd 6E000000 		.4byte	.LVL32
 6465 01d1 0400     		.2byte	0x4
 6466 01d3 F3       		.byte	0xf3
 6467 01d4 01       		.uleb128 0x1
 6468 01d5 51       		.byte	0x51
 6469 01d6 9F       		.byte	0x9f
 6470 01d7 6E000000 		.4byte	.LVL32
 6471 01db 72000000 		.4byte	.LVL34
 6472 01df 0100     		.2byte	0x1
 6473 01e1 51       		.byte	0x51
 6474 01e2 72000000 		.4byte	.LVL34
 6475 01e6 82000000 		.4byte	.LFE50
 6476 01ea 0400     		.2byte	0x4
 6477 01ec F3       		.byte	0xf3
 6478 01ed 01       		.uleb128 0x1
 6479 01ee 51       		.byte	0x51
 6480 01ef 9F       		.byte	0x9f
 6481 01f0 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 170


 6482 01f4 00000000 		.4byte	0
 6483              	.LLST8:
 6484 01f8 00000000 		.4byte	.LVL19
 6485 01fc 0A000000 		.4byte	.LVL22
 6486 0200 0100     		.2byte	0x1
 6487 0202 52       		.byte	0x52
 6488 0203 0A000000 		.4byte	.LVL22
 6489 0207 80000000 		.4byte	.LVL39
 6490 020b 0100     		.2byte	0x1
 6491 020d 56       		.byte	0x56
 6492 020e 80000000 		.4byte	.LVL39
 6493 0212 82000000 		.4byte	.LFE50
 6494 0216 0400     		.2byte	0x4
 6495 0218 F3       		.byte	0xf3
 6496 0219 01       		.uleb128 0x1
 6497 021a 52       		.byte	0x52
 6498 021b 9F       		.byte	0x9f
 6499 021c 00000000 		.4byte	0
 6500 0220 00000000 		.4byte	0
 6501              	.LLST9:
 6502 0224 06000000 		.4byte	.LVL20
 6503 0228 1A000000 		.4byte	.LVL24
 6504 022c 0200     		.2byte	0x2
 6505 022e 30       		.byte	0x30
 6506 022f 9F       		.byte	0x9f
 6507 0230 1A000000 		.4byte	.LVL24
 6508 0234 20000000 		.4byte	.LVL25
 6509 0238 0100     		.2byte	0x1
 6510 023a 50       		.byte	0x50
 6511 023b 20000000 		.4byte	.LVL25
 6512 023f 7C000000 		.4byte	.LVL35
 6513 0243 0200     		.2byte	0x2
 6514 0245 30       		.byte	0x30
 6515 0246 9F       		.byte	0x9f
 6516 0247 7C000000 		.4byte	.LVL35
 6517 024b 82000000 		.4byte	.LFE50
 6518 024f 0100     		.2byte	0x1
 6519 0251 50       		.byte	0x50
 6520 0252 00000000 		.4byte	0
 6521 0256 00000000 		.4byte	0
 6522              	.LLST10:
 6523 025a 08000000 		.4byte	.LVL21
 6524 025e 7E000000 		.4byte	.LVL36
 6525 0262 0100     		.2byte	0x1
 6526 0264 55       		.byte	0x55
 6527 0265 7E000000 		.4byte	.LVL36
 6528 0269 80000000 		.4byte	.LVL38
 6529 026d 0300     		.2byte	0x3
 6530 026f 75       		.byte	0x75
 6531 0270 7F       		.sleb128 -1
 6532 0271 9F       		.byte	0x9f
 6533 0272 80000000 		.4byte	.LVL38
 6534 0276 82000000 		.4byte	.LFE50
 6535 027a 0900     		.2byte	0x9
 6536 027c F3       		.byte	0xf3
 6537 027d 01       		.uleb128 0x1
 6538 027e 50       		.byte	0x50
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 171


 6539 027f 23       		.byte	0x23
 6540 0280 38       		.uleb128 0x38
 6541 0281 06       		.byte	0x6
 6542 0282 31       		.byte	0x31
 6543 0283 1C       		.byte	0x1c
 6544 0284 9F       		.byte	0x9f
 6545 0285 00000000 		.4byte	0
 6546 0289 00000000 		.4byte	0
 6547              	.LLST11:
 6548 028d 00000000 		.4byte	.LVL40
 6549 0291 1E000000 		.4byte	.LVL42
 6550 0295 0100     		.2byte	0x1
 6551 0297 50       		.byte	0x50
 6552 0298 1E000000 		.4byte	.LVL42
 6553 029c 24000000 		.4byte	.LFE51
 6554 02a0 0400     		.2byte	0x4
 6555 02a2 F3       		.byte	0xf3
 6556 02a3 01       		.uleb128 0x1
 6557 02a4 50       		.byte	0x50
 6558 02a5 9F       		.byte	0x9f
 6559 02a6 00000000 		.4byte	0
 6560 02aa 00000000 		.4byte	0
 6561              	.LLST12:
 6562 02ae 00000000 		.4byte	.LVL40
 6563 02b2 12000000 		.4byte	.LVL41
 6564 02b6 0100     		.2byte	0x1
 6565 02b8 51       		.byte	0x51
 6566 02b9 12000000 		.4byte	.LVL41
 6567 02bd 22000000 		.4byte	.LVL44
 6568 02c1 0100     		.2byte	0x1
 6569 02c3 54       		.byte	0x54
 6570 02c4 22000000 		.4byte	.LVL44
 6571 02c8 24000000 		.4byte	.LFE51
 6572 02cc 0400     		.2byte	0x4
 6573 02ce F3       		.byte	0xf3
 6574 02cf 01       		.uleb128 0x1
 6575 02d0 51       		.byte	0x51
 6576 02d1 9F       		.byte	0x9f
 6577 02d2 00000000 		.4byte	0
 6578 02d6 00000000 		.4byte	0
 6579              	.LLST13:
 6580 02da 00000000 		.4byte	.LVL45
 6581 02de 07000000 		.4byte	.LVL46-1
 6582 02e2 0100     		.2byte	0x1
 6583 02e4 50       		.byte	0x50
 6584 02e5 07000000 		.4byte	.LVL46-1
 6585 02e9 6C000000 		.4byte	.LVL62
 6586 02ed 0100     		.2byte	0x1
 6587 02ef 55       		.byte	0x55
 6588 02f0 6C000000 		.4byte	.LVL62
 6589 02f4 6E000000 		.4byte	.LFE52
 6590 02f8 0400     		.2byte	0x4
 6591 02fa F3       		.byte	0xf3
 6592 02fb 01       		.uleb128 0x1
 6593 02fc 50       		.byte	0x50
 6594 02fd 9F       		.byte	0x9f
 6595 02fe 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 172


 6596 0302 00000000 		.4byte	0
 6597              	.LLST14:
 6598 0306 0E000000 		.4byte	.LVL47
 6599 030a 28000000 		.4byte	.LVL50
 6600 030e 0100     		.2byte	0x1
 6601 0310 54       		.byte	0x54
 6602 0311 2A000000 		.4byte	.LVL51
 6603 0315 40000000 		.4byte	.LVL54
 6604 0319 0100     		.2byte	0x1
 6605 031b 54       		.byte	0x54
 6606 031c 00000000 		.4byte	0
 6607 0320 00000000 		.4byte	0
 6608              	.LLST15:
 6609 0324 42000000 		.4byte	.LVL55
 6610 0328 5C000000 		.4byte	.LVL58
 6611 032c 0100     		.2byte	0x1
 6612 032e 54       		.byte	0x54
 6613 032f 5E000000 		.4byte	.LVL59
 6614 0333 6C000000 		.4byte	.LVL61
 6615 0337 0100     		.2byte	0x1
 6616 0339 54       		.byte	0x54
 6617 033a 00000000 		.4byte	0
 6618 033e 00000000 		.4byte	0
 6619              	.LLST16:
 6620 0342 00000000 		.4byte	.LVL63
 6621 0346 11000000 		.4byte	.LVL65-1
 6622 034a 0100     		.2byte	0x1
 6623 034c 50       		.byte	0x50
 6624 034d 11000000 		.4byte	.LVL65-1
 6625 0351 6A000000 		.4byte	.LVL71
 6626 0355 0100     		.2byte	0x1
 6627 0357 54       		.byte	0x54
 6628 0358 6A000000 		.4byte	.LVL71
 6629 035c 6C000000 		.4byte	.LFE32
 6630 0360 0400     		.2byte	0x4
 6631 0362 F3       		.byte	0xf3
 6632 0363 01       		.uleb128 0x1
 6633 0364 50       		.byte	0x50
 6634 0365 9F       		.byte	0x9f
 6635 0366 00000000 		.4byte	0
 6636 036a 00000000 		.4byte	0
 6637              	.LLST17:
 6638 036e 00000000 		.4byte	.LVL63
 6639 0372 11000000 		.4byte	.LVL65-1
 6640 0376 0100     		.2byte	0x1
 6641 0378 51       		.byte	0x51
 6642 0379 11000000 		.4byte	.LVL65-1
 6643 037d 6A000000 		.4byte	.LVL72
 6644 0381 0100     		.2byte	0x1
 6645 0383 55       		.byte	0x55
 6646 0384 6A000000 		.4byte	.LVL72
 6647 0388 6C000000 		.4byte	.LFE32
 6648 038c 0400     		.2byte	0x4
 6649 038e F3       		.byte	0xf3
 6650 038f 01       		.uleb128 0x1
 6651 0390 51       		.byte	0x51
 6652 0391 9F       		.byte	0x9f
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 173


 6653 0392 00000000 		.4byte	0
 6654 0396 00000000 		.4byte	0
 6655              	.LLST18:
 6656 039a 06000000 		.4byte	.LVL64
 6657 039e 11000000 		.4byte	.LVL65-1
 6658 03a2 0100     		.2byte	0x1
 6659 03a4 50       		.byte	0x50
 6660 03a5 11000000 		.4byte	.LVL65-1
 6661 03a9 6A000000 		.4byte	.LVL71
 6662 03ad 0100     		.2byte	0x1
 6663 03af 54       		.byte	0x54
 6664 03b0 6A000000 		.4byte	.LVL71
 6665 03b4 6C000000 		.4byte	.LFE32
 6666 03b8 0400     		.2byte	0x4
 6667 03ba F3       		.byte	0xf3
 6668 03bb 01       		.uleb128 0x1
 6669 03bc 50       		.byte	0x50
 6670 03bd 9F       		.byte	0x9f
 6671 03be 00000000 		.4byte	0
 6672 03c2 00000000 		.4byte	0
 6673              	.LLST19:
 6674 03c6 00000000 		.4byte	.LVL73
 6675 03ca 16000000 		.4byte	.LVL76
 6676 03ce 0100     		.2byte	0x1
 6677 03d0 50       		.byte	0x50
 6678 03d1 16000000 		.4byte	.LVL76
 6679 03d5 19000000 		.4byte	.LVL77-1
 6680 03d9 0200     		.2byte	0x2
 6681 03db 73       		.byte	0x73
 6682 03dc 3C       		.sleb128 60
 6683 03dd 19000000 		.4byte	.LVL77-1
 6684 03e1 1C000000 		.4byte	.LFE34
 6685 03e5 0400     		.2byte	0x4
 6686 03e7 F3       		.byte	0xf3
 6687 03e8 01       		.uleb128 0x1
 6688 03e9 50       		.byte	0x50
 6689 03ea 9F       		.byte	0x9f
 6690 03eb 00000000 		.4byte	0
 6691 03ef 00000000 		.4byte	0
 6692              	.LLST20:
 6693 03f3 00000000 		.4byte	.LVL73
 6694 03f7 14000000 		.4byte	.LVL75
 6695 03fb 0100     		.2byte	0x1
 6696 03fd 51       		.byte	0x51
 6697 03fe 14000000 		.4byte	.LVL75
 6698 0402 19000000 		.4byte	.LVL77-1
 6699 0406 0300     		.2byte	0x3
 6700 0408 73       		.byte	0x73
 6701 0409 C000     		.sleb128 64
 6702 040b 19000000 		.4byte	.LVL77-1
 6703 040f 1C000000 		.4byte	.LFE34
 6704 0413 0400     		.2byte	0x4
 6705 0415 F3       		.byte	0xf3
 6706 0416 01       		.uleb128 0x1
 6707 0417 51       		.byte	0x51
 6708 0418 9F       		.byte	0x9f
 6709 0419 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 174


 6710 041d 00000000 		.4byte	0
 6711              	.LLST21:
 6712 0421 00000000 		.4byte	.LVL73
 6713 0425 19000000 		.4byte	.LVL77-1
 6714 0429 0100     		.2byte	0x1
 6715 042b 52       		.byte	0x52
 6716 042c 19000000 		.4byte	.LVL77-1
 6717 0430 1C000000 		.4byte	.LFE34
 6718 0434 0400     		.2byte	0x4
 6719 0436 F3       		.byte	0xf3
 6720 0437 01       		.uleb128 0x1
 6721 0438 52       		.byte	0x52
 6722 0439 9F       		.byte	0x9f
 6723 043a 00000000 		.4byte	0
 6724 043e 00000000 		.4byte	0
 6725              	.LLST22:
 6726 0442 00000000 		.4byte	.LVL73
 6727 0446 04000000 		.4byte	.LVL74
 6728 044a 0100     		.2byte	0x1
 6729 044c 53       		.byte	0x53
 6730 044d 04000000 		.4byte	.LVL74
 6731 0451 1C000000 		.4byte	.LFE34
 6732 0455 0400     		.2byte	0x4
 6733 0457 F3       		.byte	0xf3
 6734 0458 01       		.uleb128 0x1
 6735 0459 53       		.byte	0x53
 6736 045a 9F       		.byte	0x9f
 6737 045b 00000000 		.4byte	0
 6738 045f 00000000 		.4byte	0
 6739              	.LLST23:
 6740 0463 00000000 		.4byte	.LVL78
 6741 0467 18000000 		.4byte	.LVL79
 6742 046b 0100     		.2byte	0x1
 6743 046d 50       		.byte	0x50
 6744 046e 18000000 		.4byte	.LVL79
 6745 0472 1C000000 		.4byte	.LVL81
 6746 0476 0100     		.2byte	0x1
 6747 0478 56       		.byte	0x56
 6748 0479 1C000000 		.4byte	.LVL81
 6749 047d 1E000000 		.4byte	.LVL82
 6750 0481 0100     		.2byte	0x1
 6751 0483 50       		.byte	0x50
 6752 0484 1E000000 		.4byte	.LVL82
 6753 0488 3C000000 		.4byte	.LVL89
 6754 048c 0100     		.2byte	0x1
 6755 048e 56       		.byte	0x56
 6756 048f 3C000000 		.4byte	.LVL89
 6757 0493 3E000000 		.4byte	.LFE33
 6758 0497 0400     		.2byte	0x4
 6759 0499 F3       		.byte	0xf3
 6760 049a 01       		.uleb128 0x1
 6761 049b 50       		.byte	0x50
 6762 049c 9F       		.byte	0x9f
 6763 049d 00000000 		.4byte	0
 6764 04a1 00000000 		.4byte	0
 6765              	.LLST24:
 6766 04a5 00000000 		.4byte	.LVL78
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 175


 6767 04a9 23000000 		.4byte	.LVL84-1
 6768 04ad 0100     		.2byte	0x1
 6769 04af 51       		.byte	0x51
 6770 04b0 23000000 		.4byte	.LVL84-1
 6771 04b4 3C000000 		.4byte	.LVL90
 6772 04b8 0100     		.2byte	0x1
 6773 04ba 57       		.byte	0x57
 6774 04bb 3C000000 		.4byte	.LVL90
 6775 04bf 3E000000 		.4byte	.LFE33
 6776 04c3 0400     		.2byte	0x4
 6777 04c5 F3       		.byte	0xf3
 6778 04c6 01       		.uleb128 0x1
 6779 04c7 51       		.byte	0x51
 6780 04c8 9F       		.byte	0x9f
 6781 04c9 00000000 		.4byte	0
 6782 04cd 00000000 		.4byte	0
 6783              	.LLST25:
 6784 04d1 00000000 		.4byte	.LVL78
 6785 04d5 23000000 		.4byte	.LVL84-1
 6786 04d9 0100     		.2byte	0x1
 6787 04db 52       		.byte	0x52
 6788 04dc 23000000 		.4byte	.LVL84-1
 6789 04e0 3E000000 		.4byte	.LFE33
 6790 04e4 0400     		.2byte	0x4
 6791 04e6 F3       		.byte	0xf3
 6792 04e7 01       		.uleb128 0x1
 6793 04e8 52       		.byte	0x52
 6794 04e9 9F       		.byte	0x9f
 6795 04ea 00000000 		.4byte	0
 6796 04ee 00000000 		.4byte	0
 6797              	.LLST26:
 6798 04f2 26000000 		.4byte	.LVL85
 6799 04f6 34000000 		.4byte	.LVL86
 6800 04fa 0100     		.2byte	0x1
 6801 04fc 50       		.byte	0x50
 6802 04fd 34000000 		.4byte	.LVL86
 6803 0501 3C000000 		.4byte	.LVL88
 6804 0505 0100     		.2byte	0x1
 6805 0507 54       		.byte	0x54
 6806 0508 3C000000 		.4byte	.LVL88
 6807 050c 3E000000 		.4byte	.LFE33
 6808 0510 0100     		.2byte	0x1
 6809 0512 50       		.byte	0x50
 6810 0513 00000000 		.4byte	0
 6811 0517 00000000 		.4byte	0
 6812              	.LLST27:
 6813 051b 1A000000 		.4byte	.LVL80
 6814 051f 1C000000 		.4byte	.LVL81
 6815 0523 0100     		.2byte	0x1
 6816 0525 50       		.byte	0x50
 6817 0526 1E000000 		.4byte	.LVL82
 6818 052a 20000000 		.4byte	.LVL83
 6819 052e 0100     		.2byte	0x1
 6820 0530 50       		.byte	0x50
 6821 0531 20000000 		.4byte	.LVL83
 6822 0535 23000000 		.4byte	.LVL84-1
 6823 0539 0400     		.2byte	0x4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 176


 6824 053b 70       		.byte	0x70
 6825 053c B87F     		.sleb128 -72
 6826 053e 9F       		.byte	0x9f
 6827 053f 00000000 		.4byte	0
 6828 0543 00000000 		.4byte	0
 6829              	.LLST28:
 6830 0547 00000000 		.4byte	.LVL91
 6831 054b 4D000000 		.4byte	.LVL96-1
 6832 054f 0100     		.2byte	0x1
 6833 0551 50       		.byte	0x50
 6834 0552 4D000000 		.4byte	.LVL96-1
 6835 0556 46010000 		.4byte	.LVL124
 6836 055a 0100     		.2byte	0x1
 6837 055c 54       		.byte	0x54
 6838 055d 46010000 		.4byte	.LVL124
 6839 0561 48010000 		.4byte	.LFE37
 6840 0565 0400     		.2byte	0x4
 6841 0567 F3       		.byte	0xf3
 6842 0568 01       		.uleb128 0x1
 6843 0569 50       		.byte	0x50
 6844 056a 9F       		.byte	0x9f
 6845 056b 00000000 		.4byte	0
 6846 056f 00000000 		.4byte	0
 6847              	.LLST29:
 6848 0573 00000000 		.4byte	.LVL91
 6849 0577 4D000000 		.4byte	.LVL96-1
 6850 057b 0100     		.2byte	0x1
 6851 057d 51       		.byte	0x51
 6852 057e 4D000000 		.4byte	.LVL96-1
 6853 0582 46010000 		.4byte	.LVL126
 6854 0586 0100     		.2byte	0x1
 6855 0588 56       		.byte	0x56
 6856 0589 46010000 		.4byte	.LVL126
 6857 058d 48010000 		.4byte	.LFE37
 6858 0591 0400     		.2byte	0x4
 6859 0593 F3       		.byte	0xf3
 6860 0594 01       		.uleb128 0x1
 6861 0595 51       		.byte	0x51
 6862 0596 9F       		.byte	0x9f
 6863 0597 00000000 		.4byte	0
 6864 059b 00000000 		.4byte	0
 6865              	.LLST30:
 6866 059f 00000000 		.4byte	.LVL91
 6867 05a3 4D000000 		.4byte	.LVL96-1
 6868 05a7 0100     		.2byte	0x1
 6869 05a9 52       		.byte	0x52
 6870 05aa 4D000000 		.4byte	.LVL96-1
 6871 05ae FA000000 		.4byte	.LVL113
 6872 05b2 0200     		.2byte	0x2
 6873 05b4 91       		.byte	0x91
 6874 05b5 5C       		.sleb128 -36
 6875 05b6 FA000000 		.4byte	.LVL113
 6876 05ba FF000000 		.4byte	.LVL114-1
 6877 05be 0200     		.2byte	0x2
 6878 05c0 71       		.byte	0x71
 6879 05c1 00       		.sleb128 0
 6880 05c2 FF000000 		.4byte	.LVL114-1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 177


 6881 05c6 48010000 		.4byte	.LFE37
 6882 05ca 0200     		.2byte	0x2
 6883 05cc 91       		.byte	0x91
 6884 05cd 5C       		.sleb128 -36
 6885 05ce 00000000 		.4byte	0
 6886 05d2 00000000 		.4byte	0
 6887              	.LLST31:
 6888 05d6 00000000 		.4byte	.LVL91
 6889 05da 1A000000 		.4byte	.LVL93
 6890 05de 0100     		.2byte	0x1
 6891 05e0 53       		.byte	0x53
 6892 05e1 1A000000 		.4byte	.LVL93
 6893 05e5 22000000 		.4byte	.LVL94
 6894 05e9 0100     		.2byte	0x1
 6895 05eb 55       		.byte	0x55
 6896 05ec 22000000 		.4byte	.LVL94
 6897 05f0 24000000 		.4byte	.LVL95
 6898 05f4 0100     		.2byte	0x1
 6899 05f6 53       		.byte	0x53
 6900 05f7 24000000 		.4byte	.LVL95
 6901 05fb 46010000 		.4byte	.LVL125
 6902 05ff 0100     		.2byte	0x1
 6903 0601 55       		.byte	0x55
 6904 0602 46010000 		.4byte	.LVL125
 6905 0606 48010000 		.4byte	.LFE37
 6906 060a 0400     		.2byte	0x4
 6907 060c F3       		.byte	0xf3
 6908 060d 01       		.uleb128 0x1
 6909 060e 53       		.byte	0x53
 6910 060f 9F       		.byte	0x9f
 6911 0610 00000000 		.4byte	0
 6912 0614 00000000 		.4byte	0
 6913              	.LLST32:
 6914 0618 0C000000 		.4byte	.LVL92
 6915 061c 6C000000 		.4byte	.LVL97
 6916 0620 0200     		.2byte	0x2
 6917 0622 30       		.byte	0x30
 6918 0623 9F       		.byte	0x9f
 6919 0624 6C000000 		.4byte	.LVL97
 6920 0628 C6000000 		.4byte	.LVL107
 6921 062c 0100     		.2byte	0x1
 6922 062e 57       		.byte	0x57
 6923 062f C6000000 		.4byte	.LVL107
 6924 0633 C8000000 		.4byte	.LVL108
 6925 0637 0200     		.2byte	0x2
 6926 0639 31       		.byte	0x31
 6927 063a 9F       		.byte	0x9f
 6928 063b C8000000 		.4byte	.LVL108
 6929 063f 46010000 		.4byte	.LVL127
 6930 0643 0100     		.2byte	0x1
 6931 0645 57       		.byte	0x57
 6932 0646 00000000 		.4byte	0
 6933 064a 00000000 		.4byte	0
 6934              	.LLST33:
 6935 064e 86000000 		.4byte	.LVL99
 6936 0652 8E000000 		.4byte	.LVL100
 6937 0656 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 178


 6938 0658 50       		.byte	0x50
 6939 0659 9E000000 		.4byte	.LVL103
 6940 065d A5000000 		.4byte	.LVL104-1
 6941 0661 0100     		.2byte	0x1
 6942 0663 50       		.byte	0x50
 6943 0664 00000000 		.4byte	0
 6944 0668 00000000 		.4byte	0
 6945              	.LLST34:
 6946 066c 0C000000 		.4byte	.LVL92
 6947 0670 4D000000 		.4byte	.LVL96-1
 6948 0674 0100     		.2byte	0x1
 6949 0676 50       		.byte	0x50
 6950 0677 4D000000 		.4byte	.LVL96-1
 6951 067b 46010000 		.4byte	.LVL124
 6952 067f 0100     		.2byte	0x1
 6953 0681 54       		.byte	0x54
 6954 0682 46010000 		.4byte	.LVL124
 6955 0686 48010000 		.4byte	.LFE37
 6956 068a 0400     		.2byte	0x4
 6957 068c F3       		.byte	0xf3
 6958 068d 01       		.uleb128 0x1
 6959 068e 50       		.byte	0x50
 6960 068f 9F       		.byte	0x9f
 6961 0690 00000000 		.4byte	0
 6962 0694 00000000 		.4byte	0
 6963              	.LLST35:
 6964 0698 00000000 		.4byte	.LVL128
 6965 069c 15000000 		.4byte	.LVL129-1
 6966 06a0 0100     		.2byte	0x1
 6967 06a2 50       		.byte	0x50
 6968 06a3 15000000 		.4byte	.LVL129-1
 6969 06a7 18000000 		.4byte	.LFE35
 6970 06ab 0400     		.2byte	0x4
 6971 06ad F3       		.byte	0xf3
 6972 06ae 01       		.uleb128 0x1
 6973 06af 50       		.byte	0x50
 6974 06b0 9F       		.byte	0x9f
 6975 06b1 00000000 		.4byte	0
 6976 06b5 00000000 		.4byte	0
 6977              	.LLST36:
 6978 06b9 00000000 		.4byte	.LVL130
 6979 06bd 08000000 		.4byte	.LVL132
 6980 06c1 0100     		.2byte	0x1
 6981 06c3 50       		.byte	0x50
 6982 06c4 08000000 		.4byte	.LVL132
 6983 06c8 16000000 		.4byte	.LFE36
 6984 06cc 0400     		.2byte	0x4
 6985 06ce F3       		.byte	0xf3
 6986 06cf 01       		.uleb128 0x1
 6987 06d0 50       		.byte	0x50
 6988 06d1 9F       		.byte	0x9f
 6989 06d2 00000000 		.4byte	0
 6990 06d6 00000000 		.4byte	0
 6991              	.LLST37:
 6992 06da 0E000000 		.4byte	.LVL134
 6993 06de 11000000 		.4byte	.LVL135-1
 6994 06e2 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 179


 6995 06e4 50       		.byte	0x50
 6996 06e5 11000000 		.4byte	.LVL135-1
 6997 06e9 14000000 		.4byte	.LVL136
 6998 06ed 0100     		.2byte	0x1
 6999 06ef 54       		.byte	0x54
 7000 06f0 14000000 		.4byte	.LVL136
 7001 06f4 16000000 		.4byte	.LFE36
 7002 06f8 0100     		.2byte	0x1
 7003 06fa 50       		.byte	0x50
 7004 06fb 00000000 		.4byte	0
 7005 06ff 00000000 		.4byte	0
 7006              	.LLST38:
 7007 0703 00000000 		.4byte	.LVL137
 7008 0707 4F000000 		.4byte	.LVL140-1
 7009 070b 0100     		.2byte	0x1
 7010 070d 50       		.byte	0x50
 7011 070e 4F000000 		.4byte	.LVL140-1
 7012 0712 8E000000 		.4byte	.LVL146
 7013 0716 0100     		.2byte	0x1
 7014 0718 54       		.byte	0x54
 7015 0719 8E000000 		.4byte	.LVL146
 7016 071d 90000000 		.4byte	.LVL147
 7017 0721 0400     		.2byte	0x4
 7018 0723 F3       		.byte	0xf3
 7019 0724 01       		.uleb128 0x1
 7020 0725 50       		.byte	0x50
 7021 0726 9F       		.byte	0x9f
 7022 0727 90000000 		.4byte	.LVL147
 7023 072b 9A000000 		.4byte	.LVL150
 7024 072f 0100     		.2byte	0x1
 7025 0731 54       		.byte	0x54
 7026 0732 9A000000 		.4byte	.LVL150
 7027 0736 9C000000 		.4byte	.LVL151
 7028 073a 0400     		.2byte	0x4
 7029 073c F3       		.byte	0xf3
 7030 073d 01       		.uleb128 0x1
 7031 073e 50       		.byte	0x50
 7032 073f 9F       		.byte	0x9f
 7033 0740 9C000000 		.4byte	.LVL151
 7034 0744 9E000000 		.4byte	.LVL152
 7035 0748 0100     		.2byte	0x1
 7036 074a 54       		.byte	0x54
 7037 074b 9E000000 		.4byte	.LVL152
 7038 074f A0000000 		.4byte	.LVL153
 7039 0753 0400     		.2byte	0x4
 7040 0755 F3       		.byte	0xf3
 7041 0756 01       		.uleb128 0x1
 7042 0757 50       		.byte	0x50
 7043 0758 9F       		.byte	0x9f
 7044 0759 A0000000 		.4byte	.LVL153
 7045 075d A2000000 		.4byte	.LVL154
 7046 0761 0100     		.2byte	0x1
 7047 0763 54       		.byte	0x54
 7048 0764 A2000000 		.4byte	.LVL154
 7049 0768 A4000000 		.4byte	.LVL155
 7050 076c 0400     		.2byte	0x4
 7051 076e F3       		.byte	0xf3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 180


 7052 076f 01       		.uleb128 0x1
 7053 0770 50       		.byte	0x50
 7054 0771 9F       		.byte	0x9f
 7055 0772 A4000000 		.4byte	.LVL155
 7056 0776 A6000000 		.4byte	.LVL156
 7057 077a 0100     		.2byte	0x1
 7058 077c 54       		.byte	0x54
 7059 077d A6000000 		.4byte	.LVL156
 7060 0781 A8000000 		.4byte	.LVL157
 7061 0785 0400     		.2byte	0x4
 7062 0787 F3       		.byte	0xf3
 7063 0788 01       		.uleb128 0x1
 7064 0789 50       		.byte	0x50
 7065 078a 9F       		.byte	0x9f
 7066 078b A8000000 		.4byte	.LVL157
 7067 078f AA000000 		.4byte	.LVL158
 7068 0793 0100     		.2byte	0x1
 7069 0795 54       		.byte	0x54
 7070 0796 AA000000 		.4byte	.LVL158
 7071 079a B6000000 		.4byte	.LFE38
 7072 079e 0400     		.2byte	0x4
 7073 07a0 F3       		.byte	0xf3
 7074 07a1 01       		.uleb128 0x1
 7075 07a2 50       		.byte	0x50
 7076 07a3 9F       		.byte	0x9f
 7077 07a4 00000000 		.4byte	0
 7078 07a8 00000000 		.4byte	0
 7079              	.LLST39:
 7080 07ac 00000000 		.4byte	.LVL137
 7081 07b0 4F000000 		.4byte	.LVL140-1
 7082 07b4 0100     		.2byte	0x1
 7083 07b6 51       		.byte	0x51
 7084 07b7 4F000000 		.4byte	.LVL140-1
 7085 07bb B4000000 		.4byte	.LVL160
 7086 07bf 0200     		.2byte	0x2
 7087 07c1 7D       		.byte	0x7d
 7088 07c2 00       		.sleb128 0
 7089 07c3 B4000000 		.4byte	.LVL160
 7090 07c7 B6000000 		.4byte	.LFE38
 7091 07cb 0200     		.2byte	0x2
 7092 07cd 91       		.byte	0x91
 7093 07ce 60       		.sleb128 -32
 7094 07cf 00000000 		.4byte	0
 7095 07d3 00000000 		.4byte	0
 7096              	.LLST40:
 7097 07d7 00000000 		.4byte	.LVL137
 7098 07db 4F000000 		.4byte	.LVL140-1
 7099 07df 0100     		.2byte	0x1
 7100 07e1 52       		.byte	0x52
 7101 07e2 4F000000 		.4byte	.LVL140-1
 7102 07e6 B4000000 		.4byte	.LVL162
 7103 07ea 0100     		.2byte	0x1
 7104 07ec 56       		.byte	0x56
 7105 07ed B4000000 		.4byte	.LVL162
 7106 07f1 B6000000 		.4byte	.LFE38
 7107 07f5 0400     		.2byte	0x4
 7108 07f7 F3       		.byte	0xf3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 181


 7109 07f8 01       		.uleb128 0x1
 7110 07f9 52       		.byte	0x52
 7111 07fa 9F       		.byte	0x9f
 7112 07fb 00000000 		.4byte	0
 7113 07ff 00000000 		.4byte	0
 7114              	.LLST41:
 7115 0803 00000000 		.4byte	.LVL137
 7116 0807 16000000 		.4byte	.LVL139
 7117 080b 0100     		.2byte	0x1
 7118 080d 53       		.byte	0x53
 7119 080e 16000000 		.4byte	.LVL139
 7120 0812 B4000000 		.4byte	.LVL163
 7121 0816 0100     		.2byte	0x1
 7122 0818 57       		.byte	0x57
 7123 0819 B4000000 		.4byte	.LVL163
 7124 081d B6000000 		.4byte	.LFE38
 7125 0821 0400     		.2byte	0x4
 7126 0823 F3       		.byte	0xf3
 7127 0824 01       		.uleb128 0x1
 7128 0825 53       		.byte	0x53
 7129 0826 9F       		.byte	0x9f
 7130 0827 00000000 		.4byte	0
 7131 082b 00000000 		.4byte	0
 7132              	.LLST42:
 7133 082f AA000000 		.4byte	.LVL158
 7134 0833 B4000000 		.4byte	.LVL161
 7135 0837 0100     		.2byte	0x1
 7136 0839 54       		.byte	0x54
 7137 083a B4000000 		.4byte	.LVL161
 7138 083e B6000000 		.4byte	.LFE38
 7139 0842 0100     		.2byte	0x1
 7140 0844 50       		.byte	0x50
 7141 0845 00000000 		.4byte	0
 7142 0849 00000000 		.4byte	0
 7143              	.LLST43:
 7144 084d 52000000 		.4byte	.LVL141
 7145 0851 6A000000 		.4byte	.LVL143
 7146 0855 0100     		.2byte	0x1
 7147 0857 50       		.byte	0x50
 7148 0858 6A000000 		.4byte	.LVL143
 7149 085c 9C000000 		.4byte	.LVL151
 7150 0860 0200     		.2byte	0x2
 7151 0862 91       		.byte	0x91
 7152 0863 64       		.sleb128 -28
 7153 0864 9C000000 		.4byte	.LVL151
 7154 0868 A0000000 		.4byte	.LVL153
 7155 086c 0100     		.2byte	0x1
 7156 086e 50       		.byte	0x50
 7157 086f A0000000 		.4byte	.LVL153
 7158 0873 B6000000 		.4byte	.LFE38
 7159 0877 0200     		.2byte	0x2
 7160 0879 91       		.byte	0x91
 7161 087a 64       		.sleb128 -28
 7162 087b 00000000 		.4byte	0
 7163 087f 00000000 		.4byte	0
 7164              	.LLST44:
 7165 0883 0C000000 		.4byte	.LVL138
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 182


 7166 0887 4F000000 		.4byte	.LVL140-1
 7167 088b 0100     		.2byte	0x1
 7168 088d 50       		.byte	0x50
 7169 088e 4F000000 		.4byte	.LVL140-1
 7170 0892 8E000000 		.4byte	.LVL146
 7171 0896 0100     		.2byte	0x1
 7172 0898 54       		.byte	0x54
 7173 0899 8E000000 		.4byte	.LVL146
 7174 089d 90000000 		.4byte	.LVL147
 7175 08a1 0400     		.2byte	0x4
 7176 08a3 F3       		.byte	0xf3
 7177 08a4 01       		.uleb128 0x1
 7178 08a5 50       		.byte	0x50
 7179 08a6 9F       		.byte	0x9f
 7180 08a7 90000000 		.4byte	.LVL147
 7181 08ab 9A000000 		.4byte	.LVL150
 7182 08af 0100     		.2byte	0x1
 7183 08b1 54       		.byte	0x54
 7184 08b2 9A000000 		.4byte	.LVL150
 7185 08b6 9C000000 		.4byte	.LVL151
 7186 08ba 0400     		.2byte	0x4
 7187 08bc F3       		.byte	0xf3
 7188 08bd 01       		.uleb128 0x1
 7189 08be 50       		.byte	0x50
 7190 08bf 9F       		.byte	0x9f
 7191 08c0 9C000000 		.4byte	.LVL151
 7192 08c4 9E000000 		.4byte	.LVL152
 7193 08c8 0100     		.2byte	0x1
 7194 08ca 54       		.byte	0x54
 7195 08cb 9E000000 		.4byte	.LVL152
 7196 08cf A0000000 		.4byte	.LVL153
 7197 08d3 0400     		.2byte	0x4
 7198 08d5 F3       		.byte	0xf3
 7199 08d6 01       		.uleb128 0x1
 7200 08d7 50       		.byte	0x50
 7201 08d8 9F       		.byte	0x9f
 7202 08d9 A0000000 		.4byte	.LVL153
 7203 08dd A2000000 		.4byte	.LVL154
 7204 08e1 0100     		.2byte	0x1
 7205 08e3 54       		.byte	0x54
 7206 08e4 A2000000 		.4byte	.LVL154
 7207 08e8 A4000000 		.4byte	.LVL155
 7208 08ec 0400     		.2byte	0x4
 7209 08ee F3       		.byte	0xf3
 7210 08ef 01       		.uleb128 0x1
 7211 08f0 50       		.byte	0x50
 7212 08f1 9F       		.byte	0x9f
 7213 08f2 A4000000 		.4byte	.LVL155
 7214 08f6 A6000000 		.4byte	.LVL156
 7215 08fa 0100     		.2byte	0x1
 7216 08fc 54       		.byte	0x54
 7217 08fd A6000000 		.4byte	.LVL156
 7218 0901 A8000000 		.4byte	.LVL157
 7219 0905 0400     		.2byte	0x4
 7220 0907 F3       		.byte	0xf3
 7221 0908 01       		.uleb128 0x1
 7222 0909 50       		.byte	0x50
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 183


 7223 090a 9F       		.byte	0x9f
 7224 090b A8000000 		.4byte	.LVL157
 7225 090f AA000000 		.4byte	.LVL158
 7226 0913 0100     		.2byte	0x1
 7227 0915 54       		.byte	0x54
 7228 0916 AA000000 		.4byte	.LVL158
 7229 091a B6000000 		.4byte	.LFE38
 7230 091e 0400     		.2byte	0x4
 7231 0920 F3       		.byte	0xf3
 7232 0921 01       		.uleb128 0x1
 7233 0922 50       		.byte	0x50
 7234 0923 9F       		.byte	0x9f
 7235 0924 00000000 		.4byte	0
 7236 0928 00000000 		.4byte	0
 7237              	.LLST45:
 7238 092c 64000000 		.4byte	.LVL142
 7239 0930 92000000 		.4byte	.LVL148
 7240 0934 0100     		.2byte	0x1
 7241 0936 55       		.byte	0x55
 7242 0937 92000000 		.4byte	.LVL148
 7243 093b 94000000 		.4byte	.LVL149
 7244 093f 0300     		.2byte	0x3
 7245 0941 75       		.byte	0x75
 7246 0942 7F       		.sleb128 -1
 7247 0943 9F       		.byte	0x9f
 7248 0944 A0000000 		.4byte	.LVL153
 7249 0948 AA000000 		.4byte	.LVL158
 7250 094c 0100     		.2byte	0x1
 7251 094e 55       		.byte	0x55
 7252 094f 00000000 		.4byte	0
 7253 0953 00000000 		.4byte	0
 7254              	.LLST46:
 7255 0957 00000000 		.4byte	.LVL164
 7256 095b 39000000 		.4byte	.LVL166-1
 7257 095f 0100     		.2byte	0x1
 7258 0961 50       		.byte	0x50
 7259 0962 39000000 		.4byte	.LVL166-1
 7260 0966 6E000000 		.4byte	.LVL175
 7261 096a 0100     		.2byte	0x1
 7262 096c 54       		.byte	0x54
 7263 096d 6E000000 		.4byte	.LVL175
 7264 0971 70000000 		.4byte	.LVL176
 7265 0975 0400     		.2byte	0x4
 7266 0977 F3       		.byte	0xf3
 7267 0978 01       		.uleb128 0x1
 7268 0979 50       		.byte	0x50
 7269 097a 9F       		.byte	0x9f
 7270 097b 70000000 		.4byte	.LVL176
 7271 097f 7A000000 		.4byte	.LVL180
 7272 0983 0100     		.2byte	0x1
 7273 0985 54       		.byte	0x54
 7274 0986 7A000000 		.4byte	.LVL180
 7275 098a 7C000000 		.4byte	.LVL181
 7276 098e 0400     		.2byte	0x4
 7277 0990 F3       		.byte	0xf3
 7278 0991 01       		.uleb128 0x1
 7279 0992 50       		.byte	0x50
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 184


 7280 0993 9F       		.byte	0x9f
 7281 0994 7C000000 		.4byte	.LVL181
 7282 0998 7E000000 		.4byte	.LVL182
 7283 099c 0100     		.2byte	0x1
 7284 099e 54       		.byte	0x54
 7285 099f 7E000000 		.4byte	.LVL182
 7286 09a3 80000000 		.4byte	.LVL183
 7287 09a7 0400     		.2byte	0x4
 7288 09a9 F3       		.byte	0xf3
 7289 09aa 01       		.uleb128 0x1
 7290 09ab 50       		.byte	0x50
 7291 09ac 9F       		.byte	0x9f
 7292 09ad 80000000 		.4byte	.LVL183
 7293 09b1 82000000 		.4byte	.LVL184
 7294 09b5 0100     		.2byte	0x1
 7295 09b7 54       		.byte	0x54
 7296 09b8 82000000 		.4byte	.LVL184
 7297 09bc 84000000 		.4byte	.LVL185
 7298 09c0 0400     		.2byte	0x4
 7299 09c2 F3       		.byte	0xf3
 7300 09c3 01       		.uleb128 0x1
 7301 09c4 50       		.byte	0x50
 7302 09c5 9F       		.byte	0x9f
 7303 09c6 84000000 		.4byte	.LVL185
 7304 09ca 86000000 		.4byte	.LVL186
 7305 09ce 0100     		.2byte	0x1
 7306 09d0 54       		.byte	0x54
 7307 09d1 86000000 		.4byte	.LVL186
 7308 09d5 88000000 		.4byte	.LVL187
 7309 09d9 0400     		.2byte	0x4
 7310 09db F3       		.byte	0xf3
 7311 09dc 01       		.uleb128 0x1
 7312 09dd 50       		.byte	0x50
 7313 09de 9F       		.byte	0x9f
 7314 09df 88000000 		.4byte	.LVL187
 7315 09e3 8A000000 		.4byte	.LVL188
 7316 09e7 0100     		.2byte	0x1
 7317 09e9 54       		.byte	0x54
 7318 09ea 8A000000 		.4byte	.LVL188
 7319 09ee 94000000 		.4byte	.LFE39
 7320 09f2 0400     		.2byte	0x4
 7321 09f4 F3       		.byte	0xf3
 7322 09f5 01       		.uleb128 0x1
 7323 09f6 50       		.byte	0x50
 7324 09f7 9F       		.byte	0x9f
 7325 09f8 00000000 		.4byte	0
 7326 09fc 00000000 		.4byte	0
 7327              	.LLST47:
 7328 0a00 00000000 		.4byte	.LVL164
 7329 0a04 39000000 		.4byte	.LVL166-1
 7330 0a08 0100     		.2byte	0x1
 7331 0a0a 51       		.byte	0x51
 7332 0a0b 39000000 		.4byte	.LVL166-1
 7333 0a0f 92000000 		.4byte	.LVL192
 7334 0a13 0100     		.2byte	0x1
 7335 0a15 56       		.byte	0x56
 7336 0a16 92000000 		.4byte	.LVL192
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 185


 7337 0a1a 94000000 		.4byte	.LFE39
 7338 0a1e 0400     		.2byte	0x4
 7339 0a20 F3       		.byte	0xf3
 7340 0a21 01       		.uleb128 0x1
 7341 0a22 51       		.byte	0x51
 7342 0a23 9F       		.byte	0x9f
 7343 0a24 00000000 		.4byte	0
 7344 0a28 00000000 		.4byte	0
 7345              	.LLST48:
 7346 0a2c 8A000000 		.4byte	.LVL188
 7347 0a30 92000000 		.4byte	.LVL190
 7348 0a34 0100     		.2byte	0x1
 7349 0a36 54       		.byte	0x54
 7350 0a37 92000000 		.4byte	.LVL190
 7351 0a3b 94000000 		.4byte	.LFE39
 7352 0a3f 0100     		.2byte	0x1
 7353 0a41 50       		.byte	0x50
 7354 0a42 00000000 		.4byte	0
 7355 0a46 00000000 		.4byte	0
 7356              	.LLST49:
 7357 0a4a 3C000000 		.4byte	.LVL167
 7358 0a4e 5A000000 		.4byte	.LVL173
 7359 0a52 0100     		.2byte	0x1
 7360 0a54 50       		.byte	0x50
 7361 0a55 5A000000 		.4byte	.LVL173
 7362 0a59 70000000 		.4byte	.LVL176
 7363 0a5d 0100     		.2byte	0x1
 7364 0a5f 55       		.byte	0x55
 7365 0a60 70000000 		.4byte	.LVL176
 7366 0a64 84000000 		.4byte	.LVL185
 7367 0a68 0100     		.2byte	0x1
 7368 0a6a 50       		.byte	0x50
 7369 0a6b 84000000 		.4byte	.LVL185
 7370 0a6f 92000000 		.4byte	.LVL191
 7371 0a73 0100     		.2byte	0x1
 7372 0a75 55       		.byte	0x55
 7373 0a76 00000000 		.4byte	0
 7374 0a7a 00000000 		.4byte	0
 7375              	.LLST50:
 7376 0a7e 06000000 		.4byte	.LVL165
 7377 0a82 39000000 		.4byte	.LVL166-1
 7378 0a86 0100     		.2byte	0x1
 7379 0a88 50       		.byte	0x50
 7380 0a89 39000000 		.4byte	.LVL166-1
 7381 0a8d 6E000000 		.4byte	.LVL175
 7382 0a91 0100     		.2byte	0x1
 7383 0a93 54       		.byte	0x54
 7384 0a94 6E000000 		.4byte	.LVL175
 7385 0a98 70000000 		.4byte	.LVL176
 7386 0a9c 0400     		.2byte	0x4
 7387 0a9e F3       		.byte	0xf3
 7388 0a9f 01       		.uleb128 0x1
 7389 0aa0 50       		.byte	0x50
 7390 0aa1 9F       		.byte	0x9f
 7391 0aa2 70000000 		.4byte	.LVL176
 7392 0aa6 7A000000 		.4byte	.LVL180
 7393 0aaa 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 186


 7394 0aac 54       		.byte	0x54
 7395 0aad 7A000000 		.4byte	.LVL180
 7396 0ab1 7C000000 		.4byte	.LVL181
 7397 0ab5 0400     		.2byte	0x4
 7398 0ab7 F3       		.byte	0xf3
 7399 0ab8 01       		.uleb128 0x1
 7400 0ab9 50       		.byte	0x50
 7401 0aba 9F       		.byte	0x9f
 7402 0abb 7C000000 		.4byte	.LVL181
 7403 0abf 7E000000 		.4byte	.LVL182
 7404 0ac3 0100     		.2byte	0x1
 7405 0ac5 54       		.byte	0x54
 7406 0ac6 7E000000 		.4byte	.LVL182
 7407 0aca 80000000 		.4byte	.LVL183
 7408 0ace 0400     		.2byte	0x4
 7409 0ad0 F3       		.byte	0xf3
 7410 0ad1 01       		.uleb128 0x1
 7411 0ad2 50       		.byte	0x50
 7412 0ad3 9F       		.byte	0x9f
 7413 0ad4 80000000 		.4byte	.LVL183
 7414 0ad8 82000000 		.4byte	.LVL184
 7415 0adc 0100     		.2byte	0x1
 7416 0ade 54       		.byte	0x54
 7417 0adf 82000000 		.4byte	.LVL184
 7418 0ae3 84000000 		.4byte	.LVL185
 7419 0ae7 0400     		.2byte	0x4
 7420 0ae9 F3       		.byte	0xf3
 7421 0aea 01       		.uleb128 0x1
 7422 0aeb 50       		.byte	0x50
 7423 0aec 9F       		.byte	0x9f
 7424 0aed 84000000 		.4byte	.LVL185
 7425 0af1 86000000 		.4byte	.LVL186
 7426 0af5 0100     		.2byte	0x1
 7427 0af7 54       		.byte	0x54
 7428 0af8 86000000 		.4byte	.LVL186
 7429 0afc 88000000 		.4byte	.LVL187
 7430 0b00 0400     		.2byte	0x4
 7431 0b02 F3       		.byte	0xf3
 7432 0b03 01       		.uleb128 0x1
 7433 0b04 50       		.byte	0x50
 7434 0b05 9F       		.byte	0x9f
 7435 0b06 88000000 		.4byte	.LVL187
 7436 0b0a 8A000000 		.4byte	.LVL188
 7437 0b0e 0100     		.2byte	0x1
 7438 0b10 54       		.byte	0x54
 7439 0b11 8A000000 		.4byte	.LVL188
 7440 0b15 94000000 		.4byte	.LFE39
 7441 0b19 0400     		.2byte	0x4
 7442 0b1b F3       		.byte	0xf3
 7443 0b1c 01       		.uleb128 0x1
 7444 0b1d 50       		.byte	0x50
 7445 0b1e 9F       		.byte	0x9f
 7446 0b1f 00000000 		.4byte	0
 7447 0b23 00000000 		.4byte	0
 7448              	.LLST51:
 7449 0b27 3E000000 		.4byte	.LVL168
 7450 0b2b 4C000000 		.4byte	.LVL170
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 187


 7451 0b2f 0100     		.2byte	0x1
 7452 0b31 52       		.byte	0x52
 7453 0b32 4C000000 		.4byte	.LVL170
 7454 0b36 52000000 		.4byte	.LVL171
 7455 0b3a 0300     		.2byte	0x3
 7456 0b3c 72       		.byte	0x72
 7457 0b3d 7F       		.sleb128 -1
 7458 0b3e 9F       		.byte	0x9f
 7459 0b3f 52000000 		.4byte	.LVL171
 7460 0b43 5F000000 		.4byte	.LVL174-1
 7461 0b47 0600     		.2byte	0x6
 7462 0b49 74       		.byte	0x74
 7463 0b4a 38       		.sleb128 56
 7464 0b4b 06       		.byte	0x6
 7465 0b4c 31       		.byte	0x31
 7466 0b4d 1C       		.byte	0x1c
 7467 0b4e 9F       		.byte	0x9f
 7468 0b4f 70000000 		.4byte	.LVL176
 7469 0b53 78000000 		.4byte	.LVL179
 7470 0b57 0600     		.2byte	0x6
 7471 0b59 74       		.byte	0x74
 7472 0b5a 38       		.sleb128 56
 7473 0b5b 06       		.byte	0x6
 7474 0b5c 31       		.byte	0x31
 7475 0b5d 1C       		.byte	0x1c
 7476 0b5e 9F       		.byte	0x9f
 7477 0b5f 7C000000 		.4byte	.LVL181
 7478 0b63 80000000 		.4byte	.LVL183
 7479 0b67 0100     		.2byte	0x1
 7480 0b69 52       		.byte	0x52
 7481 0b6a 80000000 		.4byte	.LVL183
 7482 0b6e 82000000 		.4byte	.LVL184
 7483 0b72 0600     		.2byte	0x6
 7484 0b74 74       		.byte	0x74
 7485 0b75 38       		.sleb128 56
 7486 0b76 06       		.byte	0x6
 7487 0b77 31       		.byte	0x31
 7488 0b78 1C       		.byte	0x1c
 7489 0b79 9F       		.byte	0x9f
 7490 0b7a 82000000 		.4byte	.LVL184
 7491 0b7e 84000000 		.4byte	.LVL185
 7492 0b82 0900     		.2byte	0x9
 7493 0b84 F3       		.byte	0xf3
 7494 0b85 01       		.uleb128 0x1
 7495 0b86 50       		.byte	0x50
 7496 0b87 23       		.byte	0x23
 7497 0b88 38       		.uleb128 0x38
 7498 0b89 06       		.byte	0x6
 7499 0b8a 31       		.byte	0x31
 7500 0b8b 1C       		.byte	0x1c
 7501 0b8c 9F       		.byte	0x9f
 7502 0b8d 00000000 		.4byte	0
 7503 0b91 00000000 		.4byte	0
 7504              	.LLST52:
 7505 0b95 4A000000 		.4byte	.LVL169
 7506 0b99 54000000 		.4byte	.LVL172
 7507 0b9d 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 188


 7508 0b9f 53       		.byte	0x53
 7509 0ba0 70000000 		.4byte	.LVL176
 7510 0ba4 72000000 		.4byte	.LVL177
 7511 0ba8 0100     		.2byte	0x1
 7512 0baa 53       		.byte	0x53
 7513 0bab 72000000 		.4byte	.LVL177
 7514 0baf 74000000 		.4byte	.LVL178
 7515 0bb3 0300     		.2byte	0x3
 7516 0bb5 73       		.byte	0x73
 7517 0bb6 7F       		.sleb128 -1
 7518 0bb7 9F       		.byte	0x9f
 7519 0bb8 00000000 		.4byte	0
 7520 0bbc 00000000 		.4byte	0
 7521              	.LLST53:
 7522 0bc0 00000000 		.4byte	.LVL193
 7523 0bc4 31000000 		.4byte	.LVL195-1
 7524 0bc8 0100     		.2byte	0x1
 7525 0bca 50       		.byte	0x50
 7526 0bcb 31000000 		.4byte	.LVL195-1
 7527 0bcf 26010000 		.4byte	.LVL225
 7528 0bd3 0100     		.2byte	0x1
 7529 0bd5 54       		.byte	0x54
 7530 0bd6 26010000 		.4byte	.LVL225
 7531 0bda 28010000 		.4byte	.LFE40
 7532 0bde 0400     		.2byte	0x4
 7533 0be0 F3       		.byte	0xf3
 7534 0be1 01       		.uleb128 0x1
 7535 0be2 50       		.byte	0x50
 7536 0be3 9F       		.byte	0x9f
 7537 0be4 00000000 		.4byte	0
 7538 0be8 00000000 		.4byte	0
 7539              	.LLST54:
 7540 0bec 00000000 		.4byte	.LVL193
 7541 0bf0 31000000 		.4byte	.LVL195-1
 7542 0bf4 0100     		.2byte	0x1
 7543 0bf6 51       		.byte	0x51
 7544 0bf7 31000000 		.4byte	.LVL195-1
 7545 0bfb 26010000 		.4byte	.LVL226
 7546 0bff 0100     		.2byte	0x1
 7547 0c01 56       		.byte	0x56
 7548 0c02 26010000 		.4byte	.LVL226
 7549 0c06 28010000 		.4byte	.LFE40
 7550 0c0a 0400     		.2byte	0x4
 7551 0c0c F3       		.byte	0xf3
 7552 0c0d 01       		.uleb128 0x1
 7553 0c0e 51       		.byte	0x51
 7554 0c0f 9F       		.byte	0x9f
 7555 0c10 00000000 		.4byte	0
 7556 0c14 00000000 		.4byte	0
 7557              	.LLST55:
 7558 0c18 00000000 		.4byte	.LVL193
 7559 0c1c 31000000 		.4byte	.LVL195-1
 7560 0c20 0100     		.2byte	0x1
 7561 0c22 52       		.byte	0x52
 7562 0c23 31000000 		.4byte	.LVL195-1
 7563 0c27 D0000000 		.4byte	.LVL212
 7564 0c2b 0200     		.2byte	0x2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 189


 7565 0c2d 91       		.byte	0x91
 7566 0c2e 5C       		.sleb128 -36
 7567 0c2f D0000000 		.4byte	.LVL212
 7568 0c33 D5000000 		.4byte	.LVL213-1
 7569 0c37 0200     		.2byte	0x2
 7570 0c39 71       		.byte	0x71
 7571 0c3a 00       		.sleb128 0
 7572 0c3b D5000000 		.4byte	.LVL213-1
 7573 0c3f 28010000 		.4byte	.LFE40
 7574 0c43 0200     		.2byte	0x2
 7575 0c45 91       		.byte	0x91
 7576 0c46 5C       		.sleb128 -36
 7577 0c47 00000000 		.4byte	0
 7578 0c4b 00000000 		.4byte	0
 7579              	.LLST56:
 7580 0c4f 0A000000 		.4byte	.LVL194
 7581 0c53 50000000 		.4byte	.LVL196
 7582 0c57 0200     		.2byte	0x2
 7583 0c59 30       		.byte	0x30
 7584 0c5a 9F       		.byte	0x9f
 7585 0c5b 50000000 		.4byte	.LVL196
 7586 0c5f 9C000000 		.4byte	.LVL206
 7587 0c63 0100     		.2byte	0x1
 7588 0c65 57       		.byte	0x57
 7589 0c66 9C000000 		.4byte	.LVL206
 7590 0c6a 9E000000 		.4byte	.LVL207
 7591 0c6e 0200     		.2byte	0x2
 7592 0c70 31       		.byte	0x31
 7593 0c71 9F       		.byte	0x9f
 7594 0c72 9E000000 		.4byte	.LVL207
 7595 0c76 26010000 		.4byte	.LVL227
 7596 0c7a 0100     		.2byte	0x1
 7597 0c7c 57       		.byte	0x57
 7598 0c7d 00000000 		.4byte	0
 7599 0c81 00000000 		.4byte	0
 7600              	.LLST57:
 7601 0c85 0A000000 		.4byte	.LVL194
 7602 0c89 31000000 		.4byte	.LVL195-1
 7603 0c8d 0100     		.2byte	0x1
 7604 0c8f 50       		.byte	0x50
 7605 0c90 31000000 		.4byte	.LVL195-1
 7606 0c94 26010000 		.4byte	.LVL225
 7607 0c98 0100     		.2byte	0x1
 7608 0c9a 54       		.byte	0x54
 7609 0c9b 26010000 		.4byte	.LVL225
 7610 0c9f 28010000 		.4byte	.LFE40
 7611 0ca3 0400     		.2byte	0x4
 7612 0ca5 F3       		.byte	0xf3
 7613 0ca6 01       		.uleb128 0x1
 7614 0ca7 50       		.byte	0x50
 7615 0ca8 9F       		.byte	0x9f
 7616 0ca9 00000000 		.4byte	0
 7617 0cad 00000000 		.4byte	0
 7618              	.LLST58:
 7619 0cb1 56000000 		.4byte	.LVL198
 7620 0cb5 64000000 		.4byte	.LVL200
 7621 0cb9 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 190


 7622 0cbb 55       		.byte	0x55
 7623 0cbc 64000000 		.4byte	.LVL200
 7624 0cc0 84000000 		.4byte	.LVL204
 7625 0cc4 0300     		.2byte	0x3
 7626 0cc6 75       		.byte	0x75
 7627 0cc7 01       		.sleb128 1
 7628 0cc8 9F       		.byte	0x9f
 7629 0cc9 84000000 		.4byte	.LVL204
 7630 0ccd 24010000 		.4byte	.LVL224
 7631 0cd1 0100     		.2byte	0x1
 7632 0cd3 55       		.byte	0x55
 7633 0cd4 00000000 		.4byte	0
 7634 0cd8 00000000 		.4byte	0
 7635              	.LLST59:
 7636 0cdc 00000000 		.4byte	.LVL228
 7637 0ce0 1B000000 		.4byte	.LVL230-1
 7638 0ce4 0100     		.2byte	0x1
 7639 0ce6 50       		.byte	0x50
 7640 0ce7 1B000000 		.4byte	.LVL230-1
 7641 0ceb 52010000 		.4byte	.LVL271
 7642 0cef 0100     		.2byte	0x1
 7643 0cf1 54       		.byte	0x54
 7644 0cf2 52010000 		.4byte	.LVL271
 7645 0cf6 54010000 		.4byte	.LFE41
 7646 0cfa 0400     		.2byte	0x4
 7647 0cfc F3       		.byte	0xf3
 7648 0cfd 01       		.uleb128 0x1
 7649 0cfe 50       		.byte	0x50
 7650 0cff 9F       		.byte	0x9f
 7651 0d00 00000000 		.4byte	0
 7652 0d04 00000000 		.4byte	0
 7653              	.LLST60:
 7654 0d08 00000000 		.4byte	.LVL228
 7655 0d0c 1B000000 		.4byte	.LVL230-1
 7656 0d10 0100     		.2byte	0x1
 7657 0d12 51       		.byte	0x51
 7658 0d13 1B000000 		.4byte	.LVL230-1
 7659 0d17 C8000000 		.4byte	.LVL249
 7660 0d1b 0200     		.2byte	0x2
 7661 0d1d 91       		.byte	0x91
 7662 0d1e 64       		.sleb128 -28
 7663 0d1f C8000000 		.4byte	.LVL249
 7664 0d23 CD000000 		.4byte	.LVL250-1
 7665 0d27 0200     		.2byte	0x2
 7666 0d29 71       		.byte	0x71
 7667 0d2a 00       		.sleb128 0
 7668 0d2b CD000000 		.4byte	.LVL250-1
 7669 0d2f 54010000 		.4byte	.LFE41
 7670 0d33 0200     		.2byte	0x2
 7671 0d35 91       		.byte	0x91
 7672 0d36 64       		.sleb128 -28
 7673 0d37 00000000 		.4byte	0
 7674 0d3b 00000000 		.4byte	0
 7675              	.LLST61:
 7676 0d3f 08000000 		.4byte	.LVL229
 7677 0d43 3C000000 		.4byte	.LVL231
 7678 0d47 0200     		.2byte	0x2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 191


 7679 0d49 30       		.byte	0x30
 7680 0d4a 9F       		.byte	0x9f
 7681 0d4b 3C000000 		.4byte	.LVL231
 7682 0d4f 94000000 		.4byte	.LVL243
 7683 0d53 0100     		.2byte	0x1
 7684 0d55 56       		.byte	0x56
 7685 0d56 94000000 		.4byte	.LVL243
 7686 0d5a 96000000 		.4byte	.LVL244
 7687 0d5e 0200     		.2byte	0x2
 7688 0d60 31       		.byte	0x31
 7689 0d61 9F       		.byte	0x9f
 7690 0d62 96000000 		.4byte	.LVL244
 7691 0d66 52010000 		.4byte	.LVL273
 7692 0d6a 0100     		.2byte	0x1
 7693 0d6c 56       		.byte	0x56
 7694 0d6d 00000000 		.4byte	0
 7695 0d71 00000000 		.4byte	0
 7696              	.LLST62:
 7697 0d75 08000000 		.4byte	.LVL229
 7698 0d79 1B000000 		.4byte	.LVL230-1
 7699 0d7d 0100     		.2byte	0x1
 7700 0d7f 50       		.byte	0x50
 7701 0d80 1B000000 		.4byte	.LVL230-1
 7702 0d84 52010000 		.4byte	.LVL271
 7703 0d88 0100     		.2byte	0x1
 7704 0d8a 54       		.byte	0x54
 7705 0d8b 52010000 		.4byte	.LVL271
 7706 0d8f 54010000 		.4byte	.LFE41
 7707 0d93 0400     		.2byte	0x4
 7708 0d95 F3       		.byte	0xf3
 7709 0d96 01       		.uleb128 0x1
 7710 0d97 50       		.byte	0x50
 7711 0d98 9F       		.byte	0x9f
 7712 0d99 00000000 		.4byte	0
 7713 0d9d 00000000 		.4byte	0
 7714              	.LLST63:
 7715 0da1 08000000 		.4byte	.LVL229
 7716 0da5 3C000000 		.4byte	.LVL231
 7717 0da9 0200     		.2byte	0x2
 7718 0dab 30       		.byte	0x30
 7719 0dac 9F       		.byte	0x9f
 7720 0dad 3C000000 		.4byte	.LVL231
 7721 0db1 EE000000 		.4byte	.LVL254
 7722 0db5 0100     		.2byte	0x1
 7723 0db7 55       		.byte	0x55
 7724 0db8 EE000000 		.4byte	.LVL254
 7725 0dbc F1000000 		.4byte	.LVL255-1
 7726 0dc0 0100     		.2byte	0x1
 7727 0dc2 50       		.byte	0x50
 7728 0dc3 F1000000 		.4byte	.LVL255-1
 7729 0dc7 52010000 		.4byte	.LVL272
 7730 0dcb 0100     		.2byte	0x1
 7731 0dcd 55       		.byte	0x55
 7732 0dce 00000000 		.4byte	0
 7733 0dd2 00000000 		.4byte	0
 7734              	.LLST64:
 7735 0dd6 42000000 		.4byte	.LVL233
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 192


 7736 0dda 48000000 		.4byte	.LVL234
 7737 0dde 0100     		.2byte	0x1
 7738 0de0 53       		.byte	0x53
 7739 0de1 48000000 		.4byte	.LVL234
 7740 0de5 4C000000 		.4byte	.LVL235
 7741 0de9 0300     		.2byte	0x3
 7742 0deb 73       		.byte	0x73
 7743 0dec 01       		.sleb128 1
 7744 0ded 9F       		.byte	0x9f
 7745 0dee 4C000000 		.4byte	.LVL235
 7746 0df2 53000000 		.4byte	.LVL236-1
 7747 0df6 0600     		.2byte	0x6
 7748 0df8 74       		.byte	0x74
 7749 0df9 38       		.sleb128 56
 7750 0dfa 06       		.byte	0x6
 7751 0dfb 23       		.byte	0x23
 7752 0dfc 01       		.uleb128 0x1
 7753 0dfd 9F       		.byte	0x9f
 7754 0dfe 74000000 		.4byte	.LVL240
 7755 0e02 76000000 		.4byte	.LVL241
 7756 0e06 0100     		.2byte	0x1
 7757 0e08 53       		.byte	0x53
 7758 0e09 00000000 		.4byte	0
 7759 0e0d 00000000 		.4byte	0
 7760              	.LLST65:
 7761 0e11 40010000 		.4byte	.LVL267
 7762 0e15 42010000 		.4byte	.LVL268
 7763 0e19 0100     		.2byte	0x1
 7764 0e1b 50       		.byte	0x50
 7765 0e1c 42010000 		.4byte	.LVL268
 7766 0e20 45010000 		.4byte	.LVL269-1
 7767 0e24 0100     		.2byte	0x1
 7768 0e26 51       		.byte	0x51
 7769 0e27 00000000 		.4byte	0
 7770 0e2b 00000000 		.4byte	0
 7771              	.LLST66:
 7772 0e2f 00000000 		.4byte	.LVL274
 7773 0e33 31000000 		.4byte	.LVL276-1
 7774 0e37 0100     		.2byte	0x1
 7775 0e39 50       		.byte	0x50
 7776 0e3a 31000000 		.4byte	.LVL276-1
 7777 0e3e 26010000 		.4byte	.LVL307
 7778 0e42 0100     		.2byte	0x1
 7779 0e44 54       		.byte	0x54
 7780 0e45 26010000 		.4byte	.LVL307
 7781 0e49 28010000 		.4byte	.LFE42
 7782 0e4d 0400     		.2byte	0x4
 7783 0e4f F3       		.byte	0xf3
 7784 0e50 01       		.uleb128 0x1
 7785 0e51 50       		.byte	0x50
 7786 0e52 9F       		.byte	0x9f
 7787 0e53 00000000 		.4byte	0
 7788 0e57 00000000 		.4byte	0
 7789              	.LLST67:
 7790 0e5b 00000000 		.4byte	.LVL274
 7791 0e5f 31000000 		.4byte	.LVL276-1
 7792 0e63 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 193


 7793 0e65 51       		.byte	0x51
 7794 0e66 31000000 		.4byte	.LVL276-1
 7795 0e6a 26010000 		.4byte	.LVL308
 7796 0e6e 0100     		.2byte	0x1
 7797 0e70 55       		.byte	0x55
 7798 0e71 26010000 		.4byte	.LVL308
 7799 0e75 28010000 		.4byte	.LFE42
 7800 0e79 0400     		.2byte	0x4
 7801 0e7b F3       		.byte	0xf3
 7802 0e7c 01       		.uleb128 0x1
 7803 0e7d 51       		.byte	0x51
 7804 0e7e 9F       		.byte	0x9f
 7805 0e7f 00000000 		.4byte	0
 7806 0e83 00000000 		.4byte	0
 7807              	.LLST68:
 7808 0e87 00000000 		.4byte	.LVL274
 7809 0e8b 31000000 		.4byte	.LVL276-1
 7810 0e8f 0100     		.2byte	0x1
 7811 0e91 52       		.byte	0x52
 7812 0e92 31000000 		.4byte	.LVL276-1
 7813 0e96 D0000000 		.4byte	.LVL294
 7814 0e9a 0200     		.2byte	0x2
 7815 0e9c 91       		.byte	0x91
 7816 0e9d 64       		.sleb128 -28
 7817 0e9e D0000000 		.4byte	.LVL294
 7818 0ea2 D5000000 		.4byte	.LVL295-1
 7819 0ea6 0200     		.2byte	0x2
 7820 0ea8 71       		.byte	0x71
 7821 0ea9 00       		.sleb128 0
 7822 0eaa D5000000 		.4byte	.LVL295-1
 7823 0eae 28010000 		.4byte	.LFE42
 7824 0eb2 0200     		.2byte	0x2
 7825 0eb4 91       		.byte	0x91
 7826 0eb5 64       		.sleb128 -28
 7827 0eb6 00000000 		.4byte	0
 7828 0eba 00000000 		.4byte	0
 7829              	.LLST69:
 7830 0ebe 0A000000 		.4byte	.LVL275
 7831 0ec2 50000000 		.4byte	.LVL277
 7832 0ec6 0200     		.2byte	0x2
 7833 0ec8 30       		.byte	0x30
 7834 0ec9 9F       		.byte	0x9f
 7835 0eca 50000000 		.4byte	.LVL277
 7836 0ece 5C000000 		.4byte	.LVL280
 7837 0ed2 0100     		.2byte	0x1
 7838 0ed4 56       		.byte	0x56
 7839 0ed5 84000000 		.4byte	.LVL285
 7840 0ed9 9C000000 		.4byte	.LVL288
 7841 0edd 0100     		.2byte	0x1
 7842 0edf 56       		.byte	0x56
 7843 0ee0 9C000000 		.4byte	.LVL288
 7844 0ee4 9E000000 		.4byte	.LVL289
 7845 0ee8 0200     		.2byte	0x2
 7846 0eea 31       		.byte	0x31
 7847 0eeb 9F       		.byte	0x9f
 7848 0eec 9E000000 		.4byte	.LVL289
 7849 0ef0 24010000 		.4byte	.LVL306
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 194


 7850 0ef4 0100     		.2byte	0x1
 7851 0ef6 56       		.byte	0x56
 7852 0ef7 00000000 		.4byte	0
 7853 0efb 00000000 		.4byte	0
 7854              	.LLST70:
 7855 0eff 5C000000 		.4byte	.LVL280
 7856 0f03 84000000 		.4byte	.LVL285
 7857 0f07 0100     		.2byte	0x1
 7858 0f09 56       		.byte	0x56
 7859 0f0a 00000000 		.4byte	0
 7860 0f0e 00000000 		.4byte	0
 7861              	.LLST71:
 7862 0f12 0A000000 		.4byte	.LVL275
 7863 0f16 31000000 		.4byte	.LVL276-1
 7864 0f1a 0100     		.2byte	0x1
 7865 0f1c 50       		.byte	0x50
 7866 0f1d 31000000 		.4byte	.LVL276-1
 7867 0f21 26010000 		.4byte	.LVL307
 7868 0f25 0100     		.2byte	0x1
 7869 0f27 54       		.byte	0x54
 7870 0f28 26010000 		.4byte	.LVL307
 7871 0f2c 28010000 		.4byte	.LFE42
 7872 0f30 0400     		.2byte	0x4
 7873 0f32 F3       		.byte	0xf3
 7874 0f33 01       		.uleb128 0x1
 7875 0f34 50       		.byte	0x50
 7876 0f35 9F       		.byte	0x9f
 7877 0f36 00000000 		.4byte	0
 7878 0f3a 00000000 		.4byte	0
 7879              	.LLST72:
 7880 0f3e 56000000 		.4byte	.LVL279
 7881 0f42 63000000 		.4byte	.LVL281-1
 7882 0f46 0100     		.2byte	0x1
 7883 0f48 53       		.byte	0x53
 7884 0f49 84000000 		.4byte	.LVL285
 7885 0f4d 86000000 		.4byte	.LVL286
 7886 0f51 0100     		.2byte	0x1
 7887 0f53 53       		.byte	0x53
 7888 0f54 00000000 		.4byte	0
 7889 0f58 00000000 		.4byte	0
 7890              	.LLST73:
 7891 0f5c 00000000 		.4byte	.LVL309
 7892 0f60 33000000 		.4byte	.LVL311-1
 7893 0f64 0100     		.2byte	0x1
 7894 0f66 50       		.byte	0x50
 7895 0f67 33000000 		.4byte	.LVL311-1
 7896 0f6b 6E000000 		.4byte	.LVL318
 7897 0f6f 0100     		.2byte	0x1
 7898 0f71 54       		.byte	0x54
 7899 0f72 6E000000 		.4byte	.LVL318
 7900 0f76 70000000 		.4byte	.LVL319
 7901 0f7a 0400     		.2byte	0x4
 7902 0f7c F3       		.byte	0xf3
 7903 0f7d 01       		.uleb128 0x1
 7904 0f7e 50       		.byte	0x50
 7905 0f7f 9F       		.byte	0x9f
 7906 0f80 70000000 		.4byte	.LVL319
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 195


 7907 0f84 7A000000 		.4byte	.LVL322
 7908 0f88 0100     		.2byte	0x1
 7909 0f8a 54       		.byte	0x54
 7910 0f8b 7A000000 		.4byte	.LVL322
 7911 0f8f 7C000000 		.4byte	.LVL323
 7912 0f93 0400     		.2byte	0x4
 7913 0f95 F3       		.byte	0xf3
 7914 0f96 01       		.uleb128 0x1
 7915 0f97 50       		.byte	0x50
 7916 0f98 9F       		.byte	0x9f
 7917 0f99 7C000000 		.4byte	.LVL323
 7918 0f9d 7E000000 		.4byte	.LVL324
 7919 0fa1 0100     		.2byte	0x1
 7920 0fa3 54       		.byte	0x54
 7921 0fa4 7E000000 		.4byte	.LVL324
 7922 0fa8 80000000 		.4byte	.LVL325
 7923 0fac 0400     		.2byte	0x4
 7924 0fae F3       		.byte	0xf3
 7925 0faf 01       		.uleb128 0x1
 7926 0fb0 50       		.byte	0x50
 7927 0fb1 9F       		.byte	0x9f
 7928 0fb2 80000000 		.4byte	.LVL325
 7929 0fb6 82000000 		.4byte	.LVL326
 7930 0fba 0100     		.2byte	0x1
 7931 0fbc 54       		.byte	0x54
 7932 0fbd 82000000 		.4byte	.LVL326
 7933 0fc1 84000000 		.4byte	.LVL327
 7934 0fc5 0400     		.2byte	0x4
 7935 0fc7 F3       		.byte	0xf3
 7936 0fc8 01       		.uleb128 0x1
 7937 0fc9 50       		.byte	0x50
 7938 0fca 9F       		.byte	0x9f
 7939 0fcb 84000000 		.4byte	.LVL327
 7940 0fcf 86000000 		.4byte	.LVL328
 7941 0fd3 0100     		.2byte	0x1
 7942 0fd5 54       		.byte	0x54
 7943 0fd6 86000000 		.4byte	.LVL328
 7944 0fda 88000000 		.4byte	.LVL329
 7945 0fde 0400     		.2byte	0x4
 7946 0fe0 F3       		.byte	0xf3
 7947 0fe1 01       		.uleb128 0x1
 7948 0fe2 50       		.byte	0x50
 7949 0fe3 9F       		.byte	0x9f
 7950 0fe4 88000000 		.4byte	.LVL329
 7951 0fe8 8A000000 		.4byte	.LVL330
 7952 0fec 0100     		.2byte	0x1
 7953 0fee 54       		.byte	0x54
 7954 0fef 8A000000 		.4byte	.LVL330
 7955 0ff3 96000000 		.4byte	.LFE43
 7956 0ff7 0400     		.2byte	0x4
 7957 0ff9 F3       		.byte	0xf3
 7958 0ffa 01       		.uleb128 0x1
 7959 0ffb 50       		.byte	0x50
 7960 0ffc 9F       		.byte	0x9f
 7961 0ffd 00000000 		.4byte	0
 7962 1001 00000000 		.4byte	0
 7963              	.LLST74:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 196


 7964 1005 00000000 		.4byte	.LVL309
 7965 1009 33000000 		.4byte	.LVL311-1
 7966 100d 0100     		.2byte	0x1
 7967 100f 51       		.byte	0x51
 7968 1010 33000000 		.4byte	.LVL311-1
 7969 1014 94000000 		.4byte	.LVL332
 7970 1018 0200     		.2byte	0x2
 7971 101a 7D       		.byte	0x7d
 7972 101b 00       		.sleb128 0
 7973 101c 94000000 		.4byte	.LVL332
 7974 1020 96000000 		.4byte	.LFE43
 7975 1024 0200     		.2byte	0x2
 7976 1026 91       		.byte	0x91
 7977 1027 60       		.sleb128 -32
 7978 1028 00000000 		.4byte	0
 7979 102c 00000000 		.4byte	0
 7980              	.LLST75:
 7981 1030 00000000 		.4byte	.LVL309
 7982 1034 33000000 		.4byte	.LVL311-1
 7983 1038 0100     		.2byte	0x1
 7984 103a 52       		.byte	0x52
 7985 103b 33000000 		.4byte	.LVL311-1
 7986 103f 94000000 		.4byte	.LVL334
 7987 1043 0100     		.2byte	0x1
 7988 1045 56       		.byte	0x56
 7989 1046 94000000 		.4byte	.LVL334
 7990 104a 96000000 		.4byte	.LFE43
 7991 104e 0400     		.2byte	0x4
 7992 1050 F3       		.byte	0xf3
 7993 1051 01       		.uleb128 0x1
 7994 1052 52       		.byte	0x52
 7995 1053 9F       		.byte	0x9f
 7996 1054 00000000 		.4byte	0
 7997 1058 00000000 		.4byte	0
 7998              	.LLST76:
 7999 105c 8A000000 		.4byte	.LVL330
 8000 1060 94000000 		.4byte	.LVL333
 8001 1064 0100     		.2byte	0x1
 8002 1066 54       		.byte	0x54
 8003 1067 94000000 		.4byte	.LVL333
 8004 106b 96000000 		.4byte	.LFE43
 8005 106f 0100     		.2byte	0x1
 8006 1071 50       		.byte	0x50
 8007 1072 00000000 		.4byte	0
 8008 1076 00000000 		.4byte	0
 8009              	.LLST77:
 8010 107a 36000000 		.4byte	.LVL312
 8011 107e 46000000 		.4byte	.LVL315
 8012 1082 0100     		.2byte	0x1
 8013 1084 50       		.byte	0x50
 8014 1085 46000000 		.4byte	.LVL315
 8015 1089 7C000000 		.4byte	.LVL323
 8016 108d 0200     		.2byte	0x2
 8017 108f 91       		.byte	0x91
 8018 1090 64       		.sleb128 -28
 8019 1091 7C000000 		.4byte	.LVL323
 8020 1095 80000000 		.4byte	.LVL325
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 197


 8021 1099 0100     		.2byte	0x1
 8022 109b 50       		.byte	0x50
 8023 109c 80000000 		.4byte	.LVL325
 8024 10a0 96000000 		.4byte	.LFE43
 8025 10a4 0200     		.2byte	0x2
 8026 10a6 91       		.byte	0x91
 8027 10a7 64       		.sleb128 -28
 8028 10a8 00000000 		.4byte	0
 8029 10ac 00000000 		.4byte	0
 8030              	.LLST78:
 8031 10b0 0A000000 		.4byte	.LVL310
 8032 10b4 33000000 		.4byte	.LVL311-1
 8033 10b8 0100     		.2byte	0x1
 8034 10ba 50       		.byte	0x50
 8035 10bb 33000000 		.4byte	.LVL311-1
 8036 10bf 6E000000 		.4byte	.LVL318
 8037 10c3 0100     		.2byte	0x1
 8038 10c5 54       		.byte	0x54
 8039 10c6 6E000000 		.4byte	.LVL318
 8040 10ca 70000000 		.4byte	.LVL319
 8041 10ce 0400     		.2byte	0x4
 8042 10d0 F3       		.byte	0xf3
 8043 10d1 01       		.uleb128 0x1
 8044 10d2 50       		.byte	0x50
 8045 10d3 9F       		.byte	0x9f
 8046 10d4 70000000 		.4byte	.LVL319
 8047 10d8 7A000000 		.4byte	.LVL322
 8048 10dc 0100     		.2byte	0x1
 8049 10de 54       		.byte	0x54
 8050 10df 7A000000 		.4byte	.LVL322
 8051 10e3 7C000000 		.4byte	.LVL323
 8052 10e7 0400     		.2byte	0x4
 8053 10e9 F3       		.byte	0xf3
 8054 10ea 01       		.uleb128 0x1
 8055 10eb 50       		.byte	0x50
 8056 10ec 9F       		.byte	0x9f
 8057 10ed 7C000000 		.4byte	.LVL323
 8058 10f1 7E000000 		.4byte	.LVL324
 8059 10f5 0100     		.2byte	0x1
 8060 10f7 54       		.byte	0x54
 8061 10f8 7E000000 		.4byte	.LVL324
 8062 10fc 80000000 		.4byte	.LVL325
 8063 1100 0400     		.2byte	0x4
 8064 1102 F3       		.byte	0xf3
 8065 1103 01       		.uleb128 0x1
 8066 1104 50       		.byte	0x50
 8067 1105 9F       		.byte	0x9f
 8068 1106 80000000 		.4byte	.LVL325
 8069 110a 82000000 		.4byte	.LVL326
 8070 110e 0100     		.2byte	0x1
 8071 1110 54       		.byte	0x54
 8072 1111 82000000 		.4byte	.LVL326
 8073 1115 84000000 		.4byte	.LVL327
 8074 1119 0400     		.2byte	0x4
 8075 111b F3       		.byte	0xf3
 8076 111c 01       		.uleb128 0x1
 8077 111d 50       		.byte	0x50
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 198


 8078 111e 9F       		.byte	0x9f
 8079 111f 84000000 		.4byte	.LVL327
 8080 1123 86000000 		.4byte	.LVL328
 8081 1127 0100     		.2byte	0x1
 8082 1129 54       		.byte	0x54
 8083 112a 86000000 		.4byte	.LVL328
 8084 112e 88000000 		.4byte	.LVL329
 8085 1132 0400     		.2byte	0x4
 8086 1134 F3       		.byte	0xf3
 8087 1135 01       		.uleb128 0x1
 8088 1136 50       		.byte	0x50
 8089 1137 9F       		.byte	0x9f
 8090 1138 88000000 		.4byte	.LVL329
 8091 113c 8A000000 		.4byte	.LVL330
 8092 1140 0100     		.2byte	0x1
 8093 1142 54       		.byte	0x54
 8094 1143 8A000000 		.4byte	.LVL330
 8095 1147 96000000 		.4byte	.LFE43
 8096 114b 0400     		.2byte	0x4
 8097 114d F3       		.byte	0xf3
 8098 114e 01       		.uleb128 0x1
 8099 114f 50       		.byte	0x50
 8100 1150 9F       		.byte	0x9f
 8101 1151 00000000 		.4byte	0
 8102 1155 00000000 		.4byte	0
 8103              	.LLST79:
 8104 1159 38000000 		.4byte	.LVL313
 8105 115d 94000000 		.4byte	.LVL335
 8106 1161 0100     		.2byte	0x1
 8107 1163 57       		.byte	0x57
 8108 1164 00000000 		.4byte	0
 8109 1168 00000000 		.4byte	0
 8110              	.LLST80:
 8111 116c 42000000 		.4byte	.LVL314
 8112 1170 72000000 		.4byte	.LVL320
 8113 1174 0100     		.2byte	0x1
 8114 1176 55       		.byte	0x55
 8115 1177 72000000 		.4byte	.LVL320
 8116 117b 74000000 		.4byte	.LVL321
 8117 117f 0300     		.2byte	0x3
 8118 1181 75       		.byte	0x75
 8119 1182 7F       		.sleb128 -1
 8120 1183 9F       		.byte	0x9f
 8121 1184 80000000 		.4byte	.LVL325
 8122 1188 8A000000 		.4byte	.LVL330
 8123 118c 0100     		.2byte	0x1
 8124 118e 55       		.byte	0x55
 8125 118f 00000000 		.4byte	0
 8126 1193 00000000 		.4byte	0
 8127              	.LLST81:
 8128 1197 00000000 		.4byte	.LVL336
 8129 119b 37000000 		.4byte	.LVL338-1
 8130 119f 0100     		.2byte	0x1
 8131 11a1 50       		.byte	0x50
 8132 11a2 37000000 		.4byte	.LVL338-1
 8133 11a6 4E000000 		.4byte	.LVL344
 8134 11aa 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 199


 8135 11ac 54       		.byte	0x54
 8136 11ad 4E000000 		.4byte	.LVL344
 8137 11b1 50000000 		.4byte	.LVL345
 8138 11b5 0400     		.2byte	0x4
 8139 11b7 F3       		.byte	0xf3
 8140 11b8 01       		.uleb128 0x1
 8141 11b9 50       		.byte	0x50
 8142 11ba 9F       		.byte	0x9f
 8143 11bb 50000000 		.4byte	.LVL345
 8144 11bf 52000000 		.4byte	.LVL346
 8145 11c3 0100     		.2byte	0x1
 8146 11c5 54       		.byte	0x54
 8147 11c6 52000000 		.4byte	.LVL346
 8148 11ca 5C000000 		.4byte	.LFE44
 8149 11ce 0400     		.2byte	0x4
 8150 11d0 F3       		.byte	0xf3
 8151 11d1 01       		.uleb128 0x1
 8152 11d2 50       		.byte	0x50
 8153 11d3 9F       		.byte	0x9f
 8154 11d4 00000000 		.4byte	0
 8155 11d8 00000000 		.4byte	0
 8156              	.LLST82:
 8157 11dc 00000000 		.4byte	.LVL336
 8158 11e0 37000000 		.4byte	.LVL338-1
 8159 11e4 0100     		.2byte	0x1
 8160 11e6 51       		.byte	0x51
 8161 11e7 37000000 		.4byte	.LVL338-1
 8162 11eb 5A000000 		.4byte	.LVL349
 8163 11ef 0100     		.2byte	0x1
 8164 11f1 55       		.byte	0x55
 8165 11f2 5A000000 		.4byte	.LVL349
 8166 11f6 5C000000 		.4byte	.LFE44
 8167 11fa 0400     		.2byte	0x4
 8168 11fc F3       		.byte	0xf3
 8169 11fd 01       		.uleb128 0x1
 8170 11fe 51       		.byte	0x51
 8171 11ff 9F       		.byte	0x9f
 8172 1200 00000000 		.4byte	0
 8173 1204 00000000 		.4byte	0
 8174              	.LLST83:
 8175 1208 4C000000 		.4byte	.LVL343
 8176 120c 50000000 		.4byte	.LVL345
 8177 1210 0200     		.2byte	0x2
 8178 1212 31       		.byte	0x31
 8179 1213 9F       		.byte	0x9f
 8180 1214 52000000 		.4byte	.LVL346
 8181 1218 5A000000 		.4byte	.LVL348
 8182 121c 0100     		.2byte	0x1
 8183 121e 54       		.byte	0x54
 8184 121f 5A000000 		.4byte	.LVL348
 8185 1223 5C000000 		.4byte	.LFE44
 8186 1227 0100     		.2byte	0x1
 8187 1229 50       		.byte	0x50
 8188 122a 00000000 		.4byte	0
 8189 122e 00000000 		.4byte	0
 8190              	.LLST84:
 8191 1232 3A000000 		.4byte	.LVL339
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 200


 8192 1236 46000000 		.4byte	.LVL341
 8193 123a 0100     		.2byte	0x1
 8194 123c 50       		.byte	0x50
 8195 123d 46000000 		.4byte	.LVL341
 8196 1241 50000000 		.4byte	.LVL345
 8197 1245 0100     		.2byte	0x1
 8198 1247 56       		.byte	0x56
 8199 1248 50000000 		.4byte	.LVL345
 8200 124c 52000000 		.4byte	.LVL346
 8201 1250 0100     		.2byte	0x1
 8202 1252 50       		.byte	0x50
 8203 1253 52000000 		.4byte	.LVL346
 8204 1257 5A000000 		.4byte	.LVL350
 8205 125b 0100     		.2byte	0x1
 8206 125d 56       		.byte	0x56
 8207 125e 00000000 		.4byte	0
 8208 1262 00000000 		.4byte	0
 8209              	.LLST85:
 8210 1266 42000000 		.4byte	.LVL340
 8211 126a 50000000 		.4byte	.LVL345
 8212 126e 0100     		.2byte	0x1
 8213 1270 57       		.byte	0x57
 8214 1271 00000000 		.4byte	0
 8215 1275 00000000 		.4byte	0
 8216              	.LLST86:
 8217 1279 06000000 		.4byte	.LVL337
 8218 127d 37000000 		.4byte	.LVL338-1
 8219 1281 0100     		.2byte	0x1
 8220 1283 50       		.byte	0x50
 8221 1284 37000000 		.4byte	.LVL338-1
 8222 1288 4E000000 		.4byte	.LVL344
 8223 128c 0100     		.2byte	0x1
 8224 128e 54       		.byte	0x54
 8225 128f 4E000000 		.4byte	.LVL344
 8226 1293 50000000 		.4byte	.LVL345
 8227 1297 0400     		.2byte	0x4
 8228 1299 F3       		.byte	0xf3
 8229 129a 01       		.uleb128 0x1
 8230 129b 50       		.byte	0x50
 8231 129c 9F       		.byte	0x9f
 8232 129d 50000000 		.4byte	.LVL345
 8233 12a1 52000000 		.4byte	.LVL346
 8234 12a5 0100     		.2byte	0x1
 8235 12a7 54       		.byte	0x54
 8236 12a8 52000000 		.4byte	.LVL346
 8237 12ac 5C000000 		.4byte	.LFE44
 8238 12b0 0400     		.2byte	0x4
 8239 12b2 F3       		.byte	0xf3
 8240 12b3 01       		.uleb128 0x1
 8241 12b4 50       		.byte	0x50
 8242 12b5 9F       		.byte	0x9f
 8243 12b6 00000000 		.4byte	0
 8244 12ba 00000000 		.4byte	0
 8245              	.LLST87:
 8246 12be 00000000 		.4byte	.LVL351
 8247 12c2 0D000000 		.4byte	.LVL352-1
 8248 12c6 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 201


 8249 12c8 50       		.byte	0x50
 8250 12c9 0D000000 		.4byte	.LVL352-1
 8251 12cd 10000000 		.4byte	.LVL353
 8252 12d1 0100     		.2byte	0x1
 8253 12d3 54       		.byte	0x54
 8254 12d4 10000000 		.4byte	.LVL353
 8255 12d8 18000000 		.4byte	.LFE45
 8256 12dc 0400     		.2byte	0x4
 8257 12de F3       		.byte	0xf3
 8258 12df 01       		.uleb128 0x1
 8259 12e0 50       		.byte	0x50
 8260 12e1 9F       		.byte	0x9f
 8261 12e2 00000000 		.4byte	0
 8262 12e6 00000000 		.4byte	0
 8263              	.LLST88:
 8264 12ea 10000000 		.4byte	.LVL353
 8265 12ee 16000000 		.4byte	.LVL355
 8266 12f2 0100     		.2byte	0x1
 8267 12f4 54       		.byte	0x54
 8268 12f5 16000000 		.4byte	.LVL355
 8269 12f9 18000000 		.4byte	.LFE45
 8270 12fd 0100     		.2byte	0x1
 8271 12ff 50       		.byte	0x50
 8272 1300 00000000 		.4byte	0
 8273 1304 00000000 		.4byte	0
 8274              	.LLST89:
 8275 1308 00000000 		.4byte	.LVL356
 8276 130c 0D000000 		.4byte	.LVL358-1
 8277 1310 0100     		.2byte	0x1
 8278 1312 50       		.byte	0x50
 8279 1313 0D000000 		.4byte	.LVL358-1
 8280 1317 12000000 		.4byte	.LVL359
 8281 131b 0100     		.2byte	0x1
 8282 131d 54       		.byte	0x54
 8283 131e 12000000 		.4byte	.LVL359
 8284 1322 1C000000 		.4byte	.LFE46
 8285 1326 0400     		.2byte	0x4
 8286 1328 F3       		.byte	0xf3
 8287 1329 01       		.uleb128 0x1
 8288 132a 50       		.byte	0x50
 8289 132b 9F       		.byte	0x9f
 8290 132c 00000000 		.4byte	0
 8291 1330 00000000 		.4byte	0
 8292              	.LLST90:
 8293 1334 14000000 		.4byte	.LVL360
 8294 1338 1A000000 		.4byte	.LVL362
 8295 133c 0100     		.2byte	0x1
 8296 133e 54       		.byte	0x54
 8297 133f 1A000000 		.4byte	.LVL362
 8298 1343 1C000000 		.4byte	.LFE46
 8299 1347 0100     		.2byte	0x1
 8300 1349 50       		.byte	0x50
 8301 134a 00000000 		.4byte	0
 8302 134e 00000000 		.4byte	0
 8303              	.LLST91:
 8304 1352 04000000 		.4byte	.LVL357
 8305 1356 0D000000 		.4byte	.LVL358-1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 202


 8306 135a 0100     		.2byte	0x1
 8307 135c 50       		.byte	0x50
 8308 135d 0D000000 		.4byte	.LVL358-1
 8309 1361 12000000 		.4byte	.LVL359
 8310 1365 0100     		.2byte	0x1
 8311 1367 54       		.byte	0x54
 8312 1368 12000000 		.4byte	.LVL359
 8313 136c 1C000000 		.4byte	.LFE46
 8314 1370 0400     		.2byte	0x4
 8315 1372 F3       		.byte	0xf3
 8316 1373 01       		.uleb128 0x1
 8317 1374 50       		.byte	0x50
 8318 1375 9F       		.byte	0x9f
 8319 1376 00000000 		.4byte	0
 8320 137a 00000000 		.4byte	0
 8321              	.LLST92:
 8322 137e 00000000 		.4byte	.LVL363
 8323 1382 0A000000 		.4byte	.LVL364
 8324 1386 0100     		.2byte	0x1
 8325 1388 50       		.byte	0x50
 8326 1389 0A000000 		.4byte	.LVL364
 8327 138d 0C000000 		.4byte	.LFE47
 8328 1391 0400     		.2byte	0x4
 8329 1393 F3       		.byte	0xf3
 8330 1394 01       		.uleb128 0x1
 8331 1395 50       		.byte	0x50
 8332 1396 9F       		.byte	0x9f
 8333 1397 00000000 		.4byte	0
 8334 139b 00000000 		.4byte	0
 8335              	.LLST93:
 8336 139f 00000000 		.4byte	.LVL365
 8337 13a3 10000000 		.4byte	.LVL366
 8338 13a7 0100     		.2byte	0x1
 8339 13a9 50       		.byte	0x50
 8340 13aa 10000000 		.4byte	.LVL366
 8341 13ae 12000000 		.4byte	.LVL367
 8342 13b2 0400     		.2byte	0x4
 8343 13b4 F3       		.byte	0xf3
 8344 13b5 01       		.uleb128 0x1
 8345 13b6 50       		.byte	0x50
 8346 13b7 9F       		.byte	0x9f
 8347 13b8 12000000 		.4byte	.LVL367
 8348 13bc 14000000 		.4byte	.LVL368
 8349 13c0 0100     		.2byte	0x1
 8350 13c2 50       		.byte	0x50
 8351 13c3 14000000 		.4byte	.LVL368
 8352 13c7 16000000 		.4byte	.LFE54
 8353 13cb 0400     		.2byte	0x4
 8354 13cd F3       		.byte	0xf3
 8355 13ce 01       		.uleb128 0x1
 8356 13cf 50       		.byte	0x50
 8357 13d0 9F       		.byte	0x9f
 8358 13d1 00000000 		.4byte	0
 8359 13d5 00000000 		.4byte	0
 8360              	.LLST94:
 8361 13d9 00000000 		.4byte	.LVL369
 8362 13dd 12000000 		.4byte	.LVL370
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 203


 8363 13e1 0100     		.2byte	0x1
 8364 13e3 50       		.byte	0x50
 8365 13e4 12000000 		.4byte	.LVL370
 8366 13e8 14000000 		.4byte	.LVL371
 8367 13ec 0400     		.2byte	0x4
 8368 13ee F3       		.byte	0xf3
 8369 13ef 01       		.uleb128 0x1
 8370 13f0 50       		.byte	0x50
 8371 13f1 9F       		.byte	0x9f
 8372 13f2 14000000 		.4byte	.LVL371
 8373 13f6 16000000 		.4byte	.LVL372
 8374 13fa 0100     		.2byte	0x1
 8375 13fc 50       		.byte	0x50
 8376 13fd 16000000 		.4byte	.LVL372
 8377 1401 18000000 		.4byte	.LFE56
 8378 1405 0400     		.2byte	0x4
 8379 1407 F3       		.byte	0xf3
 8380 1408 01       		.uleb128 0x1
 8381 1409 50       		.byte	0x50
 8382 140a 9F       		.byte	0x9f
 8383 140b 00000000 		.4byte	0
 8384 140f 00000000 		.4byte	0
 8385              	.LLST95:
 8386 1413 02000000 		.4byte	.LVL374
 8387 1417 06000000 		.4byte	.LVL375
 8388 141b 0200     		.2byte	0x2
 8389 141d 30       		.byte	0x30
 8390 141e 9F       		.byte	0x9f
 8391 141f 06000000 		.4byte	.LVL375
 8392 1423 12000000 		.4byte	.LVL376
 8393 1427 0100     		.2byte	0x1
 8394 1429 53       		.byte	0x53
 8395 142a 1A000000 		.4byte	.LVL377
 8396 142e 20000000 		.4byte	.LVL379
 8397 1432 0100     		.2byte	0x1
 8398 1434 53       		.byte	0x53
 8399 1435 00000000 		.4byte	0
 8400 1439 00000000 		.4byte	0
 8401              	.LLST96:
 8402 143d 00000000 		.4byte	.LVL380
 8403 1441 14000000 		.4byte	.LVL383
 8404 1445 0100     		.2byte	0x1
 8405 1447 50       		.byte	0x50
 8406 1448 14000000 		.4byte	.LVL383
 8407 144c 16000000 		.4byte	.LVL384
 8408 1450 0400     		.2byte	0x4
 8409 1452 F3       		.byte	0xf3
 8410 1453 01       		.uleb128 0x1
 8411 1454 50       		.byte	0x50
 8412 1455 9F       		.byte	0x9f
 8413 1456 16000000 		.4byte	.LVL384
 8414 145a 1E000000 		.4byte	.LVL386
 8415 145e 0100     		.2byte	0x1
 8416 1460 50       		.byte	0x50
 8417 1461 1E000000 		.4byte	.LVL386
 8418 1465 24000000 		.4byte	.LFE58
 8419 1469 0400     		.2byte	0x4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 204


 8420 146b F3       		.byte	0xf3
 8421 146c 01       		.uleb128 0x1
 8422 146d 50       		.byte	0x50
 8423 146e 9F       		.byte	0x9f
 8424 146f 00000000 		.4byte	0
 8425 1473 00000000 		.4byte	0
 8426              	.LLST97:
 8427 1477 00000000 		.4byte	.LVL380
 8428 147b 04000000 		.4byte	.LVL381
 8429 147f 0200     		.2byte	0x2
 8430 1481 30       		.byte	0x30
 8431 1482 9F       		.byte	0x9f
 8432 1483 04000000 		.4byte	.LVL381
 8433 1487 12000000 		.4byte	.LVL382
 8434 148b 0100     		.2byte	0x1
 8435 148d 52       		.byte	0x52
 8436 148e 16000000 		.4byte	.LVL384
 8437 1492 1E000000 		.4byte	.LVL386
 8438 1496 0100     		.2byte	0x1
 8439 1498 52       		.byte	0x52
 8440 1499 00000000 		.4byte	0
 8441 149d 00000000 		.4byte	0
 8442              	.LLST98:
 8443 14a1 00000000 		.4byte	.LVL380
 8444 14a5 14000000 		.4byte	.LVL383
 8445 14a9 0200     		.2byte	0x2
 8446 14ab 30       		.byte	0x30
 8447 14ac 9F       		.byte	0x9f
 8448 14ad 14000000 		.4byte	.LVL383
 8449 14b1 16000000 		.4byte	.LVL384
 8450 14b5 0100     		.2byte	0x1
 8451 14b7 50       		.byte	0x50
 8452 14b8 16000000 		.4byte	.LVL384
 8453 14bc 1E000000 		.4byte	.LVL386
 8454 14c0 0200     		.2byte	0x2
 8455 14c2 30       		.byte	0x30
 8456 14c3 9F       		.byte	0x9f
 8457 14c4 1E000000 		.4byte	.LVL386
 8458 14c8 24000000 		.4byte	.LFE58
 8459 14cc 0100     		.2byte	0x1
 8460 14ce 50       		.byte	0x50
 8461 14cf 00000000 		.4byte	0
 8462 14d3 00000000 		.4byte	0
 8463              	.LLST99:
 8464 14d7 00000000 		.4byte	.LVL387
 8465 14db 04000000 		.4byte	.LVL388
 8466 14df 0200     		.2byte	0x2
 8467 14e1 30       		.byte	0x30
 8468 14e2 9F       		.byte	0x9f
 8469 14e3 04000000 		.4byte	.LVL388
 8470 14e7 12000000 		.4byte	.LVL389
 8471 14eb 0100     		.2byte	0x1
 8472 14ed 52       		.byte	0x52
 8473 14ee 1C000000 		.4byte	.LVL390
 8474 14f2 22000000 		.4byte	.LVL392
 8475 14f6 0100     		.2byte	0x1
 8476 14f8 52       		.byte	0x52
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 205


 8477 14f9 00000000 		.4byte	0
 8478 14fd 00000000 		.4byte	0
 8479              	.LLST100:
 8480 1501 00000000 		.4byte	.LVL393
 8481 1505 0D000000 		.4byte	.LVL395-1
 8482 1509 0100     		.2byte	0x1
 8483 150b 50       		.byte	0x50
 8484 150c 0D000000 		.4byte	.LVL395-1
 8485 1510 14000000 		.4byte	.LVL397
 8486 1514 0100     		.2byte	0x1
 8487 1516 54       		.byte	0x54
 8488 1517 14000000 		.4byte	.LVL397
 8489 151b 16000000 		.4byte	.LFE48
 8490 151f 0400     		.2byte	0x4
 8491 1521 F3       		.byte	0xf3
 8492 1522 01       		.uleb128 0x1
 8493 1523 50       		.byte	0x50
 8494 1524 9F       		.byte	0x9f
 8495 1525 00000000 		.4byte	0
 8496 1529 00000000 		.4byte	0
 8497              	.LLST101:
 8498 152d 04000000 		.4byte	.LVL394
 8499 1531 0D000000 		.4byte	.LVL395-1
 8500 1535 0100     		.2byte	0x1
 8501 1537 50       		.byte	0x50
 8502 1538 0D000000 		.4byte	.LVL395-1
 8503 153c 14000000 		.4byte	.LVL397
 8504 1540 0100     		.2byte	0x1
 8505 1542 54       		.byte	0x54
 8506 1543 14000000 		.4byte	.LVL397
 8507 1547 16000000 		.4byte	.LFE48
 8508 154b 0400     		.2byte	0x4
 8509 154d F3       		.byte	0xf3
 8510 154e 01       		.uleb128 0x1
 8511 154f 50       		.byte	0x50
 8512 1550 9F       		.byte	0x9f
 8513 1551 00000000 		.4byte	0
 8514 1555 00000000 		.4byte	0
 8515              		.section	.debug_aranges,"",%progbits
 8516 0000 F4000000 		.4byte	0xf4
 8517 0004 0200     		.2byte	0x2
 8518 0006 00000000 		.4byte	.Ldebug_info0
 8519 000a 04       		.byte	0x4
 8520 000b 00       		.byte	0
 8521 000c 0000     		.2byte	0
 8522 000e 0000     		.2byte	0
 8523 0010 00000000 		.4byte	.LFB49
 8524 0014 14000000 		.4byte	.LFE49-.LFB49
 8525 0018 00000000 		.4byte	.LFB55
 8526 001c 1E000000 		.4byte	.LFE55-.LFB55
 8527 0020 00000000 		.4byte	.LFB53
 8528 0024 1C000000 		.4byte	.LFE53-.LFB53
 8529 0028 00000000 		.4byte	.LFB50
 8530 002c 82000000 		.4byte	.LFE50-.LFB50
 8531 0030 00000000 		.4byte	.LFB51
 8532 0034 24000000 		.4byte	.LFE51-.LFB51
 8533 0038 00000000 		.4byte	.LFB52
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 206


 8534 003c 6E000000 		.4byte	.LFE52-.LFB52
 8535 0040 00000000 		.4byte	.LFB32
 8536 0044 6C000000 		.4byte	.LFE32-.LFB32
 8537 0048 00000000 		.4byte	.LFB34
 8538 004c 1C000000 		.4byte	.LFE34-.LFB34
 8539 0050 00000000 		.4byte	.LFB33
 8540 0054 3E000000 		.4byte	.LFE33-.LFB33
 8541 0058 00000000 		.4byte	.LFB37
 8542 005c 48010000 		.4byte	.LFE37-.LFB37
 8543 0060 00000000 		.4byte	.LFB35
 8544 0064 18000000 		.4byte	.LFE35-.LFB35
 8545 0068 00000000 		.4byte	.LFB36
 8546 006c 16000000 		.4byte	.LFE36-.LFB36
 8547 0070 00000000 		.4byte	.LFB38
 8548 0074 B6000000 		.4byte	.LFE38-.LFB38
 8549 0078 00000000 		.4byte	.LFB39
 8550 007c 94000000 		.4byte	.LFE39-.LFB39
 8551 0080 00000000 		.4byte	.LFB40
 8552 0084 28010000 		.4byte	.LFE40-.LFB40
 8553 0088 00000000 		.4byte	.LFB41
 8554 008c 54010000 		.4byte	.LFE41-.LFB41
 8555 0090 00000000 		.4byte	.LFB42
 8556 0094 28010000 		.4byte	.LFE42-.LFB42
 8557 0098 00000000 		.4byte	.LFB43
 8558 009c 96000000 		.4byte	.LFE43-.LFB43
 8559 00a0 00000000 		.4byte	.LFB44
 8560 00a4 5C000000 		.4byte	.LFE44-.LFB44
 8561 00a8 00000000 		.4byte	.LFB45
 8562 00ac 18000000 		.4byte	.LFE45-.LFB45
 8563 00b0 00000000 		.4byte	.LFB46
 8564 00b4 1C000000 		.4byte	.LFE46-.LFB46
 8565 00b8 00000000 		.4byte	.LFB47
 8566 00bc 0C000000 		.4byte	.LFE47-.LFB47
 8567 00c0 00000000 		.4byte	.LFB54
 8568 00c4 16000000 		.4byte	.LFE54-.LFB54
 8569 00c8 00000000 		.4byte	.LFB56
 8570 00cc 18000000 		.4byte	.LFE56-.LFB56
 8571 00d0 00000000 		.4byte	.LFB57
 8572 00d4 28000000 		.4byte	.LFE57-.LFB57
 8573 00d8 00000000 		.4byte	.LFB58
 8574 00dc 24000000 		.4byte	.LFE58-.LFB58
 8575 00e0 00000000 		.4byte	.LFB59
 8576 00e4 28000000 		.4byte	.LFE59-.LFB59
 8577 00e8 00000000 		.4byte	.LFB48
 8578 00ec 16000000 		.4byte	.LFE48-.LFB48
 8579 00f0 00000000 		.4byte	0
 8580 00f4 00000000 		.4byte	0
 8581              		.section	.debug_ranges,"",%progbits
 8582              	.Ldebug_ranges0:
 8583 0000 5E000000 		.4byte	.LBB4
 8584 0004 9C000000 		.4byte	.LBE4
 8585 0008 A0000000 		.4byte	.LBB5
 8586 000c AA000000 		.4byte	.LBE5
 8587 0010 00000000 		.4byte	0
 8588 0014 00000000 		.4byte	0
 8589 0018 44000000 		.4byte	.LBB7
 8590 001c 7C000000 		.4byte	.LBE7
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 207


 8591 0020 80000000 		.4byte	.LBB8
 8592 0024 8A000000 		.4byte	.LBE8
 8593 0028 00000000 		.4byte	0
 8594 002c 00000000 		.4byte	0
 8595 0030 3C000000 		.4byte	.LBB14
 8596 0034 7C000000 		.4byte	.LBE14
 8597 0038 80000000 		.4byte	.LBB15
 8598 003c 8A000000 		.4byte	.LBE15
 8599 0040 00000000 		.4byte	0
 8600 0044 00000000 		.4byte	0
 8601 0048 00000000 		.4byte	.LFB49
 8602 004c 14000000 		.4byte	.LFE49
 8603 0050 00000000 		.4byte	.LFB55
 8604 0054 1E000000 		.4byte	.LFE55
 8605 0058 00000000 		.4byte	.LFB53
 8606 005c 1C000000 		.4byte	.LFE53
 8607 0060 00000000 		.4byte	.LFB50
 8608 0064 82000000 		.4byte	.LFE50
 8609 0068 00000000 		.4byte	.LFB51
 8610 006c 24000000 		.4byte	.LFE51
 8611 0070 00000000 		.4byte	.LFB52
 8612 0074 6E000000 		.4byte	.LFE52
 8613 0078 00000000 		.4byte	.LFB32
 8614 007c 6C000000 		.4byte	.LFE32
 8615 0080 00000000 		.4byte	.LFB34
 8616 0084 1C000000 		.4byte	.LFE34
 8617 0088 00000000 		.4byte	.LFB33
 8618 008c 3E000000 		.4byte	.LFE33
 8619 0090 00000000 		.4byte	.LFB37
 8620 0094 48010000 		.4byte	.LFE37
 8621 0098 00000000 		.4byte	.LFB35
 8622 009c 18000000 		.4byte	.LFE35
 8623 00a0 00000000 		.4byte	.LFB36
 8624 00a4 16000000 		.4byte	.LFE36
 8625 00a8 00000000 		.4byte	.LFB38
 8626 00ac B6000000 		.4byte	.LFE38
 8627 00b0 00000000 		.4byte	.LFB39
 8628 00b4 94000000 		.4byte	.LFE39
 8629 00b8 00000000 		.4byte	.LFB40
 8630 00bc 28010000 		.4byte	.LFE40
 8631 00c0 00000000 		.4byte	.LFB41
 8632 00c4 54010000 		.4byte	.LFE41
 8633 00c8 00000000 		.4byte	.LFB42
 8634 00cc 28010000 		.4byte	.LFE42
 8635 00d0 00000000 		.4byte	.LFB43
 8636 00d4 96000000 		.4byte	.LFE43
 8637 00d8 00000000 		.4byte	.LFB44
 8638 00dc 5C000000 		.4byte	.LFE44
 8639 00e0 00000000 		.4byte	.LFB45
 8640 00e4 18000000 		.4byte	.LFE45
 8641 00e8 00000000 		.4byte	.LFB46
 8642 00ec 1C000000 		.4byte	.LFE46
 8643 00f0 00000000 		.4byte	.LFB47
 8644 00f4 0C000000 		.4byte	.LFE47
 8645 00f8 00000000 		.4byte	.LFB54
 8646 00fc 16000000 		.4byte	.LFE54
 8647 0100 00000000 		.4byte	.LFB56
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 208


 8648 0104 18000000 		.4byte	.LFE56
 8649 0108 00000000 		.4byte	.LFB57
 8650 010c 28000000 		.4byte	.LFE57
 8651 0110 00000000 		.4byte	.LFB58
 8652 0114 24000000 		.4byte	.LFE58
 8653 0118 00000000 		.4byte	.LFB59
 8654 011c 28000000 		.4byte	.LFE59
 8655 0120 00000000 		.4byte	.LFB48
 8656 0124 16000000 		.4byte	.LFE48
 8657 0128 00000000 		.4byte	0
 8658 012c 00000000 		.4byte	0
 8659              		.section	.debug_line,"",%progbits
 8660              	.Ldebug_line0:
 8661 0000 B2070000 		.section	.debug_str,"MS",%progbits,1
 8661      0200F401 
 8661      00000201 
 8661      FB0E0D00 
 8661      01010101 
 8662              	.LASF34:
 8663 0000 75784E75 		.ascii	"uxNumberOfItems\000"
 8663      6D626572 
 8663      4F664974 
 8663      656D7300 
 8664              	.LASF120:
 8665 0010 76506F72 		.ascii	"vPortExitCritical\000"
 8665      74457869 
 8665      74437269 
 8665      74696361 
 8665      6C00
 8666              	.LASF124:
 8667 0022 76506F72 		.ascii	"vPortYield\000"
 8667      74596965 
 8667      6C6400
 8668              	.LASF99:
 8669 002d 78517565 		.ascii	"xQueueReceive\000"
 8669      75655265 
 8669      63656976 
 8669      6500
 8670              	.LASF106:
 8671 003b 78517565 		.ascii	"xQueueReceiveFromISR\000"
 8671      75655265 
 8671      63656976 
 8671      6546726F 
 8671      6D495352 
 8672              	.LASF50:
 8673 0050 78546173 		.ascii	"xTasksWaitingToReceive\000"
 8673      6B735761 
 8673      6974696E 
 8673      67546F52 
 8673      65636569 
 8674              	.LASF96:
 8675 0067 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 8675      67686572 
 8675      5072696F 
 8675      72697479 
 8675      5461736B 
 8676              	.LASF100:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 209


 8677 0081 78517565 		.ascii	"xQueueSemaphoreTake\000"
 8677      75655365 
 8677      6D617068 
 8677      6F726554 
 8677      616B6500 
 8678              	.LASF0:
 8679 0095 756E7369 		.ascii	"unsigned int\000"
 8679      676E6564 
 8679      20696E74 
 8679      00
 8680              	.LASF35:
 8681 00a2 7078496E 		.ascii	"pxIndex\000"
 8681      64657800 
 8682              	.LASF38:
 8683 00aa 7854494D 		.ascii	"xTIME_OUT\000"
 8683      455F4F55 
 8683      5400
 8684              	.LASF81:
 8685 00b4 70784E65 		.ascii	"pxNewQueue\000"
 8685      77517565 
 8685      756500
 8686              	.LASF30:
 8687 00bf 784C4953 		.ascii	"xLIST_ITEM\000"
 8687      545F4954 
 8687      454D00
 8688              	.LASF58:
 8689 00ca 51554555 		.ascii	"QUEUE_REGISTRY_ITEM\000"
 8689      455F5245 
 8689      47495354 
 8689      52595F49 
 8689      54454D00 
 8690              	.LASF49:
 8691 00de 78546173 		.ascii	"xTasksWaitingToSend\000"
 8691      6B735761 
 8691      6974696E 
 8691      67546F53 
 8691      656E6400 
 8692              	.LASF110:
 8693 00f2 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 8693      65756553 
 8693      70616365 
 8693      73417661 
 8693      696C6162 
 8694              	.LASF55:
 8695 0109 6354784C 		.ascii	"cTxLock\000"
 8695      6F636B00 
 8696              	.LASF39:
 8697 0111 784F7665 		.ascii	"xOverflowCount\000"
 8697      72666C6F 
 8697      77436F75 
 8697      6E7400
 8698              	.LASF119:
 8699 0120 76506F72 		.ascii	"vPortEnterCritical\000"
 8699      74456E74 
 8699      65724372 
 8699      69746963 
 8699      616C00
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 210


 8700              	.LASF57:
 8701 0133 51756575 		.ascii	"Queue_t\000"
 8701      655F7400 
 8702              	.LASF87:
 8703 013b 78436F70 		.ascii	"xCopyPosition\000"
 8703      79506F73 
 8703      6974696F 
 8703      6E00
 8704              	.LASF109:
 8705 0149 75785265 		.ascii	"uxReturn\000"
 8705      7475726E 
 8705      00
 8706              	.LASF62:
 8707 0152 51756575 		.ascii	"QueueRegistryItem_t\000"
 8707      65526567 
 8707      69737472 
 8707      79497465 
 8707      6D5F7400 
 8708              	.LASF118:
 8709 0166 76517565 		.ascii	"vQueueDelete\000"
 8709      75654465 
 8709      6C657465 
 8709      00
 8710              	.LASF43:
 8711 0173 70635265 		.ascii	"pcReadFrom\000"
 8711      61644672 
 8711      6F6D00
 8712              	.LASF117:
 8713 017e 76517565 		.ascii	"vQueueUnregisterQueue\000"
 8713      7565556E 
 8713      72656769 
 8713      73746572 
 8713      51756575 
 8714              	.LASF97:
 8715 0194 75785361 		.ascii	"uxSavedInterruptStatus\000"
 8715      76656449 
 8715      6E746572 
 8715      72757074 
 8715      53746174 
 8716              	.LASF77:
 8717 01ab 70727649 		.ascii	"prvInitialiseNewQueue\000"
 8717      6E697469 
 8717      616C6973 
 8717      654E6577 
 8717      51756575 
 8718              	.LASF18:
 8719 01c1 75696E74 		.ascii	"uint32_t\000"
 8719      33325F74 
 8719      00
 8720              	.LASF16:
 8721 01ca 696E7438 		.ascii	"int8_t\000"
 8721      5F7400
 8722              	.LASF94:
 8723 01d1 75784D75 		.ascii	"uxMutexSize\000"
 8723      74657853 
 8723      697A6500 
 8724              	.LASF89:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 211


 8725 01dd 78596965 		.ascii	"xYieldRequired\000"
 8725      6C645265 
 8725      71756972 
 8725      656400
 8726              	.LASF75:
 8727 01ec 78517565 		.ascii	"xQueue\000"
 8727      756500
 8728              	.LASF19:
 8729 01f3 666C6F61 		.ascii	"float\000"
 8729      7400
 8730              	.LASF74:
 8731 01f9 70727655 		.ascii	"prvUnlockQueue\000"
 8731      6E6C6F63 
 8731      6B517565 
 8731      756500
 8732              	.LASF45:
 8733 0208 51756575 		.ascii	"QueueDefinition\000"
 8733      65446566 
 8733      696E6974 
 8733      696F6E00 
 8734              	.LASF13:
 8735 0218 6C6F6E67 		.ascii	"long long unsigned int\000"
 8735      206C6F6E 
 8735      6720756E 
 8735      7369676E 
 8735      65642069 
 8736              	.LASF68:
 8737 022f 70727649 		.ascii	"prvIsQueueEmpty\000"
 8737      73517565 
 8737      7565456D 
 8737      70747900 
 8738              	.LASF72:
 8739 023f 70764275 		.ascii	"pvBuffer\000"
 8739      66666572 
 8739      00
 8740              	.LASF63:
 8741 0248 70727647 		.ascii	"prvGetDisinheritPriorityAfterTimeout\000"
 8741      65744469 
 8741      73696E68 
 8741      65726974 
 8741      5072696F 
 8742              	.LASF26:
 8743 026d 70785072 		.ascii	"pxPrevious\000"
 8743      6576696F 
 8743      757300
 8744              	.LASF51:
 8745 0278 75784D65 		.ascii	"uxMessagesWaiting\000"
 8745      73736167 
 8745      65735761 
 8745      6974696E 
 8745      6700
 8746              	.LASF126:
 8747 028a 7076506F 		.ascii	"pvPortMalloc\000"
 8747      72744D61 
 8747      6C6C6F63 
 8747      00
 8748              	.LASF129:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 212


 8749 0297 76546173 		.ascii	"vTaskSuspendAll\000"
 8749      6B537573 
 8749      70656E64 
 8749      416C6C00 
 8750              	.LASF104:
 8751 02a7 78517565 		.ascii	"xQueuePeek\000"
 8751      75655065 
 8751      656B00
 8752              	.LASF139:
 8753 02b2 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 8753      43313120 
 8753      352E342E 
 8753      31203230 
 8753      31363036 
 8754 02e5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 8754      20726576 
 8754      6973696F 
 8754      6E203233 
 8754      37373135 
 8755 0318 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 8755      66756E63 
 8755      74696F6E 
 8755      2D736563 
 8755      74696F6E 
 8756              	.LASF88:
 8757 0340 78456E74 		.ascii	"xEntryTimeSet\000"
 8757      72795469 
 8757      6D655365 
 8757      7400
 8758              	.LASF3:
 8759 034e 73697A65 		.ascii	"size_t\000"
 8759      5F7400
 8760              	.LASF90:
 8761 0355 7854696D 		.ascii	"xTimeOut\000"
 8761      654F7574 
 8761      00
 8762              	.LASF60:
 8763 035e 7848616E 		.ascii	"xHandle\000"
 8763      646C6500 
 8764              	.LASF59:
 8765 0366 70635175 		.ascii	"pcQueueName\000"
 8765      6575654E 
 8765      616D6500 
 8766              	.LASF31:
 8767 0372 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 8767      495F4C49 
 8767      53545F49 
 8767      54454D00 
 8768              	.LASF33:
 8769 0382 784C4953 		.ascii	"xLIST\000"
 8769      5400
 8770              	.LASF95:
 8771 0388 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 8771      75654765 
 8771      6E657269 
 8771      6353656E 
 8771      6446726F 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 213


 8772              	.LASF69:
 8773 03a1 70727643 		.ascii	"prvCopyDataToQueue\000"
 8773      6F707944 
 8773      61746154 
 8773      6F517565 
 8773      756500
 8774              	.LASF85:
 8775 03b4 78517565 		.ascii	"xQueueGenericSend\000"
 8775      75654765 
 8775      6E657269 
 8775      6353656E 
 8775      6400
 8776              	.LASF131:
 8777 03c6 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 8777      6B506C61 
 8777      63654F6E 
 8777      4576656E 
 8777      744C6973 
 8778              	.LASF135:
 8779 03dc 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 8779      736B496E 
 8779      6372656D 
 8779      656E744D 
 8779      75746578 
 8780              	.LASF53:
 8781 03fa 75784974 		.ascii	"uxItemSize\000"
 8781      656D5369 
 8781      7A6500
 8782              	.LASF121:
 8783 0405 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 8783      6B507269 
 8783      6F726974 
 8783      79446973 
 8783      696E6865 
 8784              	.LASF93:
 8785 041d 75784D75 		.ascii	"uxMutexLength\000"
 8785      7465784C 
 8785      656E6774 
 8785      6800
 8786              	.LASF15:
 8787 042b 63686172 		.ascii	"char\000"
 8787      00
 8788              	.LASF29:
 8789 0430 4C697374 		.ascii	"ListItem_t\000"
 8789      4974656D 
 8789      5F7400
 8790              	.LASF64:
 8791 043b 70727649 		.ascii	"prvIsQueueFull\000"
 8791      73517565 
 8791      75654675 
 8791      6C6C00
 8792              	.LASF22:
 8793 044a 55426173 		.ascii	"UBaseType_t\000"
 8793      65547970 
 8793      655F7400 
 8794              	.LASF98:
 8795 0456 78517565 		.ascii	"xQueueGiveFromISR\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 214


 8795      75654769 
 8795      76654672 
 8795      6F6D4953 
 8795      5200
 8796              	.LASF142:
 8797 0468 78517565 		.ascii	"xQueueRegistry\000"
 8797      75655265 
 8797      67697374 
 8797      727900
 8798              	.LASF42:
 8799 0477 51756575 		.ascii	"QueueHandle_t\000"
 8799      6548616E 
 8799      646C655F 
 8799      7400
 8800              	.LASF36:
 8801 0485 784C6973 		.ascii	"xListEnd\000"
 8801      74456E64 
 8801      00
 8802              	.LASF111:
 8803 048e 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 8803      6575654D 
 8803      65737361 
 8803      67657357 
 8803      61697469 
 8804              	.LASF32:
 8805 04ac 4D696E69 		.ascii	"MiniListItem_t\000"
 8805      4C697374 
 8805      4974656D 
 8805      5F7400
 8806              	.LASF17:
 8807 04bb 75696E74 		.ascii	"uint8_t\000"
 8807      385F7400 
 8808              	.LASF140:
 8809 04c3 46726565 		.ascii	"FreeRTOS\\source\\queue.c\000"
 8809      52544F53 
 8809      5C736F75 
 8809      7263655C 
 8809      71756575 
 8810              	.LASF83:
 8811 04db 78517565 		.ascii	"xQueueGenericCreate\000"
 8811      75654765 
 8811      6E657269 
 8811      63437265 
 8811      61746500 
 8812              	.LASF92:
 8813 04ef 78517565 		.ascii	"xQueueCreateMutex\000"
 8813      75654372 
 8813      65617465 
 8813      4D757465 
 8813      7800
 8814              	.LASF1:
 8815 0501 6C6F6E67 		.ascii	"long long int\000"
 8815      206C6F6E 
 8815      6720696E 
 8815      7400
 8816              	.LASF91:
 8817 050f 70727649 		.ascii	"prvInitialiseMutex\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 215


 8817      6E697469 
 8817      616C6973 
 8817      654D7574 
 8817      657800
 8818              	.LASF21:
 8819 0522 42617365 		.ascii	"BaseType_t\000"
 8819      54797065 
 8819      5F7400
 8820              	.LASF79:
 8821 052d 70756351 		.ascii	"pucQueueStorage\000"
 8821      75657565 
 8821      53746F72 
 8821      61676500 
 8822              	.LASF40:
 8823 053d 7854696D 		.ascii	"xTimeOnEntering\000"
 8823      654F6E45 
 8823      6E746572 
 8823      696E6700 
 8824              	.LASF116:
 8825 054d 76517565 		.ascii	"vQueueAddToRegistry\000"
 8825      75654164 
 8825      64546F52 
 8825      65676973 
 8825      74727900 
 8826              	.LASF25:
 8827 0561 70784E65 		.ascii	"pxNext\000"
 8827      787400
 8828              	.LASF76:
 8829 0568 784E6577 		.ascii	"xNewQueue\000"
 8829      51756575 
 8829      6500
 8830              	.LASF41:
 8831 0572 54696D65 		.ascii	"TimeOut_t\000"
 8831      4F75745F 
 8831      7400
 8832              	.LASF128:
 8833 057c 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 8833      6B496E74 
 8833      65726E61 
 8833      6C536574 
 8833      54696D65 
 8834              	.LASF105:
 8835 0599 70634F72 		.ascii	"pcOriginalReadPosition\000"
 8835      6967696E 
 8835      616C5265 
 8835      6164506F 
 8835      73697469 
 8836              	.LASF66:
 8837 05b0 75784869 		.ascii	"uxHighestPriorityOfWaitingTasks\000"
 8837      67686573 
 8837      74507269 
 8837      6F726974 
 8837      794F6657 
 8838              	.LASF80:
 8839 05d0 75635175 		.ascii	"ucQueueType\000"
 8839      65756554 
 8839      79706500 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 216


 8840              	.LASF37:
 8841 05dc 4C697374 		.ascii	"List_t\000"
 8841      5F7400
 8842              	.LASF102:
 8843 05e3 75785365 		.ascii	"uxSemaphoreCount\000"
 8843      6D617068 
 8843      6F726543 
 8843      6F756E74 
 8843      00
 8844              	.LASF48:
 8845 05f4 70635772 		.ascii	"pcWriteTo\000"
 8845      69746554 
 8845      6F00
 8846              	.LASF23:
 8847 05fe 5469636B 		.ascii	"TickType_t\000"
 8847      54797065 
 8847      5F7400
 8848              	.LASF4:
 8849 0609 5F5F696E 		.ascii	"__int8_t\000"
 8849      74385F74 
 8849      00
 8850              	.LASF78:
 8851 0612 75785175 		.ascii	"uxQueueLength\000"
 8851      6575654C 
 8851      656E6774 
 8851      6800
 8852              	.LASF2:
 8853 0620 6C6F6E67 		.ascii	"long double\000"
 8853      20646F75 
 8853      626C6500 
 8854              	.LASF101:
 8855 062c 78496E68 		.ascii	"xInheritanceOccurred\000"
 8855      65726974 
 8855      616E6365 
 8855      4F636375 
 8855      72726564 
 8856              	.LASF28:
 8857 0641 7076436F 		.ascii	"pvContainer\000"
 8857      6E746169 
 8857      6E657200 
 8858              	.LASF114:
 8859 064d 70635175 		.ascii	"pcQueueGetName\000"
 8859      65756547 
 8859      65744E61 
 8859      6D6500
 8860              	.LASF115:
 8861 065c 70635265 		.ascii	"pcReturn\000"
 8861      7475726E 
 8861      00
 8862              	.LASF52:
 8863 0665 75784C65 		.ascii	"uxLength\000"
 8863      6E677468 
 8863      00
 8864              	.LASF8:
 8865 066e 73686F72 		.ascii	"short int\000"
 8865      7420696E 
 8865      7400
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 217


 8866              	.LASF24:
 8867 0678 78497465 		.ascii	"xItemValue\000"
 8867      6D56616C 
 8867      756500
 8868              	.LASF10:
 8869 0683 6C6F6E67 		.ascii	"long int\000"
 8869      20696E74 
 8869      00
 8870              	.LASF84:
 8871 068c 78517565 		.ascii	"xQueueSizeInBytes\000"
 8871      75655369 
 8871      7A65496E 
 8871      42797465 
 8871      7300
 8872              	.LASF132:
 8873 069e 78546173 		.ascii	"xTaskResumeAll\000"
 8873      6B526573 
 8873      756D6541 
 8873      6C6C00
 8874              	.LASF70:
 8875 06ad 70764974 		.ascii	"pvItemToQueue\000"
 8875      656D546F 
 8875      51756575 
 8875      6500
 8876              	.LASF130:
 8877 06bb 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 8877      6B436865 
 8877      636B466F 
 8877      7254696D 
 8877      654F7574 
 8878              	.LASF138:
 8879 06d0 76506F72 		.ascii	"vPortFree\000"
 8879      74467265 
 8879      6500
 8880              	.LASF113:
 8881 06da 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 8881      75654973 
 8881      51756575 
 8881      6546756C 
 8881      6C46726F 
 8882              	.LASF108:
 8883 06f3 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 8883      6575654D 
 8883      65737361 
 8883      67657357 
 8883      61697469 
 8884              	.LASF47:
 8885 070a 70635461 		.ascii	"pcTail\000"
 8885      696C00
 8886              	.LASF6:
 8887 0711 5F5F7569 		.ascii	"__uint8_t\000"
 8887      6E74385F 
 8887      7400
 8888              	.LASF65:
 8889 071b 70785175 		.ascii	"pxQueue\000"
 8889      65756500 
 8890              	.LASF67:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 218


 8891 0723 78526574 		.ascii	"xReturn\000"
 8891      75726E00 
 8892              	.LASF14:
 8893 072b 73697A65 		.ascii	"sizetype\000"
 8893      74797065 
 8893      00
 8894              	.LASF123:
 8895 0734 76546173 		.ascii	"vTaskMissedYield\000"
 8895      6B4D6973 
 8895      73656459 
 8895      69656C64 
 8895      00
 8896              	.LASF12:
 8897 0745 6C6F6E67 		.ascii	"long unsigned int\000"
 8897      20756E73 
 8897      69676E65 
 8897      6420696E 
 8897      7400
 8898              	.LASF137:
 8899 0757 78546173 		.ascii	"xTaskPriorityInherit\000"
 8899      6B507269 
 8899      6F726974 
 8899      79496E68 
 8899      65726974 
 8900              	.LASF44:
 8901 076c 75785265 		.ascii	"uxRecursiveCallCount\000"
 8901      63757273 
 8901      69766543 
 8901      616C6C43 
 8901      6F756E74 
 8902              	.LASF107:
 8903 0781 78517565 		.ascii	"xQueuePeekFromISR\000"
 8903      75655065 
 8903      656B4672 
 8903      6F6D4953 
 8903      5200
 8904              	.LASF103:
 8905 0793 75784869 		.ascii	"uxHighestWaitingPriority\000"
 8905      67686573 
 8905      74576169 
 8905      74696E67 
 8905      5072696F 
 8906              	.LASF7:
 8907 07ac 756E7369 		.ascii	"unsigned char\000"
 8907      676E6564 
 8907      20636861 
 8907      7200
 8908              	.LASF11:
 8909 07ba 5F5F7569 		.ascii	"__uint32_t\000"
 8909      6E743332 
 8909      5F7400
 8910              	.LASF125:
 8911 07c5 764C6973 		.ascii	"vListInitialise\000"
 8911      74496E69 
 8911      7469616C 
 8911      69736500 
 8912              	.LASF73:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 219


 8913 07d5 70727643 		.ascii	"prvCopyDataFromQueue\000"
 8913      6F707944 
 8913      61746146 
 8913      726F6D51 
 8913      75657565 
 8914              	.LASF136:
 8915 07ea 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 8915      6B507269 
 8915      6F726974 
 8915      79446973 
 8915      696E6865 
 8916              	.LASF86:
 8917 080e 78546963 		.ascii	"xTicksToWait\000"
 8917      6B73546F 
 8917      57616974 
 8917      00
 8918              	.LASF27:
 8919 081b 70764F77 		.ascii	"pvOwner\000"
 8919      6E657200 
 8920              	.LASF134:
 8921 0823 76436C65 		.ascii	"vClearInterruptMaskFromISR\000"
 8921      6172496E 
 8921      74657272 
 8921      7570744D 
 8921      61736B46 
 8922              	.LASF46:
 8923 083e 70634865 		.ascii	"pcHead\000"
 8923      616400
 8924              	.LASF61:
 8925 0845 78517565 		.ascii	"xQueueRegistryItem\000"
 8925      75655265 
 8925      67697374 
 8925      72794974 
 8925      656D00
 8926              	.LASF82:
 8927 0858 78517565 		.ascii	"xQueueGenericReset\000"
 8927      75654765 
 8927      6E657269 
 8927      63526573 
 8927      657400
 8928              	.LASF112:
 8929 086b 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 8929      75654973 
 8929      51756575 
 8929      65456D70 
 8929      74794672 
 8930              	.LASF5:
 8931 0885 7369676E 		.ascii	"signed char\000"
 8931      65642063 
 8931      68617200 
 8932              	.LASF9:
 8933 0891 73686F72 		.ascii	"short unsigned int\000"
 8933      7420756E 
 8933      7369676E 
 8933      65642069 
 8933      6E7400
 8934              	.LASF143:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccjYKPzF.s 			page 220


 8935 08a4 6D656D63 		.ascii	"memcpy\000"
 8935      707900
 8936              	.LASF56:
 8937 08ab 78515545 		.ascii	"xQUEUE\000"
 8937      554500
 8938              	.LASF127:
 8939 08b2 78546173 		.ascii	"xTaskGetSchedulerState\000"
 8939      6B476574 
 8939      53636865 
 8939      64756C65 
 8939      72537461 
 8940              	.LASF20:
 8941 08c9 646F7562 		.ascii	"double\000"
 8941      6C6500
 8942              	.LASF71:
 8943 08d0 78506F73 		.ascii	"xPosition\000"
 8943      6974696F 
 8943      6E00
 8944              	.LASF54:
 8945 08da 6352784C 		.ascii	"cRxLock\000"
 8945      6F636B00 
 8946              	.LASF133:
 8947 08e2 756C5365 		.ascii	"ulSetInterruptMaskFromISR\000"
 8947      74496E74 
 8947      65727275 
 8947      70744D61 
 8947      736B4672 
 8948              	.LASF122:
 8949 08fc 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 8949      6B52656D 
 8949      6F766546 
 8949      726F6D45 
 8949      76656E74 
 8950              	.LASF141:
 8951 0915 433A5C70 		.ascii	"C:\\proj\\acsnb-motor-cypress\\QuadEncoderRTOS.cyds"
 8951      726F6A5C 
 8951      6163736E 
 8951      622D6D6F 
 8951      746F722D 
 8952 0945 6E00     		.ascii	"n\000"
 8953              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
