ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB42:
  26              		.file 1 "FreeRTOS\\source\\tasks.c"
   1:FreeRTOS\source/tasks.c **** /*
   2:FreeRTOS\source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:FreeRTOS\source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS\source/tasks.c ****  *
   5:FreeRTOS\source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS\source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS\source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS\source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS\source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS\source/tasks.c ****  * subject to the following conditions:
  11:FreeRTOS\source/tasks.c ****  *
  12:FreeRTOS\source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS\source/tasks.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS\source/tasks.c ****  *
  15:FreeRTOS\source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS\source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS\source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS\source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS\source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS\source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS\source/tasks.c ****  *
  22:FreeRTOS\source/tasks.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS\source/tasks.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS\source/tasks.c ****  *
  25:FreeRTOS\source/tasks.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS\source/tasks.c ****  */
  27:FreeRTOS\source/tasks.c **** 
  28:FreeRTOS\source/tasks.c **** /* Standard includes. */
  29:FreeRTOS\source/tasks.c **** #include <stdlib.h>
  30:FreeRTOS\source/tasks.c **** #include <string.h>
  31:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 2


  32:FreeRTOS\source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS\source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS\source/tasks.c **** task.h is included from an application file. */
  35:FreeRTOS\source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS\source/tasks.c **** 
  37:FreeRTOS\source/tasks.c **** /* FreeRTOS includes. */
  38:FreeRTOS\source/tasks.c **** #include "FreeRTOS.h"
  39:FreeRTOS\source/tasks.c **** #include "task.h"
  40:FreeRTOS\source/tasks.c **** #include "timers.h"
  41:FreeRTOS\source/tasks.c **** #include "stack_macros.h"
  42:FreeRTOS\source/tasks.c **** 
  43:FreeRTOS\source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:FreeRTOS\source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:FreeRTOS\source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:FreeRTOS\source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:FreeRTOS\source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:FreeRTOS\source/tasks.c **** 
  49:FreeRTOS\source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:FreeRTOS\source/tasks.c **** functions but without including stdio.h here. */
  51:FreeRTOS\source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:FreeRTOS\source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:FreeRTOS\source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:FreeRTOS\source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:FreeRTOS\source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:FreeRTOS\source/tasks.c **** 	#include <stdio.h>
  57:FreeRTOS\source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:FreeRTOS\source/tasks.c **** 
  59:FreeRTOS\source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:FreeRTOS\source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:FreeRTOS\source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:FreeRTOS\source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:FreeRTOS\source/tasks.c **** #else
  64:FreeRTOS\source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:FreeRTOS\source/tasks.c **** #endif
  66:FreeRTOS\source/tasks.c **** 
  67:FreeRTOS\source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:FreeRTOS\source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:FreeRTOS\source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:FreeRTOS\source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:FreeRTOS\source/tasks.c **** 
  72:FreeRTOS\source/tasks.c **** /*
  73:FreeRTOS\source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:FreeRTOS\source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:FreeRTOS\source/tasks.c ****  */
  76:FreeRTOS\source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:FreeRTOS\source/tasks.c **** 
  78:FreeRTOS\source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:FreeRTOS\source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:FreeRTOS\source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:FreeRTOS\source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:FreeRTOS\source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:FreeRTOS\source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:FreeRTOS\source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:FreeRTOS\source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:FreeRTOS\source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:FreeRTOS\source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:FreeRTOS\source/tasks.c **** made to free the RAM that was allocated statically.
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 3


  89:FreeRTOS\source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:FreeRTOS\source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:FreeRTOS\source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:FreeRTOS\source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:FreeRTOS\source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:FreeRTOS\source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:FreeRTOS\source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:FreeRTOS\source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:FreeRTOS\source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:FreeRTOS\source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:FreeRTOS\source/tasks.c **** 
 100:FreeRTOS\source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:FreeRTOS\source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:FreeRTOS\source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:FreeRTOS\source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:FreeRTOS\source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:FreeRTOS\source/tasks.c **** #else
 106:FreeRTOS\source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:FreeRTOS\source/tasks.c **** #endif
 108:FreeRTOS\source/tasks.c **** 
 109:FreeRTOS\source/tasks.c **** /*
 110:FreeRTOS\source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:FreeRTOS\source/tasks.c ****  */
 112:FreeRTOS\source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:FreeRTOS\source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:FreeRTOS\source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:FreeRTOS\source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:FreeRTOS\source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:FreeRTOS\source/tasks.c **** 
 118:FreeRTOS\source/tasks.c **** /*
 119:FreeRTOS\source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:FreeRTOS\source/tasks.c ****  * global, rather than file scope.
 121:FreeRTOS\source/tasks.c ****  */
 122:FreeRTOS\source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:FreeRTOS\source/tasks.c **** 	#define static
 124:FreeRTOS\source/tasks.c **** #endif
 125:FreeRTOS\source/tasks.c **** 
 126:FreeRTOS\source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:FreeRTOS\source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:FreeRTOS\source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:FreeRTOS\source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:FreeRTOS\source/tasks.c **** #endif
 131:FreeRTOS\source/tasks.c **** 
 132:FreeRTOS\source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:FreeRTOS\source/tasks.c **** 
 134:FreeRTOS\source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:FreeRTOS\source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:FreeRTOS\source/tasks.c **** 	microcontroller architecture. */
 137:FreeRTOS\source/tasks.c **** 
 138:FreeRTOS\source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:FreeRTOS\source/tasks.c **** 	state task. */
 140:FreeRTOS\source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:FreeRTOS\source/tasks.c **** 	{																									\
 142:FreeRTOS\source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:FreeRTOS\source/tasks.c **** 		{																								\
 144:FreeRTOS\source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:FreeRTOS\source/tasks.c **** 		}																								\
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 4


 146:FreeRTOS\source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:FreeRTOS\source/tasks.c **** 
 148:FreeRTOS\source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:FreeRTOS\source/tasks.c **** 
 150:FreeRTOS\source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:FreeRTOS\source/tasks.c **** 	{																									\
 152:FreeRTOS\source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:FreeRTOS\source/tasks.c **** 																										\
 154:FreeRTOS\source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:FreeRTOS\source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:FreeRTOS\source/tasks.c **** 		{																								\
 157:FreeRTOS\source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:FreeRTOS\source/tasks.c **** 			--uxTopPriority;																			\
 159:FreeRTOS\source/tasks.c **** 		}																								\
 160:FreeRTOS\source/tasks.c **** 																										\
 161:FreeRTOS\source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:FreeRTOS\source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:FreeRTOS\source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:FreeRTOS\source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:FreeRTOS\source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:FreeRTOS\source/tasks.c **** 
 167:FreeRTOS\source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:FreeRTOS\source/tasks.c **** 
 169:FreeRTOS\source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:FreeRTOS\source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:FreeRTOS\source/tasks.c **** 	being used. */
 172:FreeRTOS\source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:FreeRTOS\source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:FreeRTOS\source/tasks.c **** 
 175:FreeRTOS\source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:FreeRTOS\source/tasks.c **** 
 177:FreeRTOS\source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:FreeRTOS\source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:FreeRTOS\source/tasks.c **** 	architecture being used. */
 180:FreeRTOS\source/tasks.c **** 
 181:FreeRTOS\source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:FreeRTOS\source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:FreeRTOS\source/tasks.c **** 
 184:FreeRTOS\source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:FreeRTOS\source/tasks.c **** 
 186:FreeRTOS\source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:FreeRTOS\source/tasks.c **** 	{																								\
 188:FreeRTOS\source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:FreeRTOS\source/tasks.c **** 																									\
 190:FreeRTOS\source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:FreeRTOS\source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:FreeRTOS\source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:FreeRTOS\source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:FreeRTOS\source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:FreeRTOS\source/tasks.c **** 
 196:FreeRTOS\source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:FreeRTOS\source/tasks.c **** 
 198:FreeRTOS\source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:FreeRTOS\source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:FreeRTOS\source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:FreeRTOS\source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:FreeRTOS\source/tasks.c **** 	{																									\
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 5


 203:FreeRTOS\source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:FreeRTOS\source/tasks.c **** 		{																								\
 205:FreeRTOS\source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:FreeRTOS\source/tasks.c **** 		}																								\
 207:FreeRTOS\source/tasks.c **** 	}
 208:FreeRTOS\source/tasks.c **** 
 209:FreeRTOS\source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:FreeRTOS\source/tasks.c **** 
 211:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 212:FreeRTOS\source/tasks.c **** 
 213:FreeRTOS\source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:FreeRTOS\source/tasks.c **** count overflows. */
 215:FreeRTOS\source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:FreeRTOS\source/tasks.c **** {																									\
 217:FreeRTOS\source/tasks.c **** 	List_t *pxTemp;																					\
 218:FreeRTOS\source/tasks.c **** 																									\
 219:FreeRTOS\source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:FreeRTOS\source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:FreeRTOS\source/tasks.c **** 																									\
 222:FreeRTOS\source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:FreeRTOS\source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:FreeRTOS\source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:FreeRTOS\source/tasks.c **** 	xNumOfOverflows++;																				\
 226:FreeRTOS\source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:FreeRTOS\source/tasks.c **** }
 228:FreeRTOS\source/tasks.c **** 
 229:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 230:FreeRTOS\source/tasks.c **** 
 231:FreeRTOS\source/tasks.c **** /*
 232:FreeRTOS\source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:FreeRTOS\source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:FreeRTOS\source/tasks.c ****  */
 235:FreeRTOS\source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:FreeRTOS\source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:FreeRTOS\source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:FreeRTOS\source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:FreeRTOS\source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 241:FreeRTOS\source/tasks.c **** 
 242:FreeRTOS\source/tasks.c **** /*
 243:FreeRTOS\source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:FreeRTOS\source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:FreeRTOS\source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:FreeRTOS\source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:FreeRTOS\source/tasks.c ****  */
 248:FreeRTOS\source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:FreeRTOS\source/tasks.c **** 
 250:FreeRTOS\source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:FreeRTOS\source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:FreeRTOS\source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:FreeRTOS\source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:FreeRTOS\source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:FreeRTOS\source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:FreeRTOS\source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:FreeRTOS\source/tasks.c **** to its original value when it is released. */
 258:FreeRTOS\source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:FreeRTOS\source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 6


 260:FreeRTOS\source/tasks.c **** #else
 261:FreeRTOS\source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:FreeRTOS\source/tasks.c **** #endif
 263:FreeRTOS\source/tasks.c **** 
 264:FreeRTOS\source/tasks.c **** /*
 265:FreeRTOS\source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:FreeRTOS\source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:FreeRTOS\source/tasks.c ****  * (the task's run time environment, including register values)
 268:FreeRTOS\source/tasks.c ****  */
 269:FreeRTOS\source/tasks.c **** typedef struct tskTaskControlBlock
 270:FreeRTOS\source/tasks.c **** {
 271:FreeRTOS\source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:FreeRTOS\source/tasks.c **** 
 273:FreeRTOS\source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:FreeRTOS\source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:FreeRTOS\source/tasks.c **** 	#endif
 276:FreeRTOS\source/tasks.c **** 
 277:FreeRTOS\source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:FreeRTOS\source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:FreeRTOS\source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:FreeRTOS\source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:FreeRTOS\source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:FreeRTOS\source/tasks.c **** 
 283:FreeRTOS\source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:FreeRTOS\source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:FreeRTOS\source/tasks.c **** 	#endif
 286:FreeRTOS\source/tasks.c **** 
 287:FreeRTOS\source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:FreeRTOS\source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:FreeRTOS\source/tasks.c **** 	#endif
 290:FreeRTOS\source/tasks.c **** 
 291:FreeRTOS\source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:FreeRTOS\source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:FreeRTOS\source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:FreeRTOS\source/tasks.c **** 	#endif
 295:FreeRTOS\source/tasks.c **** 
 296:FreeRTOS\source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:FreeRTOS\source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:FreeRTOS\source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:FreeRTOS\source/tasks.c **** 	#endif
 300:FreeRTOS\source/tasks.c **** 
 301:FreeRTOS\source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:FreeRTOS\source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:FreeRTOS\source/tasks.c **** 	#endif
 304:FreeRTOS\source/tasks.c **** 
 305:FreeRTOS\source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:FreeRTOS\source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:FreeRTOS\source/tasks.c **** 	#endif
 308:FreeRTOS\source/tasks.c **** 
 309:FreeRTOS\source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:FreeRTOS\source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:FreeRTOS\source/tasks.c **** 	#endif
 312:FreeRTOS\source/tasks.c **** 
 313:FreeRTOS\source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:FreeRTOS\source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:FreeRTOS\source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:FreeRTOS\source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 7


 317:FreeRTOS\source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:FreeRTOS\source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:FreeRTOS\source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:FreeRTOS\source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:FreeRTOS\source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:FreeRTOS\source/tasks.c **** 	#endif
 323:FreeRTOS\source/tasks.c **** 
 324:FreeRTOS\source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:FreeRTOS\source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:FreeRTOS\source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:FreeRTOS\source/tasks.c **** 	#endif
 328:FreeRTOS\source/tasks.c **** 
 329:FreeRTOS\source/tasks.c **** 	/* See the comments above the definition of
 330:FreeRTOS\source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:FreeRTOS\source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:FreeRTOS\source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:FreeRTOS\source/tasks.c **** 	#endif
 334:FreeRTOS\source/tasks.c **** 
 335:FreeRTOS\source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:FreeRTOS\source/tasks.c **** 		uint8_t ucDelayAborted;
 337:FreeRTOS\source/tasks.c **** 	#endif
 338:FreeRTOS\source/tasks.c **** 
 339:FreeRTOS\source/tasks.c **** } tskTCB;
 340:FreeRTOS\source/tasks.c **** 
 341:FreeRTOS\source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:FreeRTOS\source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:FreeRTOS\source/tasks.c **** typedef tskTCB TCB_t;
 344:FreeRTOS\source/tasks.c **** 
 345:FreeRTOS\source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:FreeRTOS\source/tasks.c **** which static variables must be declared volatile. */
 347:FreeRTOS\source/tasks.c **** 
 348:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:FreeRTOS\source/tasks.c **** 
 350:FreeRTOS\source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 352:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 353:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 354:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 355:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 356:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 357:FreeRTOS\source/tasks.c **** 
 358:FreeRTOS\source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:FreeRTOS\source/tasks.c **** 
 360:FreeRTOS\source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 361:FreeRTOS\source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:FreeRTOS\source/tasks.c **** 
 363:FreeRTOS\source/tasks.c **** #endif
 364:FreeRTOS\source/tasks.c **** 
 365:FreeRTOS\source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:FreeRTOS\source/tasks.c **** 
 367:FreeRTOS\source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 368:FreeRTOS\source/tasks.c **** 
 369:FreeRTOS\source/tasks.c **** #endif
 370:FreeRTOS\source/tasks.c **** 
 371:FreeRTOS\source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 8


 374:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:FreeRTOS\source/tasks.c **** 
 383:FreeRTOS\source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:FreeRTOS\source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:FreeRTOS\source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:FreeRTOS\source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:FreeRTOS\source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:FreeRTOS\source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:FreeRTOS\source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:FreeRTOS\source/tasks.c **** accessed from a critical section. */
 391:FreeRTOS\source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:FreeRTOS\source/tasks.c **** 
 393:FreeRTOS\source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:FreeRTOS\source/tasks.c **** 
 395:FreeRTOS\source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:FreeRTOS\source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:FreeRTOS\source/tasks.c **** 
 398:FreeRTOS\source/tasks.c **** #endif
 399:FreeRTOS\source/tasks.c **** 
 400:FreeRTOS\source/tasks.c **** /*lint -restore */
 401:FreeRTOS\source/tasks.c **** 
 402:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 403:FreeRTOS\source/tasks.c **** 
 404:FreeRTOS\source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:FreeRTOS\source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:FreeRTOS\source/tasks.c **** 
 407:FreeRTOS\source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:FreeRTOS\source/tasks.c **** 
 409:FreeRTOS\source/tasks.c **** #endif
 410:FreeRTOS\source/tasks.c **** 
 411:FreeRTOS\source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:FreeRTOS\source/tasks.c **** 
 413:FreeRTOS\source/tasks.c **** 	extern void vApplicationTickHook( void );
 414:FreeRTOS\source/tasks.c **** 
 415:FreeRTOS\source/tasks.c **** #endif
 416:FreeRTOS\source/tasks.c **** 
 417:FreeRTOS\source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:FreeRTOS\source/tasks.c **** 
 419:FreeRTOS\source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:FreeRTOS\source/tasks.c **** 
 421:FreeRTOS\source/tasks.c **** #endif
 422:FreeRTOS\source/tasks.c **** 
 423:FreeRTOS\source/tasks.c **** /* File private functions. --------------------------------*/
 424:FreeRTOS\source/tasks.c **** 
 425:FreeRTOS\source/tasks.c **** /**
 426:FreeRTOS\source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:FreeRTOS\source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:FreeRTOS\source/tasks.c ****  * is in any other state.
 429:FreeRTOS\source/tasks.c ****  */
 430:FreeRTOS\source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 9


 431:FreeRTOS\source/tasks.c **** 
 432:FreeRTOS\source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:FreeRTOS\source/tasks.c **** 
 434:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:FreeRTOS\source/tasks.c **** 
 436:FreeRTOS\source/tasks.c **** /*
 437:FreeRTOS\source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:FreeRTOS\source/tasks.c ****  * automatically upon the creation of the first task.
 439:FreeRTOS\source/tasks.c ****  */
 440:FreeRTOS\source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:FreeRTOS\source/tasks.c **** 
 442:FreeRTOS\source/tasks.c **** /*
 443:FreeRTOS\source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:FreeRTOS\source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:FreeRTOS\source/tasks.c ****  * creation of the first user task.
 446:FreeRTOS\source/tasks.c ****  *
 447:FreeRTOS\source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:FreeRTOS\source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:FreeRTOS\source/tasks.c ****  *
 450:FreeRTOS\source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:FreeRTOS\source/tasks.c ****  *
 452:FreeRTOS\source/tasks.c ****  */
 453:FreeRTOS\source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:FreeRTOS\source/tasks.c **** 
 455:FreeRTOS\source/tasks.c **** /*
 456:FreeRTOS\source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:FreeRTOS\source/tasks.c ****  * including the stack pointed to by the TCB.
 458:FreeRTOS\source/tasks.c ****  *
 459:FreeRTOS\source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:FreeRTOS\source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:FreeRTOS\source/tasks.c ****  */
 462:FreeRTOS\source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:FreeRTOS\source/tasks.c **** 
 464:FreeRTOS\source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:FreeRTOS\source/tasks.c **** 
 466:FreeRTOS\source/tasks.c **** #endif
 467:FreeRTOS\source/tasks.c **** 
 468:FreeRTOS\source/tasks.c **** /*
 469:FreeRTOS\source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:FreeRTOS\source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:FreeRTOS\source/tasks.c ****  * and its TCB deleted.
 472:FreeRTOS\source/tasks.c ****  */
 473:FreeRTOS\source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:FreeRTOS\source/tasks.c **** 
 475:FreeRTOS\source/tasks.c **** /*
 476:FreeRTOS\source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:FreeRTOS\source/tasks.c ****  * either the current or the overflow delayed task list.
 478:FreeRTOS\source/tasks.c ****  */
 479:FreeRTOS\source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:FreeRTOS\source/tasks.c **** 
 481:FreeRTOS\source/tasks.c **** /*
 482:FreeRTOS\source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:FreeRTOS\source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:FreeRTOS\source/tasks.c ****  * a suspended list, etc.).
 485:FreeRTOS\source/tasks.c ****  *
 486:FreeRTOS\source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:FreeRTOS\source/tasks.c ****  * NORMAL APPLICATION CODE.
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 10


 488:FreeRTOS\source/tasks.c ****  */
 489:FreeRTOS\source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:FreeRTOS\source/tasks.c **** 
 491:FreeRTOS\source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:FreeRTOS\source/tasks.c **** 
 493:FreeRTOS\source/tasks.c **** #endif
 494:FreeRTOS\source/tasks.c **** 
 495:FreeRTOS\source/tasks.c **** /*
 496:FreeRTOS\source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:FreeRTOS\source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:FreeRTOS\source/tasks.c ****  */
 499:FreeRTOS\source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:FreeRTOS\source/tasks.c **** 
 501:FreeRTOS\source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:FreeRTOS\source/tasks.c **** 
 503:FreeRTOS\source/tasks.c **** #endif
 504:FreeRTOS\source/tasks.c **** 
 505:FreeRTOS\source/tasks.c **** /*
 506:FreeRTOS\source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:FreeRTOS\source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:FreeRTOS\source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:FreeRTOS\source/tasks.c ****  */
 510:FreeRTOS\source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:FreeRTOS\source/tasks.c **** 
 512:FreeRTOS\source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 513:FreeRTOS\source/tasks.c **** 
 514:FreeRTOS\source/tasks.c **** #endif
 515:FreeRTOS\source/tasks.c **** 
 516:FreeRTOS\source/tasks.c **** /*
 517:FreeRTOS\source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:FreeRTOS\source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:FreeRTOS\source/tasks.c ****  *
 520:FreeRTOS\source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:FreeRTOS\source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:FreeRTOS\source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:FreeRTOS\source/tasks.c ****  * set to a value other than 1.
 524:FreeRTOS\source/tasks.c ****  */
 525:FreeRTOS\source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:FreeRTOS\source/tasks.c **** 
 527:FreeRTOS\source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:FreeRTOS\source/tasks.c **** 
 529:FreeRTOS\source/tasks.c **** #endif
 530:FreeRTOS\source/tasks.c **** 
 531:FreeRTOS\source/tasks.c **** /*
 532:FreeRTOS\source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:FreeRTOS\source/tasks.c ****  * will exit the Blocked state.
 534:FreeRTOS\source/tasks.c ****  */
 535:FreeRTOS\source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:FreeRTOS\source/tasks.c **** 
 537:FreeRTOS\source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:FreeRTOS\source/tasks.c **** 
 539:FreeRTOS\source/tasks.c **** 	/*
 540:FreeRTOS\source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:FreeRTOS\source/tasks.c **** 	 * human readable tables of task information.
 542:FreeRTOS\source/tasks.c **** 	 */
 543:FreeRTOS\source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 11


 545:FreeRTOS\source/tasks.c **** #endif
 546:FreeRTOS\source/tasks.c **** 
 547:FreeRTOS\source/tasks.c **** /*
 548:FreeRTOS\source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:FreeRTOS\source/tasks.c ****  * dynamically to fill in the structure's members.
 550:FreeRTOS\source/tasks.c ****  */
 551:FreeRTOS\source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:FreeRTOS\source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:FreeRTOS\source/tasks.c **** 									const uint32_t ulStackDepth,
 554:FreeRTOS\source/tasks.c **** 									void * const pvParameters,
 555:FreeRTOS\source/tasks.c **** 									UBaseType_t uxPriority,
 556:FreeRTOS\source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:FreeRTOS\source/tasks.c **** 									TCB_t *pxNewTCB,
 558:FreeRTOS\source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:FreeRTOS\source/tasks.c **** 
 560:FreeRTOS\source/tasks.c **** /*
 561:FreeRTOS\source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:FreeRTOS\source/tasks.c ****  * under the control of the scheduler.
 563:FreeRTOS\source/tasks.c ****  */
 564:FreeRTOS\source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:FreeRTOS\source/tasks.c **** 
 566:FreeRTOS\source/tasks.c **** /*
 567:FreeRTOS\source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:FreeRTOS\source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:FreeRTOS\source/tasks.c ****  * called by the function.
 570:FreeRTOS\source/tasks.c ****  */
 571:FreeRTOS\source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:FreeRTOS\source/tasks.c **** 
 573:FreeRTOS\source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:FreeRTOS\source/tasks.c **** 
 575:FreeRTOS\source/tasks.c **** #endif
 576:FreeRTOS\source/tasks.c **** 
 577:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 578:FreeRTOS\source/tasks.c **** 
 579:FreeRTOS\source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:FreeRTOS\source/tasks.c **** 
 581:FreeRTOS\source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:FreeRTOS\source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:FreeRTOS\source/tasks.c **** 									const uint32_t ulStackDepth,
 584:FreeRTOS\source/tasks.c **** 									void * const pvParameters,
 585:FreeRTOS\source/tasks.c **** 									UBaseType_t uxPriority,
 586:FreeRTOS\source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:FreeRTOS\source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:FreeRTOS\source/tasks.c **** 	{
 589:FreeRTOS\source/tasks.c **** 	TCB_t *pxNewTCB;
 590:FreeRTOS\source/tasks.c **** 	TaskHandle_t xReturn;
 591:FreeRTOS\source/tasks.c **** 
 592:FreeRTOS\source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:FreeRTOS\source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:FreeRTOS\source/tasks.c **** 
 595:FreeRTOS\source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:FreeRTOS\source/tasks.c **** 		{
 597:FreeRTOS\source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:FreeRTOS\source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:FreeRTOS\source/tasks.c **** 			structure. */
 600:FreeRTOS\source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:FreeRTOS\source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 12


 602:FreeRTOS\source/tasks.c **** 		}
 603:FreeRTOS\source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 604:FreeRTOS\source/tasks.c **** 
 605:FreeRTOS\source/tasks.c **** 
 606:FreeRTOS\source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 607:FreeRTOS\source/tasks.c **** 		{
 608:FreeRTOS\source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 609:FreeRTOS\source/tasks.c **** 			function - use them. */
 610:FreeRTOS\source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 611:FreeRTOS\source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 612:FreeRTOS\source/tasks.c **** 
 613:FreeRTOS\source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 614:FreeRTOS\source/tasks.c **** 			{
 615:FreeRTOS\source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 616:FreeRTOS\source/tasks.c **** 				task was created statically in case the task is later deleted. */
 617:FreeRTOS\source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 618:FreeRTOS\source/tasks.c **** 			}
 619:FreeRTOS\source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 620:FreeRTOS\source/tasks.c **** 
 621:FreeRTOS\source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 622:FreeRTOS\source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 623:FreeRTOS\source/tasks.c **** 		}
 624:FreeRTOS\source/tasks.c **** 		else
 625:FreeRTOS\source/tasks.c **** 		{
 626:FreeRTOS\source/tasks.c **** 			xReturn = NULL;
 627:FreeRTOS\source/tasks.c **** 		}
 628:FreeRTOS\source/tasks.c **** 
 629:FreeRTOS\source/tasks.c **** 		return xReturn;
 630:FreeRTOS\source/tasks.c **** 	}
 631:FreeRTOS\source/tasks.c **** 
 632:FreeRTOS\source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 633:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 634:FreeRTOS\source/tasks.c **** 
 635:FreeRTOS\source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 636:FreeRTOS\source/tasks.c **** 
 637:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 638:FreeRTOS\source/tasks.c **** 	{
 639:FreeRTOS\source/tasks.c **** 	TCB_t *pxNewTCB;
 640:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 641:FreeRTOS\source/tasks.c **** 
 642:FreeRTOS\source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 643:FreeRTOS\source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 644:FreeRTOS\source/tasks.c **** 
 645:FreeRTOS\source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 646:FreeRTOS\source/tasks.c **** 		{
 647:FreeRTOS\source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 648:FreeRTOS\source/tasks.c **** 			on the implementation of the port malloc function and whether or
 649:FreeRTOS\source/tasks.c **** 			not static allocation is being used. */
 650:FreeRTOS\source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 651:FreeRTOS\source/tasks.c **** 
 652:FreeRTOS\source/tasks.c **** 			/* Store the stack location in the TCB. */
 653:FreeRTOS\source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 654:FreeRTOS\source/tasks.c **** 
 655:FreeRTOS\source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 656:FreeRTOS\source/tasks.c **** 			{
 657:FreeRTOS\source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 658:FreeRTOS\source/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 13


 659:FreeRTOS\source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 660:FreeRTOS\source/tasks.c **** 			}
 661:FreeRTOS\source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 662:FreeRTOS\source/tasks.c **** 
 663:FreeRTOS\source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 664:FreeRTOS\source/tasks.c **** 									pxTaskDefinition->pcName,
 665:FreeRTOS\source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 666:FreeRTOS\source/tasks.c **** 									pxTaskDefinition->pvParameters,
 667:FreeRTOS\source/tasks.c **** 									pxTaskDefinition->uxPriority,
 668:FreeRTOS\source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 669:FreeRTOS\source/tasks.c **** 									pxTaskDefinition->xRegions );
 670:FreeRTOS\source/tasks.c **** 
 671:FreeRTOS\source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 672:FreeRTOS\source/tasks.c **** 			xReturn = pdPASS;
 673:FreeRTOS\source/tasks.c **** 		}
 674:FreeRTOS\source/tasks.c **** 
 675:FreeRTOS\source/tasks.c **** 		return xReturn;
 676:FreeRTOS\source/tasks.c **** 	}
 677:FreeRTOS\source/tasks.c **** 
 678:FreeRTOS\source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 679:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 680:FreeRTOS\source/tasks.c **** 
 681:FreeRTOS\source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 682:FreeRTOS\source/tasks.c **** 
 683:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 684:FreeRTOS\source/tasks.c **** 	{
 685:FreeRTOS\source/tasks.c **** 	TCB_t *pxNewTCB;
 686:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 687:FreeRTOS\source/tasks.c **** 
 688:FreeRTOS\source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 689:FreeRTOS\source/tasks.c **** 
 690:FreeRTOS\source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 691:FreeRTOS\source/tasks.c **** 		{
 692:FreeRTOS\source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 693:FreeRTOS\source/tasks.c **** 			on the implementation of the port malloc function and whether or
 694:FreeRTOS\source/tasks.c **** 			not static allocation is being used. */
 695:FreeRTOS\source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 696:FreeRTOS\source/tasks.c **** 
 697:FreeRTOS\source/tasks.c **** 			if( pxNewTCB != NULL )
 698:FreeRTOS\source/tasks.c **** 			{
 699:FreeRTOS\source/tasks.c **** 				/* Store the stack location in the TCB. */
 700:FreeRTOS\source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 701:FreeRTOS\source/tasks.c **** 
 702:FreeRTOS\source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 703:FreeRTOS\source/tasks.c **** 				{
 704:FreeRTOS\source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 705:FreeRTOS\source/tasks.c **** 					this task had a statically allocated stack in case it is
 706:FreeRTOS\source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 707:FreeRTOS\source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 708:FreeRTOS\source/tasks.c **** 				}
 709:FreeRTOS\source/tasks.c **** 				#endif
 710:FreeRTOS\source/tasks.c **** 
 711:FreeRTOS\source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 712:FreeRTOS\source/tasks.c **** 										pxTaskDefinition->pcName,
 713:FreeRTOS\source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 714:FreeRTOS\source/tasks.c **** 										pxTaskDefinition->pvParameters,
 715:FreeRTOS\source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 14


 716:FreeRTOS\source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 717:FreeRTOS\source/tasks.c **** 										pxTaskDefinition->xRegions );
 718:FreeRTOS\source/tasks.c **** 
 719:FreeRTOS\source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 720:FreeRTOS\source/tasks.c **** 				xReturn = pdPASS;
 721:FreeRTOS\source/tasks.c **** 			}
 722:FreeRTOS\source/tasks.c **** 		}
 723:FreeRTOS\source/tasks.c **** 
 724:FreeRTOS\source/tasks.c **** 		return xReturn;
 725:FreeRTOS\source/tasks.c **** 	}
 726:FreeRTOS\source/tasks.c **** 
 727:FreeRTOS\source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 728:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 729:FreeRTOS\source/tasks.c **** 
 730:FreeRTOS\source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 731:FreeRTOS\source/tasks.c **** 
 732:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 733:FreeRTOS\source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 734:FreeRTOS\source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 735:FreeRTOS\source/tasks.c **** 							void * const pvParameters,
 736:FreeRTOS\source/tasks.c **** 							UBaseType_t uxPriority,
 737:FreeRTOS\source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 738:FreeRTOS\source/tasks.c **** 	{
 739:FreeRTOS\source/tasks.c **** 	TCB_t *pxNewTCB;
 740:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn;
 741:FreeRTOS\source/tasks.c **** 
 742:FreeRTOS\source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 743:FreeRTOS\source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 744:FreeRTOS\source/tasks.c **** 		the TCB then the stack. */
 745:FreeRTOS\source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 746:FreeRTOS\source/tasks.c **** 		{
 747:FreeRTOS\source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 748:FreeRTOS\source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 749:FreeRTOS\source/tasks.c **** 			allocation is being used. */
 750:FreeRTOS\source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 751:FreeRTOS\source/tasks.c **** 
 752:FreeRTOS\source/tasks.c **** 			if( pxNewTCB != NULL )
 753:FreeRTOS\source/tasks.c **** 			{
 754:FreeRTOS\source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 755:FreeRTOS\source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 756:FreeRTOS\source/tasks.c **** 				be deleted later if required. */
 757:FreeRTOS\source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 758:FreeRTOS\source/tasks.c **** 
 759:FreeRTOS\source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 760:FreeRTOS\source/tasks.c **** 				{
 761:FreeRTOS\source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 762:FreeRTOS\source/tasks.c **** 					vPortFree( pxNewTCB );
 763:FreeRTOS\source/tasks.c **** 					pxNewTCB = NULL;
 764:FreeRTOS\source/tasks.c **** 				}
 765:FreeRTOS\source/tasks.c **** 			}
 766:FreeRTOS\source/tasks.c **** 		}
 767:FreeRTOS\source/tasks.c **** 		#else /* portSTACK_GROWTH */
 768:FreeRTOS\source/tasks.c **** 		{
 769:FreeRTOS\source/tasks.c **** 		StackType_t *pxStack;
 770:FreeRTOS\source/tasks.c **** 
 771:FreeRTOS\source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 772:FreeRTOS\source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 15


 773:FreeRTOS\source/tasks.c **** 
 774:FreeRTOS\source/tasks.c **** 			if( pxStack != NULL )
 775:FreeRTOS\source/tasks.c **** 			{
 776:FreeRTOS\source/tasks.c **** 				/* Allocate space for the TCB. */
 777:FreeRTOS\source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 778:FreeRTOS\source/tasks.c **** 
 779:FreeRTOS\source/tasks.c **** 				if( pxNewTCB != NULL )
 780:FreeRTOS\source/tasks.c **** 				{
 781:FreeRTOS\source/tasks.c **** 					/* Store the stack location in the TCB. */
 782:FreeRTOS\source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 783:FreeRTOS\source/tasks.c **** 				}
 784:FreeRTOS\source/tasks.c **** 				else
 785:FreeRTOS\source/tasks.c **** 				{
 786:FreeRTOS\source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 787:FreeRTOS\source/tasks.c **** 					it again. */
 788:FreeRTOS\source/tasks.c **** 					vPortFree( pxStack );
 789:FreeRTOS\source/tasks.c **** 				}
 790:FreeRTOS\source/tasks.c **** 			}
 791:FreeRTOS\source/tasks.c **** 			else
 792:FreeRTOS\source/tasks.c **** 			{
 793:FreeRTOS\source/tasks.c **** 				pxNewTCB = NULL;
 794:FreeRTOS\source/tasks.c **** 			}
 795:FreeRTOS\source/tasks.c **** 		}
 796:FreeRTOS\source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 797:FreeRTOS\source/tasks.c **** 
 798:FreeRTOS\source/tasks.c **** 		if( pxNewTCB != NULL )
 799:FreeRTOS\source/tasks.c **** 		{
 800:FreeRTOS\source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 801:FreeRTOS\source/tasks.c **** 			{
 802:FreeRTOS\source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 803:FreeRTOS\source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 804:FreeRTOS\source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 805:FreeRTOS\source/tasks.c **** 			}
 806:FreeRTOS\source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 807:FreeRTOS\source/tasks.c **** 
 808:FreeRTOS\source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 809:FreeRTOS\source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 810:FreeRTOS\source/tasks.c **** 			xReturn = pdPASS;
 811:FreeRTOS\source/tasks.c **** 		}
 812:FreeRTOS\source/tasks.c **** 		else
 813:FreeRTOS\source/tasks.c **** 		{
 814:FreeRTOS\source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 815:FreeRTOS\source/tasks.c **** 		}
 816:FreeRTOS\source/tasks.c **** 
 817:FreeRTOS\source/tasks.c **** 		return xReturn;
 818:FreeRTOS\source/tasks.c **** 	}
 819:FreeRTOS\source/tasks.c **** 
 820:FreeRTOS\source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 821:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 822:FreeRTOS\source/tasks.c **** 
 823:FreeRTOS\source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 824:FreeRTOS\source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 825:FreeRTOS\source/tasks.c **** 									const uint32_t ulStackDepth,
 826:FreeRTOS\source/tasks.c **** 									void * const pvParameters,
 827:FreeRTOS\source/tasks.c **** 									UBaseType_t uxPriority,
 828:FreeRTOS\source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 829:FreeRTOS\source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 16


 830:FreeRTOS\source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 831:FreeRTOS\source/tasks.c **** {
 832:FreeRTOS\source/tasks.c **** StackType_t *pxTopOfStack;
 833:FreeRTOS\source/tasks.c **** UBaseType_t x;
 834:FreeRTOS\source/tasks.c **** 
 835:FreeRTOS\source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 836:FreeRTOS\source/tasks.c **** 		/* Should the task be created in privileged mode? */
 837:FreeRTOS\source/tasks.c **** 		BaseType_t xRunPrivileged;
 838:FreeRTOS\source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 839:FreeRTOS\source/tasks.c **** 		{
 840:FreeRTOS\source/tasks.c **** 			xRunPrivileged = pdTRUE;
 841:FreeRTOS\source/tasks.c **** 		}
 842:FreeRTOS\source/tasks.c **** 		else
 843:FreeRTOS\source/tasks.c **** 		{
 844:FreeRTOS\source/tasks.c **** 			xRunPrivileged = pdFALSE;
 845:FreeRTOS\source/tasks.c **** 		}
 846:FreeRTOS\source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 847:FreeRTOS\source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 848:FreeRTOS\source/tasks.c **** 
 849:FreeRTOS\source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 850:FreeRTOS\source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 851:FreeRTOS\source/tasks.c **** 	{
 852:FreeRTOS\source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 853:FreeRTOS\source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 854:FreeRTOS\source/tasks.c **** 	}
 855:FreeRTOS\source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 856:FreeRTOS\source/tasks.c **** 
 857:FreeRTOS\source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 858:FreeRTOS\source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 859:FreeRTOS\source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 860:FreeRTOS\source/tasks.c **** 	by the port. */
 861:FreeRTOS\source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 862:FreeRTOS\source/tasks.c **** 	{
 863:FreeRTOS\source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 864:FreeRTOS\source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 865:FreeRTOS\source/tasks.c **** 
 866:FreeRTOS\source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 867:FreeRTOS\source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 868:FreeRTOS\source/tasks.c **** 
 869:FreeRTOS\source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 870:FreeRTOS\source/tasks.c **** 		{
 871:FreeRTOS\source/tasks.c **** 			/* Also record the stack's high address, which may assist
 872:FreeRTOS\source/tasks.c **** 			debugging. */
 873:FreeRTOS\source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 874:FreeRTOS\source/tasks.c **** 		}
 875:FreeRTOS\source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 876:FreeRTOS\source/tasks.c **** 	}
 877:FreeRTOS\source/tasks.c **** 	#else /* portSTACK_GROWTH */
 878:FreeRTOS\source/tasks.c **** 	{
 879:FreeRTOS\source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 880:FreeRTOS\source/tasks.c **** 
 881:FreeRTOS\source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 882:FreeRTOS\source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 883:FreeRTOS\source/tasks.c **** 
 884:FreeRTOS\source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 885:FreeRTOS\source/tasks.c **** 		performed. */
 886:FreeRTOS\source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 17


 887:FreeRTOS\source/tasks.c **** 	}
 888:FreeRTOS\source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 889:FreeRTOS\source/tasks.c **** 
 890:FreeRTOS\source/tasks.c **** 	/* Store the task name in the TCB. */
 891:FreeRTOS\source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:FreeRTOS\source/tasks.c **** 	{
 893:FreeRTOS\source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:FreeRTOS\source/tasks.c **** 
 895:FreeRTOS\source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:FreeRTOS\source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:FreeRTOS\source/tasks.c **** 		string is not accessible (extremely unlikely). */
 898:FreeRTOS\source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 899:FreeRTOS\source/tasks.c **** 		{
 900:FreeRTOS\source/tasks.c **** 			break;
 901:FreeRTOS\source/tasks.c **** 		}
 902:FreeRTOS\source/tasks.c **** 		else
 903:FreeRTOS\source/tasks.c **** 		{
 904:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 905:FreeRTOS\source/tasks.c **** 		}
 906:FreeRTOS\source/tasks.c **** 	}
 907:FreeRTOS\source/tasks.c **** 
 908:FreeRTOS\source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 909:FreeRTOS\source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 910:FreeRTOS\source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:FreeRTOS\source/tasks.c **** 
 912:FreeRTOS\source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 913:FreeRTOS\source/tasks.c **** 	remove the privilege bit if one is present. */
 914:FreeRTOS\source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 915:FreeRTOS\source/tasks.c **** 	{
 916:FreeRTOS\source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 917:FreeRTOS\source/tasks.c **** 	}
 918:FreeRTOS\source/tasks.c **** 	else
 919:FreeRTOS\source/tasks.c **** 	{
 920:FreeRTOS\source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 921:FreeRTOS\source/tasks.c **** 	}
 922:FreeRTOS\source/tasks.c **** 
 923:FreeRTOS\source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 924:FreeRTOS\source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 925:FreeRTOS\source/tasks.c **** 	{
 926:FreeRTOS\source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 927:FreeRTOS\source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 928:FreeRTOS\source/tasks.c **** 	}
 929:FreeRTOS\source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 930:FreeRTOS\source/tasks.c **** 
 931:FreeRTOS\source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 932:FreeRTOS\source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 933:FreeRTOS\source/tasks.c **** 
 934:FreeRTOS\source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 935:FreeRTOS\source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 936:FreeRTOS\source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 937:FreeRTOS\source/tasks.c **** 
 938:FreeRTOS\source/tasks.c **** 	/* Event lists are always in priority order. */
 939:FreeRTOS\source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 940:FreeRTOS\source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 941:FreeRTOS\source/tasks.c **** 
 942:FreeRTOS\source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 943:FreeRTOS\source/tasks.c **** 	{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 18


 944:FreeRTOS\source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 945:FreeRTOS\source/tasks.c **** 	}
 946:FreeRTOS\source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 947:FreeRTOS\source/tasks.c **** 
 948:FreeRTOS\source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 949:FreeRTOS\source/tasks.c **** 	{
 950:FreeRTOS\source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 951:FreeRTOS\source/tasks.c **** 	}
 952:FreeRTOS\source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 953:FreeRTOS\source/tasks.c **** 
 954:FreeRTOS\source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 955:FreeRTOS\source/tasks.c **** 	{
 956:FreeRTOS\source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 957:FreeRTOS\source/tasks.c **** 	}
 958:FreeRTOS\source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 959:FreeRTOS\source/tasks.c **** 
 960:FreeRTOS\source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 961:FreeRTOS\source/tasks.c **** 	{
 962:FreeRTOS\source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 963:FreeRTOS\source/tasks.c **** 	}
 964:FreeRTOS\source/tasks.c **** 	#else
 965:FreeRTOS\source/tasks.c **** 	{
 966:FreeRTOS\source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 967:FreeRTOS\source/tasks.c **** 		( void ) xRegions;
 968:FreeRTOS\source/tasks.c **** 	}
 969:FreeRTOS\source/tasks.c **** 	#endif
 970:FreeRTOS\source/tasks.c **** 
 971:FreeRTOS\source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 972:FreeRTOS\source/tasks.c **** 	{
 973:FreeRTOS\source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 974:FreeRTOS\source/tasks.c **** 		{
 975:FreeRTOS\source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 976:FreeRTOS\source/tasks.c **** 		}
 977:FreeRTOS\source/tasks.c **** 	}
 978:FreeRTOS\source/tasks.c **** 	#endif
 979:FreeRTOS\source/tasks.c **** 
 980:FreeRTOS\source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 981:FreeRTOS\source/tasks.c **** 	{
 982:FreeRTOS\source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 983:FreeRTOS\source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 984:FreeRTOS\source/tasks.c **** 	}
 985:FreeRTOS\source/tasks.c **** 	#endif
 986:FreeRTOS\source/tasks.c **** 
 987:FreeRTOS\source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 988:FreeRTOS\source/tasks.c **** 	{
 989:FreeRTOS\source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 990:FreeRTOS\source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 991:FreeRTOS\source/tasks.c **** 	}
 992:FreeRTOS\source/tasks.c **** 	#endif
 993:FreeRTOS\source/tasks.c **** 
 994:FreeRTOS\source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 995:FreeRTOS\source/tasks.c **** 	{
 996:FreeRTOS\source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 997:FreeRTOS\source/tasks.c **** 	}
 998:FreeRTOS\source/tasks.c **** 	#endif
 999:FreeRTOS\source/tasks.c **** 
1000:FreeRTOS\source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 19


1001:FreeRTOS\source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1002:FreeRTOS\source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1003:FreeRTOS\source/tasks.c **** 	the top of stack variable is updated. */
1004:FreeRTOS\source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1005:FreeRTOS\source/tasks.c **** 	{
1006:FreeRTOS\source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1007:FreeRTOS\source/tasks.c **** 	}
1008:FreeRTOS\source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1009:FreeRTOS\source/tasks.c **** 	{
1010:FreeRTOS\source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1011:FreeRTOS\source/tasks.c **** 	}
1012:FreeRTOS\source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1013:FreeRTOS\source/tasks.c **** 
1014:FreeRTOS\source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1015:FreeRTOS\source/tasks.c **** 	{
1016:FreeRTOS\source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1017:FreeRTOS\source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1018:FreeRTOS\source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1019:FreeRTOS\source/tasks.c **** 	}
1020:FreeRTOS\source/tasks.c **** 	else
1021:FreeRTOS\source/tasks.c **** 	{
1022:FreeRTOS\source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1023:FreeRTOS\source/tasks.c **** 	}
1024:FreeRTOS\source/tasks.c **** }
1025:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1026:FreeRTOS\source/tasks.c **** 
1027:FreeRTOS\source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1028:FreeRTOS\source/tasks.c **** {
1029:FreeRTOS\source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1030:FreeRTOS\source/tasks.c **** 	updated. */
1031:FreeRTOS\source/tasks.c **** 	taskENTER_CRITICAL();
1032:FreeRTOS\source/tasks.c **** 	{
1033:FreeRTOS\source/tasks.c **** 		uxCurrentNumberOfTasks++;
1034:FreeRTOS\source/tasks.c **** 		if( pxCurrentTCB == NULL )
1035:FreeRTOS\source/tasks.c **** 		{
1036:FreeRTOS\source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1037:FreeRTOS\source/tasks.c **** 			the suspended state - make this the current task. */
1038:FreeRTOS\source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1039:FreeRTOS\source/tasks.c **** 
1040:FreeRTOS\source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1041:FreeRTOS\source/tasks.c **** 			{
1042:FreeRTOS\source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1043:FreeRTOS\source/tasks.c **** 				initialisation required.  We will not recover if this call
1044:FreeRTOS\source/tasks.c **** 				fails, but we will report the failure. */
1045:FreeRTOS\source/tasks.c **** 				prvInitialiseTaskLists();
1046:FreeRTOS\source/tasks.c **** 			}
1047:FreeRTOS\source/tasks.c **** 			else
1048:FreeRTOS\source/tasks.c **** 			{
1049:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1050:FreeRTOS\source/tasks.c **** 			}
1051:FreeRTOS\source/tasks.c **** 		}
1052:FreeRTOS\source/tasks.c **** 		else
1053:FreeRTOS\source/tasks.c **** 		{
1054:FreeRTOS\source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1055:FreeRTOS\source/tasks.c **** 			current task if it is the highest priority task to be created
1056:FreeRTOS\source/tasks.c **** 			so far. */
1057:FreeRTOS\source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 20


1058:FreeRTOS\source/tasks.c **** 			{
1059:FreeRTOS\source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1060:FreeRTOS\source/tasks.c **** 				{
1061:FreeRTOS\source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1062:FreeRTOS\source/tasks.c **** 				}
1063:FreeRTOS\source/tasks.c **** 				else
1064:FreeRTOS\source/tasks.c **** 				{
1065:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1066:FreeRTOS\source/tasks.c **** 				}
1067:FreeRTOS\source/tasks.c **** 			}
1068:FreeRTOS\source/tasks.c **** 			else
1069:FreeRTOS\source/tasks.c **** 			{
1070:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1071:FreeRTOS\source/tasks.c **** 			}
1072:FreeRTOS\source/tasks.c **** 		}
1073:FreeRTOS\source/tasks.c **** 
1074:FreeRTOS\source/tasks.c **** 		uxTaskNumber++;
1075:FreeRTOS\source/tasks.c **** 
1076:FreeRTOS\source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1077:FreeRTOS\source/tasks.c **** 		{
1078:FreeRTOS\source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1079:FreeRTOS\source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:FreeRTOS\source/tasks.c **** 		}
1081:FreeRTOS\source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1082:FreeRTOS\source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1083:FreeRTOS\source/tasks.c **** 
1084:FreeRTOS\source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1085:FreeRTOS\source/tasks.c **** 
1086:FreeRTOS\source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1087:FreeRTOS\source/tasks.c **** 	}
1088:FreeRTOS\source/tasks.c **** 	taskEXIT_CRITICAL();
1089:FreeRTOS\source/tasks.c **** 
1090:FreeRTOS\source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1091:FreeRTOS\source/tasks.c **** 	{
1092:FreeRTOS\source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1093:FreeRTOS\source/tasks.c **** 		then it should run now. */
1094:FreeRTOS\source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1095:FreeRTOS\source/tasks.c **** 		{
1096:FreeRTOS\source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1097:FreeRTOS\source/tasks.c **** 		}
1098:FreeRTOS\source/tasks.c **** 		else
1099:FreeRTOS\source/tasks.c **** 		{
1100:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1101:FreeRTOS\source/tasks.c **** 		}
1102:FreeRTOS\source/tasks.c **** 	}
1103:FreeRTOS\source/tasks.c **** 	else
1104:FreeRTOS\source/tasks.c **** 	{
1105:FreeRTOS\source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1106:FreeRTOS\source/tasks.c **** 	}
1107:FreeRTOS\source/tasks.c **** }
1108:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1109:FreeRTOS\source/tasks.c **** 
1110:FreeRTOS\source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:FreeRTOS\source/tasks.c **** 
1112:FreeRTOS\source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:FreeRTOS\source/tasks.c **** 	{
1114:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 21


1115:FreeRTOS\source/tasks.c **** 
1116:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
1117:FreeRTOS\source/tasks.c **** 		{
1118:FreeRTOS\source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1119:FreeRTOS\source/tasks.c **** 			being deleted. */
1120:FreeRTOS\source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1121:FreeRTOS\source/tasks.c **** 
1122:FreeRTOS\source/tasks.c **** 			/* Remove task from the ready list. */
1123:FreeRTOS\source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1124:FreeRTOS\source/tasks.c **** 			{
1125:FreeRTOS\source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:FreeRTOS\source/tasks.c **** 			}
1127:FreeRTOS\source/tasks.c **** 			else
1128:FreeRTOS\source/tasks.c **** 			{
1129:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1130:FreeRTOS\source/tasks.c **** 			}
1131:FreeRTOS\source/tasks.c **** 
1132:FreeRTOS\source/tasks.c **** 			/* Is the task waiting on an event also? */
1133:FreeRTOS\source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1134:FreeRTOS\source/tasks.c **** 			{
1135:FreeRTOS\source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1136:FreeRTOS\source/tasks.c **** 			}
1137:FreeRTOS\source/tasks.c **** 			else
1138:FreeRTOS\source/tasks.c **** 			{
1139:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1140:FreeRTOS\source/tasks.c **** 			}
1141:FreeRTOS\source/tasks.c **** 
1142:FreeRTOS\source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1143:FreeRTOS\source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1144:FreeRTOS\source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:FreeRTOS\source/tasks.c **** 			not return. */
1146:FreeRTOS\source/tasks.c **** 			uxTaskNumber++;
1147:FreeRTOS\source/tasks.c **** 
1148:FreeRTOS\source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1149:FreeRTOS\source/tasks.c **** 			{
1150:FreeRTOS\source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1151:FreeRTOS\source/tasks.c **** 				task itself, as a context switch to another task is required.
1152:FreeRTOS\source/tasks.c **** 				Place the task in the termination list.  The idle task will
1153:FreeRTOS\source/tasks.c **** 				check the termination list and free up any memory allocated by
1154:FreeRTOS\source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1155:FreeRTOS\source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1156:FreeRTOS\source/tasks.c **** 
1157:FreeRTOS\source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1158:FreeRTOS\source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1159:FreeRTOS\source/tasks.c **** 				check the xTasksWaitingTermination list. */
1160:FreeRTOS\source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1161:FreeRTOS\source/tasks.c **** 
1162:FreeRTOS\source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1163:FreeRTOS\source/tasks.c **** 				in which Windows specific clean up operations are performed,
1164:FreeRTOS\source/tasks.c **** 				after which it is not possible to yield away from this task -
1165:FreeRTOS\source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1166:FreeRTOS\source/tasks.c **** 				required. */
1167:FreeRTOS\source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1168:FreeRTOS\source/tasks.c **** 			}
1169:FreeRTOS\source/tasks.c **** 			else
1170:FreeRTOS\source/tasks.c **** 			{
1171:FreeRTOS\source/tasks.c **** 				--uxCurrentNumberOfTasks;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 22


1172:FreeRTOS\source/tasks.c **** 				prvDeleteTCB( pxTCB );
1173:FreeRTOS\source/tasks.c **** 
1174:FreeRTOS\source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1175:FreeRTOS\source/tasks.c **** 				the task that has just been deleted. */
1176:FreeRTOS\source/tasks.c **** 				prvResetNextTaskUnblockTime();
1177:FreeRTOS\source/tasks.c **** 			}
1178:FreeRTOS\source/tasks.c **** 
1179:FreeRTOS\source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1180:FreeRTOS\source/tasks.c **** 		}
1181:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
1182:FreeRTOS\source/tasks.c **** 
1183:FreeRTOS\source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1184:FreeRTOS\source/tasks.c **** 		been deleted. */
1185:FreeRTOS\source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1186:FreeRTOS\source/tasks.c **** 		{
1187:FreeRTOS\source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1188:FreeRTOS\source/tasks.c **** 			{
1189:FreeRTOS\source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1190:FreeRTOS\source/tasks.c **** 				portYIELD_WITHIN_API();
1191:FreeRTOS\source/tasks.c **** 			}
1192:FreeRTOS\source/tasks.c **** 			else
1193:FreeRTOS\source/tasks.c **** 			{
1194:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1195:FreeRTOS\source/tasks.c **** 			}
1196:FreeRTOS\source/tasks.c **** 		}
1197:FreeRTOS\source/tasks.c **** 	}
1198:FreeRTOS\source/tasks.c **** 
1199:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1200:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1201:FreeRTOS\source/tasks.c **** 
1202:FreeRTOS\source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1203:FreeRTOS\source/tasks.c **** 
1204:FreeRTOS\source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1205:FreeRTOS\source/tasks.c **** 	{
1206:FreeRTOS\source/tasks.c **** 	TickType_t xTimeToWake;
1207:FreeRTOS\source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1208:FreeRTOS\source/tasks.c **** 
1209:FreeRTOS\source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1210:FreeRTOS\source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1211:FreeRTOS\source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1212:FreeRTOS\source/tasks.c **** 
1213:FreeRTOS\source/tasks.c **** 		vTaskSuspendAll();
1214:FreeRTOS\source/tasks.c **** 		{
1215:FreeRTOS\source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1216:FreeRTOS\source/tasks.c **** 			block. */
1217:FreeRTOS\source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1218:FreeRTOS\source/tasks.c **** 
1219:FreeRTOS\source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1220:FreeRTOS\source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1221:FreeRTOS\source/tasks.c **** 
1222:FreeRTOS\source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1223:FreeRTOS\source/tasks.c **** 			{
1224:FreeRTOS\source/tasks.c **** 				/* The tick count has overflowed since this function was
1225:FreeRTOS\source/tasks.c **** 				lasted called.  In this case the only time we should ever
1226:FreeRTOS\source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1227:FreeRTOS\source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1228:FreeRTOS\source/tasks.c **** 				is the case it is as if neither time had overflowed. */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 23


1229:FreeRTOS\source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1230:FreeRTOS\source/tasks.c **** 				{
1231:FreeRTOS\source/tasks.c **** 					xShouldDelay = pdTRUE;
1232:FreeRTOS\source/tasks.c **** 				}
1233:FreeRTOS\source/tasks.c **** 				else
1234:FreeRTOS\source/tasks.c **** 				{
1235:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1236:FreeRTOS\source/tasks.c **** 				}
1237:FreeRTOS\source/tasks.c **** 			}
1238:FreeRTOS\source/tasks.c **** 			else
1239:FreeRTOS\source/tasks.c **** 			{
1240:FreeRTOS\source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1241:FreeRTOS\source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1242:FreeRTOS\source/tasks.c **** 				tick time is less than the wake time. */
1243:FreeRTOS\source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1244:FreeRTOS\source/tasks.c **** 				{
1245:FreeRTOS\source/tasks.c **** 					xShouldDelay = pdTRUE;
1246:FreeRTOS\source/tasks.c **** 				}
1247:FreeRTOS\source/tasks.c **** 				else
1248:FreeRTOS\source/tasks.c **** 				{
1249:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1250:FreeRTOS\source/tasks.c **** 				}
1251:FreeRTOS\source/tasks.c **** 			}
1252:FreeRTOS\source/tasks.c **** 
1253:FreeRTOS\source/tasks.c **** 			/* Update the wake time ready for the next call. */
1254:FreeRTOS\source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1255:FreeRTOS\source/tasks.c **** 
1256:FreeRTOS\source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1257:FreeRTOS\source/tasks.c **** 			{
1258:FreeRTOS\source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1259:FreeRTOS\source/tasks.c **** 
1260:FreeRTOS\source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1261:FreeRTOS\source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1262:FreeRTOS\source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1263:FreeRTOS\source/tasks.c **** 			}
1264:FreeRTOS\source/tasks.c **** 			else
1265:FreeRTOS\source/tasks.c **** 			{
1266:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1267:FreeRTOS\source/tasks.c **** 			}
1268:FreeRTOS\source/tasks.c **** 		}
1269:FreeRTOS\source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1270:FreeRTOS\source/tasks.c **** 
1271:FreeRTOS\source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1272:FreeRTOS\source/tasks.c **** 		have put ourselves to sleep. */
1273:FreeRTOS\source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1274:FreeRTOS\source/tasks.c **** 		{
1275:FreeRTOS\source/tasks.c **** 			portYIELD_WITHIN_API();
1276:FreeRTOS\source/tasks.c **** 		}
1277:FreeRTOS\source/tasks.c **** 		else
1278:FreeRTOS\source/tasks.c **** 		{
1279:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1280:FreeRTOS\source/tasks.c **** 		}
1281:FreeRTOS\source/tasks.c **** 	}
1282:FreeRTOS\source/tasks.c **** 
1283:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1284:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1285:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 24


1286:FreeRTOS\source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1287:FreeRTOS\source/tasks.c **** 
1288:FreeRTOS\source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1289:FreeRTOS\source/tasks.c **** 	{
1290:FreeRTOS\source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1291:FreeRTOS\source/tasks.c **** 
1292:FreeRTOS\source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1293:FreeRTOS\source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1294:FreeRTOS\source/tasks.c **** 		{
1295:FreeRTOS\source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1296:FreeRTOS\source/tasks.c **** 			vTaskSuspendAll();
1297:FreeRTOS\source/tasks.c **** 			{
1298:FreeRTOS\source/tasks.c **** 				traceTASK_DELAY();
1299:FreeRTOS\source/tasks.c **** 
1300:FreeRTOS\source/tasks.c **** 				/* A task that is removed from the event list while the
1301:FreeRTOS\source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1302:FreeRTOS\source/tasks.c **** 				list or removed from the blocked list until the scheduler
1303:FreeRTOS\source/tasks.c **** 				is resumed.
1304:FreeRTOS\source/tasks.c **** 
1305:FreeRTOS\source/tasks.c **** 				This task cannot be in an event list as it is the currently
1306:FreeRTOS\source/tasks.c **** 				executing task. */
1307:FreeRTOS\source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1308:FreeRTOS\source/tasks.c **** 			}
1309:FreeRTOS\source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1310:FreeRTOS\source/tasks.c **** 		}
1311:FreeRTOS\source/tasks.c **** 		else
1312:FreeRTOS\source/tasks.c **** 		{
1313:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1314:FreeRTOS\source/tasks.c **** 		}
1315:FreeRTOS\source/tasks.c **** 
1316:FreeRTOS\source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:FreeRTOS\source/tasks.c **** 		have put ourselves to sleep. */
1318:FreeRTOS\source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:FreeRTOS\source/tasks.c **** 		{
1320:FreeRTOS\source/tasks.c **** 			portYIELD_WITHIN_API();
1321:FreeRTOS\source/tasks.c **** 		}
1322:FreeRTOS\source/tasks.c **** 		else
1323:FreeRTOS\source/tasks.c **** 		{
1324:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:FreeRTOS\source/tasks.c **** 		}
1326:FreeRTOS\source/tasks.c **** 	}
1327:FreeRTOS\source/tasks.c **** 
1328:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1329:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1330:FreeRTOS\source/tasks.c **** 
1331:FreeRTOS\source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1332:FreeRTOS\source/tasks.c **** 
1333:FreeRTOS\source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1334:FreeRTOS\source/tasks.c **** 	{
1335:FreeRTOS\source/tasks.c **** 	eTaskState eReturn;
1336:FreeRTOS\source/tasks.c **** 	List_t *pxStateList;
1337:FreeRTOS\source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1338:FreeRTOS\source/tasks.c **** 
1339:FreeRTOS\source/tasks.c **** 		configASSERT( pxTCB );
1340:FreeRTOS\source/tasks.c **** 
1341:FreeRTOS\source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1342:FreeRTOS\source/tasks.c **** 		{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 25


1343:FreeRTOS\source/tasks.c **** 			/* The task calling this function is querying its own state. */
1344:FreeRTOS\source/tasks.c **** 			eReturn = eRunning;
1345:FreeRTOS\source/tasks.c **** 		}
1346:FreeRTOS\source/tasks.c **** 		else
1347:FreeRTOS\source/tasks.c **** 		{
1348:FreeRTOS\source/tasks.c **** 			taskENTER_CRITICAL();
1349:FreeRTOS\source/tasks.c **** 			{
1350:FreeRTOS\source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1351:FreeRTOS\source/tasks.c **** 			}
1352:FreeRTOS\source/tasks.c **** 			taskEXIT_CRITICAL();
1353:FreeRTOS\source/tasks.c **** 
1354:FreeRTOS\source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1355:FreeRTOS\source/tasks.c **** 			{
1356:FreeRTOS\source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1357:FreeRTOS\source/tasks.c **** 				lists. */
1358:FreeRTOS\source/tasks.c **** 				eReturn = eBlocked;
1359:FreeRTOS\source/tasks.c **** 			}
1360:FreeRTOS\source/tasks.c **** 
1361:FreeRTOS\source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1362:FreeRTOS\source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1363:FreeRTOS\source/tasks.c **** 				{
1364:FreeRTOS\source/tasks.c **** 					/* The task being queried is referenced from the suspended
1365:FreeRTOS\source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1366:FreeRTOS\source/tasks.c **** 					indefinitely? */
1367:FreeRTOS\source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1368:FreeRTOS\source/tasks.c **** 					{
1369:FreeRTOS\source/tasks.c **** 						eReturn = eSuspended;
1370:FreeRTOS\source/tasks.c **** 					}
1371:FreeRTOS\source/tasks.c **** 					else
1372:FreeRTOS\source/tasks.c **** 					{
1373:FreeRTOS\source/tasks.c **** 						eReturn = eBlocked;
1374:FreeRTOS\source/tasks.c **** 					}
1375:FreeRTOS\source/tasks.c **** 				}
1376:FreeRTOS\source/tasks.c **** 			#endif
1377:FreeRTOS\source/tasks.c **** 
1378:FreeRTOS\source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1379:FreeRTOS\source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1380:FreeRTOS\source/tasks.c **** 				{
1381:FreeRTOS\source/tasks.c **** 					/* The task being queried is referenced from the deleted
1382:FreeRTOS\source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1383:FreeRTOS\source/tasks.c **** 					all. */
1384:FreeRTOS\source/tasks.c **** 					eReturn = eDeleted;
1385:FreeRTOS\source/tasks.c **** 				}
1386:FreeRTOS\source/tasks.c **** 			#endif
1387:FreeRTOS\source/tasks.c **** 
1388:FreeRTOS\source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1389:FreeRTOS\source/tasks.c **** 			{
1390:FreeRTOS\source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1391:FreeRTOS\source/tasks.c **** 				Ready (including pending ready) state. */
1392:FreeRTOS\source/tasks.c **** 				eReturn = eReady;
1393:FreeRTOS\source/tasks.c **** 			}
1394:FreeRTOS\source/tasks.c **** 		}
1395:FreeRTOS\source/tasks.c **** 
1396:FreeRTOS\source/tasks.c **** 		return eReturn;
1397:FreeRTOS\source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1398:FreeRTOS\source/tasks.c **** 
1399:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 26


1400:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1401:FreeRTOS\source/tasks.c **** 
1402:FreeRTOS\source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1403:FreeRTOS\source/tasks.c **** 
1404:FreeRTOS\source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1405:FreeRTOS\source/tasks.c **** 	{
1406:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
1407:FreeRTOS\source/tasks.c **** 	UBaseType_t uxReturn;
1408:FreeRTOS\source/tasks.c **** 
1409:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
1410:FreeRTOS\source/tasks.c **** 		{
1411:FreeRTOS\source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1412:FreeRTOS\source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1413:FreeRTOS\source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1414:FreeRTOS\source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1415:FreeRTOS\source/tasks.c **** 		}
1416:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
1417:FreeRTOS\source/tasks.c **** 
1418:FreeRTOS\source/tasks.c **** 		return uxReturn;
1419:FreeRTOS\source/tasks.c **** 	}
1420:FreeRTOS\source/tasks.c **** 
1421:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1422:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1423:FreeRTOS\source/tasks.c **** 
1424:FreeRTOS\source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1425:FreeRTOS\source/tasks.c **** 
1426:FreeRTOS\source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1427:FreeRTOS\source/tasks.c **** 	{
1428:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
1429:FreeRTOS\source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1430:FreeRTOS\source/tasks.c **** 
1431:FreeRTOS\source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1432:FreeRTOS\source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1433:FreeRTOS\source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1434:FreeRTOS\source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1435:FreeRTOS\source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1436:FreeRTOS\source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1437:FreeRTOS\source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1438:FreeRTOS\source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1439:FreeRTOS\source/tasks.c **** 		been assigned a priority above the configured maximum system call
1440:FreeRTOS\source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1441:FreeRTOS\source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1442:FreeRTOS\source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1443:FreeRTOS\source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1444:FreeRTOS\source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1445:FreeRTOS\source/tasks.c **** 		provided on the following link:
1446:FreeRTOS\source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1447:FreeRTOS\source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1448:FreeRTOS\source/tasks.c **** 
1449:FreeRTOS\source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1450:FreeRTOS\source/tasks.c **** 		{
1451:FreeRTOS\source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1452:FreeRTOS\source/tasks.c **** 			task that is being queried. */
1453:FreeRTOS\source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1454:FreeRTOS\source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1455:FreeRTOS\source/tasks.c **** 		}
1456:FreeRTOS\source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 27


1457:FreeRTOS\source/tasks.c **** 
1458:FreeRTOS\source/tasks.c **** 		return uxReturn;
1459:FreeRTOS\source/tasks.c **** 	}
1460:FreeRTOS\source/tasks.c **** 
1461:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1462:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1463:FreeRTOS\source/tasks.c **** 
1464:FreeRTOS\source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1465:FreeRTOS\source/tasks.c **** 
1466:FreeRTOS\source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1467:FreeRTOS\source/tasks.c **** 	{
1468:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
1469:FreeRTOS\source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1470:FreeRTOS\source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1471:FreeRTOS\source/tasks.c **** 
1472:FreeRTOS\source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1473:FreeRTOS\source/tasks.c **** 
1474:FreeRTOS\source/tasks.c **** 		/* Ensure the new priority is valid. */
1475:FreeRTOS\source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1476:FreeRTOS\source/tasks.c **** 		{
1477:FreeRTOS\source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1478:FreeRTOS\source/tasks.c **** 		}
1479:FreeRTOS\source/tasks.c **** 		else
1480:FreeRTOS\source/tasks.c **** 		{
1481:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:FreeRTOS\source/tasks.c **** 		}
1483:FreeRTOS\source/tasks.c **** 
1484:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
1485:FreeRTOS\source/tasks.c **** 		{
1486:FreeRTOS\source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1487:FreeRTOS\source/tasks.c **** 			task that is being changed. */
1488:FreeRTOS\source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1489:FreeRTOS\source/tasks.c **** 
1490:FreeRTOS\source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1491:FreeRTOS\source/tasks.c **** 
1492:FreeRTOS\source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1493:FreeRTOS\source/tasks.c **** 			{
1494:FreeRTOS\source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1495:FreeRTOS\source/tasks.c **** 			}
1496:FreeRTOS\source/tasks.c **** 			#else
1497:FreeRTOS\source/tasks.c **** 			{
1498:FreeRTOS\source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1499:FreeRTOS\source/tasks.c **** 			}
1500:FreeRTOS\source/tasks.c **** 			#endif
1501:FreeRTOS\source/tasks.c **** 
1502:FreeRTOS\source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1503:FreeRTOS\source/tasks.c **** 			{
1504:FreeRTOS\source/tasks.c **** 				/* The priority change may have readied a task of higher
1505:FreeRTOS\source/tasks.c **** 				priority than the calling task. */
1506:FreeRTOS\source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1507:FreeRTOS\source/tasks.c **** 				{
1508:FreeRTOS\source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1509:FreeRTOS\source/tasks.c **** 					{
1510:FreeRTOS\source/tasks.c **** 						/* The priority of a task other than the currently
1511:FreeRTOS\source/tasks.c **** 						running task is being raised.  Is the priority being
1512:FreeRTOS\source/tasks.c **** 						raised above that of the running task? */
1513:FreeRTOS\source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 28


1514:FreeRTOS\source/tasks.c **** 						{
1515:FreeRTOS\source/tasks.c **** 							xYieldRequired = pdTRUE;
1516:FreeRTOS\source/tasks.c **** 						}
1517:FreeRTOS\source/tasks.c **** 						else
1518:FreeRTOS\source/tasks.c **** 						{
1519:FreeRTOS\source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1520:FreeRTOS\source/tasks.c **** 						}
1521:FreeRTOS\source/tasks.c **** 					}
1522:FreeRTOS\source/tasks.c **** 					else
1523:FreeRTOS\source/tasks.c **** 					{
1524:FreeRTOS\source/tasks.c **** 						/* The priority of the running task is being raised,
1525:FreeRTOS\source/tasks.c **** 						but the running task must already be the highest
1526:FreeRTOS\source/tasks.c **** 						priority task able to run so no yield is required. */
1527:FreeRTOS\source/tasks.c **** 					}
1528:FreeRTOS\source/tasks.c **** 				}
1529:FreeRTOS\source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1530:FreeRTOS\source/tasks.c **** 				{
1531:FreeRTOS\source/tasks.c **** 					/* Setting the priority of the running task down means
1532:FreeRTOS\source/tasks.c **** 					there may now be another task of higher priority that
1533:FreeRTOS\source/tasks.c **** 					is ready to execute. */
1534:FreeRTOS\source/tasks.c **** 					xYieldRequired = pdTRUE;
1535:FreeRTOS\source/tasks.c **** 				}
1536:FreeRTOS\source/tasks.c **** 				else
1537:FreeRTOS\source/tasks.c **** 				{
1538:FreeRTOS\source/tasks.c **** 					/* Setting the priority of any other task down does not
1539:FreeRTOS\source/tasks.c **** 					require a yield as the running task must be above the
1540:FreeRTOS\source/tasks.c **** 					new priority of the task being modified. */
1541:FreeRTOS\source/tasks.c **** 				}
1542:FreeRTOS\source/tasks.c **** 
1543:FreeRTOS\source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1544:FreeRTOS\source/tasks.c **** 				before its uxPriority member is changed so the
1545:FreeRTOS\source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1546:FreeRTOS\source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1547:FreeRTOS\source/tasks.c **** 
1548:FreeRTOS\source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:FreeRTOS\source/tasks.c **** 				{
1550:FreeRTOS\source/tasks.c **** 					/* Only change the priority being used if the task is not
1551:FreeRTOS\source/tasks.c **** 					currently using an inherited priority. */
1552:FreeRTOS\source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1553:FreeRTOS\source/tasks.c **** 					{
1554:FreeRTOS\source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1555:FreeRTOS\source/tasks.c **** 					}
1556:FreeRTOS\source/tasks.c **** 					else
1557:FreeRTOS\source/tasks.c **** 					{
1558:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1559:FreeRTOS\source/tasks.c **** 					}
1560:FreeRTOS\source/tasks.c **** 
1561:FreeRTOS\source/tasks.c **** 					/* The base priority gets set whatever. */
1562:FreeRTOS\source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1563:FreeRTOS\source/tasks.c **** 				}
1564:FreeRTOS\source/tasks.c **** 				#else
1565:FreeRTOS\source/tasks.c **** 				{
1566:FreeRTOS\source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1567:FreeRTOS\source/tasks.c **** 				}
1568:FreeRTOS\source/tasks.c **** 				#endif
1569:FreeRTOS\source/tasks.c **** 
1570:FreeRTOS\source/tasks.c **** 				/* Only reset the event list item value if the value is not
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 29


1571:FreeRTOS\source/tasks.c **** 				being used for anything else. */
1572:FreeRTOS\source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1573:FreeRTOS\source/tasks.c **** 				{
1574:FreeRTOS\source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1575:FreeRTOS\source/tasks.c **** 				}
1576:FreeRTOS\source/tasks.c **** 				else
1577:FreeRTOS\source/tasks.c **** 				{
1578:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1579:FreeRTOS\source/tasks.c **** 				}
1580:FreeRTOS\source/tasks.c **** 
1581:FreeRTOS\source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1582:FreeRTOS\source/tasks.c **** 				nothing more than change its priority variable. However, if
1583:FreeRTOS\source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1584:FreeRTOS\source/tasks.c **** 				in the list appropriate to its new priority. */
1585:FreeRTOS\source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1586:FreeRTOS\source/tasks.c **** 				{
1587:FreeRTOS\source/tasks.c **** 					/* The task is currently in its ready list - remove before
1588:FreeRTOS\source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1589:FreeRTOS\source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1590:FreeRTOS\source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1591:FreeRTOS\source/tasks.c **** 					{
1592:FreeRTOS\source/tasks.c **** 						/* It is known that the task is in its ready list so
1593:FreeRTOS\source/tasks.c **** 						there is no need to check again and the port level
1594:FreeRTOS\source/tasks.c **** 						reset macro can be called directly. */
1595:FreeRTOS\source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1596:FreeRTOS\source/tasks.c **** 					}
1597:FreeRTOS\source/tasks.c **** 					else
1598:FreeRTOS\source/tasks.c **** 					{
1599:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1600:FreeRTOS\source/tasks.c **** 					}
1601:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1602:FreeRTOS\source/tasks.c **** 				}
1603:FreeRTOS\source/tasks.c **** 				else
1604:FreeRTOS\source/tasks.c **** 				{
1605:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1606:FreeRTOS\source/tasks.c **** 				}
1607:FreeRTOS\source/tasks.c **** 
1608:FreeRTOS\source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1609:FreeRTOS\source/tasks.c **** 				{
1610:FreeRTOS\source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1611:FreeRTOS\source/tasks.c **** 				}
1612:FreeRTOS\source/tasks.c **** 				else
1613:FreeRTOS\source/tasks.c **** 				{
1614:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1615:FreeRTOS\source/tasks.c **** 				}
1616:FreeRTOS\source/tasks.c **** 
1617:FreeRTOS\source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1618:FreeRTOS\source/tasks.c **** 				optimised task selection is not being used. */
1619:FreeRTOS\source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1620:FreeRTOS\source/tasks.c **** 			}
1621:FreeRTOS\source/tasks.c **** 		}
1622:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
1623:FreeRTOS\source/tasks.c **** 	}
1624:FreeRTOS\source/tasks.c **** 
1625:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1626:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1627:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 30


1628:FreeRTOS\source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1629:FreeRTOS\source/tasks.c **** 
1630:FreeRTOS\source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1631:FreeRTOS\source/tasks.c **** 	{
1632:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
1633:FreeRTOS\source/tasks.c **** 
1634:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
1635:FreeRTOS\source/tasks.c **** 		{
1636:FreeRTOS\source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1637:FreeRTOS\source/tasks.c **** 			being suspended. */
1638:FreeRTOS\source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1639:FreeRTOS\source/tasks.c **** 
1640:FreeRTOS\source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1641:FreeRTOS\source/tasks.c **** 
1642:FreeRTOS\source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1643:FreeRTOS\source/tasks.c **** 			suspended list. */
1644:FreeRTOS\source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1645:FreeRTOS\source/tasks.c **** 			{
1646:FreeRTOS\source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1647:FreeRTOS\source/tasks.c **** 			}
1648:FreeRTOS\source/tasks.c **** 			else
1649:FreeRTOS\source/tasks.c **** 			{
1650:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1651:FreeRTOS\source/tasks.c **** 			}
1652:FreeRTOS\source/tasks.c **** 
1653:FreeRTOS\source/tasks.c **** 			/* Is the task waiting on an event also? */
1654:FreeRTOS\source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1655:FreeRTOS\source/tasks.c **** 			{
1656:FreeRTOS\source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1657:FreeRTOS\source/tasks.c **** 			}
1658:FreeRTOS\source/tasks.c **** 			else
1659:FreeRTOS\source/tasks.c **** 			{
1660:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1661:FreeRTOS\source/tasks.c **** 			}
1662:FreeRTOS\source/tasks.c **** 
1663:FreeRTOS\source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1664:FreeRTOS\source/tasks.c **** 
1665:FreeRTOS\source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1666:FreeRTOS\source/tasks.c **** 			{
1667:FreeRTOS\source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1668:FreeRTOS\source/tasks.c **** 				{
1669:FreeRTOS\source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1670:FreeRTOS\source/tasks.c **** 					now suspended, so no notification was received. */
1671:FreeRTOS\source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1672:FreeRTOS\source/tasks.c **** 				}
1673:FreeRTOS\source/tasks.c **** 			}
1674:FreeRTOS\source/tasks.c **** 			#endif
1675:FreeRTOS\source/tasks.c **** 		}
1676:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
1677:FreeRTOS\source/tasks.c **** 
1678:FreeRTOS\source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1679:FreeRTOS\source/tasks.c **** 		{
1680:FreeRTOS\source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1681:FreeRTOS\source/tasks.c **** 			task that is now in the Suspended state. */
1682:FreeRTOS\source/tasks.c **** 			taskENTER_CRITICAL();
1683:FreeRTOS\source/tasks.c **** 			{
1684:FreeRTOS\source/tasks.c **** 				prvResetNextTaskUnblockTime();
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 31


1685:FreeRTOS\source/tasks.c **** 			}
1686:FreeRTOS\source/tasks.c **** 			taskEXIT_CRITICAL();
1687:FreeRTOS\source/tasks.c **** 		}
1688:FreeRTOS\source/tasks.c **** 		else
1689:FreeRTOS\source/tasks.c **** 		{
1690:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1691:FreeRTOS\source/tasks.c **** 		}
1692:FreeRTOS\source/tasks.c **** 
1693:FreeRTOS\source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1694:FreeRTOS\source/tasks.c **** 		{
1695:FreeRTOS\source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1696:FreeRTOS\source/tasks.c **** 			{
1697:FreeRTOS\source/tasks.c **** 				/* The current task has just been suspended. */
1698:FreeRTOS\source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1699:FreeRTOS\source/tasks.c **** 				portYIELD_WITHIN_API();
1700:FreeRTOS\source/tasks.c **** 			}
1701:FreeRTOS\source/tasks.c **** 			else
1702:FreeRTOS\source/tasks.c **** 			{
1703:FreeRTOS\source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1704:FreeRTOS\source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1705:FreeRTOS\source/tasks.c **** 				must be adjusted to point to a different task. */
1706:FreeRTOS\source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1707:FreeRTOS\source/tasks.c **** 				{
1708:FreeRTOS\source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1709:FreeRTOS\source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1710:FreeRTOS\source/tasks.c **** 					be set to point to it no matter what its relative priority
1711:FreeRTOS\source/tasks.c **** 					is. */
1712:FreeRTOS\source/tasks.c **** 					pxCurrentTCB = NULL;
1713:FreeRTOS\source/tasks.c **** 				}
1714:FreeRTOS\source/tasks.c **** 				else
1715:FreeRTOS\source/tasks.c **** 				{
1716:FreeRTOS\source/tasks.c **** 					vTaskSwitchContext();
1717:FreeRTOS\source/tasks.c **** 				}
1718:FreeRTOS\source/tasks.c **** 			}
1719:FreeRTOS\source/tasks.c **** 		}
1720:FreeRTOS\source/tasks.c **** 		else
1721:FreeRTOS\source/tasks.c **** 		{
1722:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1723:FreeRTOS\source/tasks.c **** 		}
1724:FreeRTOS\source/tasks.c **** 	}
1725:FreeRTOS\source/tasks.c **** 
1726:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1727:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1728:FreeRTOS\source/tasks.c **** 
1729:FreeRTOS\source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1730:FreeRTOS\source/tasks.c **** 
1731:FreeRTOS\source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1732:FreeRTOS\source/tasks.c **** 	{
  27              		.loc 1 1732 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1733:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1734:FreeRTOS\source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1735:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 32


1736:FreeRTOS\source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1737:FreeRTOS\source/tasks.c **** 		section. */
1738:FreeRTOS\source/tasks.c **** 
1739:FreeRTOS\source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1740:FreeRTOS\source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1740 0
  34 0000 0028     		cmp	r0, #0
  35 0002 01D1     		bne	.L2
  36              		.loc 1 1740 0 is_stmt 0 discriminator 1
  37              		.syntax divided
  38              	@ 1740 "FreeRTOS\source\tasks.c" 1
  39 0004 72B6     		 cpsid i 
  40              	@ 0 "" 2
  41              		.thumb
  42              		.syntax unified
  43              	.L3:
  44 0006 FEE7     		b	.L3
  45              	.L2:
1741:FreeRTOS\source/tasks.c **** 
1742:FreeRTOS\source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1743:FreeRTOS\source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  46              		.loc 1 1743 0 is_stmt 1
  47 0008 0D4B     		ldr	r3, .L12
  48 000a 4269     		ldr	r2, [r0, #20]
  49 000c 9A42     		cmp	r2, r3
  50 000e 01D1     		bne	.L7
  51 0010 0123     		movs	r3, #1
  52 0012 00E0     		b	.L4
  53              	.L7:
  54 0014 0023     		movs	r3, #0
  55              	.L4:
  56              		.loc 1 1743 0 is_stmt 0 discriminator 4
  57 0016 002B     		cmp	r3, #0
  58 0018 0BD0     		beq	.L8
1744:FreeRTOS\source/tasks.c **** 		{
1745:FreeRTOS\source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1746:FreeRTOS\source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  59              		.loc 1 1746 0 is_stmt 1
  60 001a 816A     		ldr	r1, [r0, #40]
  61 001c 084A     		ldr	r2, .L12
  62 001e 1432     		adds	r2, r2, #20
  63 0020 9142     		cmp	r1, r2
  64 0022 08D0     		beq	.L9
1747:FreeRTOS\source/tasks.c **** 			{
1748:FreeRTOS\source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1749:FreeRTOS\source/tasks.c **** 				state, or because is is blocked with no timeout? */
1750:FreeRTOS\source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  65              		.loc 1 1750 0
  66 0024 0029     		cmp	r1, #0
  67 0026 00D0     		beq	.L6
  68 0028 0023     		movs	r3, #0
  69              	.L6:
  70              		.loc 1 1750 0 is_stmt 0 discriminator 4
  71 002a 002B     		cmp	r3, #0
  72 002c 05D1     		bne	.L11
1733:FreeRTOS\source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  73              		.loc 1 1733 0 is_stmt 1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 33


  74 002e 0020     		movs	r0, #0
  75              	.LVL1:
  76 0030 04E0     		b	.L5
  77              	.LVL2:
  78              	.L8:
  79 0032 0020     		movs	r0, #0
  80              	.LVL3:
  81 0034 02E0     		b	.L5
  82              	.LVL4:
  83              	.L9:
  84 0036 0020     		movs	r0, #0
  85              	.LVL5:
  86 0038 00E0     		b	.L5
  87              	.LVL6:
  88              	.L11:
1751:FreeRTOS\source/tasks.c **** 				{
1752:FreeRTOS\source/tasks.c **** 					xReturn = pdTRUE;
  89              		.loc 1 1752 0
  90 003a 0120     		movs	r0, #1
  91              	.LVL7:
  92              	.L5:
1753:FreeRTOS\source/tasks.c **** 				}
1754:FreeRTOS\source/tasks.c **** 				else
1755:FreeRTOS\source/tasks.c **** 				{
1756:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1757:FreeRTOS\source/tasks.c **** 				}
1758:FreeRTOS\source/tasks.c **** 			}
1759:FreeRTOS\source/tasks.c **** 			else
1760:FreeRTOS\source/tasks.c **** 			{
1761:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1762:FreeRTOS\source/tasks.c **** 			}
1763:FreeRTOS\source/tasks.c **** 		}
1764:FreeRTOS\source/tasks.c **** 		else
1765:FreeRTOS\source/tasks.c **** 		{
1766:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1767:FreeRTOS\source/tasks.c **** 		}
1768:FreeRTOS\source/tasks.c **** 
1769:FreeRTOS\source/tasks.c **** 		return xReturn;
1770:FreeRTOS\source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  93              		.loc 1 1770 0
  94              		@ sp needed
  95 003c 7047     		bx	lr
  96              	.L13:
  97 003e C046     		.align	2
  98              	.L12:
  99 0040 00000000 		.word	.LANCHOR0
 100              		.cfi_endproc
 101              	.LFE42:
 102              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 103              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 104              		.align	2
 105              		.code	16
 106              		.thumb_func
 107              		.type	prvTaskCheckFreeStackSpace, %function
 108              	prvTaskCheckFreeStackSpace:
 109              	.LFB68:
1771:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 34


1772:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1773:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1774:FreeRTOS\source/tasks.c **** 
1775:FreeRTOS\source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1776:FreeRTOS\source/tasks.c **** 
1777:FreeRTOS\source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1778:FreeRTOS\source/tasks.c **** 	{
1779:FreeRTOS\source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1780:FreeRTOS\source/tasks.c **** 
1781:FreeRTOS\source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1782:FreeRTOS\source/tasks.c **** 		configASSERT( xTaskToResume );
1783:FreeRTOS\source/tasks.c **** 
1784:FreeRTOS\source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1785:FreeRTOS\source/tasks.c **** 		currently executing task. */
1786:FreeRTOS\source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1787:FreeRTOS\source/tasks.c **** 		{
1788:FreeRTOS\source/tasks.c **** 			taskENTER_CRITICAL();
1789:FreeRTOS\source/tasks.c **** 			{
1790:FreeRTOS\source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1791:FreeRTOS\source/tasks.c **** 				{
1792:FreeRTOS\source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1793:FreeRTOS\source/tasks.c **** 
1794:FreeRTOS\source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1795:FreeRTOS\source/tasks.c **** 					suspended because this is inside a critical section. */
1796:FreeRTOS\source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1797:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1798:FreeRTOS\source/tasks.c **** 
1799:FreeRTOS\source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1800:FreeRTOS\source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1801:FreeRTOS\source/tasks.c **** 					{
1802:FreeRTOS\source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1803:FreeRTOS\source/tasks.c **** 						but will leave the lists in the correct state for the
1804:FreeRTOS\source/tasks.c **** 						next yield. */
1805:FreeRTOS\source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1806:FreeRTOS\source/tasks.c **** 					}
1807:FreeRTOS\source/tasks.c **** 					else
1808:FreeRTOS\source/tasks.c **** 					{
1809:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1810:FreeRTOS\source/tasks.c **** 					}
1811:FreeRTOS\source/tasks.c **** 				}
1812:FreeRTOS\source/tasks.c **** 				else
1813:FreeRTOS\source/tasks.c **** 				{
1814:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1815:FreeRTOS\source/tasks.c **** 				}
1816:FreeRTOS\source/tasks.c **** 			}
1817:FreeRTOS\source/tasks.c **** 			taskEXIT_CRITICAL();
1818:FreeRTOS\source/tasks.c **** 		}
1819:FreeRTOS\source/tasks.c **** 		else
1820:FreeRTOS\source/tasks.c **** 		{
1821:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1822:FreeRTOS\source/tasks.c **** 		}
1823:FreeRTOS\source/tasks.c **** 	}
1824:FreeRTOS\source/tasks.c **** 
1825:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1826:FreeRTOS\source/tasks.c **** 
1827:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1828:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 35


1829:FreeRTOS\source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1830:FreeRTOS\source/tasks.c **** 
1831:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1832:FreeRTOS\source/tasks.c **** 	{
1833:FreeRTOS\source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1834:FreeRTOS\source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1835:FreeRTOS\source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1836:FreeRTOS\source/tasks.c **** 
1837:FreeRTOS\source/tasks.c **** 		configASSERT( xTaskToResume );
1838:FreeRTOS\source/tasks.c **** 
1839:FreeRTOS\source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1840:FreeRTOS\source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1841:FreeRTOS\source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1842:FreeRTOS\source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1843:FreeRTOS\source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1844:FreeRTOS\source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1845:FreeRTOS\source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1846:FreeRTOS\source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1847:FreeRTOS\source/tasks.c **** 		been assigned a priority above the configured maximum system call
1848:FreeRTOS\source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1849:FreeRTOS\source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1850:FreeRTOS\source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1851:FreeRTOS\source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1852:FreeRTOS\source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1853:FreeRTOS\source/tasks.c **** 		provided on the following link:
1854:FreeRTOS\source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1855:FreeRTOS\source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1856:FreeRTOS\source/tasks.c **** 
1857:FreeRTOS\source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1858:FreeRTOS\source/tasks.c **** 		{
1859:FreeRTOS\source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1860:FreeRTOS\source/tasks.c **** 			{
1861:FreeRTOS\source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1862:FreeRTOS\source/tasks.c **** 
1863:FreeRTOS\source/tasks.c **** 				/* Check the ready lists can be accessed. */
1864:FreeRTOS\source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1865:FreeRTOS\source/tasks.c **** 				{
1866:FreeRTOS\source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1867:FreeRTOS\source/tasks.c **** 					suspended list to the ready list directly. */
1868:FreeRTOS\source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1869:FreeRTOS\source/tasks.c **** 					{
1870:FreeRTOS\source/tasks.c **** 						xYieldRequired = pdTRUE;
1871:FreeRTOS\source/tasks.c **** 					}
1872:FreeRTOS\source/tasks.c **** 					else
1873:FreeRTOS\source/tasks.c **** 					{
1874:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1875:FreeRTOS\source/tasks.c **** 					}
1876:FreeRTOS\source/tasks.c **** 
1877:FreeRTOS\source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1878:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1879:FreeRTOS\source/tasks.c **** 				}
1880:FreeRTOS\source/tasks.c **** 				else
1881:FreeRTOS\source/tasks.c **** 				{
1882:FreeRTOS\source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1883:FreeRTOS\source/tasks.c **** 					is held in the pending ready list until the scheduler is
1884:FreeRTOS\source/tasks.c **** 					unsuspended. */
1885:FreeRTOS\source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 36


1886:FreeRTOS\source/tasks.c **** 				}
1887:FreeRTOS\source/tasks.c **** 			}
1888:FreeRTOS\source/tasks.c **** 			else
1889:FreeRTOS\source/tasks.c **** 			{
1890:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1891:FreeRTOS\source/tasks.c **** 			}
1892:FreeRTOS\source/tasks.c **** 		}
1893:FreeRTOS\source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1894:FreeRTOS\source/tasks.c **** 
1895:FreeRTOS\source/tasks.c **** 		return xYieldRequired;
1896:FreeRTOS\source/tasks.c **** 	}
1897:FreeRTOS\source/tasks.c **** 
1898:FreeRTOS\source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1899:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
1900:FreeRTOS\source/tasks.c **** 
1901:FreeRTOS\source/tasks.c **** void vTaskStartScheduler( void )
1902:FreeRTOS\source/tasks.c **** {
1903:FreeRTOS\source/tasks.c **** BaseType_t xReturn;
1904:FreeRTOS\source/tasks.c **** 
1905:FreeRTOS\source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1906:FreeRTOS\source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1907:FreeRTOS\source/tasks.c **** 	{
1908:FreeRTOS\source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1909:FreeRTOS\source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1910:FreeRTOS\source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1911:FreeRTOS\source/tasks.c **** 
1912:FreeRTOS\source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1913:FreeRTOS\source/tasks.c **** 		address of the RAM then create the idle task. */
1914:FreeRTOS\source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1915:FreeRTOS\source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1916:FreeRTOS\source/tasks.c **** 												configIDLE_TASK_NAME,
1917:FreeRTOS\source/tasks.c **** 												ulIdleTaskStackSize,
1918:FreeRTOS\source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1919:FreeRTOS\source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1920:FreeRTOS\source/tasks.c **** 												pxIdleTaskStackBuffer,
1921:FreeRTOS\source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1922:FreeRTOS\source/tasks.c **** 
1923:FreeRTOS\source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1924:FreeRTOS\source/tasks.c **** 		{
1925:FreeRTOS\source/tasks.c **** 			xReturn = pdPASS;
1926:FreeRTOS\source/tasks.c **** 		}
1927:FreeRTOS\source/tasks.c **** 		else
1928:FreeRTOS\source/tasks.c **** 		{
1929:FreeRTOS\source/tasks.c **** 			xReturn = pdFAIL;
1930:FreeRTOS\source/tasks.c **** 		}
1931:FreeRTOS\source/tasks.c **** 	}
1932:FreeRTOS\source/tasks.c **** 	#else
1933:FreeRTOS\source/tasks.c **** 	{
1934:FreeRTOS\source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1935:FreeRTOS\source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1936:FreeRTOS\source/tasks.c **** 								configIDLE_TASK_NAME,
1937:FreeRTOS\source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1938:FreeRTOS\source/tasks.c **** 								( void * ) NULL,
1939:FreeRTOS\source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1940:FreeRTOS\source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1941:FreeRTOS\source/tasks.c **** 	}
1942:FreeRTOS\source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 37


1943:FreeRTOS\source/tasks.c **** 
1944:FreeRTOS\source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1945:FreeRTOS\source/tasks.c **** 	{
1946:FreeRTOS\source/tasks.c **** 		if( xReturn == pdPASS )
1947:FreeRTOS\source/tasks.c **** 		{
1948:FreeRTOS\source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1949:FreeRTOS\source/tasks.c **** 		}
1950:FreeRTOS\source/tasks.c **** 		else
1951:FreeRTOS\source/tasks.c **** 		{
1952:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1953:FreeRTOS\source/tasks.c **** 		}
1954:FreeRTOS\source/tasks.c **** 	}
1955:FreeRTOS\source/tasks.c **** 	#endif /* configUSE_TIMERS */
1956:FreeRTOS\source/tasks.c **** 
1957:FreeRTOS\source/tasks.c **** 	if( xReturn == pdPASS )
1958:FreeRTOS\source/tasks.c **** 	{
1959:FreeRTOS\source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1960:FreeRTOS\source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1961:FreeRTOS\source/tasks.c **** 		the only macro called by the function. */
1962:FreeRTOS\source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1963:FreeRTOS\source/tasks.c **** 		{
1964:FreeRTOS\source/tasks.c **** 			freertos_tasks_c_additions_init();
1965:FreeRTOS\source/tasks.c **** 		}
1966:FreeRTOS\source/tasks.c **** 		#endif
1967:FreeRTOS\source/tasks.c **** 
1968:FreeRTOS\source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1969:FreeRTOS\source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1970:FreeRTOS\source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1971:FreeRTOS\source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1972:FreeRTOS\source/tasks.c **** 		starts to run. */
1973:FreeRTOS\source/tasks.c **** 		portDISABLE_INTERRUPTS();
1974:FreeRTOS\source/tasks.c **** 
1975:FreeRTOS\source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1976:FreeRTOS\source/tasks.c **** 		{
1977:FreeRTOS\source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1978:FreeRTOS\source/tasks.c **** 			structure specific to the task that will run first. */
1979:FreeRTOS\source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1980:FreeRTOS\source/tasks.c **** 		}
1981:FreeRTOS\source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1982:FreeRTOS\source/tasks.c **** 
1983:FreeRTOS\source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1984:FreeRTOS\source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1985:FreeRTOS\source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1986:FreeRTOS\source/tasks.c **** 
1987:FreeRTOS\source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1988:FreeRTOS\source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1989:FreeRTOS\source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1990:FreeRTOS\source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1991:FreeRTOS\source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1992:FreeRTOS\source/tasks.c **** 		FreeRTOSConfig.h file. */
1993:FreeRTOS\source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1994:FreeRTOS\source/tasks.c **** 
1995:FreeRTOS\source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1996:FreeRTOS\source/tasks.c **** 		portable interface. */
1997:FreeRTOS\source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1998:FreeRTOS\source/tasks.c **** 		{
1999:FreeRTOS\source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 38


2000:FreeRTOS\source/tasks.c **** 			function will not return. */
2001:FreeRTOS\source/tasks.c **** 		}
2002:FreeRTOS\source/tasks.c **** 		else
2003:FreeRTOS\source/tasks.c **** 		{
2004:FreeRTOS\source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2005:FreeRTOS\source/tasks.c **** 		}
2006:FreeRTOS\source/tasks.c **** 	}
2007:FreeRTOS\source/tasks.c **** 	else
2008:FreeRTOS\source/tasks.c **** 	{
2009:FreeRTOS\source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2010:FreeRTOS\source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2011:FreeRTOS\source/tasks.c **** 		or the timer task. */
2012:FreeRTOS\source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2013:FreeRTOS\source/tasks.c **** 	}
2014:FreeRTOS\source/tasks.c **** 
2015:FreeRTOS\source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2016:FreeRTOS\source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2017:FreeRTOS\source/tasks.c **** 	( void ) xIdleTaskHandle;
2018:FreeRTOS\source/tasks.c **** }
2019:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2020:FreeRTOS\source/tasks.c **** 
2021:FreeRTOS\source/tasks.c **** void vTaskEndScheduler( void )
2022:FreeRTOS\source/tasks.c **** {
2023:FreeRTOS\source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2024:FreeRTOS\source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2025:FreeRTOS\source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2026:FreeRTOS\source/tasks.c **** 	portDISABLE_INTERRUPTS();
2027:FreeRTOS\source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2028:FreeRTOS\source/tasks.c **** 	vPortEndScheduler();
2029:FreeRTOS\source/tasks.c **** }
2030:FreeRTOS\source/tasks.c **** /*----------------------------------------------------------*/
2031:FreeRTOS\source/tasks.c **** 
2032:FreeRTOS\source/tasks.c **** void vTaskSuspendAll( void )
2033:FreeRTOS\source/tasks.c **** {
2034:FreeRTOS\source/tasks.c **** 	/* A critical section is not required as the variable is of type
2035:FreeRTOS\source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2036:FreeRTOS\source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2037:FreeRTOS\source/tasks.c **** 	http://goo.gl/wu4acr */
2038:FreeRTOS\source/tasks.c **** 	++uxSchedulerSuspended;
2039:FreeRTOS\source/tasks.c **** }
2040:FreeRTOS\source/tasks.c **** /*----------------------------------------------------------*/
2041:FreeRTOS\source/tasks.c **** 
2042:FreeRTOS\source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2043:FreeRTOS\source/tasks.c **** 
2044:FreeRTOS\source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2045:FreeRTOS\source/tasks.c **** 	{
2046:FreeRTOS\source/tasks.c **** 	TickType_t xReturn;
2047:FreeRTOS\source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2048:FreeRTOS\source/tasks.c **** 
2049:FreeRTOS\source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2050:FreeRTOS\source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2051:FreeRTOS\source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2052:FreeRTOS\source/tasks.c **** 		running. */
2053:FreeRTOS\source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2054:FreeRTOS\source/tasks.c **** 		{
2055:FreeRTOS\source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2056:FreeRTOS\source/tasks.c **** 			{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 39


2057:FreeRTOS\source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2058:FreeRTOS\source/tasks.c **** 			}
2059:FreeRTOS\source/tasks.c **** 		}
2060:FreeRTOS\source/tasks.c **** 		#else
2061:FreeRTOS\source/tasks.c **** 		{
2062:FreeRTOS\source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2063:FreeRTOS\source/tasks.c **** 
2064:FreeRTOS\source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2065:FreeRTOS\source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2066:FreeRTOS\source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2067:FreeRTOS\source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2068:FreeRTOS\source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2069:FreeRTOS\source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2070:FreeRTOS\source/tasks.c **** 			{
2071:FreeRTOS\source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2072:FreeRTOS\source/tasks.c **** 			}
2073:FreeRTOS\source/tasks.c **** 		}
2074:FreeRTOS\source/tasks.c **** 		#endif
2075:FreeRTOS\source/tasks.c **** 
2076:FreeRTOS\source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2077:FreeRTOS\source/tasks.c **** 		{
2078:FreeRTOS\source/tasks.c **** 			xReturn = 0;
2079:FreeRTOS\source/tasks.c **** 		}
2080:FreeRTOS\source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2081:FreeRTOS\source/tasks.c **** 		{
2082:FreeRTOS\source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2083:FreeRTOS\source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2084:FreeRTOS\source/tasks.c **** 			processed. */
2085:FreeRTOS\source/tasks.c **** 			xReturn = 0;
2086:FreeRTOS\source/tasks.c **** 		}
2087:FreeRTOS\source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2088:FreeRTOS\source/tasks.c **** 		{
2089:FreeRTOS\source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2090:FreeRTOS\source/tasks.c **** 			idle priority.  This path can only be reached if
2091:FreeRTOS\source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2092:FreeRTOS\source/tasks.c **** 			xReturn = 0;
2093:FreeRTOS\source/tasks.c **** 		}
2094:FreeRTOS\source/tasks.c **** 		else
2095:FreeRTOS\source/tasks.c **** 		{
2096:FreeRTOS\source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2097:FreeRTOS\source/tasks.c **** 		}
2098:FreeRTOS\source/tasks.c **** 
2099:FreeRTOS\source/tasks.c **** 		return xReturn;
2100:FreeRTOS\source/tasks.c **** 	}
2101:FreeRTOS\source/tasks.c **** 
2102:FreeRTOS\source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2103:FreeRTOS\source/tasks.c **** /*----------------------------------------------------------*/
2104:FreeRTOS\source/tasks.c **** 
2105:FreeRTOS\source/tasks.c **** BaseType_t xTaskResumeAll( void )
2106:FreeRTOS\source/tasks.c **** {
2107:FreeRTOS\source/tasks.c **** TCB_t *pxTCB = NULL;
2108:FreeRTOS\source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2109:FreeRTOS\source/tasks.c **** 
2110:FreeRTOS\source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2111:FreeRTOS\source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2112:FreeRTOS\source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2113:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 40


2114:FreeRTOS\source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2115:FreeRTOS\source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2116:FreeRTOS\source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2117:FreeRTOS\source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2118:FreeRTOS\source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2119:FreeRTOS\source/tasks.c **** 	taskENTER_CRITICAL();
2120:FreeRTOS\source/tasks.c **** 	{
2121:FreeRTOS\source/tasks.c **** 		--uxSchedulerSuspended;
2122:FreeRTOS\source/tasks.c **** 
2123:FreeRTOS\source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2124:FreeRTOS\source/tasks.c **** 		{
2125:FreeRTOS\source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2126:FreeRTOS\source/tasks.c **** 			{
2127:FreeRTOS\source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2128:FreeRTOS\source/tasks.c **** 				appropriate ready list. */
2129:FreeRTOS\source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2130:FreeRTOS\source/tasks.c **** 				{
2131:FreeRTOS\source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2132:FreeRTOS\source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2133:FreeRTOS\source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2134:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2135:FreeRTOS\source/tasks.c **** 
2136:FreeRTOS\source/tasks.c **** 					/* If the moved task has a priority higher than the current
2137:FreeRTOS\source/tasks.c **** 					task then a yield must be performed. */
2138:FreeRTOS\source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2139:FreeRTOS\source/tasks.c **** 					{
2140:FreeRTOS\source/tasks.c **** 						xYieldPending = pdTRUE;
2141:FreeRTOS\source/tasks.c **** 					}
2142:FreeRTOS\source/tasks.c **** 					else
2143:FreeRTOS\source/tasks.c **** 					{
2144:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2145:FreeRTOS\source/tasks.c **** 					}
2146:FreeRTOS\source/tasks.c **** 				}
2147:FreeRTOS\source/tasks.c **** 
2148:FreeRTOS\source/tasks.c **** 				if( pxTCB != NULL )
2149:FreeRTOS\source/tasks.c **** 				{
2150:FreeRTOS\source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2151:FreeRTOS\source/tasks.c **** 					which may have prevented the next unblock time from being
2152:FreeRTOS\source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2153:FreeRTOS\source/tasks.c **** 					important for low power tickless implementations, where
2154:FreeRTOS\source/tasks.c **** 					this can prevent an unnecessary exit from low power
2155:FreeRTOS\source/tasks.c **** 					state. */
2156:FreeRTOS\source/tasks.c **** 					prvResetNextTaskUnblockTime();
2157:FreeRTOS\source/tasks.c **** 				}
2158:FreeRTOS\source/tasks.c **** 
2159:FreeRTOS\source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2160:FreeRTOS\source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2161:FreeRTOS\source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2162:FreeRTOS\source/tasks.c **** 				time. */
2163:FreeRTOS\source/tasks.c **** 				{
2164:FreeRTOS\source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2165:FreeRTOS\source/tasks.c **** 
2166:FreeRTOS\source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2167:FreeRTOS\source/tasks.c **** 					{
2168:FreeRTOS\source/tasks.c **** 						do
2169:FreeRTOS\source/tasks.c **** 						{
2170:FreeRTOS\source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 41


2171:FreeRTOS\source/tasks.c **** 							{
2172:FreeRTOS\source/tasks.c **** 								xYieldPending = pdTRUE;
2173:FreeRTOS\source/tasks.c **** 							}
2174:FreeRTOS\source/tasks.c **** 							else
2175:FreeRTOS\source/tasks.c **** 							{
2176:FreeRTOS\source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2177:FreeRTOS\source/tasks.c **** 							}
2178:FreeRTOS\source/tasks.c **** 							--uxPendedCounts;
2179:FreeRTOS\source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2180:FreeRTOS\source/tasks.c **** 
2181:FreeRTOS\source/tasks.c **** 						uxPendedTicks = 0;
2182:FreeRTOS\source/tasks.c **** 					}
2183:FreeRTOS\source/tasks.c **** 					else
2184:FreeRTOS\source/tasks.c **** 					{
2185:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2186:FreeRTOS\source/tasks.c **** 					}
2187:FreeRTOS\source/tasks.c **** 				}
2188:FreeRTOS\source/tasks.c **** 
2189:FreeRTOS\source/tasks.c **** 				if( xYieldPending != pdFALSE )
2190:FreeRTOS\source/tasks.c **** 				{
2191:FreeRTOS\source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2192:FreeRTOS\source/tasks.c **** 					{
2193:FreeRTOS\source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2194:FreeRTOS\source/tasks.c **** 					}
2195:FreeRTOS\source/tasks.c **** 					#endif
2196:FreeRTOS\source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2197:FreeRTOS\source/tasks.c **** 				}
2198:FreeRTOS\source/tasks.c **** 				else
2199:FreeRTOS\source/tasks.c **** 				{
2200:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2201:FreeRTOS\source/tasks.c **** 				}
2202:FreeRTOS\source/tasks.c **** 			}
2203:FreeRTOS\source/tasks.c **** 		}
2204:FreeRTOS\source/tasks.c **** 		else
2205:FreeRTOS\source/tasks.c **** 		{
2206:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2207:FreeRTOS\source/tasks.c **** 		}
2208:FreeRTOS\source/tasks.c **** 	}
2209:FreeRTOS\source/tasks.c **** 	taskEXIT_CRITICAL();
2210:FreeRTOS\source/tasks.c **** 
2211:FreeRTOS\source/tasks.c **** 	return xAlreadyYielded;
2212:FreeRTOS\source/tasks.c **** }
2213:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2214:FreeRTOS\source/tasks.c **** 
2215:FreeRTOS\source/tasks.c **** TickType_t xTaskGetTickCount( void )
2216:FreeRTOS\source/tasks.c **** {
2217:FreeRTOS\source/tasks.c **** TickType_t xTicks;
2218:FreeRTOS\source/tasks.c **** 
2219:FreeRTOS\source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2220:FreeRTOS\source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2221:FreeRTOS\source/tasks.c **** 	{
2222:FreeRTOS\source/tasks.c **** 		xTicks = xTickCount;
2223:FreeRTOS\source/tasks.c **** 	}
2224:FreeRTOS\source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2225:FreeRTOS\source/tasks.c **** 
2226:FreeRTOS\source/tasks.c **** 	return xTicks;
2227:FreeRTOS\source/tasks.c **** }
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 42


2228:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2229:FreeRTOS\source/tasks.c **** 
2230:FreeRTOS\source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2231:FreeRTOS\source/tasks.c **** {
2232:FreeRTOS\source/tasks.c **** TickType_t xReturn;
2233:FreeRTOS\source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2234:FreeRTOS\source/tasks.c **** 
2235:FreeRTOS\source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2236:FreeRTOS\source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2237:FreeRTOS\source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2238:FreeRTOS\source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2239:FreeRTOS\source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2240:FreeRTOS\source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2241:FreeRTOS\source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2242:FreeRTOS\source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2243:FreeRTOS\source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2244:FreeRTOS\source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2245:FreeRTOS\source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2246:FreeRTOS\source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2247:FreeRTOS\source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2248:FreeRTOS\source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2249:FreeRTOS\source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2250:FreeRTOS\source/tasks.c **** 
2251:FreeRTOS\source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2252:FreeRTOS\source/tasks.c **** 	{
2253:FreeRTOS\source/tasks.c **** 		xReturn = xTickCount;
2254:FreeRTOS\source/tasks.c **** 	}
2255:FreeRTOS\source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2256:FreeRTOS\source/tasks.c **** 
2257:FreeRTOS\source/tasks.c **** 	return xReturn;
2258:FreeRTOS\source/tasks.c **** }
2259:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2260:FreeRTOS\source/tasks.c **** 
2261:FreeRTOS\source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2262:FreeRTOS\source/tasks.c **** {
2263:FreeRTOS\source/tasks.c **** 	/* A critical section is not required because the variables are of type
2264:FreeRTOS\source/tasks.c **** 	BaseType_t. */
2265:FreeRTOS\source/tasks.c **** 	return uxCurrentNumberOfTasks;
2266:FreeRTOS\source/tasks.c **** }
2267:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2268:FreeRTOS\source/tasks.c **** 
2269:FreeRTOS\source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2270:FreeRTOS\source/tasks.c **** {
2271:FreeRTOS\source/tasks.c **** TCB_t *pxTCB;
2272:FreeRTOS\source/tasks.c **** 
2273:FreeRTOS\source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2274:FreeRTOS\source/tasks.c **** 	queried. */
2275:FreeRTOS\source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2276:FreeRTOS\source/tasks.c **** 	configASSERT( pxTCB );
2277:FreeRTOS\source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2278:FreeRTOS\source/tasks.c **** }
2279:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2280:FreeRTOS\source/tasks.c **** 
2281:FreeRTOS\source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2282:FreeRTOS\source/tasks.c **** 
2283:FreeRTOS\source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2284:FreeRTOS\source/tasks.c **** 	{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 43


2285:FreeRTOS\source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2286:FreeRTOS\source/tasks.c **** 	UBaseType_t x;
2287:FreeRTOS\source/tasks.c **** 	char cNextChar;
2288:FreeRTOS\source/tasks.c **** 
2289:FreeRTOS\source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2290:FreeRTOS\source/tasks.c **** 
2291:FreeRTOS\source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2292:FreeRTOS\source/tasks.c **** 		{
2293:FreeRTOS\source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2294:FreeRTOS\source/tasks.c **** 
2295:FreeRTOS\source/tasks.c **** 			do
2296:FreeRTOS\source/tasks.c **** 			{
2297:FreeRTOS\source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2298:FreeRTOS\source/tasks.c **** 
2299:FreeRTOS\source/tasks.c **** 				/* Check each character in the name looking for a match or
2300:FreeRTOS\source/tasks.c **** 				mismatch. */
2301:FreeRTOS\source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2302:FreeRTOS\source/tasks.c **** 				{
2303:FreeRTOS\source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2304:FreeRTOS\source/tasks.c **** 
2305:FreeRTOS\source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2306:FreeRTOS\source/tasks.c **** 					{
2307:FreeRTOS\source/tasks.c **** 						/* Characters didn't match. */
2308:FreeRTOS\source/tasks.c **** 						break;
2309:FreeRTOS\source/tasks.c **** 					}
2310:FreeRTOS\source/tasks.c **** 					else if( cNextChar == 0x00 )
2311:FreeRTOS\source/tasks.c **** 					{
2312:FreeRTOS\source/tasks.c **** 						/* Both strings terminated, a match must have been
2313:FreeRTOS\source/tasks.c **** 						found. */
2314:FreeRTOS\source/tasks.c **** 						pxReturn = pxNextTCB;
2315:FreeRTOS\source/tasks.c **** 						break;
2316:FreeRTOS\source/tasks.c **** 					}
2317:FreeRTOS\source/tasks.c **** 					else
2318:FreeRTOS\source/tasks.c **** 					{
2319:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2320:FreeRTOS\source/tasks.c **** 					}
2321:FreeRTOS\source/tasks.c **** 				}
2322:FreeRTOS\source/tasks.c **** 
2323:FreeRTOS\source/tasks.c **** 				if( pxReturn != NULL )
2324:FreeRTOS\source/tasks.c **** 				{
2325:FreeRTOS\source/tasks.c **** 					/* The handle has been found. */
2326:FreeRTOS\source/tasks.c **** 					break;
2327:FreeRTOS\source/tasks.c **** 				}
2328:FreeRTOS\source/tasks.c **** 
2329:FreeRTOS\source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2330:FreeRTOS\source/tasks.c **** 		}
2331:FreeRTOS\source/tasks.c **** 		else
2332:FreeRTOS\source/tasks.c **** 		{
2333:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2334:FreeRTOS\source/tasks.c **** 		}
2335:FreeRTOS\source/tasks.c **** 
2336:FreeRTOS\source/tasks.c **** 		return pxReturn;
2337:FreeRTOS\source/tasks.c **** 	}
2338:FreeRTOS\source/tasks.c **** 
2339:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2340:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2341:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 44


2342:FreeRTOS\source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2343:FreeRTOS\source/tasks.c **** 
2344:FreeRTOS\source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2345:FreeRTOS\source/tasks.c **** 	{
2346:FreeRTOS\source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2347:FreeRTOS\source/tasks.c **** 	TCB_t* pxTCB;
2348:FreeRTOS\source/tasks.c **** 
2349:FreeRTOS\source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2350:FreeRTOS\source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2351:FreeRTOS\source/tasks.c **** 
2352:FreeRTOS\source/tasks.c **** 		vTaskSuspendAll();
2353:FreeRTOS\source/tasks.c **** 		{
2354:FreeRTOS\source/tasks.c **** 			/* Search the ready lists. */
2355:FreeRTOS\source/tasks.c **** 			do
2356:FreeRTOS\source/tasks.c **** 			{
2357:FreeRTOS\source/tasks.c **** 				uxQueue--;
2358:FreeRTOS\source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2359:FreeRTOS\source/tasks.c **** 
2360:FreeRTOS\source/tasks.c **** 				if( pxTCB != NULL )
2361:FreeRTOS\source/tasks.c **** 				{
2362:FreeRTOS\source/tasks.c **** 					/* Found the handle. */
2363:FreeRTOS\source/tasks.c **** 					break;
2364:FreeRTOS\source/tasks.c **** 				}
2365:FreeRTOS\source/tasks.c **** 
2366:FreeRTOS\source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2367:FreeRTOS\source/tasks.c **** 
2368:FreeRTOS\source/tasks.c **** 			/* Search the delayed lists. */
2369:FreeRTOS\source/tasks.c **** 			if( pxTCB == NULL )
2370:FreeRTOS\source/tasks.c **** 			{
2371:FreeRTOS\source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2372:FreeRTOS\source/tasks.c **** 			}
2373:FreeRTOS\source/tasks.c **** 
2374:FreeRTOS\source/tasks.c **** 			if( pxTCB == NULL )
2375:FreeRTOS\source/tasks.c **** 			{
2376:FreeRTOS\source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2377:FreeRTOS\source/tasks.c **** 			}
2378:FreeRTOS\source/tasks.c **** 
2379:FreeRTOS\source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2380:FreeRTOS\source/tasks.c **** 			{
2381:FreeRTOS\source/tasks.c **** 				if( pxTCB == NULL )
2382:FreeRTOS\source/tasks.c **** 				{
2383:FreeRTOS\source/tasks.c **** 					/* Search the suspended list. */
2384:FreeRTOS\source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2385:FreeRTOS\source/tasks.c **** 				}
2386:FreeRTOS\source/tasks.c **** 			}
2387:FreeRTOS\source/tasks.c **** 			#endif
2388:FreeRTOS\source/tasks.c **** 
2389:FreeRTOS\source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2390:FreeRTOS\source/tasks.c **** 			{
2391:FreeRTOS\source/tasks.c **** 				if( pxTCB == NULL )
2392:FreeRTOS\source/tasks.c **** 				{
2393:FreeRTOS\source/tasks.c **** 					/* Search the deleted list. */
2394:FreeRTOS\source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2395:FreeRTOS\source/tasks.c **** 				}
2396:FreeRTOS\source/tasks.c **** 			}
2397:FreeRTOS\source/tasks.c **** 			#endif
2398:FreeRTOS\source/tasks.c **** 		}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 45


2399:FreeRTOS\source/tasks.c **** 		( void ) xTaskResumeAll();
2400:FreeRTOS\source/tasks.c **** 
2401:FreeRTOS\source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2402:FreeRTOS\source/tasks.c **** 	}
2403:FreeRTOS\source/tasks.c **** 
2404:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2405:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2406:FreeRTOS\source/tasks.c **** 
2407:FreeRTOS\source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2408:FreeRTOS\source/tasks.c **** 
2409:FreeRTOS\source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2410:FreeRTOS\source/tasks.c **** 	{
2411:FreeRTOS\source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2412:FreeRTOS\source/tasks.c **** 
2413:FreeRTOS\source/tasks.c **** 		vTaskSuspendAll();
2414:FreeRTOS\source/tasks.c **** 		{
2415:FreeRTOS\source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2416:FreeRTOS\source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2417:FreeRTOS\source/tasks.c **** 			{
2418:FreeRTOS\source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2419:FreeRTOS\source/tasks.c **** 				task in the Ready state. */
2420:FreeRTOS\source/tasks.c **** 				do
2421:FreeRTOS\source/tasks.c **** 				{
2422:FreeRTOS\source/tasks.c **** 					uxQueue--;
2423:FreeRTOS\source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2424:FreeRTOS\source/tasks.c **** 
2425:FreeRTOS\source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2426:FreeRTOS\source/tasks.c **** 
2427:FreeRTOS\source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2428:FreeRTOS\source/tasks.c **** 				task in the Blocked state. */
2429:FreeRTOS\source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2430:FreeRTOS\source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2431:FreeRTOS\source/tasks.c **** 
2432:FreeRTOS\source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2433:FreeRTOS\source/tasks.c **** 				{
2434:FreeRTOS\source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2435:FreeRTOS\source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2436:FreeRTOS\source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2437:FreeRTOS\source/tasks.c **** 				}
2438:FreeRTOS\source/tasks.c **** 				#endif
2439:FreeRTOS\source/tasks.c **** 
2440:FreeRTOS\source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2441:FreeRTOS\source/tasks.c **** 				{
2442:FreeRTOS\source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2443:FreeRTOS\source/tasks.c **** 					each task in the Suspended state. */
2444:FreeRTOS\source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2445:FreeRTOS\source/tasks.c **** 				}
2446:FreeRTOS\source/tasks.c **** 				#endif
2447:FreeRTOS\source/tasks.c **** 
2448:FreeRTOS\source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2449:FreeRTOS\source/tasks.c **** 				{
2450:FreeRTOS\source/tasks.c **** 					if( pulTotalRunTime != NULL )
2451:FreeRTOS\source/tasks.c **** 					{
2452:FreeRTOS\source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2453:FreeRTOS\source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2454:FreeRTOS\source/tasks.c **** 						#else
2455:FreeRTOS\source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 46


2456:FreeRTOS\source/tasks.c **** 						#endif
2457:FreeRTOS\source/tasks.c **** 					}
2458:FreeRTOS\source/tasks.c **** 				}
2459:FreeRTOS\source/tasks.c **** 				#else
2460:FreeRTOS\source/tasks.c **** 				{
2461:FreeRTOS\source/tasks.c **** 					if( pulTotalRunTime != NULL )
2462:FreeRTOS\source/tasks.c **** 					{
2463:FreeRTOS\source/tasks.c **** 						*pulTotalRunTime = 0;
2464:FreeRTOS\source/tasks.c **** 					}
2465:FreeRTOS\source/tasks.c **** 				}
2466:FreeRTOS\source/tasks.c **** 				#endif
2467:FreeRTOS\source/tasks.c **** 			}
2468:FreeRTOS\source/tasks.c **** 			else
2469:FreeRTOS\source/tasks.c **** 			{
2470:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2471:FreeRTOS\source/tasks.c **** 			}
2472:FreeRTOS\source/tasks.c **** 		}
2473:FreeRTOS\source/tasks.c **** 		( void ) xTaskResumeAll();
2474:FreeRTOS\source/tasks.c **** 
2475:FreeRTOS\source/tasks.c **** 		return uxTask;
2476:FreeRTOS\source/tasks.c **** 	}
2477:FreeRTOS\source/tasks.c **** 
2478:FreeRTOS\source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2479:FreeRTOS\source/tasks.c **** /*----------------------------------------------------------*/
2480:FreeRTOS\source/tasks.c **** 
2481:FreeRTOS\source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2482:FreeRTOS\source/tasks.c **** 
2483:FreeRTOS\source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2484:FreeRTOS\source/tasks.c **** 	{
2485:FreeRTOS\source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2486:FreeRTOS\source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2487:FreeRTOS\source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2488:FreeRTOS\source/tasks.c **** 		return xIdleTaskHandle;
2489:FreeRTOS\source/tasks.c **** 	}
2490:FreeRTOS\source/tasks.c **** 
2491:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2492:FreeRTOS\source/tasks.c **** /*----------------------------------------------------------*/
2493:FreeRTOS\source/tasks.c **** 
2494:FreeRTOS\source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2495:FreeRTOS\source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2496:FreeRTOS\source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2497:FreeRTOS\source/tasks.c **** 1. */
2498:FreeRTOS\source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2499:FreeRTOS\source/tasks.c **** 
2500:FreeRTOS\source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2501:FreeRTOS\source/tasks.c **** 	{
2502:FreeRTOS\source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2503:FreeRTOS\source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2504:FreeRTOS\source/tasks.c **** 		each stepped tick. */
2505:FreeRTOS\source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2506:FreeRTOS\source/tasks.c **** 		xTickCount += xTicksToJump;
2507:FreeRTOS\source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2508:FreeRTOS\source/tasks.c **** 	}
2509:FreeRTOS\source/tasks.c **** 
2510:FreeRTOS\source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2511:FreeRTOS\source/tasks.c **** /*----------------------------------------------------------*/
2512:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 47


2513:FreeRTOS\source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2514:FreeRTOS\source/tasks.c **** 
2515:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2516:FreeRTOS\source/tasks.c **** 	{
2517:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2518:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn;
2519:FreeRTOS\source/tasks.c **** 
2520:FreeRTOS\source/tasks.c **** 		configASSERT( pxTCB );
2521:FreeRTOS\source/tasks.c **** 
2522:FreeRTOS\source/tasks.c **** 		vTaskSuspendAll();
2523:FreeRTOS\source/tasks.c **** 		{
2524:FreeRTOS\source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2525:FreeRTOS\source/tasks.c **** 			it is actually in the Blocked state. */
2526:FreeRTOS\source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2527:FreeRTOS\source/tasks.c **** 			{
2528:FreeRTOS\source/tasks.c **** 				xReturn = pdPASS;
2529:FreeRTOS\source/tasks.c **** 
2530:FreeRTOS\source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2531:FreeRTOS\source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2532:FreeRTOS\source/tasks.c **** 				scheduler is suspended. */
2533:FreeRTOS\source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2534:FreeRTOS\source/tasks.c **** 
2535:FreeRTOS\source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2536:FreeRTOS\source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2537:FreeRTOS\source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2538:FreeRTOS\source/tasks.c **** 				is used. */
2539:FreeRTOS\source/tasks.c **** 				taskENTER_CRITICAL();
2540:FreeRTOS\source/tasks.c **** 				{
2541:FreeRTOS\source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2542:FreeRTOS\source/tasks.c **** 					{
2543:FreeRTOS\source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2544:FreeRTOS\source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2545:FreeRTOS\source/tasks.c **** 					}
2546:FreeRTOS\source/tasks.c **** 					else
2547:FreeRTOS\source/tasks.c **** 					{
2548:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2549:FreeRTOS\source/tasks.c **** 					}
2550:FreeRTOS\source/tasks.c **** 				}
2551:FreeRTOS\source/tasks.c **** 				taskEXIT_CRITICAL();
2552:FreeRTOS\source/tasks.c **** 
2553:FreeRTOS\source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2554:FreeRTOS\source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2555:FreeRTOS\source/tasks.c **** 
2556:FreeRTOS\source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2557:FreeRTOS\source/tasks.c **** 				switch if preemption is turned off. */
2558:FreeRTOS\source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2559:FreeRTOS\source/tasks.c **** 				{
2560:FreeRTOS\source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2561:FreeRTOS\source/tasks.c **** 					performed if the unblocked task has a priority that is
2562:FreeRTOS\source/tasks.c **** 					equal to or higher than the currently executing task. */
2563:FreeRTOS\source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2564:FreeRTOS\source/tasks.c **** 					{
2565:FreeRTOS\source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2566:FreeRTOS\source/tasks.c **** 						is unsuspended. */
2567:FreeRTOS\source/tasks.c **** 						xYieldPending = pdTRUE;
2568:FreeRTOS\source/tasks.c **** 					}
2569:FreeRTOS\source/tasks.c **** 					else
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 48


2570:FreeRTOS\source/tasks.c **** 					{
2571:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:FreeRTOS\source/tasks.c **** 					}
2573:FreeRTOS\source/tasks.c **** 				}
2574:FreeRTOS\source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2575:FreeRTOS\source/tasks.c **** 			}
2576:FreeRTOS\source/tasks.c **** 			else
2577:FreeRTOS\source/tasks.c **** 			{
2578:FreeRTOS\source/tasks.c **** 				xReturn = pdFAIL;
2579:FreeRTOS\source/tasks.c **** 			}
2580:FreeRTOS\source/tasks.c **** 		}
2581:FreeRTOS\source/tasks.c **** 		( void ) xTaskResumeAll();
2582:FreeRTOS\source/tasks.c **** 
2583:FreeRTOS\source/tasks.c **** 		return xReturn;
2584:FreeRTOS\source/tasks.c **** 	}
2585:FreeRTOS\source/tasks.c **** 
2586:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2587:FreeRTOS\source/tasks.c **** /*----------------------------------------------------------*/
2588:FreeRTOS\source/tasks.c **** 
2589:FreeRTOS\source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2590:FreeRTOS\source/tasks.c **** {
2591:FreeRTOS\source/tasks.c **** TCB_t * pxTCB;
2592:FreeRTOS\source/tasks.c **** TickType_t xItemValue;
2593:FreeRTOS\source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2594:FreeRTOS\source/tasks.c **** 
2595:FreeRTOS\source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2596:FreeRTOS\source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2597:FreeRTOS\source/tasks.c **** 	tasks to be unblocked. */
2598:FreeRTOS\source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2599:FreeRTOS\source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2600:FreeRTOS\source/tasks.c **** 	{
2601:FreeRTOS\source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2602:FreeRTOS\source/tasks.c **** 		block. */
2603:FreeRTOS\source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2604:FreeRTOS\source/tasks.c **** 
2605:FreeRTOS\source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2606:FreeRTOS\source/tasks.c **** 		delayed lists if it wraps to 0. */
2607:FreeRTOS\source/tasks.c **** 		xTickCount = xConstTickCount;
2608:FreeRTOS\source/tasks.c **** 
2609:FreeRTOS\source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2610:FreeRTOS\source/tasks.c **** 		{
2611:FreeRTOS\source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2612:FreeRTOS\source/tasks.c **** 		}
2613:FreeRTOS\source/tasks.c **** 		else
2614:FreeRTOS\source/tasks.c **** 		{
2615:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2616:FreeRTOS\source/tasks.c **** 		}
2617:FreeRTOS\source/tasks.c **** 
2618:FreeRTOS\source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2619:FreeRTOS\source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2620:FreeRTOS\source/tasks.c **** 		has been found whose block time has not expired there is no need to
2621:FreeRTOS\source/tasks.c **** 		look any further down the list. */
2622:FreeRTOS\source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2623:FreeRTOS\source/tasks.c **** 		{
2624:FreeRTOS\source/tasks.c **** 			for( ;; )
2625:FreeRTOS\source/tasks.c **** 			{
2626:FreeRTOS\source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 49


2627:FreeRTOS\source/tasks.c **** 				{
2628:FreeRTOS\source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2629:FreeRTOS\source/tasks.c **** 					to the maximum possible value so it is extremely
2630:FreeRTOS\source/tasks.c **** 					unlikely that the
2631:FreeRTOS\source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2632:FreeRTOS\source/tasks.c **** 					next time through. */
2633:FreeRTOS\source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2634:FreeRTOS\source/tasks.c **** 					break;
2635:FreeRTOS\source/tasks.c **** 				}
2636:FreeRTOS\source/tasks.c **** 				else
2637:FreeRTOS\source/tasks.c **** 				{
2638:FreeRTOS\source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2639:FreeRTOS\source/tasks.c **** 					item at the head of the delayed list.  This is the time
2640:FreeRTOS\source/tasks.c **** 					at which the task at the head of the delayed list must
2641:FreeRTOS\source/tasks.c **** 					be removed from the Blocked state. */
2642:FreeRTOS\source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2643:FreeRTOS\source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2644:FreeRTOS\source/tasks.c **** 
2645:FreeRTOS\source/tasks.c **** 					if( xConstTickCount < xItemValue )
2646:FreeRTOS\source/tasks.c **** 					{
2647:FreeRTOS\source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2648:FreeRTOS\source/tasks.c **** 						item value is the time at which the task at the head
2649:FreeRTOS\source/tasks.c **** 						of the blocked list must be removed from the Blocked
2650:FreeRTOS\source/tasks.c **** 						state -	so record the item value in
2651:FreeRTOS\source/tasks.c **** 						xNextTaskUnblockTime. */
2652:FreeRTOS\source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2653:FreeRTOS\source/tasks.c **** 						break;
2654:FreeRTOS\source/tasks.c **** 					}
2655:FreeRTOS\source/tasks.c **** 					else
2656:FreeRTOS\source/tasks.c **** 					{
2657:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2658:FreeRTOS\source/tasks.c **** 					}
2659:FreeRTOS\source/tasks.c **** 
2660:FreeRTOS\source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2661:FreeRTOS\source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2662:FreeRTOS\source/tasks.c **** 
2663:FreeRTOS\source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2664:FreeRTOS\source/tasks.c **** 					it from the event list. */
2665:FreeRTOS\source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2666:FreeRTOS\source/tasks.c **** 					{
2667:FreeRTOS\source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2668:FreeRTOS\source/tasks.c **** 					}
2669:FreeRTOS\source/tasks.c **** 					else
2670:FreeRTOS\source/tasks.c **** 					{
2671:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2672:FreeRTOS\source/tasks.c **** 					}
2673:FreeRTOS\source/tasks.c **** 
2674:FreeRTOS\source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2675:FreeRTOS\source/tasks.c **** 					list. */
2676:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2677:FreeRTOS\source/tasks.c **** 
2678:FreeRTOS\source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2679:FreeRTOS\source/tasks.c **** 					context switch if preemption is turned off. */
2680:FreeRTOS\source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2681:FreeRTOS\source/tasks.c **** 					{
2682:FreeRTOS\source/tasks.c **** 						/* Preemption is on, but a context switch should
2683:FreeRTOS\source/tasks.c **** 						only be performed if the unblocked task has a
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 50


2684:FreeRTOS\source/tasks.c **** 						priority that is equal to or higher than the
2685:FreeRTOS\source/tasks.c **** 						currently executing task. */
2686:FreeRTOS\source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2687:FreeRTOS\source/tasks.c **** 						{
2688:FreeRTOS\source/tasks.c **** 							xSwitchRequired = pdTRUE;
2689:FreeRTOS\source/tasks.c **** 						}
2690:FreeRTOS\source/tasks.c **** 						else
2691:FreeRTOS\source/tasks.c **** 						{
2692:FreeRTOS\source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2693:FreeRTOS\source/tasks.c **** 						}
2694:FreeRTOS\source/tasks.c **** 					}
2695:FreeRTOS\source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2696:FreeRTOS\source/tasks.c **** 				}
2697:FreeRTOS\source/tasks.c **** 			}
2698:FreeRTOS\source/tasks.c **** 		}
2699:FreeRTOS\source/tasks.c **** 
2700:FreeRTOS\source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2701:FreeRTOS\source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2702:FreeRTOS\source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2703:FreeRTOS\source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2704:FreeRTOS\source/tasks.c **** 		{
2705:FreeRTOS\source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2706:FreeRTOS\source/tasks.c **** 			{
2707:FreeRTOS\source/tasks.c **** 				xSwitchRequired = pdTRUE;
2708:FreeRTOS\source/tasks.c **** 			}
2709:FreeRTOS\source/tasks.c **** 			else
2710:FreeRTOS\source/tasks.c **** 			{
2711:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2712:FreeRTOS\source/tasks.c **** 			}
2713:FreeRTOS\source/tasks.c **** 		}
2714:FreeRTOS\source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2715:FreeRTOS\source/tasks.c **** 
2716:FreeRTOS\source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2717:FreeRTOS\source/tasks.c **** 		{
2718:FreeRTOS\source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2719:FreeRTOS\source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2720:FreeRTOS\source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2721:FreeRTOS\source/tasks.c **** 			{
2722:FreeRTOS\source/tasks.c **** 				vApplicationTickHook();
2723:FreeRTOS\source/tasks.c **** 			}
2724:FreeRTOS\source/tasks.c **** 			else
2725:FreeRTOS\source/tasks.c **** 			{
2726:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2727:FreeRTOS\source/tasks.c **** 			}
2728:FreeRTOS\source/tasks.c **** 		}
2729:FreeRTOS\source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2730:FreeRTOS\source/tasks.c **** 	}
2731:FreeRTOS\source/tasks.c **** 	else
2732:FreeRTOS\source/tasks.c **** 	{
2733:FreeRTOS\source/tasks.c **** 		++uxPendedTicks;
2734:FreeRTOS\source/tasks.c **** 
2735:FreeRTOS\source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2736:FreeRTOS\source/tasks.c **** 		scheduler is locked. */
2737:FreeRTOS\source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2738:FreeRTOS\source/tasks.c **** 		{
2739:FreeRTOS\source/tasks.c **** 			vApplicationTickHook();
2740:FreeRTOS\source/tasks.c **** 		}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 51


2741:FreeRTOS\source/tasks.c **** 		#endif
2742:FreeRTOS\source/tasks.c **** 	}
2743:FreeRTOS\source/tasks.c **** 
2744:FreeRTOS\source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2745:FreeRTOS\source/tasks.c **** 	{
2746:FreeRTOS\source/tasks.c **** 		if( xYieldPending != pdFALSE )
2747:FreeRTOS\source/tasks.c **** 		{
2748:FreeRTOS\source/tasks.c **** 			xSwitchRequired = pdTRUE;
2749:FreeRTOS\source/tasks.c **** 		}
2750:FreeRTOS\source/tasks.c **** 		else
2751:FreeRTOS\source/tasks.c **** 		{
2752:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2753:FreeRTOS\source/tasks.c **** 		}
2754:FreeRTOS\source/tasks.c **** 	}
2755:FreeRTOS\source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2756:FreeRTOS\source/tasks.c **** 
2757:FreeRTOS\source/tasks.c **** 	return xSwitchRequired;
2758:FreeRTOS\source/tasks.c **** }
2759:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2760:FreeRTOS\source/tasks.c **** 
2761:FreeRTOS\source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2762:FreeRTOS\source/tasks.c **** 
2763:FreeRTOS\source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2764:FreeRTOS\source/tasks.c **** 	{
2765:FreeRTOS\source/tasks.c **** 	TCB_t *xTCB;
2766:FreeRTOS\source/tasks.c **** 
2767:FreeRTOS\source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2768:FreeRTOS\source/tasks.c **** 		getting set. */
2769:FreeRTOS\source/tasks.c **** 		if( xTask == NULL )
2770:FreeRTOS\source/tasks.c **** 		{
2771:FreeRTOS\source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2772:FreeRTOS\source/tasks.c **** 		}
2773:FreeRTOS\source/tasks.c **** 		else
2774:FreeRTOS\source/tasks.c **** 		{
2775:FreeRTOS\source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2776:FreeRTOS\source/tasks.c **** 		}
2777:FreeRTOS\source/tasks.c **** 
2778:FreeRTOS\source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2779:FreeRTOS\source/tasks.c **** 		the value can be accessed from an interrupt. */
2780:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
2781:FreeRTOS\source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2782:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
2783:FreeRTOS\source/tasks.c **** 	}
2784:FreeRTOS\source/tasks.c **** 
2785:FreeRTOS\source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2786:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2787:FreeRTOS\source/tasks.c **** 
2788:FreeRTOS\source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2789:FreeRTOS\source/tasks.c **** 
2790:FreeRTOS\source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2791:FreeRTOS\source/tasks.c **** 	{
2792:FreeRTOS\source/tasks.c **** 	TCB_t *xTCB;
2793:FreeRTOS\source/tasks.c **** 	TaskHookFunction_t xReturn;
2794:FreeRTOS\source/tasks.c **** 
2795:FreeRTOS\source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2796:FreeRTOS\source/tasks.c **** 		if( xTask == NULL )
2797:FreeRTOS\source/tasks.c **** 		{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 52


2798:FreeRTOS\source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2799:FreeRTOS\source/tasks.c **** 		}
2800:FreeRTOS\source/tasks.c **** 		else
2801:FreeRTOS\source/tasks.c **** 		{
2802:FreeRTOS\source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2803:FreeRTOS\source/tasks.c **** 		}
2804:FreeRTOS\source/tasks.c **** 
2805:FreeRTOS\source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2806:FreeRTOS\source/tasks.c **** 		the value can be accessed from an interrupt. */
2807:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
2808:FreeRTOS\source/tasks.c **** 		{
2809:FreeRTOS\source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2810:FreeRTOS\source/tasks.c **** 		}
2811:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
2812:FreeRTOS\source/tasks.c **** 
2813:FreeRTOS\source/tasks.c **** 		return xReturn;
2814:FreeRTOS\source/tasks.c **** 	}
2815:FreeRTOS\source/tasks.c **** 
2816:FreeRTOS\source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2817:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2818:FreeRTOS\source/tasks.c **** 
2819:FreeRTOS\source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2820:FreeRTOS\source/tasks.c **** 
2821:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2822:FreeRTOS\source/tasks.c **** 	{
2823:FreeRTOS\source/tasks.c **** 	TCB_t *xTCB;
2824:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn;
2825:FreeRTOS\source/tasks.c **** 
2826:FreeRTOS\source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2827:FreeRTOS\source/tasks.c **** 		if( xTask == NULL )
2828:FreeRTOS\source/tasks.c **** 		{
2829:FreeRTOS\source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2830:FreeRTOS\source/tasks.c **** 		}
2831:FreeRTOS\source/tasks.c **** 		else
2832:FreeRTOS\source/tasks.c **** 		{
2833:FreeRTOS\source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2834:FreeRTOS\source/tasks.c **** 		}
2835:FreeRTOS\source/tasks.c **** 
2836:FreeRTOS\source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2837:FreeRTOS\source/tasks.c **** 		{
2838:FreeRTOS\source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2839:FreeRTOS\source/tasks.c **** 		}
2840:FreeRTOS\source/tasks.c **** 		else
2841:FreeRTOS\source/tasks.c **** 		{
2842:FreeRTOS\source/tasks.c **** 			xReturn = pdFAIL;
2843:FreeRTOS\source/tasks.c **** 		}
2844:FreeRTOS\source/tasks.c **** 
2845:FreeRTOS\source/tasks.c **** 		return xReturn;
2846:FreeRTOS\source/tasks.c **** 	}
2847:FreeRTOS\source/tasks.c **** 
2848:FreeRTOS\source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2849:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2850:FreeRTOS\source/tasks.c **** 
2851:FreeRTOS\source/tasks.c **** void vTaskSwitchContext( void )
2852:FreeRTOS\source/tasks.c **** {
2853:FreeRTOS\source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2854:FreeRTOS\source/tasks.c **** 	{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 53


2855:FreeRTOS\source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2856:FreeRTOS\source/tasks.c **** 		switch. */
2857:FreeRTOS\source/tasks.c **** 		xYieldPending = pdTRUE;
2858:FreeRTOS\source/tasks.c **** 	}
2859:FreeRTOS\source/tasks.c **** 	else
2860:FreeRTOS\source/tasks.c **** 	{
2861:FreeRTOS\source/tasks.c **** 		xYieldPending = pdFALSE;
2862:FreeRTOS\source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2863:FreeRTOS\source/tasks.c **** 
2864:FreeRTOS\source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2865:FreeRTOS\source/tasks.c **** 		{
2866:FreeRTOS\source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2867:FreeRTOS\source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2868:FreeRTOS\source/tasks.c **** 				#else
2869:FreeRTOS\source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2870:FreeRTOS\source/tasks.c **** 				#endif
2871:FreeRTOS\source/tasks.c **** 
2872:FreeRTOS\source/tasks.c **** 				/* Add the amount of time the task has been running to the
2873:FreeRTOS\source/tasks.c **** 				accumulated time so far.  The time the task started running was
2874:FreeRTOS\source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2875:FreeRTOS\source/tasks.c **** 				protection here so count values are only valid until the timer
2876:FreeRTOS\source/tasks.c **** 				overflows.  The guard against negative values is to protect
2877:FreeRTOS\source/tasks.c **** 				against suspect run time stat counter implementations - which
2878:FreeRTOS\source/tasks.c **** 				are provided by the application, not the kernel. */
2879:FreeRTOS\source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2880:FreeRTOS\source/tasks.c **** 				{
2881:FreeRTOS\source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2882:FreeRTOS\source/tasks.c **** 				}
2883:FreeRTOS\source/tasks.c **** 				else
2884:FreeRTOS\source/tasks.c **** 				{
2885:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2886:FreeRTOS\source/tasks.c **** 				}
2887:FreeRTOS\source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2888:FreeRTOS\source/tasks.c **** 		}
2889:FreeRTOS\source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2890:FreeRTOS\source/tasks.c **** 
2891:FreeRTOS\source/tasks.c **** 		/* Check for stack overflow, if configured. */
2892:FreeRTOS\source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2893:FreeRTOS\source/tasks.c **** 
2894:FreeRTOS\source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2895:FreeRTOS\source/tasks.c **** 		optimised asm code. */
2896:FreeRTOS\source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2897:FreeRTOS\source/tasks.c **** 		traceTASK_SWITCHED_IN();
2898:FreeRTOS\source/tasks.c **** 
2899:FreeRTOS\source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2900:FreeRTOS\source/tasks.c **** 		{
2901:FreeRTOS\source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2902:FreeRTOS\source/tasks.c **** 			structure specific to this task. */
2903:FreeRTOS\source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2904:FreeRTOS\source/tasks.c **** 		}
2905:FreeRTOS\source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2906:FreeRTOS\source/tasks.c **** 	}
2907:FreeRTOS\source/tasks.c **** }
2908:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2909:FreeRTOS\source/tasks.c **** 
2910:FreeRTOS\source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2911:FreeRTOS\source/tasks.c **** {
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 54


2912:FreeRTOS\source/tasks.c **** 	configASSERT( pxEventList );
2913:FreeRTOS\source/tasks.c **** 
2914:FreeRTOS\source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2915:FreeRTOS\source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2916:FreeRTOS\source/tasks.c **** 
2917:FreeRTOS\source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2918:FreeRTOS\source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2919:FreeRTOS\source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2920:FreeRTOS\source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2921:FreeRTOS\source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2922:FreeRTOS\source/tasks.c **** 
2923:FreeRTOS\source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2924:FreeRTOS\source/tasks.c **** }
2925:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2926:FreeRTOS\source/tasks.c **** 
2927:FreeRTOS\source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2928:FreeRTOS\source/tasks.c **** {
2929:FreeRTOS\source/tasks.c **** 	configASSERT( pxEventList );
2930:FreeRTOS\source/tasks.c **** 
2931:FreeRTOS\source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2932:FreeRTOS\source/tasks.c **** 	the event groups implementation. */
2933:FreeRTOS\source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2934:FreeRTOS\source/tasks.c **** 
2935:FreeRTOS\source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2936:FreeRTOS\source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2937:FreeRTOS\source/tasks.c **** 	task that is not in the Blocked state. */
2938:FreeRTOS\source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2939:FreeRTOS\source/tasks.c **** 
2940:FreeRTOS\source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2941:FreeRTOS\source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2942:FreeRTOS\source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2943:FreeRTOS\source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2944:FreeRTOS\source/tasks.c **** 	the task level). */
2945:FreeRTOS\source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2946:FreeRTOS\source/tasks.c **** 
2947:FreeRTOS\source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2948:FreeRTOS\source/tasks.c **** }
2949:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2950:FreeRTOS\source/tasks.c **** 
2951:FreeRTOS\source/tasks.c **** #if( configUSE_TIMERS == 1 )
2952:FreeRTOS\source/tasks.c **** 
2953:FreeRTOS\source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2954:FreeRTOS\source/tasks.c **** 	{
2955:FreeRTOS\source/tasks.c **** 		configASSERT( pxEventList );
2956:FreeRTOS\source/tasks.c **** 
2957:FreeRTOS\source/tasks.c **** 		/* This function should not be called by application code hence the
2958:FreeRTOS\source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2959:FreeRTOS\source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2960:FreeRTOS\source/tasks.c **** 		it should be called with the scheduler suspended. */
2961:FreeRTOS\source/tasks.c **** 
2962:FreeRTOS\source/tasks.c **** 
2963:FreeRTOS\source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2964:FreeRTOS\source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2965:FreeRTOS\source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2966:FreeRTOS\source/tasks.c **** 		can be used in place of vListInsert. */
2967:FreeRTOS\source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2968:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 55


2969:FreeRTOS\source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2970:FreeRTOS\source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2971:FreeRTOS\source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2972:FreeRTOS\source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2973:FreeRTOS\source/tasks.c **** 		{
2974:FreeRTOS\source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2975:FreeRTOS\source/tasks.c **** 		}
2976:FreeRTOS\source/tasks.c **** 
2977:FreeRTOS\source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2978:FreeRTOS\source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2979:FreeRTOS\source/tasks.c **** 	}
2980:FreeRTOS\source/tasks.c **** 
2981:FreeRTOS\source/tasks.c **** #endif /* configUSE_TIMERS */
2982:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
2983:FreeRTOS\source/tasks.c **** 
2984:FreeRTOS\source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2985:FreeRTOS\source/tasks.c **** {
2986:FreeRTOS\source/tasks.c **** TCB_t *pxUnblockedTCB;
2987:FreeRTOS\source/tasks.c **** BaseType_t xReturn;
2988:FreeRTOS\source/tasks.c **** 
2989:FreeRTOS\source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2990:FreeRTOS\source/tasks.c **** 	called from a critical section within an ISR. */
2991:FreeRTOS\source/tasks.c **** 
2992:FreeRTOS\source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2993:FreeRTOS\source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2994:FreeRTOS\source/tasks.c **** 	the delayed list, and add it to the ready list.
2995:FreeRTOS\source/tasks.c **** 
2996:FreeRTOS\source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2997:FreeRTOS\source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2998:FreeRTOS\source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2999:FreeRTOS\source/tasks.c **** 
3000:FreeRTOS\source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3001:FreeRTOS\source/tasks.c **** 	pxEventList is not empty. */
3002:FreeRTOS\source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
3003:FreeRTOS\source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3004:FreeRTOS\source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3005:FreeRTOS\source/tasks.c **** 
3006:FreeRTOS\source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3007:FreeRTOS\source/tasks.c **** 	{
3008:FreeRTOS\source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3009:FreeRTOS\source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3010:FreeRTOS\source/tasks.c **** 	}
3011:FreeRTOS\source/tasks.c **** 	else
3012:FreeRTOS\source/tasks.c **** 	{
3013:FreeRTOS\source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3014:FreeRTOS\source/tasks.c **** 		pending until the scheduler is resumed. */
3015:FreeRTOS\source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3016:FreeRTOS\source/tasks.c **** 	}
3017:FreeRTOS\source/tasks.c **** 
3018:FreeRTOS\source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3019:FreeRTOS\source/tasks.c **** 	{
3020:FreeRTOS\source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3021:FreeRTOS\source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3022:FreeRTOS\source/tasks.c **** 		it should force a context switch now. */
3023:FreeRTOS\source/tasks.c **** 		xReturn = pdTRUE;
3024:FreeRTOS\source/tasks.c **** 
3025:FreeRTOS\source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 56


3026:FreeRTOS\source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3027:FreeRTOS\source/tasks.c **** 		xYieldPending = pdTRUE;
3028:FreeRTOS\source/tasks.c **** 	}
3029:FreeRTOS\source/tasks.c **** 	else
3030:FreeRTOS\source/tasks.c **** 	{
3031:FreeRTOS\source/tasks.c **** 		xReturn = pdFALSE;
3032:FreeRTOS\source/tasks.c **** 	}
3033:FreeRTOS\source/tasks.c **** 
3034:FreeRTOS\source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3035:FreeRTOS\source/tasks.c **** 	{
3036:FreeRTOS\source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3037:FreeRTOS\source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3038:FreeRTOS\source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3039:FreeRTOS\source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3040:FreeRTOS\source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3041:FreeRTOS\source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3042:FreeRTOS\source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3043:FreeRTOS\source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3044:FreeRTOS\source/tasks.c **** 		prvResetNextTaskUnblockTime();
3045:FreeRTOS\source/tasks.c **** 	}
3046:FreeRTOS\source/tasks.c **** 	#endif
3047:FreeRTOS\source/tasks.c **** 
3048:FreeRTOS\source/tasks.c **** 	return xReturn;
3049:FreeRTOS\source/tasks.c **** }
3050:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3051:FreeRTOS\source/tasks.c **** 
3052:FreeRTOS\source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3053:FreeRTOS\source/tasks.c **** {
3054:FreeRTOS\source/tasks.c **** TCB_t *pxUnblockedTCB;
3055:FreeRTOS\source/tasks.c **** 
3056:FreeRTOS\source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3057:FreeRTOS\source/tasks.c **** 	the event flags implementation. */
3058:FreeRTOS\source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3059:FreeRTOS\source/tasks.c **** 
3060:FreeRTOS\source/tasks.c **** 	/* Store the new item value in the event list. */
3061:FreeRTOS\source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3062:FreeRTOS\source/tasks.c **** 
3063:FreeRTOS\source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3064:FreeRTOS\source/tasks.c **** 	event flags. */
3065:FreeRTOS\source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3066:FreeRTOS\source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3067:FreeRTOS\source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3068:FreeRTOS\source/tasks.c **** 
3069:FreeRTOS\source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3070:FreeRTOS\source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3071:FreeRTOS\source/tasks.c **** 	lists. */
3072:FreeRTOS\source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3073:FreeRTOS\source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3074:FreeRTOS\source/tasks.c **** 
3075:FreeRTOS\source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3076:FreeRTOS\source/tasks.c **** 	{
3077:FreeRTOS\source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3078:FreeRTOS\source/tasks.c **** 		a context switch is required.  This function is called with the
3079:FreeRTOS\source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3080:FreeRTOS\source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3081:FreeRTOS\source/tasks.c **** 		xYieldPending = pdTRUE;
3082:FreeRTOS\source/tasks.c **** 	}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 57


3083:FreeRTOS\source/tasks.c **** }
3084:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3085:FreeRTOS\source/tasks.c **** 
3086:FreeRTOS\source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3087:FreeRTOS\source/tasks.c **** {
3088:FreeRTOS\source/tasks.c **** 	configASSERT( pxTimeOut );
3089:FreeRTOS\source/tasks.c **** 	taskENTER_CRITICAL();
3090:FreeRTOS\source/tasks.c **** 	{
3091:FreeRTOS\source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3092:FreeRTOS\source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3093:FreeRTOS\source/tasks.c **** 	}
3094:FreeRTOS\source/tasks.c **** 	taskEXIT_CRITICAL();
3095:FreeRTOS\source/tasks.c **** }
3096:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3097:FreeRTOS\source/tasks.c **** 
3098:FreeRTOS\source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3099:FreeRTOS\source/tasks.c **** {
3100:FreeRTOS\source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3101:FreeRTOS\source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3102:FreeRTOS\source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3103:FreeRTOS\source/tasks.c **** }
3104:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3105:FreeRTOS\source/tasks.c **** 
3106:FreeRTOS\source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3107:FreeRTOS\source/tasks.c **** {
3108:FreeRTOS\source/tasks.c **** BaseType_t xReturn;
3109:FreeRTOS\source/tasks.c **** 
3110:FreeRTOS\source/tasks.c **** 	configASSERT( pxTimeOut );
3111:FreeRTOS\source/tasks.c **** 	configASSERT( pxTicksToWait );
3112:FreeRTOS\source/tasks.c **** 
3113:FreeRTOS\source/tasks.c **** 	taskENTER_CRITICAL();
3114:FreeRTOS\source/tasks.c **** 	{
3115:FreeRTOS\source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3116:FreeRTOS\source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3117:FreeRTOS\source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3118:FreeRTOS\source/tasks.c **** 
3119:FreeRTOS\source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3120:FreeRTOS\source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3121:FreeRTOS\source/tasks.c **** 			{
3122:FreeRTOS\source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3123:FreeRTOS\source/tasks.c **** 				but has the same result. */
3124:FreeRTOS\source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3125:FreeRTOS\source/tasks.c **** 				xReturn = pdTRUE;
3126:FreeRTOS\source/tasks.c **** 			}
3127:FreeRTOS\source/tasks.c **** 			else
3128:FreeRTOS\source/tasks.c **** 		#endif
3129:FreeRTOS\source/tasks.c **** 
3130:FreeRTOS\source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3131:FreeRTOS\source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3132:FreeRTOS\source/tasks.c **** 			{
3133:FreeRTOS\source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3134:FreeRTOS\source/tasks.c **** 				specified is the maximum block time then the task should block
3135:FreeRTOS\source/tasks.c **** 				indefinitely, and therefore never time out. */
3136:FreeRTOS\source/tasks.c **** 				xReturn = pdFALSE;
3137:FreeRTOS\source/tasks.c **** 			}
3138:FreeRTOS\source/tasks.c **** 			else
3139:FreeRTOS\source/tasks.c **** 		#endif
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 58


3140:FreeRTOS\source/tasks.c **** 
3141:FreeRTOS\source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3142:FreeRTOS\source/tasks.c **** 		{
3143:FreeRTOS\source/tasks.c **** 			/* The tick count is greater than the time at which
3144:FreeRTOS\source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3145:FreeRTOS\source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3146:FreeRTOS\source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3147:FreeRTOS\source/tasks.c **** 			was called. */
3148:FreeRTOS\source/tasks.c **** 			xReturn = pdTRUE;
3149:FreeRTOS\source/tasks.c **** 		}
3150:FreeRTOS\source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3151:FreeRTOS\source/tasks.c **** 		{
3152:FreeRTOS\source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3153:FreeRTOS\source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3154:FreeRTOS\source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3155:FreeRTOS\source/tasks.c **** 			xReturn = pdFALSE;
3156:FreeRTOS\source/tasks.c **** 		}
3157:FreeRTOS\source/tasks.c **** 		else
3158:FreeRTOS\source/tasks.c **** 		{
3159:FreeRTOS\source/tasks.c **** 			*pxTicksToWait = 0;
3160:FreeRTOS\source/tasks.c **** 			xReturn = pdTRUE;
3161:FreeRTOS\source/tasks.c **** 		}
3162:FreeRTOS\source/tasks.c **** 	}
3163:FreeRTOS\source/tasks.c **** 	taskEXIT_CRITICAL();
3164:FreeRTOS\source/tasks.c **** 
3165:FreeRTOS\source/tasks.c **** 	return xReturn;
3166:FreeRTOS\source/tasks.c **** }
3167:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3168:FreeRTOS\source/tasks.c **** 
3169:FreeRTOS\source/tasks.c **** void vTaskMissedYield( void )
3170:FreeRTOS\source/tasks.c **** {
3171:FreeRTOS\source/tasks.c **** 	xYieldPending = pdTRUE;
3172:FreeRTOS\source/tasks.c **** }
3173:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3174:FreeRTOS\source/tasks.c **** 
3175:FreeRTOS\source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3176:FreeRTOS\source/tasks.c **** 
3177:FreeRTOS\source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3178:FreeRTOS\source/tasks.c **** 	{
3179:FreeRTOS\source/tasks.c **** 	UBaseType_t uxReturn;
3180:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
3181:FreeRTOS\source/tasks.c **** 
3182:FreeRTOS\source/tasks.c **** 		if( xTask != NULL )
3183:FreeRTOS\source/tasks.c **** 		{
3184:FreeRTOS\source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3185:FreeRTOS\source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3186:FreeRTOS\source/tasks.c **** 		}
3187:FreeRTOS\source/tasks.c **** 		else
3188:FreeRTOS\source/tasks.c **** 		{
3189:FreeRTOS\source/tasks.c **** 			uxReturn = 0U;
3190:FreeRTOS\source/tasks.c **** 		}
3191:FreeRTOS\source/tasks.c **** 
3192:FreeRTOS\source/tasks.c **** 		return uxReturn;
3193:FreeRTOS\source/tasks.c **** 	}
3194:FreeRTOS\source/tasks.c **** 
3195:FreeRTOS\source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3196:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 59


3197:FreeRTOS\source/tasks.c **** 
3198:FreeRTOS\source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3199:FreeRTOS\source/tasks.c **** 
3200:FreeRTOS\source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3201:FreeRTOS\source/tasks.c **** 	{
3202:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
3203:FreeRTOS\source/tasks.c **** 
3204:FreeRTOS\source/tasks.c **** 		if( xTask != NULL )
3205:FreeRTOS\source/tasks.c **** 		{
3206:FreeRTOS\source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3207:FreeRTOS\source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3208:FreeRTOS\source/tasks.c **** 		}
3209:FreeRTOS\source/tasks.c **** 	}
3210:FreeRTOS\source/tasks.c **** 
3211:FreeRTOS\source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3212:FreeRTOS\source/tasks.c **** 
3213:FreeRTOS\source/tasks.c **** /*
3214:FreeRTOS\source/tasks.c ****  * -----------------------------------------------------------
3215:FreeRTOS\source/tasks.c ****  * The Idle task.
3216:FreeRTOS\source/tasks.c ****  * ----------------------------------------------------------
3217:FreeRTOS\source/tasks.c ****  *
3218:FreeRTOS\source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3219:FreeRTOS\source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3220:FreeRTOS\source/tasks.c ****  *
3221:FreeRTOS\source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3222:FreeRTOS\source/tasks.c ****  *
3223:FreeRTOS\source/tasks.c ****  */
3224:FreeRTOS\source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3225:FreeRTOS\source/tasks.c **** {
3226:FreeRTOS\source/tasks.c **** 	/* Stop warnings. */
3227:FreeRTOS\source/tasks.c **** 	( void ) pvParameters;
3228:FreeRTOS\source/tasks.c **** 
3229:FreeRTOS\source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3230:FreeRTOS\source/tasks.c **** 	SCHEDULER IS STARTED. **/
3231:FreeRTOS\source/tasks.c **** 
3232:FreeRTOS\source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3233:FreeRTOS\source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3234:FreeRTOS\source/tasks.c **** 	any. */
3235:FreeRTOS\source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3236:FreeRTOS\source/tasks.c **** 
3237:FreeRTOS\source/tasks.c **** 	for( ;; )
3238:FreeRTOS\source/tasks.c **** 	{
3239:FreeRTOS\source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3240:FreeRTOS\source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3241:FreeRTOS\source/tasks.c **** 		prvCheckTasksWaitingTermination();
3242:FreeRTOS\source/tasks.c **** 
3243:FreeRTOS\source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3244:FreeRTOS\source/tasks.c **** 		{
3245:FreeRTOS\source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3246:FreeRTOS\source/tasks.c **** 			see if any other task has become available.  If we are using
3247:FreeRTOS\source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3248:FreeRTOS\source/tasks.c **** 			will automatically get the processor anyway. */
3249:FreeRTOS\source/tasks.c **** 			taskYIELD();
3250:FreeRTOS\source/tasks.c **** 		}
3251:FreeRTOS\source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3252:FreeRTOS\source/tasks.c **** 
3253:FreeRTOS\source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 60


3254:FreeRTOS\source/tasks.c **** 		{
3255:FreeRTOS\source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3256:FreeRTOS\source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3257:FreeRTOS\source/tasks.c **** 			to run then the idle task should yield before the end of the
3258:FreeRTOS\source/tasks.c **** 			timeslice.
3259:FreeRTOS\source/tasks.c **** 
3260:FreeRTOS\source/tasks.c **** 			A critical region is not required here as we are just reading from
3261:FreeRTOS\source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3262:FreeRTOS\source/tasks.c **** 			the ready list at the idle priority contains more than one task
3263:FreeRTOS\source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3264:FreeRTOS\source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3265:FreeRTOS\source/tasks.c **** 			{
3266:FreeRTOS\source/tasks.c **** 				taskYIELD();
3267:FreeRTOS\source/tasks.c **** 			}
3268:FreeRTOS\source/tasks.c **** 			else
3269:FreeRTOS\source/tasks.c **** 			{
3270:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3271:FreeRTOS\source/tasks.c **** 			}
3272:FreeRTOS\source/tasks.c **** 		}
3273:FreeRTOS\source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3274:FreeRTOS\source/tasks.c **** 
3275:FreeRTOS\source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3276:FreeRTOS\source/tasks.c **** 		{
3277:FreeRTOS\source/tasks.c **** 			extern void vApplicationIdleHook( void );
3278:FreeRTOS\source/tasks.c **** 
3279:FreeRTOS\source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3280:FreeRTOS\source/tasks.c **** 			allows the application designer to add background functionality
3281:FreeRTOS\source/tasks.c **** 			without the overhead of a separate task.
3282:FreeRTOS\source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3283:FreeRTOS\source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3284:FreeRTOS\source/tasks.c **** 			vApplicationIdleHook();
3285:FreeRTOS\source/tasks.c **** 		}
3286:FreeRTOS\source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3287:FreeRTOS\source/tasks.c **** 
3288:FreeRTOS\source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3289:FreeRTOS\source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3290:FreeRTOS\source/tasks.c **** 		user defined low power mode	implementations require
3291:FreeRTOS\source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3292:FreeRTOS\source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3293:FreeRTOS\source/tasks.c **** 		{
3294:FreeRTOS\source/tasks.c **** 		TickType_t xExpectedIdleTime;
3295:FreeRTOS\source/tasks.c **** 
3296:FreeRTOS\source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3297:FreeRTOS\source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3298:FreeRTOS\source/tasks.c **** 			test of the expected idle time is performed without the
3299:FreeRTOS\source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3300:FreeRTOS\source/tasks.c **** 			valid. */
3301:FreeRTOS\source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3302:FreeRTOS\source/tasks.c **** 
3303:FreeRTOS\source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3304:FreeRTOS\source/tasks.c **** 			{
3305:FreeRTOS\source/tasks.c **** 				vTaskSuspendAll();
3306:FreeRTOS\source/tasks.c **** 				{
3307:FreeRTOS\source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3308:FreeRTOS\source/tasks.c **** 					time can be sampled again, and this time its value can
3309:FreeRTOS\source/tasks.c **** 					be used. */
3310:FreeRTOS\source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 61


3311:FreeRTOS\source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3312:FreeRTOS\source/tasks.c **** 
3313:FreeRTOS\source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3314:FreeRTOS\source/tasks.c **** 					if the application does not want
3315:FreeRTOS\source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3316:FreeRTOS\source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3317:FreeRTOS\source/tasks.c **** 
3318:FreeRTOS\source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3319:FreeRTOS\source/tasks.c **** 					{
3320:FreeRTOS\source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3321:FreeRTOS\source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3322:FreeRTOS\source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3323:FreeRTOS\source/tasks.c **** 					}
3324:FreeRTOS\source/tasks.c **** 					else
3325:FreeRTOS\source/tasks.c **** 					{
3326:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3327:FreeRTOS\source/tasks.c **** 					}
3328:FreeRTOS\source/tasks.c **** 				}
3329:FreeRTOS\source/tasks.c **** 				( void ) xTaskResumeAll();
3330:FreeRTOS\source/tasks.c **** 			}
3331:FreeRTOS\source/tasks.c **** 			else
3332:FreeRTOS\source/tasks.c **** 			{
3333:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3334:FreeRTOS\source/tasks.c **** 			}
3335:FreeRTOS\source/tasks.c **** 		}
3336:FreeRTOS\source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3337:FreeRTOS\source/tasks.c **** 	}
3338:FreeRTOS\source/tasks.c **** }
3339:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3340:FreeRTOS\source/tasks.c **** 
3341:FreeRTOS\source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3342:FreeRTOS\source/tasks.c **** 
3343:FreeRTOS\source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3344:FreeRTOS\source/tasks.c **** 	{
3345:FreeRTOS\source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3346:FreeRTOS\source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3347:FreeRTOS\source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3348:FreeRTOS\source/tasks.c **** 
3349:FreeRTOS\source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3350:FreeRTOS\source/tasks.c **** 		{
3351:FreeRTOS\source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3352:FreeRTOS\source/tasks.c **** 			eReturn = eAbortSleep;
3353:FreeRTOS\source/tasks.c **** 		}
3354:FreeRTOS\source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3355:FreeRTOS\source/tasks.c **** 		{
3356:FreeRTOS\source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3357:FreeRTOS\source/tasks.c **** 			eReturn = eAbortSleep;
3358:FreeRTOS\source/tasks.c **** 		}
3359:FreeRTOS\source/tasks.c **** 		else
3360:FreeRTOS\source/tasks.c **** 		{
3361:FreeRTOS\source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3362:FreeRTOS\source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3363:FreeRTOS\source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3364:FreeRTOS\source/tasks.c **** 			interrupts. */
3365:FreeRTOS\source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3366:FreeRTOS\source/tasks.c **** 			{
3367:FreeRTOS\source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 62


3368:FreeRTOS\source/tasks.c **** 			}
3369:FreeRTOS\source/tasks.c **** 			else
3370:FreeRTOS\source/tasks.c **** 			{
3371:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3372:FreeRTOS\source/tasks.c **** 			}
3373:FreeRTOS\source/tasks.c **** 		}
3374:FreeRTOS\source/tasks.c **** 
3375:FreeRTOS\source/tasks.c **** 		return eReturn;
3376:FreeRTOS\source/tasks.c **** 	}
3377:FreeRTOS\source/tasks.c **** 
3378:FreeRTOS\source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3379:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3380:FreeRTOS\source/tasks.c **** 
3381:FreeRTOS\source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3382:FreeRTOS\source/tasks.c **** 
3383:FreeRTOS\source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3384:FreeRTOS\source/tasks.c **** 	{
3385:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
3386:FreeRTOS\source/tasks.c **** 
3387:FreeRTOS\source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3388:FreeRTOS\source/tasks.c **** 		{
3389:FreeRTOS\source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3390:FreeRTOS\source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3391:FreeRTOS\source/tasks.c **** 		}
3392:FreeRTOS\source/tasks.c **** 	}
3393:FreeRTOS\source/tasks.c **** 
3394:FreeRTOS\source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3395:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3396:FreeRTOS\source/tasks.c **** 
3397:FreeRTOS\source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3398:FreeRTOS\source/tasks.c **** 
3399:FreeRTOS\source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3400:FreeRTOS\source/tasks.c **** 	{
3401:FreeRTOS\source/tasks.c **** 	void *pvReturn = NULL;
3402:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
3403:FreeRTOS\source/tasks.c **** 
3404:FreeRTOS\source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3405:FreeRTOS\source/tasks.c **** 		{
3406:FreeRTOS\source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3407:FreeRTOS\source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3408:FreeRTOS\source/tasks.c **** 		}
3409:FreeRTOS\source/tasks.c **** 		else
3410:FreeRTOS\source/tasks.c **** 		{
3411:FreeRTOS\source/tasks.c **** 			pvReturn = NULL;
3412:FreeRTOS\source/tasks.c **** 		}
3413:FreeRTOS\source/tasks.c **** 
3414:FreeRTOS\source/tasks.c **** 		return pvReturn;
3415:FreeRTOS\source/tasks.c **** 	}
3416:FreeRTOS\source/tasks.c **** 
3417:FreeRTOS\source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3418:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3419:FreeRTOS\source/tasks.c **** 
3420:FreeRTOS\source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3421:FreeRTOS\source/tasks.c **** 
3422:FreeRTOS\source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3423:FreeRTOS\source/tasks.c **** 	{
3424:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 63


3425:FreeRTOS\source/tasks.c **** 
3426:FreeRTOS\source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3427:FreeRTOS\source/tasks.c **** 		the calling task. */
3428:FreeRTOS\source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3429:FreeRTOS\source/tasks.c **** 
3430:FreeRTOS\source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3431:FreeRTOS\source/tasks.c **** 	}
3432:FreeRTOS\source/tasks.c **** 
3433:FreeRTOS\source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3434:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3435:FreeRTOS\source/tasks.c **** 
3436:FreeRTOS\source/tasks.c **** static void prvInitialiseTaskLists( void )
3437:FreeRTOS\source/tasks.c **** {
3438:FreeRTOS\source/tasks.c **** UBaseType_t uxPriority;
3439:FreeRTOS\source/tasks.c **** 
3440:FreeRTOS\source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3441:FreeRTOS\source/tasks.c **** 	{
3442:FreeRTOS\source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3443:FreeRTOS\source/tasks.c **** 	}
3444:FreeRTOS\source/tasks.c **** 
3445:FreeRTOS\source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3446:FreeRTOS\source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3447:FreeRTOS\source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3448:FreeRTOS\source/tasks.c **** 
3449:FreeRTOS\source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3450:FreeRTOS\source/tasks.c **** 	{
3451:FreeRTOS\source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3452:FreeRTOS\source/tasks.c **** 	}
3453:FreeRTOS\source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3454:FreeRTOS\source/tasks.c **** 
3455:FreeRTOS\source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3456:FreeRTOS\source/tasks.c **** 	{
3457:FreeRTOS\source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3458:FreeRTOS\source/tasks.c **** 	}
3459:FreeRTOS\source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3460:FreeRTOS\source/tasks.c **** 
3461:FreeRTOS\source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3462:FreeRTOS\source/tasks.c **** 	using list2. */
3463:FreeRTOS\source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3464:FreeRTOS\source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3465:FreeRTOS\source/tasks.c **** }
3466:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3467:FreeRTOS\source/tasks.c **** 
3468:FreeRTOS\source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3469:FreeRTOS\source/tasks.c **** {
3470:FreeRTOS\source/tasks.c **** 
3471:FreeRTOS\source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3472:FreeRTOS\source/tasks.c **** 
3473:FreeRTOS\source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3474:FreeRTOS\source/tasks.c **** 	{
3475:FreeRTOS\source/tasks.c **** 		TCB_t *pxTCB;
3476:FreeRTOS\source/tasks.c **** 
3477:FreeRTOS\source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3478:FreeRTOS\source/tasks.c **** 		being called too often in the idle task. */
3479:FreeRTOS\source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3480:FreeRTOS\source/tasks.c **** 		{
3481:FreeRTOS\source/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 64


3482:FreeRTOS\source/tasks.c **** 			{
3483:FreeRTOS\source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3484:FreeRTOS\source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3485:FreeRTOS\source/tasks.c **** 				--uxCurrentNumberOfTasks;
3486:FreeRTOS\source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3487:FreeRTOS\source/tasks.c **** 			}
3488:FreeRTOS\source/tasks.c **** 			taskEXIT_CRITICAL();
3489:FreeRTOS\source/tasks.c **** 
3490:FreeRTOS\source/tasks.c **** 			prvDeleteTCB( pxTCB );
3491:FreeRTOS\source/tasks.c **** 		}
3492:FreeRTOS\source/tasks.c **** 	}
3493:FreeRTOS\source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3494:FreeRTOS\source/tasks.c **** }
3495:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3496:FreeRTOS\source/tasks.c **** 
3497:FreeRTOS\source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3498:FreeRTOS\source/tasks.c **** 
3499:FreeRTOS\source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3500:FreeRTOS\source/tasks.c **** 	{
3501:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
3502:FreeRTOS\source/tasks.c **** 
3503:FreeRTOS\source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3504:FreeRTOS\source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3505:FreeRTOS\source/tasks.c **** 
3506:FreeRTOS\source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3507:FreeRTOS\source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3508:FreeRTOS\source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3509:FreeRTOS\source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3510:FreeRTOS\source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3511:FreeRTOS\source/tasks.c **** 
3512:FreeRTOS\source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3513:FreeRTOS\source/tasks.c **** 		{
3514:FreeRTOS\source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3515:FreeRTOS\source/tasks.c **** 		}
3516:FreeRTOS\source/tasks.c **** 		#else
3517:FreeRTOS\source/tasks.c **** 		{
3518:FreeRTOS\source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3519:FreeRTOS\source/tasks.c **** 		}
3520:FreeRTOS\source/tasks.c **** 		#endif
3521:FreeRTOS\source/tasks.c **** 
3522:FreeRTOS\source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3523:FreeRTOS\source/tasks.c **** 		{
3524:FreeRTOS\source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3525:FreeRTOS\source/tasks.c **** 		}
3526:FreeRTOS\source/tasks.c **** 		#else
3527:FreeRTOS\source/tasks.c **** 		{
3528:FreeRTOS\source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3529:FreeRTOS\source/tasks.c **** 		}
3530:FreeRTOS\source/tasks.c **** 		#endif
3531:FreeRTOS\source/tasks.c **** 
3532:FreeRTOS\source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3533:FreeRTOS\source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3534:FreeRTOS\source/tasks.c **** 		state is just set to whatever is passed in. */
3535:FreeRTOS\source/tasks.c **** 		if( eState != eInvalid )
3536:FreeRTOS\source/tasks.c **** 		{
3537:FreeRTOS\source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3538:FreeRTOS\source/tasks.c **** 			{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 65


3539:FreeRTOS\source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3540:FreeRTOS\source/tasks.c **** 			}
3541:FreeRTOS\source/tasks.c **** 			else
3542:FreeRTOS\source/tasks.c **** 			{
3543:FreeRTOS\source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3544:FreeRTOS\source/tasks.c **** 
3545:FreeRTOS\source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3546:FreeRTOS\source/tasks.c **** 				{
3547:FreeRTOS\source/tasks.c **** 					/* If the task is in the suspended list then there is a
3548:FreeRTOS\source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3549:FreeRTOS\source/tasks.c **** 					it should be reported as being in the Blocked state. */
3550:FreeRTOS\source/tasks.c **** 					if( eState == eSuspended )
3551:FreeRTOS\source/tasks.c **** 					{
3552:FreeRTOS\source/tasks.c **** 						vTaskSuspendAll();
3553:FreeRTOS\source/tasks.c **** 						{
3554:FreeRTOS\source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3555:FreeRTOS\source/tasks.c **** 							{
3556:FreeRTOS\source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3557:FreeRTOS\source/tasks.c **** 							}
3558:FreeRTOS\source/tasks.c **** 						}
3559:FreeRTOS\source/tasks.c **** 						( void ) xTaskResumeAll();
3560:FreeRTOS\source/tasks.c **** 					}
3561:FreeRTOS\source/tasks.c **** 				}
3562:FreeRTOS\source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3563:FreeRTOS\source/tasks.c **** 			}
3564:FreeRTOS\source/tasks.c **** 		}
3565:FreeRTOS\source/tasks.c **** 		else
3566:FreeRTOS\source/tasks.c **** 		{
3567:FreeRTOS\source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3568:FreeRTOS\source/tasks.c **** 		}
3569:FreeRTOS\source/tasks.c **** 
3570:FreeRTOS\source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3571:FreeRTOS\source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3572:FreeRTOS\source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3573:FreeRTOS\source/tasks.c **** 		{
3574:FreeRTOS\source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3575:FreeRTOS\source/tasks.c **** 			{
3576:FreeRTOS\source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3577:FreeRTOS\source/tasks.c **** 			}
3578:FreeRTOS\source/tasks.c **** 			#else
3579:FreeRTOS\source/tasks.c **** 			{
3580:FreeRTOS\source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3581:FreeRTOS\source/tasks.c **** 			}
3582:FreeRTOS\source/tasks.c **** 			#endif
3583:FreeRTOS\source/tasks.c **** 		}
3584:FreeRTOS\source/tasks.c **** 		else
3585:FreeRTOS\source/tasks.c **** 		{
3586:FreeRTOS\source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3587:FreeRTOS\source/tasks.c **** 		}
3588:FreeRTOS\source/tasks.c **** 	}
3589:FreeRTOS\source/tasks.c **** 
3590:FreeRTOS\source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3591:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3592:FreeRTOS\source/tasks.c **** 
3593:FreeRTOS\source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3594:FreeRTOS\source/tasks.c **** 
3595:FreeRTOS\source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 66


3596:FreeRTOS\source/tasks.c **** 	{
3597:FreeRTOS\source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3598:FreeRTOS\source/tasks.c **** 	UBaseType_t uxTask = 0;
3599:FreeRTOS\source/tasks.c **** 
3600:FreeRTOS\source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3601:FreeRTOS\source/tasks.c **** 		{
3602:FreeRTOS\source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3603:FreeRTOS\source/tasks.c **** 
3604:FreeRTOS\source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3605:FreeRTOS\source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3606:FreeRTOS\source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3607:FreeRTOS\source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3608:FreeRTOS\source/tasks.c **** 			do
3609:FreeRTOS\source/tasks.c **** 			{
3610:FreeRTOS\source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3611:FreeRTOS\source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3612:FreeRTOS\source/tasks.c **** 				uxTask++;
3613:FreeRTOS\source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3614:FreeRTOS\source/tasks.c **** 		}
3615:FreeRTOS\source/tasks.c **** 		else
3616:FreeRTOS\source/tasks.c **** 		{
3617:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3618:FreeRTOS\source/tasks.c **** 		}
3619:FreeRTOS\source/tasks.c **** 
3620:FreeRTOS\source/tasks.c **** 		return uxTask;
3621:FreeRTOS\source/tasks.c **** 	}
3622:FreeRTOS\source/tasks.c **** 
3623:FreeRTOS\source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3624:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3625:FreeRTOS\source/tasks.c **** 
3626:FreeRTOS\source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3627:FreeRTOS\source/tasks.c **** 
3628:FreeRTOS\source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3629:FreeRTOS\source/tasks.c **** 	{
 110              		.loc 1 3629 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.LVL8:
3630:FreeRTOS\source/tasks.c **** 	uint32_t ulCount = 0U;
 116              		.loc 1 3630 0
 117 0000 0023     		movs	r3, #0
3631:FreeRTOS\source/tasks.c **** 
3632:FreeRTOS\source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 118              		.loc 1 3632 0
 119 0002 01E0     		b	.L15
 120              	.LVL9:
 121              	.L16:
3633:FreeRTOS\source/tasks.c **** 		{
3634:FreeRTOS\source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 122              		.loc 1 3634 0
 123 0004 0130     		adds	r0, r0, #1
 124              	.LVL10:
3635:FreeRTOS\source/tasks.c **** 			ulCount++;
 125              		.loc 1 3635 0
 126 0006 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 67


 127              	.LVL11:
 128              	.L15:
3632:FreeRTOS\source/tasks.c **** 		{
 129              		.loc 1 3632 0
 130 0008 0278     		ldrb	r2, [r0]
 131 000a A52A     		cmp	r2, #165
 132 000c FAD0     		beq	.L16
3636:FreeRTOS\source/tasks.c **** 		}
3637:FreeRTOS\source/tasks.c **** 
3638:FreeRTOS\source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 133              		.loc 1 3638 0
 134 000e 9B08     		lsrs	r3, r3, #2
 135              	.LVL12:
3639:FreeRTOS\source/tasks.c **** 
3640:FreeRTOS\source/tasks.c **** 		return ( uint16_t ) ulCount;
 136              		.loc 1 3640 0
 137 0010 98B2     		uxth	r0, r3
 138              	.LVL13:
3641:FreeRTOS\source/tasks.c **** 	}
 139              		.loc 1 3641 0
 140              		@ sp needed
 141 0012 7047     		bx	lr
 142              		.cfi_endproc
 143              	.LFE68:
 144              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 145              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 146              		.align	2
 147              		.code	16
 148              		.thumb_func
 149              		.type	prvResetNextTaskUnblockTime, %function
 150              	prvResetNextTaskUnblockTime:
 151              	.LFB71:
3642:FreeRTOS\source/tasks.c **** 
3643:FreeRTOS\source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3644:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3645:FreeRTOS\source/tasks.c **** 
3646:FreeRTOS\source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3647:FreeRTOS\source/tasks.c **** 
3648:FreeRTOS\source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3649:FreeRTOS\source/tasks.c **** 	{
3650:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
3651:FreeRTOS\source/tasks.c **** 	uint8_t *pucEndOfStack;
3652:FreeRTOS\source/tasks.c **** 	UBaseType_t uxReturn;
3653:FreeRTOS\source/tasks.c **** 
3654:FreeRTOS\source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3655:FreeRTOS\source/tasks.c **** 
3656:FreeRTOS\source/tasks.c **** 		#if portSTACK_GROWTH < 0
3657:FreeRTOS\source/tasks.c **** 		{
3658:FreeRTOS\source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3659:FreeRTOS\source/tasks.c **** 		}
3660:FreeRTOS\source/tasks.c **** 		#else
3661:FreeRTOS\source/tasks.c **** 		{
3662:FreeRTOS\source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3663:FreeRTOS\source/tasks.c **** 		}
3664:FreeRTOS\source/tasks.c **** 		#endif
3665:FreeRTOS\source/tasks.c **** 
3666:FreeRTOS\source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 68


3667:FreeRTOS\source/tasks.c **** 
3668:FreeRTOS\source/tasks.c **** 		return uxReturn;
3669:FreeRTOS\source/tasks.c **** 	}
3670:FreeRTOS\source/tasks.c **** 
3671:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3672:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3673:FreeRTOS\source/tasks.c **** 
3674:FreeRTOS\source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3675:FreeRTOS\source/tasks.c **** 
3676:FreeRTOS\source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3677:FreeRTOS\source/tasks.c **** 	{
3678:FreeRTOS\source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3679:FreeRTOS\source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3680:FreeRTOS\source/tasks.c **** 		want to allocate and clean RAM statically. */
3681:FreeRTOS\source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3682:FreeRTOS\source/tasks.c **** 
3683:FreeRTOS\source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3684:FreeRTOS\source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3685:FreeRTOS\source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3686:FreeRTOS\source/tasks.c **** 		{
3687:FreeRTOS\source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3688:FreeRTOS\source/tasks.c **** 		}
3689:FreeRTOS\source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3690:FreeRTOS\source/tasks.c **** 
3691:FreeRTOS\source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3692:FreeRTOS\source/tasks.c **** 		{
3693:FreeRTOS\source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3694:FreeRTOS\source/tasks.c **** 			the stack and TCB. */
3695:FreeRTOS\source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3696:FreeRTOS\source/tasks.c **** 			vPortFree( pxTCB );
3697:FreeRTOS\source/tasks.c **** 		}
3698:FreeRTOS\source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3699:FreeRTOS\source/tasks.c **** 		{
3700:FreeRTOS\source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3701:FreeRTOS\source/tasks.c **** 			check what was statically allocated before trying to free the
3702:FreeRTOS\source/tasks.c **** 			memory. */
3703:FreeRTOS\source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3704:FreeRTOS\source/tasks.c **** 			{
3705:FreeRTOS\source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3706:FreeRTOS\source/tasks.c **** 				must be freed. */
3707:FreeRTOS\source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3708:FreeRTOS\source/tasks.c **** 				vPortFree( pxTCB );
3709:FreeRTOS\source/tasks.c **** 			}
3710:FreeRTOS\source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3711:FreeRTOS\source/tasks.c **** 			{
3712:FreeRTOS\source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3713:FreeRTOS\source/tasks.c **** 				only memory that must be freed. */
3714:FreeRTOS\source/tasks.c **** 				vPortFree( pxTCB );
3715:FreeRTOS\source/tasks.c **** 			}
3716:FreeRTOS\source/tasks.c **** 			else
3717:FreeRTOS\source/tasks.c **** 			{
3718:FreeRTOS\source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3719:FreeRTOS\source/tasks.c **** 				nothing needs to be freed. */
3720:FreeRTOS\source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3721:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3722:FreeRTOS\source/tasks.c **** 			}
3723:FreeRTOS\source/tasks.c **** 		}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 69


3724:FreeRTOS\source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3725:FreeRTOS\source/tasks.c **** 	}
3726:FreeRTOS\source/tasks.c **** 
3727:FreeRTOS\source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3728:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3729:FreeRTOS\source/tasks.c **** 
3730:FreeRTOS\source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3731:FreeRTOS\source/tasks.c **** {
 152              		.loc 1 3731 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
3732:FreeRTOS\source/tasks.c **** TCB_t *pxTCB;
3733:FreeRTOS\source/tasks.c **** 
3734:FreeRTOS\source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 157              		.loc 1 3734 0
 158 0000 0A4B     		ldr	r3, .L22
 159 0002 9B6A     		ldr	r3, [r3, #40]
 160 0004 1B68     		ldr	r3, [r3]
 161 0006 002B     		cmp	r3, #0
 162 0008 01D1     		bne	.L21
 163 000a 0133     		adds	r3, r3, #1
 164 000c 00E0     		b	.L18
 165              	.L21:
 166 000e 0023     		movs	r3, #0
 167              	.L18:
 168              		.loc 1 3734 0 is_stmt 0 discriminator 4
 169 0010 002B     		cmp	r3, #0
 170 0012 04D0     		beq	.L19
3735:FreeRTOS\source/tasks.c **** 	{
3736:FreeRTOS\source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3737:FreeRTOS\source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3738:FreeRTOS\source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3739:FreeRTOS\source/tasks.c **** 		there is an item in the delayed list. */
3740:FreeRTOS\source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 171              		.loc 1 3740 0 is_stmt 1
 172 0014 0122     		movs	r2, #1
 173 0016 5242     		rsbs	r2, r2, #0
 174 0018 044B     		ldr	r3, .L22
 175 001a DA62     		str	r2, [r3, #44]
 176 001c 05E0     		b	.L17
 177              	.L19:
3741:FreeRTOS\source/tasks.c **** 	}
3742:FreeRTOS\source/tasks.c **** 	else
3743:FreeRTOS\source/tasks.c **** 	{
3744:FreeRTOS\source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3745:FreeRTOS\source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3746:FreeRTOS\source/tasks.c **** 		which the task at the head of the delayed list should be removed
3747:FreeRTOS\source/tasks.c **** 		from the Blocked state. */
3748:FreeRTOS\source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 178              		.loc 1 3748 0
 179 001e 034B     		ldr	r3, .L22
 180 0020 9A6A     		ldr	r2, [r3, #40]
 181 0022 D268     		ldr	r2, [r2, #12]
 182 0024 D268     		ldr	r2, [r2, #12]
 183              	.LVL14:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 70


3749:FreeRTOS\source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 184              		.loc 1 3749 0
 185 0026 5268     		ldr	r2, [r2, #4]
 186              	.LVL15:
 187 0028 DA62     		str	r2, [r3, #44]
 188              	.L17:
3750:FreeRTOS\source/tasks.c **** 	}
3751:FreeRTOS\source/tasks.c **** }
 189              		.loc 1 3751 0
 190              		@ sp needed
 191 002a 7047     		bx	lr
 192              	.L23:
 193              		.align	2
 194              	.L22:
 195 002c 00000000 		.word	.LANCHOR0
 196              		.cfi_endproc
 197              	.LFE71:
 198              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 199              		.section	.text.prvDeleteTCB,"ax",%progbits
 200              		.align	2
 201              		.code	16
 202              		.thumb_func
 203              		.type	prvDeleteTCB, %function
 204              	prvDeleteTCB:
 205              	.LFB70:
3677:FreeRTOS\source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 206              		.loc 1 3677 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              	.LVL16:
 211 0000 10B5     		push	{r4, lr}
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 4, -8
 214              		.cfi_offset 14, -4
 215 0002 0400     		movs	r4, r0
3695:FreeRTOS\source/tasks.c **** 			vPortFree( pxTCB );
 216              		.loc 1 3695 0
 217 0004 006B     		ldr	r0, [r0, #48]
 218              	.LVL17:
 219 0006 FFF7FEFF 		bl	vPortFree
 220              	.LVL18:
3696:FreeRTOS\source/tasks.c **** 		}
 221              		.loc 1 3696 0
 222 000a 2000     		movs	r0, r4
 223 000c FFF7FEFF 		bl	vPortFree
 224              	.LVL19:
3725:FreeRTOS\source/tasks.c **** 
 225              		.loc 1 3725 0
 226              		@ sp needed
 227              	.LVL20:
 228 0010 10BD     		pop	{r4, pc}
 229              		.cfi_endproc
 230              	.LFE70:
 231              		.size	prvDeleteTCB, .-prvDeleteTCB
 232 0012 C046     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 233              		.align	2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 71


 234              		.code	16
 235              		.thumb_func
 236              		.type	prvInitialiseNewTask, %function
 237              	prvInitialiseNewTask:
 238              	.LFB33:
 831:FreeRTOS\source/tasks.c **** StackType_t *pxTopOfStack;
 239              		.loc 1 831 0
 240              		.cfi_startproc
 241              		@ args = 16, pretend = 0, frame = 8
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              	.LVL21:
 244 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 245              		.cfi_def_cfa_offset 20
 246              		.cfi_offset 4, -20
 247              		.cfi_offset 5, -16
 248              		.cfi_offset 6, -12
 249              		.cfi_offset 7, -8
 250              		.cfi_offset 14, -4
 251 0002 83B0     		sub	sp, sp, #12
 252              		.cfi_def_cfa_offset 32
 253 0004 0090     		str	r0, [sp]
 254 0006 0D00     		movs	r5, r1
 255 0008 1700     		movs	r7, r2
 256 000a 0193     		str	r3, [sp, #4]
 257 000c 089C     		ldr	r4, [sp, #32]
 258 000e 0A9E     		ldr	r6, [sp, #40]
 853:FreeRTOS\source/tasks.c **** 	}
 259              		.loc 1 853 0
 260 0010 9200     		lsls	r2, r2, #2
 261              	.LVL22:
 262 0012 A521     		movs	r1, #165
 263              	.LVL23:
 264 0014 306B     		ldr	r0, [r6, #48]
 265              	.LVL24:
 266 0016 FFF7FEFF 		bl	memset
 267              	.LVL25:
 863:FreeRTOS\source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 268              		.loc 1 863 0
 269 001a 234B     		ldr	r3, .L34
 270 001c FB18     		adds	r3, r7, r3
 271 001e 9B00     		lsls	r3, r3, #2
 272 0020 326B     		ldr	r2, [r6, #48]
 273 0022 9446     		mov	ip, r2
 274 0024 6344     		add	r3, r3, ip
 275              	.LVL26:
 864:FreeRTOS\source/tasks.c **** 
 276              		.loc 1 864 0
 277 0026 0722     		movs	r2, #7
 278 0028 9343     		bics	r3, r2
 279              	.LVL27:
 280 002a 1F00     		movs	r7, r3
 281              	.LVL28:
 891:FreeRTOS\source/tasks.c **** 	{
 282              		.loc 1 891 0
 283 002c 0023     		movs	r3, #0
 284              	.LVL29:
 285 002e 08E0     		b	.L26
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 72


 286              	.LVL30:
 287              	.L28:
 893:FreeRTOS\source/tasks.c **** 
 288              		.loc 1 893 0
 289 0030 E918     		adds	r1, r5, r3
 290 0032 0878     		ldrb	r0, [r1]
 291 0034 F218     		adds	r2, r6, r3
 292 0036 3432     		adds	r2, r2, #52
 293 0038 1070     		strb	r0, [r2]
 898:FreeRTOS\source/tasks.c **** 		{
 294              		.loc 1 898 0
 295 003a 0A78     		ldrb	r2, [r1]
 296 003c 002A     		cmp	r2, #0
 297 003e 02D0     		beq	.L27
 891:FreeRTOS\source/tasks.c **** 	{
 298              		.loc 1 891 0 discriminator 2
 299 0040 0133     		adds	r3, r3, #1
 300              	.LVL31:
 301              	.L26:
 891:FreeRTOS\source/tasks.c **** 	{
 302              		.loc 1 891 0 is_stmt 0 discriminator 1
 303 0042 0F2B     		cmp	r3, #15
 304 0044 F4D9     		bls	.L28
 305              	.L27:
 910:FreeRTOS\source/tasks.c **** 
 306              		.loc 1 910 0 is_stmt 1
 307 0046 0022     		movs	r2, #0
 308 0048 4323     		movs	r3, #67
 309              	.LVL32:
 310 004a F254     		strb	r2, [r6, r3]
 914:FreeRTOS\source/tasks.c **** 	{
 311              		.loc 1 914 0
 312 004c 042C     		cmp	r4, #4
 313 004e 00D9     		bls	.L29
 916:FreeRTOS\source/tasks.c **** 	}
 314              		.loc 1 916 0
 315 0050 0424     		movs	r4, #4
 316              	.L29:
 317              	.LVL33:
 923:FreeRTOS\source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 318              		.loc 1 923 0
 319 0052 F462     		str	r4, [r6, #44]
 926:FreeRTOS\source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 320              		.loc 1 926 0
 321 0054 7464     		str	r4, [r6, #68]
 927:FreeRTOS\source/tasks.c **** 	}
 322              		.loc 1 927 0
 323 0056 0023     		movs	r3, #0
 324 0058 B364     		str	r3, [r6, #72]
 931:FreeRTOS\source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 325              		.loc 1 931 0
 326 005a 301D     		adds	r0, r6, #4
 327 005c FFF7FEFF 		bl	vListInitialiseItem
 328              	.LVL34:
 932:FreeRTOS\source/tasks.c **** 
 329              		.loc 1 932 0
 330 0060 3000     		movs	r0, r6
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 73


 331 0062 1830     		adds	r0, r0, #24
 332 0064 FFF7FEFF 		bl	vListInitialiseItem
 333              	.LVL35:
 936:FreeRTOS\source/tasks.c **** 
 334              		.loc 1 936 0
 335 0068 3661     		str	r6, [r6, #16]
 939:FreeRTOS\source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 336              		.loc 1 939 0
 337 006a 0523     		movs	r3, #5
 338 006c 1C1B     		subs	r4, r3, r4
 339              	.LVL36:
 340 006e B461     		str	r4, [r6, #24]
 940:FreeRTOS\source/tasks.c **** 
 341              		.loc 1 940 0
 342 0070 7662     		str	r6, [r6, #36]
 343              	.LVL37:
 973:FreeRTOS\source/tasks.c **** 		{
 344              		.loc 1 973 0
 345 0072 0022     		movs	r2, #0
 346 0074 06E0     		b	.L30
 347              	.LVL38:
 348              	.L31:
 975:FreeRTOS\source/tasks.c **** 		}
 349              		.loc 1 975 0 discriminator 3
 350 0076 1300     		movs	r3, r2
 351 0078 1233     		adds	r3, r3, #18
 352 007a 9B00     		lsls	r3, r3, #2
 353 007c F318     		adds	r3, r6, r3
 354 007e 0021     		movs	r1, #0
 355 0080 5960     		str	r1, [r3, #4]
 973:FreeRTOS\source/tasks.c **** 		{
 356              		.loc 1 973 0 discriminator 3
 357 0082 0132     		adds	r2, r2, #1
 358              	.LVL39:
 359              	.L30:
 973:FreeRTOS\source/tasks.c **** 		{
 360              		.loc 1 973 0 is_stmt 0 discriminator 1
 361 0084 042A     		cmp	r2, #4
 362 0086 F6D9     		bls	.L31
 982:FreeRTOS\source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 363              		.loc 1 982 0 is_stmt 1
 364 0088 0023     		movs	r3, #0
 365 008a 3366     		str	r3, [r6, #96]
 983:FreeRTOS\source/tasks.c **** 	}
 366              		.loc 1 983 0
 367 008c 6422     		movs	r2, #100
 368              	.LVL40:
 369 008e B354     		strb	r3, [r6, r2]
1010:FreeRTOS\source/tasks.c **** 	}
 370              		.loc 1 1010 0
 371 0090 019A     		ldr	r2, [sp, #4]
 372 0092 0099     		ldr	r1, [sp]
 373 0094 3800     		movs	r0, r7
 374 0096 FFF7FEFF 		bl	pxPortInitialiseStack
 375              	.LVL41:
 376 009a 3060     		str	r0, [r6]
1014:FreeRTOS\source/tasks.c **** 	{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 74


 377              		.loc 1 1014 0
 378 009c 099B     		ldr	r3, [sp, #36]
 379 009e 002B     		cmp	r3, #0
 380 00a0 00D0     		beq	.L25
1018:FreeRTOS\source/tasks.c **** 	}
 381              		.loc 1 1018 0
 382 00a2 1E60     		str	r6, [r3]
 383              	.L25:
1024:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 384              		.loc 1 1024 0
 385 00a4 03B0     		add	sp, sp, #12
 386              	.LVL42:
 387              		@ sp needed
 388              	.LVL43:
 389              	.LVL44:
 390 00a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 391              	.L35:
 392              		.align	2
 393              	.L34:
 394 00a8 FFFFFF3F 		.word	1073741823
 395              		.cfi_endproc
 396              	.LFE33:
 397              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 398              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 399              		.align	2
 400              		.code	16
 401              		.thumb_func
 402              		.type	prvInitialiseTaskLists, %function
 403              	prvInitialiseTaskLists:
 404              	.LFB66:
3437:FreeRTOS\source/tasks.c **** UBaseType_t uxPriority;
 405              		.loc 1 3437 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 410              		.cfi_def_cfa_offset 24
 411              		.cfi_offset 3, -24
 412              		.cfi_offset 4, -20
 413              		.cfi_offset 5, -16
 414              		.cfi_offset 6, -12
 415              		.cfi_offset 7, -8
 416              		.cfi_offset 14, -4
 417              	.LVL45:
3440:FreeRTOS\source/tasks.c **** 	{
 418              		.loc 1 3440 0
 419 0002 0024     		movs	r4, #0
 420 0004 08E0     		b	.L37
 421              	.LVL46:
 422              	.L38:
3442:FreeRTOS\source/tasks.c **** 	}
 423              		.loc 1 3442 0 discriminator 3
 424 0006 A200     		lsls	r2, r4, #2
 425 0008 1219     		adds	r2, r2, r4
 426 000a 9300     		lsls	r3, r2, #2
 427 000c 1048     		ldr	r0, .L39
 428 000e 3030     		adds	r0, r0, #48
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 75


 429 0010 C018     		adds	r0, r0, r3
 430 0012 FFF7FEFF 		bl	vListInitialise
 431              	.LVL47:
3440:FreeRTOS\source/tasks.c **** 	{
 432              		.loc 1 3440 0 discriminator 3
 433 0016 0134     		adds	r4, r4, #1
 434              	.LVL48:
 435              	.L37:
3440:FreeRTOS\source/tasks.c **** 	{
 436              		.loc 1 3440 0 is_stmt 0 discriminator 1
 437 0018 042C     		cmp	r4, #4
 438 001a F4D9     		bls	.L38
3445:FreeRTOS\source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 439              		.loc 1 3445 0 is_stmt 1
 440 001c 0D4C     		ldr	r4, .L39+4
 441              	.LVL49:
 442 001e 2700     		movs	r7, r4
 443 0020 1437     		adds	r7, r7, #20
 444 0022 3800     		movs	r0, r7
 445 0024 FFF7FEFF 		bl	vListInitialise
 446              	.LVL50:
3446:FreeRTOS\source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 447              		.loc 1 3446 0
 448 0028 2600     		movs	r6, r4
 449 002a 2836     		adds	r6, r6, #40
 450 002c 3000     		movs	r0, r6
 451 002e FFF7FEFF 		bl	vListInitialise
 452              	.LVL51:
3447:FreeRTOS\source/tasks.c **** 
 453              		.loc 1 3447 0
 454 0032 074D     		ldr	r5, .L39
 455 0034 2800     		movs	r0, r5
 456 0036 1430     		adds	r0, r0, #20
 457 0038 FFF7FEFF 		bl	vListInitialise
 458              	.LVL52:
3451:FreeRTOS\source/tasks.c **** 	}
 459              		.loc 1 3451 0
 460 003c 2000     		movs	r0, r4
 461 003e 3C30     		adds	r0, r0, #60
 462 0040 FFF7FEFF 		bl	vListInitialise
 463              	.LVL53:
3457:FreeRTOS\source/tasks.c **** 	}
 464              		.loc 1 3457 0
 465 0044 2800     		movs	r0, r5
 466 0046 FFF7FEFF 		bl	vListInitialise
 467              	.LVL54:
3463:FreeRTOS\source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 468              		.loc 1 3463 0
 469 004a AF62     		str	r7, [r5, #40]
3464:FreeRTOS\source/tasks.c **** }
 470              		.loc 1 3464 0
 471 004c 2665     		str	r6, [r4, #80]
3465:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 472              		.loc 1 3465 0
 473              		@ sp needed
 474 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 475              	.L40:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 76


 476              		.align	2
 477              	.L39:
 478 0050 00000000 		.word	.LANCHOR0
 479 0054 80000000 		.word	.LANCHOR1
 480              		.cfi_endproc
 481              	.LFE66:
 482              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 483              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 484              		.align	2
 485              		.code	16
 486              		.thumb_func
 487              		.type	prvAddNewTaskToReadyList, %function
 488              	prvAddNewTaskToReadyList:
 489              	.LFB34:
1028:FreeRTOS\source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 490              		.loc 1 1028 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              	.LVL55:
 495 0000 10B5     		push	{r4, lr}
 496              		.cfi_def_cfa_offset 8
 497              		.cfi_offset 4, -8
 498              		.cfi_offset 14, -4
 499 0002 0400     		movs	r4, r0
1031:FreeRTOS\source/tasks.c **** 	{
 500              		.loc 1 1031 0
 501 0004 FFF7FEFF 		bl	vPortEnterCritical
 502              	.LVL56:
1033:FreeRTOS\source/tasks.c **** 		if( pxCurrentTCB == NULL )
 503              		.loc 1 1033 0
 504 0008 1E4B     		ldr	r3, .L46
 505 000a 5A6D     		ldr	r2, [r3, #84]
 506 000c 0132     		adds	r2, r2, #1
 507 000e 5A65     		str	r2, [r3, #84]
1034:FreeRTOS\source/tasks.c **** 		{
 508              		.loc 1 1034 0
 509 0010 9B6D     		ldr	r3, [r3, #88]
 510 0012 002B     		cmp	r3, #0
 511 0014 07D1     		bne	.L42
1038:FreeRTOS\source/tasks.c **** 
 512              		.loc 1 1038 0
 513 0016 1B4B     		ldr	r3, .L46
 514 0018 9C65     		str	r4, [r3, #88]
1040:FreeRTOS\source/tasks.c **** 			{
 515              		.loc 1 1040 0
 516 001a 5B6D     		ldr	r3, [r3, #84]
 517 001c 012B     		cmp	r3, #1
 518 001e 0ED1     		bne	.L43
1045:FreeRTOS\source/tasks.c **** 			}
 519              		.loc 1 1045 0
 520 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 521              	.LVL57:
 522 0024 0BE0     		b	.L43
 523              	.L42:
1057:FreeRTOS\source/tasks.c **** 			{
 524              		.loc 1 1057 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 77


 525 0026 174B     		ldr	r3, .L46
 526 0028 DB6D     		ldr	r3, [r3, #92]
 527 002a 002B     		cmp	r3, #0
 528 002c 07D1     		bne	.L43
1059:FreeRTOS\source/tasks.c **** 				{
 529              		.loc 1 1059 0
 530 002e 154B     		ldr	r3, .L46
 531 0030 9B6D     		ldr	r3, [r3, #88]
 532 0032 DB6A     		ldr	r3, [r3, #44]
 533 0034 E26A     		ldr	r2, [r4, #44]
 534 0036 9342     		cmp	r3, r2
 535 0038 01D8     		bhi	.L43
1061:FreeRTOS\source/tasks.c **** 				}
 536              		.loc 1 1061 0
 537 003a 124B     		ldr	r3, .L46
 538 003c 9C65     		str	r4, [r3, #88]
 539              	.L43:
1074:FreeRTOS\source/tasks.c **** 
 540              		.loc 1 1074 0
 541 003e 114A     		ldr	r2, .L46
 542 0040 136E     		ldr	r3, [r2, #96]
 543 0042 0133     		adds	r3, r3, #1
 544 0044 1366     		str	r3, [r2, #96]
1084:FreeRTOS\source/tasks.c **** 
 545              		.loc 1 1084 0
 546 0046 E36A     		ldr	r3, [r4, #44]
 547 0048 526E     		ldr	r2, [r2, #100]
 548 004a 9342     		cmp	r3, r2
 549 004c 01D9     		bls	.L44
1084:FreeRTOS\source/tasks.c **** 
 550              		.loc 1 1084 0 is_stmt 0 discriminator 1
 551 004e 0D4A     		ldr	r2, .L46
 552 0050 5366     		str	r3, [r2, #100]
 553              	.L44:
1084:FreeRTOS\source/tasks.c **** 
 554              		.loc 1 1084 0 discriminator 3
 555 0052 211D     		adds	r1, r4, #4
 556 0054 9A00     		lsls	r2, r3, #2
 557 0056 D318     		adds	r3, r2, r3
 558 0058 9A00     		lsls	r2, r3, #2
 559 005a 0B48     		ldr	r0, .L46+4
 560 005c 3030     		adds	r0, r0, #48
 561 005e 8018     		adds	r0, r0, r2
 562 0060 FFF7FEFF 		bl	vListInsertEnd
 563              	.LVL58:
1088:FreeRTOS\source/tasks.c **** 
 564              		.loc 1 1088 0 is_stmt 1 discriminator 3
 565 0064 FFF7FEFF 		bl	vPortExitCritical
 566              	.LVL59:
1090:FreeRTOS\source/tasks.c **** 	{
 567              		.loc 1 1090 0 discriminator 3
 568 0068 064B     		ldr	r3, .L46
 569 006a DB6D     		ldr	r3, [r3, #92]
 570 006c 002B     		cmp	r3, #0
 571 006e 07D0     		beq	.L41
1094:FreeRTOS\source/tasks.c **** 		{
 572              		.loc 1 1094 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 78


 573 0070 044B     		ldr	r3, .L46
 574 0072 9B6D     		ldr	r3, [r3, #88]
 575 0074 DA6A     		ldr	r2, [r3, #44]
 576 0076 E36A     		ldr	r3, [r4, #44]
 577 0078 9A42     		cmp	r2, r3
 578 007a 01D2     		bcs	.L41
1096:FreeRTOS\source/tasks.c **** 		}
 579              		.loc 1 1096 0
 580 007c FFF7FEFF 		bl	vPortYield
 581              	.LVL60:
 582              	.L41:
1107:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 583              		.loc 1 1107 0
 584              		@ sp needed
 585              	.LVL61:
 586 0080 10BD     		pop	{r4, pc}
 587              	.L47:
 588 0082 C046     		.align	2
 589              	.L46:
 590 0084 80000000 		.word	.LANCHOR1
 591 0088 00000000 		.word	.LANCHOR0
 592              		.cfi_endproc
 593              	.LFE34:
 594              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 595              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 596              		.align	2
 597              		.code	16
 598              		.thumb_func
 599              		.type	prvCheckTasksWaitingTermination, %function
 600              	prvCheckTasksWaitingTermination:
 601              	.LFB67:
3469:FreeRTOS\source/tasks.c **** 
 602              		.loc 1 3469 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606 0000 70B5     		push	{r4, r5, r6, lr}
 607              		.cfi_def_cfa_offset 16
 608              		.cfi_offset 4, -16
 609              		.cfi_offset 5, -12
 610              		.cfi_offset 6, -8
 611              		.cfi_offset 14, -4
 612              	.LBB2:
3479:FreeRTOS\source/tasks.c **** 		{
 613              		.loc 1 3479 0
 614 0002 12E0     		b	.L49
 615              	.L50:
3481:FreeRTOS\source/tasks.c **** 			{
 616              		.loc 1 3481 0
 617 0004 FFF7FEFF 		bl	vPortEnterCritical
 618              	.LVL62:
3483:FreeRTOS\source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 619              		.loc 1 3483 0
 620 0008 0A4C     		ldr	r4, .L51
 621 000a A36C     		ldr	r3, [r4, #72]
 622 000c DD68     		ldr	r5, [r3, #12]
 623              	.LVL63:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 79


3484:FreeRTOS\source/tasks.c **** 				--uxCurrentNumberOfTasks;
 624              		.loc 1 3484 0
 625 000e 281D     		adds	r0, r5, #4
 626 0010 FFF7FEFF 		bl	uxListRemove
 627              	.LVL64:
3485:FreeRTOS\source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 628              		.loc 1 3485 0
 629 0014 636D     		ldr	r3, [r4, #84]
 630 0016 013B     		subs	r3, r3, #1
 631 0018 6365     		str	r3, [r4, #84]
3486:FreeRTOS\source/tasks.c **** 			}
 632              		.loc 1 3486 0
 633 001a A36E     		ldr	r3, [r4, #104]
 634 001c 013B     		subs	r3, r3, #1
 635 001e A366     		str	r3, [r4, #104]
3488:FreeRTOS\source/tasks.c **** 
 636              		.loc 1 3488 0
 637 0020 FFF7FEFF 		bl	vPortExitCritical
 638              	.LVL65:
3490:FreeRTOS\source/tasks.c **** 		}
 639              		.loc 1 3490 0
 640 0024 2800     		movs	r0, r5
 641 0026 FFF7FEFF 		bl	prvDeleteTCB
 642              	.LVL66:
 643              	.L49:
3479:FreeRTOS\source/tasks.c **** 		{
 644              		.loc 1 3479 0
 645 002a 024B     		ldr	r3, .L51
 646 002c 9B6E     		ldr	r3, [r3, #104]
 647 002e 002B     		cmp	r3, #0
 648 0030 E8D1     		bne	.L50
 649              	.LBE2:
3494:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 650              		.loc 1 3494 0
 651              		@ sp needed
 652 0032 70BD     		pop	{r4, r5, r6, pc}
 653              	.L52:
 654              		.align	2
 655              	.L51:
 656 0034 80000000 		.word	.LANCHOR1
 657              		.cfi_endproc
 658              	.LFE67:
 659              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 660              		.section	.text.prvIdleTask,"ax",%progbits
 661              		.align	2
 662              		.code	16
 663              		.thumb_func
 664              		.type	prvIdleTask, %function
 665              	prvIdleTask:
 666              	.LFB63:
3225:FreeRTOS\source/tasks.c **** 	/* Stop warnings. */
 667              		.loc 1 3225 0
 668              		.cfi_startproc
 669              		@ Volatile: function does not return.
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672              	.LVL67:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 80


 673 0000 10B5     		push	{r4, lr}
 674              		.cfi_def_cfa_offset 8
 675              		.cfi_offset 4, -8
 676              		.cfi_offset 14, -4
 677              	.LVL68:
 678              	.L54:
3241:FreeRTOS\source/tasks.c **** 
 679              		.loc 1 3241 0 discriminator 1
 680 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 681              	.LVL69:
 682 0006 FCE7     		b	.L54
 683              		.cfi_endproc
 684              	.LFE63:
 685              		.size	prvIdleTask, .-prvIdleTask
 686              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 687              		.align	2
 688              		.code	16
 689              		.thumb_func
 690              		.type	prvAddCurrentTaskToDelayedList, %function
 691              	prvAddCurrentTaskToDelayedList:
 692              	.LFB85:
3752:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3753:FreeRTOS\source/tasks.c **** 
3754:FreeRTOS\source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3755:FreeRTOS\source/tasks.c **** 
3756:FreeRTOS\source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3757:FreeRTOS\source/tasks.c **** 	{
3758:FreeRTOS\source/tasks.c **** 	TaskHandle_t xReturn;
3759:FreeRTOS\source/tasks.c **** 
3760:FreeRTOS\source/tasks.c **** 		/* A critical section is not required as this is not called from
3761:FreeRTOS\source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3762:FreeRTOS\source/tasks.c **** 		individual execution thread. */
3763:FreeRTOS\source/tasks.c **** 		xReturn = pxCurrentTCB;
3764:FreeRTOS\source/tasks.c **** 
3765:FreeRTOS\source/tasks.c **** 		return xReturn;
3766:FreeRTOS\source/tasks.c **** 	}
3767:FreeRTOS\source/tasks.c **** 
3768:FreeRTOS\source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3769:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3770:FreeRTOS\source/tasks.c **** 
3771:FreeRTOS\source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3772:FreeRTOS\source/tasks.c **** 
3773:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3774:FreeRTOS\source/tasks.c **** 	{
3775:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn;
3776:FreeRTOS\source/tasks.c **** 
3777:FreeRTOS\source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3778:FreeRTOS\source/tasks.c **** 		{
3779:FreeRTOS\source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3780:FreeRTOS\source/tasks.c **** 		}
3781:FreeRTOS\source/tasks.c **** 		else
3782:FreeRTOS\source/tasks.c **** 		{
3783:FreeRTOS\source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3784:FreeRTOS\source/tasks.c **** 			{
3785:FreeRTOS\source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3786:FreeRTOS\source/tasks.c **** 			}
3787:FreeRTOS\source/tasks.c **** 			else
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 81


3788:FreeRTOS\source/tasks.c **** 			{
3789:FreeRTOS\source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3790:FreeRTOS\source/tasks.c **** 			}
3791:FreeRTOS\source/tasks.c **** 		}
3792:FreeRTOS\source/tasks.c **** 
3793:FreeRTOS\source/tasks.c **** 		return xReturn;
3794:FreeRTOS\source/tasks.c **** 	}
3795:FreeRTOS\source/tasks.c **** 
3796:FreeRTOS\source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3797:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3798:FreeRTOS\source/tasks.c **** 
3799:FreeRTOS\source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3800:FreeRTOS\source/tasks.c **** 
3801:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3802:FreeRTOS\source/tasks.c **** 	{
3803:FreeRTOS\source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3804:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3805:FreeRTOS\source/tasks.c **** 
3806:FreeRTOS\source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3807:FreeRTOS\source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3808:FreeRTOS\source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3809:FreeRTOS\source/tasks.c **** 		if( pxMutexHolder != NULL )
3810:FreeRTOS\source/tasks.c **** 		{
3811:FreeRTOS\source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3812:FreeRTOS\source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3813:FreeRTOS\source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3814:FreeRTOS\source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3815:FreeRTOS\source/tasks.c **** 			{
3816:FreeRTOS\source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3817:FreeRTOS\source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3818:FreeRTOS\source/tasks.c **** 				not being used for anything else. */
3819:FreeRTOS\source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3820:FreeRTOS\source/tasks.c **** 				{
3821:FreeRTOS\source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3822:FreeRTOS\source/tasks.c **** 				}
3823:FreeRTOS\source/tasks.c **** 				else
3824:FreeRTOS\source/tasks.c **** 				{
3825:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3826:FreeRTOS\source/tasks.c **** 				}
3827:FreeRTOS\source/tasks.c **** 
3828:FreeRTOS\source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3829:FreeRTOS\source/tasks.c **** 				to be moved into a new list. */
3830:FreeRTOS\source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3831:FreeRTOS\source/tasks.c **** 				{
3832:FreeRTOS\source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3833:FreeRTOS\source/tasks.c **** 					{
3834:FreeRTOS\source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3835:FreeRTOS\source/tasks.c **** 					}
3836:FreeRTOS\source/tasks.c **** 					else
3837:FreeRTOS\source/tasks.c **** 					{
3838:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3839:FreeRTOS\source/tasks.c **** 					}
3840:FreeRTOS\source/tasks.c **** 
3841:FreeRTOS\source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3842:FreeRTOS\source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3844:FreeRTOS\source/tasks.c **** 				}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 82


3845:FreeRTOS\source/tasks.c **** 				else
3846:FreeRTOS\source/tasks.c **** 				{
3847:FreeRTOS\source/tasks.c **** 					/* Just inherit the priority. */
3848:FreeRTOS\source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3849:FreeRTOS\source/tasks.c **** 				}
3850:FreeRTOS\source/tasks.c **** 
3851:FreeRTOS\source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3852:FreeRTOS\source/tasks.c **** 
3853:FreeRTOS\source/tasks.c **** 				/* Inheritance occurred. */
3854:FreeRTOS\source/tasks.c **** 				xReturn = pdTRUE;
3855:FreeRTOS\source/tasks.c **** 			}
3856:FreeRTOS\source/tasks.c **** 			else
3857:FreeRTOS\source/tasks.c **** 			{
3858:FreeRTOS\source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3859:FreeRTOS\source/tasks.c **** 				{
3860:FreeRTOS\source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3861:FreeRTOS\source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3862:FreeRTOS\source/tasks.c **** 					current priority of the mutex holder is not lower than the
3863:FreeRTOS\source/tasks.c **** 					priority of the task attempting to take the mutex.
3864:FreeRTOS\source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3865:FreeRTOS\source/tasks.c **** 					priority, but inheritance would have occurred if that had
3866:FreeRTOS\source/tasks.c **** 					not been the case. */
3867:FreeRTOS\source/tasks.c **** 					xReturn = pdTRUE;
3868:FreeRTOS\source/tasks.c **** 				}
3869:FreeRTOS\source/tasks.c **** 				else
3870:FreeRTOS\source/tasks.c **** 				{
3871:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3872:FreeRTOS\source/tasks.c **** 				}
3873:FreeRTOS\source/tasks.c **** 			}
3874:FreeRTOS\source/tasks.c **** 		}
3875:FreeRTOS\source/tasks.c **** 		else
3876:FreeRTOS\source/tasks.c **** 		{
3877:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3878:FreeRTOS\source/tasks.c **** 		}
3879:FreeRTOS\source/tasks.c **** 
3880:FreeRTOS\source/tasks.c **** 		return xReturn;
3881:FreeRTOS\source/tasks.c **** 	}
3882:FreeRTOS\source/tasks.c **** 
3883:FreeRTOS\source/tasks.c **** #endif /* configUSE_MUTEXES */
3884:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3885:FreeRTOS\source/tasks.c **** 
3886:FreeRTOS\source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3887:FreeRTOS\source/tasks.c **** 
3888:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3889:FreeRTOS\source/tasks.c **** 	{
3890:FreeRTOS\source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3891:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3892:FreeRTOS\source/tasks.c **** 
3893:FreeRTOS\source/tasks.c **** 		if( pxMutexHolder != NULL )
3894:FreeRTOS\source/tasks.c **** 		{
3895:FreeRTOS\source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3896:FreeRTOS\source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3897:FreeRTOS\source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3898:FreeRTOS\source/tasks.c **** 			be the running state task. */
3899:FreeRTOS\source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3900:FreeRTOS\source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3901:FreeRTOS\source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 83


3902:FreeRTOS\source/tasks.c **** 
3903:FreeRTOS\source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3904:FreeRTOS\source/tasks.c **** 			task? */
3905:FreeRTOS\source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3906:FreeRTOS\source/tasks.c **** 			{
3907:FreeRTOS\source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3908:FreeRTOS\source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3909:FreeRTOS\source/tasks.c **** 				{
3910:FreeRTOS\source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3911:FreeRTOS\source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3912:FreeRTOS\source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3913:FreeRTOS\source/tasks.c **** 					holding task then it must be the running state task.  Remove
3914:FreeRTOS\source/tasks.c **** 					the holding task from the ready list. */
3915:FreeRTOS\source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3916:FreeRTOS\source/tasks.c **** 					{
3917:FreeRTOS\source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3918:FreeRTOS\source/tasks.c **** 					}
3919:FreeRTOS\source/tasks.c **** 					else
3920:FreeRTOS\source/tasks.c **** 					{
3921:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3922:FreeRTOS\source/tasks.c **** 					}
3923:FreeRTOS\source/tasks.c **** 
3924:FreeRTOS\source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3925:FreeRTOS\source/tasks.c **** 					new	ready list. */
3926:FreeRTOS\source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3927:FreeRTOS\source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3928:FreeRTOS\source/tasks.c **** 
3929:FreeRTOS\source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3930:FreeRTOS\source/tasks.c **** 					any other purpose if this task is running, and it must be
3931:FreeRTOS\source/tasks.c **** 					running to give back the mutex. */
3932:FreeRTOS\source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3933:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3934:FreeRTOS\source/tasks.c **** 
3935:FreeRTOS\source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3936:FreeRTOS\source/tasks.c **** 					This is only actually required in the corner case whereby
3937:FreeRTOS\source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3938:FreeRTOS\source/tasks.c **** 					in an order different to that in which they were taken.
3939:FreeRTOS\source/tasks.c **** 					If a context switch did not occur when the first mutex was
3940:FreeRTOS\source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3941:FreeRTOS\source/tasks.c **** 					switch should occur when the last mutex is returned whether
3942:FreeRTOS\source/tasks.c **** 					a task is waiting on it or not. */
3943:FreeRTOS\source/tasks.c **** 					xReturn = pdTRUE;
3944:FreeRTOS\source/tasks.c **** 				}
3945:FreeRTOS\source/tasks.c **** 				else
3946:FreeRTOS\source/tasks.c **** 				{
3947:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3948:FreeRTOS\source/tasks.c **** 				}
3949:FreeRTOS\source/tasks.c **** 			}
3950:FreeRTOS\source/tasks.c **** 			else
3951:FreeRTOS\source/tasks.c **** 			{
3952:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3953:FreeRTOS\source/tasks.c **** 			}
3954:FreeRTOS\source/tasks.c **** 		}
3955:FreeRTOS\source/tasks.c **** 		else
3956:FreeRTOS\source/tasks.c **** 		{
3957:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3958:FreeRTOS\source/tasks.c **** 		}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 84


3959:FreeRTOS\source/tasks.c **** 
3960:FreeRTOS\source/tasks.c **** 		return xReturn;
3961:FreeRTOS\source/tasks.c **** 	}
3962:FreeRTOS\source/tasks.c **** 
3963:FreeRTOS\source/tasks.c **** #endif /* configUSE_MUTEXES */
3964:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
3965:FreeRTOS\source/tasks.c **** 
3966:FreeRTOS\source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3967:FreeRTOS\source/tasks.c **** 
3968:FreeRTOS\source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3969:FreeRTOS\source/tasks.c **** 	{
3970:FreeRTOS\source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3971:FreeRTOS\source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3972:FreeRTOS\source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3973:FreeRTOS\source/tasks.c **** 
3974:FreeRTOS\source/tasks.c **** 		if( pxMutexHolder != NULL )
3975:FreeRTOS\source/tasks.c **** 		{
3976:FreeRTOS\source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3977:FreeRTOS\source/tasks.c **** 			one mutex. */
3978:FreeRTOS\source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3979:FreeRTOS\source/tasks.c **** 
3980:FreeRTOS\source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3981:FreeRTOS\source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3982:FreeRTOS\source/tasks.c **** 			holding task's base priority and the priority of the highest
3983:FreeRTOS\source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3984:FreeRTOS\source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3985:FreeRTOS\source/tasks.c **** 			{
3986:FreeRTOS\source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3987:FreeRTOS\source/tasks.c **** 			}
3988:FreeRTOS\source/tasks.c **** 			else
3989:FreeRTOS\source/tasks.c **** 			{
3990:FreeRTOS\source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3991:FreeRTOS\source/tasks.c **** 			}
3992:FreeRTOS\source/tasks.c **** 
3993:FreeRTOS\source/tasks.c **** 			/* Does the priority need to change? */
3994:FreeRTOS\source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3995:FreeRTOS\source/tasks.c **** 			{
3996:FreeRTOS\source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3997:FreeRTOS\source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3998:FreeRTOS\source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3999:FreeRTOS\source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4000:FreeRTOS\source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4001:FreeRTOS\source/tasks.c **** 				{
4002:FreeRTOS\source/tasks.c **** 					/* If a task has timed out because it already holds the
4003:FreeRTOS\source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4004:FreeRTOS\source/tasks.c **** 					its own priority. */
4005:FreeRTOS\source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4006:FreeRTOS\source/tasks.c **** 
4007:FreeRTOS\source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4008:FreeRTOS\source/tasks.c **** 					priority to facilitate determining the subject task's
4009:FreeRTOS\source/tasks.c **** 					state. */
4010:FreeRTOS\source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4011:FreeRTOS\source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4012:FreeRTOS\source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4013:FreeRTOS\source/tasks.c **** 
4014:FreeRTOS\source/tasks.c **** 					/* Only reset the event list item value if the value is not
4015:FreeRTOS\source/tasks.c **** 					being used for anything else. */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 85


4016:FreeRTOS\source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4017:FreeRTOS\source/tasks.c **** 					{
4018:FreeRTOS\source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4019:FreeRTOS\source/tasks.c **** 					}
4020:FreeRTOS\source/tasks.c **** 					else
4021:FreeRTOS\source/tasks.c **** 					{
4022:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4023:FreeRTOS\source/tasks.c **** 					}
4024:FreeRTOS\source/tasks.c **** 
4025:FreeRTOS\source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4026:FreeRTOS\source/tasks.c **** 					then the task that holds the mutex could be in either the
4027:FreeRTOS\source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4028:FreeRTOS\source/tasks.c **** 					from its current state list if it is in the Ready state as
4029:FreeRTOS\source/tasks.c **** 					the task's priority is going to change and there is one
4030:FreeRTOS\source/tasks.c **** 					Ready list per priority. */
4031:FreeRTOS\source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4032:FreeRTOS\source/tasks.c **** 					{
4033:FreeRTOS\source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4034:FreeRTOS\source/tasks.c **** 						{
4035:FreeRTOS\source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4036:FreeRTOS\source/tasks.c **** 						}
4037:FreeRTOS\source/tasks.c **** 						else
4038:FreeRTOS\source/tasks.c **** 						{
4039:FreeRTOS\source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4040:FreeRTOS\source/tasks.c **** 						}
4041:FreeRTOS\source/tasks.c **** 
4042:FreeRTOS\source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4043:FreeRTOS\source/tasks.c **** 					}
4044:FreeRTOS\source/tasks.c **** 					else
4045:FreeRTOS\source/tasks.c **** 					{
4046:FreeRTOS\source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4047:FreeRTOS\source/tasks.c **** 					}
4048:FreeRTOS\source/tasks.c **** 				}
4049:FreeRTOS\source/tasks.c **** 				else
4050:FreeRTOS\source/tasks.c **** 				{
4051:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4052:FreeRTOS\source/tasks.c **** 				}
4053:FreeRTOS\source/tasks.c **** 			}
4054:FreeRTOS\source/tasks.c **** 			else
4055:FreeRTOS\source/tasks.c **** 			{
4056:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4057:FreeRTOS\source/tasks.c **** 			}
4058:FreeRTOS\source/tasks.c **** 		}
4059:FreeRTOS\source/tasks.c **** 		else
4060:FreeRTOS\source/tasks.c **** 		{
4061:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4062:FreeRTOS\source/tasks.c **** 		}
4063:FreeRTOS\source/tasks.c **** 	}
4064:FreeRTOS\source/tasks.c **** 
4065:FreeRTOS\source/tasks.c **** #endif /* configUSE_MUTEXES */
4066:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4067:FreeRTOS\source/tasks.c **** 
4068:FreeRTOS\source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4069:FreeRTOS\source/tasks.c **** 
4070:FreeRTOS\source/tasks.c **** 	void vTaskEnterCritical( void )
4071:FreeRTOS\source/tasks.c **** 	{
4072:FreeRTOS\source/tasks.c **** 		portDISABLE_INTERRUPTS();
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 86


4073:FreeRTOS\source/tasks.c **** 
4074:FreeRTOS\source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4075:FreeRTOS\source/tasks.c **** 		{
4076:FreeRTOS\source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4077:FreeRTOS\source/tasks.c **** 
4078:FreeRTOS\source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4079:FreeRTOS\source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4080:FreeRTOS\source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4081:FreeRTOS\source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4082:FreeRTOS\source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4083:FreeRTOS\source/tasks.c **** 			critical section. */
4084:FreeRTOS\source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4085:FreeRTOS\source/tasks.c **** 			{
4086:FreeRTOS\source/tasks.c **** 				portASSERT_IF_IN_ISR();
4087:FreeRTOS\source/tasks.c **** 			}
4088:FreeRTOS\source/tasks.c **** 		}
4089:FreeRTOS\source/tasks.c **** 		else
4090:FreeRTOS\source/tasks.c **** 		{
4091:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4092:FreeRTOS\source/tasks.c **** 		}
4093:FreeRTOS\source/tasks.c **** 	}
4094:FreeRTOS\source/tasks.c **** 
4095:FreeRTOS\source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4096:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4097:FreeRTOS\source/tasks.c **** 
4098:FreeRTOS\source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4099:FreeRTOS\source/tasks.c **** 
4100:FreeRTOS\source/tasks.c **** 	void vTaskExitCritical( void )
4101:FreeRTOS\source/tasks.c **** 	{
4102:FreeRTOS\source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4103:FreeRTOS\source/tasks.c **** 		{
4104:FreeRTOS\source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4105:FreeRTOS\source/tasks.c **** 			{
4106:FreeRTOS\source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4107:FreeRTOS\source/tasks.c **** 
4108:FreeRTOS\source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4109:FreeRTOS\source/tasks.c **** 				{
4110:FreeRTOS\source/tasks.c **** 					portENABLE_INTERRUPTS();
4111:FreeRTOS\source/tasks.c **** 				}
4112:FreeRTOS\source/tasks.c **** 				else
4113:FreeRTOS\source/tasks.c **** 				{
4114:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4115:FreeRTOS\source/tasks.c **** 				}
4116:FreeRTOS\source/tasks.c **** 			}
4117:FreeRTOS\source/tasks.c **** 			else
4118:FreeRTOS\source/tasks.c **** 			{
4119:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4120:FreeRTOS\source/tasks.c **** 			}
4121:FreeRTOS\source/tasks.c **** 		}
4122:FreeRTOS\source/tasks.c **** 		else
4123:FreeRTOS\source/tasks.c **** 		{
4124:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4125:FreeRTOS\source/tasks.c **** 		}
4126:FreeRTOS\source/tasks.c **** 	}
4127:FreeRTOS\source/tasks.c **** 
4128:FreeRTOS\source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4129:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 87


4130:FreeRTOS\source/tasks.c **** 
4131:FreeRTOS\source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4132:FreeRTOS\source/tasks.c **** 
4133:FreeRTOS\source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4134:FreeRTOS\source/tasks.c **** 	{
4135:FreeRTOS\source/tasks.c **** 	size_t x;
4136:FreeRTOS\source/tasks.c **** 
4137:FreeRTOS\source/tasks.c **** 		/* Start by copying the entire string. */
4138:FreeRTOS\source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4139:FreeRTOS\source/tasks.c **** 
4140:FreeRTOS\source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4141:FreeRTOS\source/tasks.c **** 		printed out. */
4142:FreeRTOS\source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4143:FreeRTOS\source/tasks.c **** 		{
4144:FreeRTOS\source/tasks.c **** 			pcBuffer[ x ] = ' ';
4145:FreeRTOS\source/tasks.c **** 		}
4146:FreeRTOS\source/tasks.c **** 
4147:FreeRTOS\source/tasks.c **** 		/* Terminate. */
4148:FreeRTOS\source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4149:FreeRTOS\source/tasks.c **** 
4150:FreeRTOS\source/tasks.c **** 		/* Return the new end of string. */
4151:FreeRTOS\source/tasks.c **** 		return &( pcBuffer[ x ] );
4152:FreeRTOS\source/tasks.c **** 	}
4153:FreeRTOS\source/tasks.c **** 
4154:FreeRTOS\source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4155:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4156:FreeRTOS\source/tasks.c **** 
4157:FreeRTOS\source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4158:FreeRTOS\source/tasks.c **** 
4159:FreeRTOS\source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4160:FreeRTOS\source/tasks.c **** 	{
4161:FreeRTOS\source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4162:FreeRTOS\source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4163:FreeRTOS\source/tasks.c **** 	char cStatus;
4164:FreeRTOS\source/tasks.c **** 
4165:FreeRTOS\source/tasks.c **** 		/*
4166:FreeRTOS\source/tasks.c **** 		 * PLEASE NOTE:
4167:FreeRTOS\source/tasks.c **** 		 *
4168:FreeRTOS\source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4169:FreeRTOS\source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4170:FreeRTOS\source/tasks.c **** 		 * scheduler.
4171:FreeRTOS\source/tasks.c **** 		 *
4172:FreeRTOS\source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4173:FreeRTOS\source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4174:FreeRTOS\source/tasks.c **** 		 * displays task names, states and stack usage.
4175:FreeRTOS\source/tasks.c **** 		 *
4176:FreeRTOS\source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4177:FreeRTOS\source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4178:FreeRTOS\source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4179:FreeRTOS\source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4180:FreeRTOS\source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4181:FreeRTOS\source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4182:FreeRTOS\source/tasks.c **** 		 * snprintf() implementation!).
4183:FreeRTOS\source/tasks.c **** 		 *
4184:FreeRTOS\source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4185:FreeRTOS\source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4186:FreeRTOS\source/tasks.c **** 		 * through a call to vTaskList().
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 88


4187:FreeRTOS\source/tasks.c **** 		 */
4188:FreeRTOS\source/tasks.c **** 
4189:FreeRTOS\source/tasks.c **** 
4190:FreeRTOS\source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4191:FreeRTOS\source/tasks.c **** 		*pcWriteBuffer = 0x00;
4192:FreeRTOS\source/tasks.c **** 
4193:FreeRTOS\source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4194:FreeRTOS\source/tasks.c **** 		function is executing. */
4195:FreeRTOS\source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4196:FreeRTOS\source/tasks.c **** 
4197:FreeRTOS\source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4198:FreeRTOS\source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4199:FreeRTOS\source/tasks.c **** 		equate to NULL. */
4200:FreeRTOS\source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4201:FreeRTOS\source/tasks.c **** 
4202:FreeRTOS\source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4203:FreeRTOS\source/tasks.c **** 		{
4204:FreeRTOS\source/tasks.c **** 			/* Generate the (binary) data. */
4205:FreeRTOS\source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4206:FreeRTOS\source/tasks.c **** 
4207:FreeRTOS\source/tasks.c **** 			/* Create a human readable table from the binary data. */
4208:FreeRTOS\source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4209:FreeRTOS\source/tasks.c **** 			{
4210:FreeRTOS\source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4211:FreeRTOS\source/tasks.c **** 				{
4212:FreeRTOS\source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4213:FreeRTOS\source/tasks.c **** 										break;
4214:FreeRTOS\source/tasks.c **** 
4215:FreeRTOS\source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4216:FreeRTOS\source/tasks.c **** 										break;
4217:FreeRTOS\source/tasks.c **** 
4218:FreeRTOS\source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4219:FreeRTOS\source/tasks.c **** 										break;
4220:FreeRTOS\source/tasks.c **** 
4221:FreeRTOS\source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4222:FreeRTOS\source/tasks.c **** 										break;
4223:FreeRTOS\source/tasks.c **** 
4224:FreeRTOS\source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4225:FreeRTOS\source/tasks.c **** 										break;
4226:FreeRTOS\source/tasks.c **** 
4227:FreeRTOS\source/tasks.c **** 					default:			/* Should not get here, but it is included
4228:FreeRTOS\source/tasks.c **** 										to prevent static checking errors. */
4229:FreeRTOS\source/tasks.c **** 										cStatus = 0x00;
4230:FreeRTOS\source/tasks.c **** 										break;
4231:FreeRTOS\source/tasks.c **** 				}
4232:FreeRTOS\source/tasks.c **** 
4233:FreeRTOS\source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4234:FreeRTOS\source/tasks.c **** 				can be printed in tabular form more easily. */
4235:FreeRTOS\source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4236:FreeRTOS\source/tasks.c **** 
4237:FreeRTOS\source/tasks.c **** 				/* Write the rest of the string. */
4238:FreeRTOS\source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4239:FreeRTOS\source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4240:FreeRTOS\source/tasks.c **** 			}
4241:FreeRTOS\source/tasks.c **** 
4242:FreeRTOS\source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4243:FreeRTOS\source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 89


4244:FreeRTOS\source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4245:FreeRTOS\source/tasks.c **** 		}
4246:FreeRTOS\source/tasks.c **** 		else
4247:FreeRTOS\source/tasks.c **** 		{
4248:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4249:FreeRTOS\source/tasks.c **** 		}
4250:FreeRTOS\source/tasks.c **** 	}
4251:FreeRTOS\source/tasks.c **** 
4252:FreeRTOS\source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4253:FreeRTOS\source/tasks.c **** /*----------------------------------------------------------*/
4254:FreeRTOS\source/tasks.c **** 
4255:FreeRTOS\source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4256:FreeRTOS\source/tasks.c **** 
4257:FreeRTOS\source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4258:FreeRTOS\source/tasks.c **** 	{
4259:FreeRTOS\source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4260:FreeRTOS\source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4261:FreeRTOS\source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4262:FreeRTOS\source/tasks.c **** 
4263:FreeRTOS\source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4264:FreeRTOS\source/tasks.c **** 		{
4265:FreeRTOS\source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4266:FreeRTOS\source/tasks.c **** 		}
4267:FreeRTOS\source/tasks.c **** 		#endif
4268:FreeRTOS\source/tasks.c **** 
4269:FreeRTOS\source/tasks.c **** 		/*
4270:FreeRTOS\source/tasks.c **** 		 * PLEASE NOTE:
4271:FreeRTOS\source/tasks.c **** 		 *
4272:FreeRTOS\source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4273:FreeRTOS\source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4274:FreeRTOS\source/tasks.c **** 		 * scheduler.
4275:FreeRTOS\source/tasks.c **** 		 *
4276:FreeRTOS\source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4277:FreeRTOS\source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4278:FreeRTOS\source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4279:FreeRTOS\source/tasks.c **** 		 * in both absolute and percentage terms.
4280:FreeRTOS\source/tasks.c **** 		 *
4281:FreeRTOS\source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4282:FreeRTOS\source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4283:FreeRTOS\source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4284:FreeRTOS\source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4285:FreeRTOS\source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4286:FreeRTOS\source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4287:FreeRTOS\source/tasks.c **** 		 * a full snprintf() implementation!).
4288:FreeRTOS\source/tasks.c **** 		 *
4289:FreeRTOS\source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4290:FreeRTOS\source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4291:FreeRTOS\source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4292:FreeRTOS\source/tasks.c **** 		 */
4293:FreeRTOS\source/tasks.c **** 
4294:FreeRTOS\source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4295:FreeRTOS\source/tasks.c **** 		*pcWriteBuffer = 0x00;
4296:FreeRTOS\source/tasks.c **** 
4297:FreeRTOS\source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4298:FreeRTOS\source/tasks.c **** 		function is executing. */
4299:FreeRTOS\source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4300:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 90


4301:FreeRTOS\source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4302:FreeRTOS\source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4303:FreeRTOS\source/tasks.c **** 		equate to NULL. */
4304:FreeRTOS\source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4305:FreeRTOS\source/tasks.c **** 
4306:FreeRTOS\source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4307:FreeRTOS\source/tasks.c **** 		{
4308:FreeRTOS\source/tasks.c **** 			/* Generate the (binary) data. */
4309:FreeRTOS\source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4310:FreeRTOS\source/tasks.c **** 
4311:FreeRTOS\source/tasks.c **** 			/* For percentage calculations. */
4312:FreeRTOS\source/tasks.c **** 			ulTotalTime /= 100UL;
4313:FreeRTOS\source/tasks.c **** 
4314:FreeRTOS\source/tasks.c **** 			/* Avoid divide by zero errors. */
4315:FreeRTOS\source/tasks.c **** 			if( ulTotalTime > 0 )
4316:FreeRTOS\source/tasks.c **** 			{
4317:FreeRTOS\source/tasks.c **** 				/* Create a human readable table from the binary data. */
4318:FreeRTOS\source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4319:FreeRTOS\source/tasks.c **** 				{
4320:FreeRTOS\source/tasks.c **** 					/* What percentage of the total run time has the task used?
4321:FreeRTOS\source/tasks.c **** 					This will always be rounded down to the nearest integer.
4322:FreeRTOS\source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4323:FreeRTOS\source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4324:FreeRTOS\source/tasks.c **** 
4325:FreeRTOS\source/tasks.c **** 					/* Write the task name to the string, padding with
4326:FreeRTOS\source/tasks.c **** 					spaces so it can be printed in tabular form more
4327:FreeRTOS\source/tasks.c **** 					easily. */
4328:FreeRTOS\source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4329:FreeRTOS\source/tasks.c **** 
4330:FreeRTOS\source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4331:FreeRTOS\source/tasks.c **** 					{
4332:FreeRTOS\source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4333:FreeRTOS\source/tasks.c **** 						{
4334:FreeRTOS\source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4335:FreeRTOS\source/tasks.c **** 						}
4336:FreeRTOS\source/tasks.c **** 						#else
4337:FreeRTOS\source/tasks.c **** 						{
4338:FreeRTOS\source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4339:FreeRTOS\source/tasks.c **** 							printf() library can be used. */
4340:FreeRTOS\source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4341:FreeRTOS\source/tasks.c **** 						}
4342:FreeRTOS\source/tasks.c **** 						#endif
4343:FreeRTOS\source/tasks.c **** 					}
4344:FreeRTOS\source/tasks.c **** 					else
4345:FreeRTOS\source/tasks.c **** 					{
4346:FreeRTOS\source/tasks.c **** 						/* If the percentage is zero here then the task has
4347:FreeRTOS\source/tasks.c **** 						consumed less than 1% of the total run time. */
4348:FreeRTOS\source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4349:FreeRTOS\source/tasks.c **** 						{
4350:FreeRTOS\source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4351:FreeRTOS\source/tasks.c **** 						}
4352:FreeRTOS\source/tasks.c **** 						#else
4353:FreeRTOS\source/tasks.c **** 						{
4354:FreeRTOS\source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4355:FreeRTOS\source/tasks.c **** 							printf() library can be used. */
4356:FreeRTOS\source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4357:FreeRTOS\source/tasks.c **** 						}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 91


4358:FreeRTOS\source/tasks.c **** 						#endif
4359:FreeRTOS\source/tasks.c **** 					}
4360:FreeRTOS\source/tasks.c **** 
4361:FreeRTOS\source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4362:FreeRTOS\source/tasks.c **** 				}
4363:FreeRTOS\source/tasks.c **** 			}
4364:FreeRTOS\source/tasks.c **** 			else
4365:FreeRTOS\source/tasks.c **** 			{
4366:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4367:FreeRTOS\source/tasks.c **** 			}
4368:FreeRTOS\source/tasks.c **** 
4369:FreeRTOS\source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4370:FreeRTOS\source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4371:FreeRTOS\source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4372:FreeRTOS\source/tasks.c **** 		}
4373:FreeRTOS\source/tasks.c **** 		else
4374:FreeRTOS\source/tasks.c **** 		{
4375:FreeRTOS\source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4376:FreeRTOS\source/tasks.c **** 		}
4377:FreeRTOS\source/tasks.c **** 	}
4378:FreeRTOS\source/tasks.c **** 
4379:FreeRTOS\source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4380:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4381:FreeRTOS\source/tasks.c **** 
4382:FreeRTOS\source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4383:FreeRTOS\source/tasks.c **** {
4384:FreeRTOS\source/tasks.c **** TickType_t uxReturn;
4385:FreeRTOS\source/tasks.c **** 
4386:FreeRTOS\source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4387:FreeRTOS\source/tasks.c **** 
4388:FreeRTOS\source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4389:FreeRTOS\source/tasks.c **** 	queues and semaphores. */
4390:FreeRTOS\source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4391:FreeRTOS\source/tasks.c **** 
4392:FreeRTOS\source/tasks.c **** 	return uxReturn;
4393:FreeRTOS\source/tasks.c **** }
4394:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4395:FreeRTOS\source/tasks.c **** 
4396:FreeRTOS\source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4397:FreeRTOS\source/tasks.c **** 
4398:FreeRTOS\source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4399:FreeRTOS\source/tasks.c **** 	{
4400:FreeRTOS\source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4401:FreeRTOS\source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4402:FreeRTOS\source/tasks.c **** 		if( pxCurrentTCB != NULL )
4403:FreeRTOS\source/tasks.c **** 		{
4404:FreeRTOS\source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4405:FreeRTOS\source/tasks.c **** 		}
4406:FreeRTOS\source/tasks.c **** 
4407:FreeRTOS\source/tasks.c **** 		return pxCurrentTCB;
4408:FreeRTOS\source/tasks.c **** 	}
4409:FreeRTOS\source/tasks.c **** 
4410:FreeRTOS\source/tasks.c **** #endif /* configUSE_MUTEXES */
4411:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4412:FreeRTOS\source/tasks.c **** 
4413:FreeRTOS\source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4414:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 92


4415:FreeRTOS\source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4416:FreeRTOS\source/tasks.c **** 	{
4417:FreeRTOS\source/tasks.c **** 	uint32_t ulReturn;
4418:FreeRTOS\source/tasks.c **** 
4419:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
4420:FreeRTOS\source/tasks.c **** 		{
4421:FreeRTOS\source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4422:FreeRTOS\source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4423:FreeRTOS\source/tasks.c **** 			{
4424:FreeRTOS\source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4425:FreeRTOS\source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4426:FreeRTOS\source/tasks.c **** 
4427:FreeRTOS\source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4428:FreeRTOS\source/tasks.c **** 				{
4429:FreeRTOS\source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4430:FreeRTOS\source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4431:FreeRTOS\source/tasks.c **** 
4432:FreeRTOS\source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4433:FreeRTOS\source/tasks.c **** 					section (some will yield immediately, others wait until the
4434:FreeRTOS\source/tasks.c **** 					critical section exits) - but it is not something that
4435:FreeRTOS\source/tasks.c **** 					application code should ever do. */
4436:FreeRTOS\source/tasks.c **** 					portYIELD_WITHIN_API();
4437:FreeRTOS\source/tasks.c **** 				}
4438:FreeRTOS\source/tasks.c **** 				else
4439:FreeRTOS\source/tasks.c **** 				{
4440:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4441:FreeRTOS\source/tasks.c **** 				}
4442:FreeRTOS\source/tasks.c **** 			}
4443:FreeRTOS\source/tasks.c **** 			else
4444:FreeRTOS\source/tasks.c **** 			{
4445:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4446:FreeRTOS\source/tasks.c **** 			}
4447:FreeRTOS\source/tasks.c **** 		}
4448:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
4449:FreeRTOS\source/tasks.c **** 
4450:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
4451:FreeRTOS\source/tasks.c **** 		{
4452:FreeRTOS\source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4453:FreeRTOS\source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4454:FreeRTOS\source/tasks.c **** 
4455:FreeRTOS\source/tasks.c **** 			if( ulReturn != 0UL )
4456:FreeRTOS\source/tasks.c **** 			{
4457:FreeRTOS\source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4458:FreeRTOS\source/tasks.c **** 				{
4459:FreeRTOS\source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4460:FreeRTOS\source/tasks.c **** 				}
4461:FreeRTOS\source/tasks.c **** 				else
4462:FreeRTOS\source/tasks.c **** 				{
4463:FreeRTOS\source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4464:FreeRTOS\source/tasks.c **** 				}
4465:FreeRTOS\source/tasks.c **** 			}
4466:FreeRTOS\source/tasks.c **** 			else
4467:FreeRTOS\source/tasks.c **** 			{
4468:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4469:FreeRTOS\source/tasks.c **** 			}
4470:FreeRTOS\source/tasks.c **** 
4471:FreeRTOS\source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 93


4472:FreeRTOS\source/tasks.c **** 		}
4473:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
4474:FreeRTOS\source/tasks.c **** 
4475:FreeRTOS\source/tasks.c **** 		return ulReturn;
4476:FreeRTOS\source/tasks.c **** 	}
4477:FreeRTOS\source/tasks.c **** 
4478:FreeRTOS\source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4479:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4480:FreeRTOS\source/tasks.c **** 
4481:FreeRTOS\source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4482:FreeRTOS\source/tasks.c **** 
4483:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4484:FreeRTOS\source/tasks.c **** 	{
4485:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn;
4486:FreeRTOS\source/tasks.c **** 
4487:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
4488:FreeRTOS\source/tasks.c **** 		{
4489:FreeRTOS\source/tasks.c **** 			/* Only block if a notification is not already pending. */
4490:FreeRTOS\source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4491:FreeRTOS\source/tasks.c **** 			{
4492:FreeRTOS\source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4493:FreeRTOS\source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4494:FreeRTOS\source/tasks.c **** 				clear the value to zero. */
4495:FreeRTOS\source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4496:FreeRTOS\source/tasks.c **** 
4497:FreeRTOS\source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4498:FreeRTOS\source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4499:FreeRTOS\source/tasks.c **** 
4500:FreeRTOS\source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4501:FreeRTOS\source/tasks.c **** 				{
4502:FreeRTOS\source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4503:FreeRTOS\source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4504:FreeRTOS\source/tasks.c **** 
4505:FreeRTOS\source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4506:FreeRTOS\source/tasks.c **** 					section (some will yield immediately, others wait until the
4507:FreeRTOS\source/tasks.c **** 					critical section exits) - but it is not something that
4508:FreeRTOS\source/tasks.c **** 					application code should ever do. */
4509:FreeRTOS\source/tasks.c **** 					portYIELD_WITHIN_API();
4510:FreeRTOS\source/tasks.c **** 				}
4511:FreeRTOS\source/tasks.c **** 				else
4512:FreeRTOS\source/tasks.c **** 				{
4513:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4514:FreeRTOS\source/tasks.c **** 				}
4515:FreeRTOS\source/tasks.c **** 			}
4516:FreeRTOS\source/tasks.c **** 			else
4517:FreeRTOS\source/tasks.c **** 			{
4518:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4519:FreeRTOS\source/tasks.c **** 			}
4520:FreeRTOS\source/tasks.c **** 		}
4521:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
4522:FreeRTOS\source/tasks.c **** 
4523:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
4524:FreeRTOS\source/tasks.c **** 		{
4525:FreeRTOS\source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4526:FreeRTOS\source/tasks.c **** 
4527:FreeRTOS\source/tasks.c **** 			if( pulNotificationValue != NULL )
4528:FreeRTOS\source/tasks.c **** 			{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 94


4529:FreeRTOS\source/tasks.c **** 				/* Output the current notification value, which may or may not
4530:FreeRTOS\source/tasks.c **** 				have changed. */
4531:FreeRTOS\source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4532:FreeRTOS\source/tasks.c **** 			}
4533:FreeRTOS\source/tasks.c **** 
4534:FreeRTOS\source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4535:FreeRTOS\source/tasks.c **** 			blocked state (because a notification was already pending) or the
4536:FreeRTOS\source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4537:FreeRTOS\source/tasks.c **** 			unblocked because of a timeout. */
4538:FreeRTOS\source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4539:FreeRTOS\source/tasks.c **** 			{
4540:FreeRTOS\source/tasks.c **** 				/* A notification was not received. */
4541:FreeRTOS\source/tasks.c **** 				xReturn = pdFALSE;
4542:FreeRTOS\source/tasks.c **** 			}
4543:FreeRTOS\source/tasks.c **** 			else
4544:FreeRTOS\source/tasks.c **** 			{
4545:FreeRTOS\source/tasks.c **** 				/* A notification was already pending or a notification was
4546:FreeRTOS\source/tasks.c **** 				received while the task was waiting. */
4547:FreeRTOS\source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4548:FreeRTOS\source/tasks.c **** 				xReturn = pdTRUE;
4549:FreeRTOS\source/tasks.c **** 			}
4550:FreeRTOS\source/tasks.c **** 
4551:FreeRTOS\source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4552:FreeRTOS\source/tasks.c **** 		}
4553:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
4554:FreeRTOS\source/tasks.c **** 
4555:FreeRTOS\source/tasks.c **** 		return xReturn;
4556:FreeRTOS\source/tasks.c **** 	}
4557:FreeRTOS\source/tasks.c **** 
4558:FreeRTOS\source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4559:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4560:FreeRTOS\source/tasks.c **** 
4561:FreeRTOS\source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4562:FreeRTOS\source/tasks.c **** 
4563:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4564:FreeRTOS\source/tasks.c **** 	{
4565:FreeRTOS\source/tasks.c **** 	TCB_t * pxTCB;
4566:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4567:FreeRTOS\source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4568:FreeRTOS\source/tasks.c **** 
4569:FreeRTOS\source/tasks.c **** 		configASSERT( xTaskToNotify );
4570:FreeRTOS\source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4571:FreeRTOS\source/tasks.c **** 
4572:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
4573:FreeRTOS\source/tasks.c **** 		{
4574:FreeRTOS\source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4575:FreeRTOS\source/tasks.c **** 			{
4576:FreeRTOS\source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4577:FreeRTOS\source/tasks.c **** 			}
4578:FreeRTOS\source/tasks.c **** 
4579:FreeRTOS\source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4580:FreeRTOS\source/tasks.c **** 
4581:FreeRTOS\source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4582:FreeRTOS\source/tasks.c **** 
4583:FreeRTOS\source/tasks.c **** 			switch( eAction )
4584:FreeRTOS\source/tasks.c **** 			{
4585:FreeRTOS\source/tasks.c **** 				case eSetBits	:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 95


4586:FreeRTOS\source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4587:FreeRTOS\source/tasks.c **** 					break;
4588:FreeRTOS\source/tasks.c **** 
4589:FreeRTOS\source/tasks.c **** 				case eIncrement	:
4590:FreeRTOS\source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4591:FreeRTOS\source/tasks.c **** 					break;
4592:FreeRTOS\source/tasks.c **** 
4593:FreeRTOS\source/tasks.c **** 				case eSetValueWithOverwrite	:
4594:FreeRTOS\source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4595:FreeRTOS\source/tasks.c **** 					break;
4596:FreeRTOS\source/tasks.c **** 
4597:FreeRTOS\source/tasks.c **** 				case eSetValueWithoutOverwrite :
4598:FreeRTOS\source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4599:FreeRTOS\source/tasks.c **** 					{
4600:FreeRTOS\source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4601:FreeRTOS\source/tasks.c **** 					}
4602:FreeRTOS\source/tasks.c **** 					else
4603:FreeRTOS\source/tasks.c **** 					{
4604:FreeRTOS\source/tasks.c **** 						/* The value could not be written to the task. */
4605:FreeRTOS\source/tasks.c **** 						xReturn = pdFAIL;
4606:FreeRTOS\source/tasks.c **** 					}
4607:FreeRTOS\source/tasks.c **** 					break;
4608:FreeRTOS\source/tasks.c **** 
4609:FreeRTOS\source/tasks.c **** 				case eNoAction:
4610:FreeRTOS\source/tasks.c **** 					/* The task is being notified without its notify value being
4611:FreeRTOS\source/tasks.c **** 					updated. */
4612:FreeRTOS\source/tasks.c **** 					break;
4613:FreeRTOS\source/tasks.c **** 			}
4614:FreeRTOS\source/tasks.c **** 
4615:FreeRTOS\source/tasks.c **** 			traceTASK_NOTIFY();
4616:FreeRTOS\source/tasks.c **** 
4617:FreeRTOS\source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4618:FreeRTOS\source/tasks.c **** 			notification then unblock it now. */
4619:FreeRTOS\source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4620:FreeRTOS\source/tasks.c **** 			{
4621:FreeRTOS\source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:FreeRTOS\source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4623:FreeRTOS\source/tasks.c **** 
4624:FreeRTOS\source/tasks.c **** 				/* The task should not have been on an event list. */
4625:FreeRTOS\source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4626:FreeRTOS\source/tasks.c **** 
4627:FreeRTOS\source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4628:FreeRTOS\source/tasks.c **** 				{
4629:FreeRTOS\source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4630:FreeRTOS\source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4631:FreeRTOS\source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4632:FreeRTOS\source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4633:FreeRTOS\source/tasks.c **** 					because it will automatically get reset to a new value when
4634:FreeRTOS\source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4635:FreeRTOS\source/tasks.c **** 					tickless idling is used it might be more important to enter
4636:FreeRTOS\source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4637:FreeRTOS\source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4638:FreeRTOS\source/tasks.c **** 					earliest possible time. */
4639:FreeRTOS\source/tasks.c **** 					prvResetNextTaskUnblockTime();
4640:FreeRTOS\source/tasks.c **** 				}
4641:FreeRTOS\source/tasks.c **** 				#endif
4642:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 96


4643:FreeRTOS\source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4644:FreeRTOS\source/tasks.c **** 				{
4645:FreeRTOS\source/tasks.c **** 					/* The notified task has a priority above the currently
4646:FreeRTOS\source/tasks.c **** 					executing task so a yield is required. */
4647:FreeRTOS\source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4648:FreeRTOS\source/tasks.c **** 				}
4649:FreeRTOS\source/tasks.c **** 				else
4650:FreeRTOS\source/tasks.c **** 				{
4651:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4652:FreeRTOS\source/tasks.c **** 				}
4653:FreeRTOS\source/tasks.c **** 			}
4654:FreeRTOS\source/tasks.c **** 			else
4655:FreeRTOS\source/tasks.c **** 			{
4656:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4657:FreeRTOS\source/tasks.c **** 			}
4658:FreeRTOS\source/tasks.c **** 		}
4659:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
4660:FreeRTOS\source/tasks.c **** 
4661:FreeRTOS\source/tasks.c **** 		return xReturn;
4662:FreeRTOS\source/tasks.c **** 	}
4663:FreeRTOS\source/tasks.c **** 
4664:FreeRTOS\source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4665:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4666:FreeRTOS\source/tasks.c **** 
4667:FreeRTOS\source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4668:FreeRTOS\source/tasks.c **** 
4669:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4670:FreeRTOS\source/tasks.c **** 	{
4671:FreeRTOS\source/tasks.c **** 	TCB_t * pxTCB;
4672:FreeRTOS\source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4673:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4674:FreeRTOS\source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4675:FreeRTOS\source/tasks.c **** 
4676:FreeRTOS\source/tasks.c **** 		configASSERT( xTaskToNotify );
4677:FreeRTOS\source/tasks.c **** 
4678:FreeRTOS\source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4679:FreeRTOS\source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4680:FreeRTOS\source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4681:FreeRTOS\source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4682:FreeRTOS\source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4683:FreeRTOS\source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4684:FreeRTOS\source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4685:FreeRTOS\source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4686:FreeRTOS\source/tasks.c **** 		been assigned a priority above the configured maximum system call
4687:FreeRTOS\source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4688:FreeRTOS\source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4689:FreeRTOS\source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4690:FreeRTOS\source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4691:FreeRTOS\source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4692:FreeRTOS\source/tasks.c **** 		provided on the following link:
4693:FreeRTOS\source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4694:FreeRTOS\source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4695:FreeRTOS\source/tasks.c **** 
4696:FreeRTOS\source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4697:FreeRTOS\source/tasks.c **** 
4698:FreeRTOS\source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4699:FreeRTOS\source/tasks.c **** 		{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 97


4700:FreeRTOS\source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4701:FreeRTOS\source/tasks.c **** 			{
4702:FreeRTOS\source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4703:FreeRTOS\source/tasks.c **** 			}
4704:FreeRTOS\source/tasks.c **** 
4705:FreeRTOS\source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4706:FreeRTOS\source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4707:FreeRTOS\source/tasks.c **** 
4708:FreeRTOS\source/tasks.c **** 			switch( eAction )
4709:FreeRTOS\source/tasks.c **** 			{
4710:FreeRTOS\source/tasks.c **** 				case eSetBits	:
4711:FreeRTOS\source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4712:FreeRTOS\source/tasks.c **** 					break;
4713:FreeRTOS\source/tasks.c **** 
4714:FreeRTOS\source/tasks.c **** 				case eIncrement	:
4715:FreeRTOS\source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4716:FreeRTOS\source/tasks.c **** 					break;
4717:FreeRTOS\source/tasks.c **** 
4718:FreeRTOS\source/tasks.c **** 				case eSetValueWithOverwrite	:
4719:FreeRTOS\source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4720:FreeRTOS\source/tasks.c **** 					break;
4721:FreeRTOS\source/tasks.c **** 
4722:FreeRTOS\source/tasks.c **** 				case eSetValueWithoutOverwrite :
4723:FreeRTOS\source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4724:FreeRTOS\source/tasks.c **** 					{
4725:FreeRTOS\source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4726:FreeRTOS\source/tasks.c **** 					}
4727:FreeRTOS\source/tasks.c **** 					else
4728:FreeRTOS\source/tasks.c **** 					{
4729:FreeRTOS\source/tasks.c **** 						/* The value could not be written to the task. */
4730:FreeRTOS\source/tasks.c **** 						xReturn = pdFAIL;
4731:FreeRTOS\source/tasks.c **** 					}
4732:FreeRTOS\source/tasks.c **** 					break;
4733:FreeRTOS\source/tasks.c **** 
4734:FreeRTOS\source/tasks.c **** 				case eNoAction :
4735:FreeRTOS\source/tasks.c **** 					/* The task is being notified without its notify value being
4736:FreeRTOS\source/tasks.c **** 					updated. */
4737:FreeRTOS\source/tasks.c **** 					break;
4738:FreeRTOS\source/tasks.c **** 			}
4739:FreeRTOS\source/tasks.c **** 
4740:FreeRTOS\source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4741:FreeRTOS\source/tasks.c **** 
4742:FreeRTOS\source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4743:FreeRTOS\source/tasks.c **** 			notification then unblock it now. */
4744:FreeRTOS\source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4745:FreeRTOS\source/tasks.c **** 			{
4746:FreeRTOS\source/tasks.c **** 				/* The task should not have been on an event list. */
4747:FreeRTOS\source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4748:FreeRTOS\source/tasks.c **** 
4749:FreeRTOS\source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4750:FreeRTOS\source/tasks.c **** 				{
4751:FreeRTOS\source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4752:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4753:FreeRTOS\source/tasks.c **** 				}
4754:FreeRTOS\source/tasks.c **** 				else
4755:FreeRTOS\source/tasks.c **** 				{
4756:FreeRTOS\source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 98


4757:FreeRTOS\source/tasks.c **** 					this task pending until the scheduler is resumed. */
4758:FreeRTOS\source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4759:FreeRTOS\source/tasks.c **** 				}
4760:FreeRTOS\source/tasks.c **** 
4761:FreeRTOS\source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4762:FreeRTOS\source/tasks.c **** 				{
4763:FreeRTOS\source/tasks.c **** 					/* The notified task has a priority above the currently
4764:FreeRTOS\source/tasks.c **** 					executing task so a yield is required. */
4765:FreeRTOS\source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4766:FreeRTOS\source/tasks.c **** 					{
4767:FreeRTOS\source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4768:FreeRTOS\source/tasks.c **** 					}
4769:FreeRTOS\source/tasks.c **** 					else
4770:FreeRTOS\source/tasks.c **** 					{
4771:FreeRTOS\source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4772:FreeRTOS\source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4773:FreeRTOS\source/tasks.c **** 						safe FreeRTOS function. */
4774:FreeRTOS\source/tasks.c **** 						xYieldPending = pdTRUE;
4775:FreeRTOS\source/tasks.c **** 					}
4776:FreeRTOS\source/tasks.c **** 				}
4777:FreeRTOS\source/tasks.c **** 				else
4778:FreeRTOS\source/tasks.c **** 				{
4779:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4780:FreeRTOS\source/tasks.c **** 				}
4781:FreeRTOS\source/tasks.c **** 			}
4782:FreeRTOS\source/tasks.c **** 		}
4783:FreeRTOS\source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4784:FreeRTOS\source/tasks.c **** 
4785:FreeRTOS\source/tasks.c **** 		return xReturn;
4786:FreeRTOS\source/tasks.c **** 	}
4787:FreeRTOS\source/tasks.c **** 
4788:FreeRTOS\source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4789:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4790:FreeRTOS\source/tasks.c **** 
4791:FreeRTOS\source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4792:FreeRTOS\source/tasks.c **** 
4793:FreeRTOS\source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4794:FreeRTOS\source/tasks.c **** 	{
4795:FreeRTOS\source/tasks.c **** 	TCB_t * pxTCB;
4796:FreeRTOS\source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4797:FreeRTOS\source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4798:FreeRTOS\source/tasks.c **** 
4799:FreeRTOS\source/tasks.c **** 		configASSERT( xTaskToNotify );
4800:FreeRTOS\source/tasks.c **** 
4801:FreeRTOS\source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4802:FreeRTOS\source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4803:FreeRTOS\source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4804:FreeRTOS\source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4805:FreeRTOS\source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4806:FreeRTOS\source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4807:FreeRTOS\source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4808:FreeRTOS\source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4809:FreeRTOS\source/tasks.c **** 		been assigned a priority above the configured maximum system call
4810:FreeRTOS\source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4811:FreeRTOS\source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4812:FreeRTOS\source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4813:FreeRTOS\source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 99


4814:FreeRTOS\source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4815:FreeRTOS\source/tasks.c **** 		provided on the following link:
4816:FreeRTOS\source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4817:FreeRTOS\source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4818:FreeRTOS\source/tasks.c **** 
4819:FreeRTOS\source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4820:FreeRTOS\source/tasks.c **** 
4821:FreeRTOS\source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4822:FreeRTOS\source/tasks.c **** 		{
4823:FreeRTOS\source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4824:FreeRTOS\source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4825:FreeRTOS\source/tasks.c **** 
4826:FreeRTOS\source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4827:FreeRTOS\source/tasks.c **** 			semaphore. */
4828:FreeRTOS\source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4829:FreeRTOS\source/tasks.c **** 
4830:FreeRTOS\source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4831:FreeRTOS\source/tasks.c **** 
4832:FreeRTOS\source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4833:FreeRTOS\source/tasks.c **** 			notification then unblock it now. */
4834:FreeRTOS\source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4835:FreeRTOS\source/tasks.c **** 			{
4836:FreeRTOS\source/tasks.c **** 				/* The task should not have been on an event list. */
4837:FreeRTOS\source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4838:FreeRTOS\source/tasks.c **** 
4839:FreeRTOS\source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4840:FreeRTOS\source/tasks.c **** 				{
4841:FreeRTOS\source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4842:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4843:FreeRTOS\source/tasks.c **** 				}
4844:FreeRTOS\source/tasks.c **** 				else
4845:FreeRTOS\source/tasks.c **** 				{
4846:FreeRTOS\source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4847:FreeRTOS\source/tasks.c **** 					this task pending until the scheduler is resumed. */
4848:FreeRTOS\source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4849:FreeRTOS\source/tasks.c **** 				}
4850:FreeRTOS\source/tasks.c **** 
4851:FreeRTOS\source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4852:FreeRTOS\source/tasks.c **** 				{
4853:FreeRTOS\source/tasks.c **** 					/* The notified task has a priority above the currently
4854:FreeRTOS\source/tasks.c **** 					executing task so a yield is required. */
4855:FreeRTOS\source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4856:FreeRTOS\source/tasks.c **** 					{
4857:FreeRTOS\source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4858:FreeRTOS\source/tasks.c **** 					}
4859:FreeRTOS\source/tasks.c **** 					else
4860:FreeRTOS\source/tasks.c **** 					{
4861:FreeRTOS\source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4862:FreeRTOS\source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4863:FreeRTOS\source/tasks.c **** 						safe FreeRTOS function. */
4864:FreeRTOS\source/tasks.c **** 						xYieldPending = pdTRUE;
4865:FreeRTOS\source/tasks.c **** 					}
4866:FreeRTOS\source/tasks.c **** 				}
4867:FreeRTOS\source/tasks.c **** 				else
4868:FreeRTOS\source/tasks.c **** 				{
4869:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4870:FreeRTOS\source/tasks.c **** 				}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 100


4871:FreeRTOS\source/tasks.c **** 			}
4872:FreeRTOS\source/tasks.c **** 		}
4873:FreeRTOS\source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4874:FreeRTOS\source/tasks.c **** 	}
4875:FreeRTOS\source/tasks.c **** 
4876:FreeRTOS\source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4877:FreeRTOS\source/tasks.c **** 
4878:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4879:FreeRTOS\source/tasks.c **** 
4880:FreeRTOS\source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4881:FreeRTOS\source/tasks.c **** 
4882:FreeRTOS\source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4883:FreeRTOS\source/tasks.c **** 	{
4884:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
4885:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn;
4886:FreeRTOS\source/tasks.c **** 
4887:FreeRTOS\source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4888:FreeRTOS\source/tasks.c **** 		its notification state cleared. */
4889:FreeRTOS\source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4890:FreeRTOS\source/tasks.c **** 
4891:FreeRTOS\source/tasks.c **** 		taskENTER_CRITICAL();
4892:FreeRTOS\source/tasks.c **** 		{
4893:FreeRTOS\source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4894:FreeRTOS\source/tasks.c **** 			{
4895:FreeRTOS\source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4896:FreeRTOS\source/tasks.c **** 				xReturn = pdPASS;
4897:FreeRTOS\source/tasks.c **** 			}
4898:FreeRTOS\source/tasks.c **** 			else
4899:FreeRTOS\source/tasks.c **** 			{
4900:FreeRTOS\source/tasks.c **** 				xReturn = pdFAIL;
4901:FreeRTOS\source/tasks.c **** 			}
4902:FreeRTOS\source/tasks.c **** 		}
4903:FreeRTOS\source/tasks.c **** 		taskEXIT_CRITICAL();
4904:FreeRTOS\source/tasks.c **** 
4905:FreeRTOS\source/tasks.c **** 		return xReturn;
4906:FreeRTOS\source/tasks.c **** 	}
4907:FreeRTOS\source/tasks.c **** 
4908:FreeRTOS\source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4909:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
4910:FreeRTOS\source/tasks.c **** 
4911:FreeRTOS\source/tasks.c **** 
4912:FreeRTOS\source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4913:FreeRTOS\source/tasks.c **** {
 693              		.loc 1 4913 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              	.LVL70:
 698 0000 70B5     		push	{r4, r5, r6, lr}
 699              		.cfi_def_cfa_offset 16
 700              		.cfi_offset 4, -16
 701              		.cfi_offset 5, -12
 702              		.cfi_offset 6, -8
 703              		.cfi_offset 14, -4
 704 0002 0400     		movs	r4, r0
 705 0004 0D00     		movs	r5, r1
4914:FreeRTOS\source/tasks.c **** TickType_t xTimeToWake;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 101


4915:FreeRTOS\source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 706              		.loc 1 4915 0
 707 0006 154B     		ldr	r3, .L59
 708 0008 DE6E     		ldr	r6, [r3, #108]
 709              	.LVL71:
4916:FreeRTOS\source/tasks.c **** 
4917:FreeRTOS\source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4918:FreeRTOS\source/tasks.c **** 	{
4919:FreeRTOS\source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4920:FreeRTOS\source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4921:FreeRTOS\source/tasks.c **** 		when the task leaves the Blocked state. */
4922:FreeRTOS\source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4923:FreeRTOS\source/tasks.c **** 	}
4924:FreeRTOS\source/tasks.c **** 	#endif
4925:FreeRTOS\source/tasks.c **** 
4926:FreeRTOS\source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4927:FreeRTOS\source/tasks.c **** 	as the same list item is used for both lists. */
4928:FreeRTOS\source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 710              		.loc 1 4928 0
 711 000a 986D     		ldr	r0, [r3, #88]
 712              	.LVL72:
 713 000c 0430     		adds	r0, r0, #4
 714 000e FFF7FEFF 		bl	uxListRemove
 715              	.LVL73:
4929:FreeRTOS\source/tasks.c **** 	{
4930:FreeRTOS\source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4931:FreeRTOS\source/tasks.c **** 		check, and the port reset macro can be called directly. */
4932:FreeRTOS\source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4933:FreeRTOS\source/tasks.c **** 	}
4934:FreeRTOS\source/tasks.c **** 	else
4935:FreeRTOS\source/tasks.c **** 	{
4936:FreeRTOS\source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4937:FreeRTOS\source/tasks.c **** 	}
4938:FreeRTOS\source/tasks.c **** 
4939:FreeRTOS\source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4940:FreeRTOS\source/tasks.c **** 	{
4941:FreeRTOS\source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 716              		.loc 1 4941 0
 717 0012 631C     		adds	r3, r4, #1
 718 0014 08D1     		bne	.L56
 719              		.loc 1 4941 0 is_stmt 0 discriminator 1
 720 0016 002D     		cmp	r5, #0
 721 0018 06D0     		beq	.L56
4942:FreeRTOS\source/tasks.c **** 		{
4943:FreeRTOS\source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4944:FreeRTOS\source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4945:FreeRTOS\source/tasks.c **** 			indefinitely. */
4946:FreeRTOS\source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 722              		.loc 1 4946 0 is_stmt 1
 723 001a 104B     		ldr	r3, .L59
 724 001c 996D     		ldr	r1, [r3, #88]
 725 001e 0431     		adds	r1, r1, #4
 726 0020 0F48     		ldr	r0, .L59+4
 727 0022 FFF7FEFF 		bl	vListInsertEnd
 728              	.LVL74:
 729 0026 18E0     		b	.L55
 730              	.L56:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 102


4947:FreeRTOS\source/tasks.c **** 		}
4948:FreeRTOS\source/tasks.c **** 		else
4949:FreeRTOS\source/tasks.c **** 		{
4950:FreeRTOS\source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4951:FreeRTOS\source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4952:FreeRTOS\source/tasks.c **** 			kernel will manage it correctly. */
4953:FreeRTOS\source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 731              		.loc 1 4953 0
 732 0028 3419     		adds	r4, r6, r4
 733              	.LVL75:
4954:FreeRTOS\source/tasks.c **** 
4955:FreeRTOS\source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4956:FreeRTOS\source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 734              		.loc 1 4956 0
 735 002a 0C4B     		ldr	r3, .L59
 736 002c 9B6D     		ldr	r3, [r3, #88]
 737 002e 5C60     		str	r4, [r3, #4]
4957:FreeRTOS\source/tasks.c **** 
4958:FreeRTOS\source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 738              		.loc 1 4958 0
 739 0030 A642     		cmp	r6, r4
 740 0032 06D9     		bls	.L58
4959:FreeRTOS\source/tasks.c **** 			{
4960:FreeRTOS\source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4961:FreeRTOS\source/tasks.c **** 				list. */
4962:FreeRTOS\source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 741              		.loc 1 4962 0
 742 0034 094B     		ldr	r3, .L59
 743 0036 186D     		ldr	r0, [r3, #80]
 744 0038 996D     		ldr	r1, [r3, #88]
 745 003a 0431     		adds	r1, r1, #4
 746 003c FFF7FEFF 		bl	vListInsert
 747              	.LVL76:
 748 0040 0BE0     		b	.L55
 749              	.L58:
4963:FreeRTOS\source/tasks.c **** 			}
4964:FreeRTOS\source/tasks.c **** 			else
4965:FreeRTOS\source/tasks.c **** 			{
4966:FreeRTOS\source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4967:FreeRTOS\source/tasks.c **** 				is used. */
4968:FreeRTOS\source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 750              		.loc 1 4968 0
 751 0042 074D     		ldr	r5, .L59+4
 752              	.LVL77:
 753 0044 A86A     		ldr	r0, [r5, #40]
 754 0046 054B     		ldr	r3, .L59
 755 0048 996D     		ldr	r1, [r3, #88]
 756 004a 0431     		adds	r1, r1, #4
 757 004c FFF7FEFF 		bl	vListInsert
 758              	.LVL78:
4969:FreeRTOS\source/tasks.c **** 
4970:FreeRTOS\source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4971:FreeRTOS\source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4972:FreeRTOS\source/tasks.c **** 				needs to be updated too. */
4973:FreeRTOS\source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 759              		.loc 1 4973 0
 760 0050 EB6A     		ldr	r3, [r5, #44]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 103


 761 0052 9C42     		cmp	r4, r3
 762 0054 01D2     		bcs	.L55
4974:FreeRTOS\source/tasks.c **** 				{
4975:FreeRTOS\source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 763              		.loc 1 4975 0
 764 0056 024B     		ldr	r3, .L59+4
 765 0058 DC62     		str	r4, [r3, #44]
 766              	.LVL79:
 767              	.L55:
4976:FreeRTOS\source/tasks.c **** 				}
4977:FreeRTOS\source/tasks.c **** 				else
4978:FreeRTOS\source/tasks.c **** 				{
4979:FreeRTOS\source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4980:FreeRTOS\source/tasks.c **** 				}
4981:FreeRTOS\source/tasks.c **** 			}
4982:FreeRTOS\source/tasks.c **** 		}
4983:FreeRTOS\source/tasks.c **** 	}
4984:FreeRTOS\source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4985:FreeRTOS\source/tasks.c **** 	{
4986:FreeRTOS\source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4987:FreeRTOS\source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4988:FreeRTOS\source/tasks.c **** 		will manage it correctly. */
4989:FreeRTOS\source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4990:FreeRTOS\source/tasks.c **** 
4991:FreeRTOS\source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4992:FreeRTOS\source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4993:FreeRTOS\source/tasks.c **** 
4994:FreeRTOS\source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4995:FreeRTOS\source/tasks.c **** 		{
4996:FreeRTOS\source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4997:FreeRTOS\source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4998:FreeRTOS\source/tasks.c **** 		}
4999:FreeRTOS\source/tasks.c **** 		else
5000:FreeRTOS\source/tasks.c **** 		{
5001:FreeRTOS\source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5002:FreeRTOS\source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5003:FreeRTOS\source/tasks.c **** 
5004:FreeRTOS\source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5005:FreeRTOS\source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5006:FreeRTOS\source/tasks.c **** 			too. */
5007:FreeRTOS\source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5008:FreeRTOS\source/tasks.c **** 			{
5009:FreeRTOS\source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5010:FreeRTOS\source/tasks.c **** 			}
5011:FreeRTOS\source/tasks.c **** 			else
5012:FreeRTOS\source/tasks.c **** 			{
5013:FreeRTOS\source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5014:FreeRTOS\source/tasks.c **** 			}
5015:FreeRTOS\source/tasks.c **** 		}
5016:FreeRTOS\source/tasks.c **** 
5017:FreeRTOS\source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5018:FreeRTOS\source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5019:FreeRTOS\source/tasks.c **** 	}
5020:FreeRTOS\source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5021:FreeRTOS\source/tasks.c **** }
 768              		.loc 1 5021 0
 769              		@ sp needed
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 104


 770              	.LVL80:
 771 005a 70BD     		pop	{r4, r5, r6, pc}
 772              	.L60:
 773              		.align	2
 774              	.L59:
 775 005c 80000000 		.word	.LANCHOR1
 776 0060 00000000 		.word	.LANCHOR0
 777              		.cfi_endproc
 778              	.LFE85:
 779              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 780              		.section	.text.xTaskCreate,"ax",%progbits
 781              		.align	2
 782              		.global	xTaskCreate
 783              		.code	16
 784              		.thumb_func
 785              		.type	xTaskCreate, %function
 786              	xTaskCreate:
 787              	.LFB32:
 738:FreeRTOS\source/tasks.c **** 	TCB_t *pxNewTCB;
 788              		.loc 1 738 0
 789              		.cfi_startproc
 790              		@ args = 8, pretend = 0, frame = 8
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792              	.LVL81:
 793 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 794              		.cfi_def_cfa_offset 20
 795              		.cfi_offset 4, -20
 796              		.cfi_offset 5, -16
 797              		.cfi_offset 6, -12
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 14, -4
 800 0002 87B0     		sub	sp, sp, #28
 801              		.cfi_def_cfa_offset 48
 802 0004 0490     		str	r0, [sp, #16]
 803 0006 0591     		str	r1, [sp, #20]
 804 0008 1400     		movs	r4, r2
 805 000a 1F00     		movs	r7, r3
 806              	.LBB3:
 772:FreeRTOS\source/tasks.c **** 
 807              		.loc 1 772 0
 808 000c 9000     		lsls	r0, r2, #2
 809              	.LVL82:
 810 000e FFF7FEFF 		bl	pvPortMalloc
 811              	.LVL83:
 812 0012 061E     		subs	r6, r0, #0
 813              	.LVL84:
 774:FreeRTOS\source/tasks.c **** 			{
 814              		.loc 1 774 0
 815 0014 0AD0     		beq	.L65
 777:FreeRTOS\source/tasks.c **** 
 816              		.loc 1 777 0
 817 0016 6820     		movs	r0, #104
 818              	.LVL85:
 819 0018 FFF7FEFF 		bl	pvPortMalloc
 820              	.LVL86:
 821 001c 051E     		subs	r5, r0, #0
 822              	.LVL87:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 105


 779:FreeRTOS\source/tasks.c **** 				{
 823              		.loc 1 779 0
 824 001e 01D0     		beq	.L63
 782:FreeRTOS\source/tasks.c **** 				}
 825              		.loc 1 782 0
 826 0020 0663     		str	r6, [r0, #48]
 827 0022 04E0     		b	.L62
 828              	.L63:
 788:FreeRTOS\source/tasks.c **** 				}
 829              		.loc 1 788 0
 830 0024 3000     		movs	r0, r6
 831              	.LVL88:
 832 0026 FFF7FEFF 		bl	vPortFree
 833              	.LVL89:
 834 002a 00E0     		b	.L62
 835              	.LVL90:
 836              	.L65:
 793:FreeRTOS\source/tasks.c **** 			}
 837              		.loc 1 793 0
 838 002c 0025     		movs	r5, #0
 839              	.LVL91:
 840              	.L62:
 841              	.LBE3:
 798:FreeRTOS\source/tasks.c **** 		{
 842              		.loc 1 798 0
 843 002e 002D     		cmp	r5, #0
 844 0030 11D0     		beq	.L66
 808:FreeRTOS\source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 845              		.loc 1 808 0
 846 0032 0023     		movs	r3, #0
 847 0034 0393     		str	r3, [sp, #12]
 848 0036 0295     		str	r5, [sp, #8]
 849 0038 0D9B     		ldr	r3, [sp, #52]
 850 003a 0193     		str	r3, [sp, #4]
 851 003c 0C9B     		ldr	r3, [sp, #48]
 852 003e 0093     		str	r3, [sp]
 853 0040 3B00     		movs	r3, r7
 854 0042 2200     		movs	r2, r4
 855 0044 0599     		ldr	r1, [sp, #20]
 856 0046 0498     		ldr	r0, [sp, #16]
 857 0048 FFF7FEFF 		bl	prvInitialiseNewTask
 858              	.LVL92:
 809:FreeRTOS\source/tasks.c **** 			xReturn = pdPASS;
 859              		.loc 1 809 0
 860 004c 2800     		movs	r0, r5
 861 004e FFF7FEFF 		bl	prvAddNewTaskToReadyList
 862              	.LVL93:
 810:FreeRTOS\source/tasks.c **** 		}
 863              		.loc 1 810 0
 864 0052 0120     		movs	r0, #1
 865 0054 01E0     		b	.L64
 866              	.LVL94:
 867              	.L66:
 814:FreeRTOS\source/tasks.c **** 		}
 868              		.loc 1 814 0
 869 0056 0120     		movs	r0, #1
 870 0058 4042     		rsbs	r0, r0, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 106


 871              	.L64:
 872              	.LVL95:
 818:FreeRTOS\source/tasks.c **** 
 873              		.loc 1 818 0
 874 005a 07B0     		add	sp, sp, #28
 875              		@ sp needed
 876              	.LVL96:
 877              	.LVL97:
 878              	.LVL98:
 879 005c F0BD     		pop	{r4, r5, r6, r7, pc}
 880              		.cfi_endproc
 881              	.LFE32:
 882              		.size	xTaskCreate, .-xTaskCreate
 883 005e C046     		.section	.text.vTaskDelete,"ax",%progbits
 884              		.align	2
 885              		.global	vTaskDelete
 886              		.code	16
 887              		.thumb_func
 888              		.type	vTaskDelete, %function
 889              	vTaskDelete:
 890              	.LFB35:
1113:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
 891              		.loc 1 1113 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895              	.LVL99:
 896 0000 70B5     		push	{r4, r5, r6, lr}
 897              		.cfi_def_cfa_offset 16
 898              		.cfi_offset 4, -16
 899              		.cfi_offset 5, -12
 900              		.cfi_offset 6, -8
 901              		.cfi_offset 14, -4
 902 0002 0400     		movs	r4, r0
1116:FreeRTOS\source/tasks.c **** 		{
 903              		.loc 1 1116 0
 904 0004 FFF7FEFF 		bl	vPortEnterCritical
 905              	.LVL100:
1120:FreeRTOS\source/tasks.c **** 
 906              		.loc 1 1120 0
 907 0008 002C     		cmp	r4, #0
 908 000a 01D1     		bne	.L68
1120:FreeRTOS\source/tasks.c **** 
 909              		.loc 1 1120 0 is_stmt 0 discriminator 1
 910 000c 1C4B     		ldr	r3, .L75
 911 000e 9C6D     		ldr	r4, [r3, #88]
 912              	.LVL101:
 913              	.L68:
1123:FreeRTOS\source/tasks.c **** 			{
 914              		.loc 1 1123 0 is_stmt 1 discriminator 4
 915 0010 261D     		adds	r6, r4, #4
 916 0012 3000     		movs	r0, r6
 917 0014 FFF7FEFF 		bl	uxListRemove
 918              	.LVL102:
1133:FreeRTOS\source/tasks.c **** 			{
 919              		.loc 1 1133 0 discriminator 4
 920 0018 A36A     		ldr	r3, [r4, #40]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 107


 921 001a 002B     		cmp	r3, #0
 922 001c 03D0     		beq	.L69
1135:FreeRTOS\source/tasks.c **** 			}
 923              		.loc 1 1135 0
 924 001e 2000     		movs	r0, r4
 925 0020 1830     		adds	r0, r0, #24
 926 0022 FFF7FEFF 		bl	uxListRemove
 927              	.LVL103:
 928              	.L69:
1146:FreeRTOS\source/tasks.c **** 
 929              		.loc 1 1146 0
 930 0026 164B     		ldr	r3, .L75
 931 0028 1A6E     		ldr	r2, [r3, #96]
 932 002a 0132     		adds	r2, r2, #1
 933 002c 1A66     		str	r2, [r3, #96]
1148:FreeRTOS\source/tasks.c **** 			{
 934              		.loc 1 1148 0
 935 002e 9B6D     		ldr	r3, [r3, #88]
 936 0030 9C42     		cmp	r4, r3
 937 0032 09D1     		bne	.L70
1155:FreeRTOS\source/tasks.c **** 
 938              		.loc 1 1155 0
 939 0034 124D     		ldr	r5, .L75
 940 0036 2800     		movs	r0, r5
 941 0038 3C30     		adds	r0, r0, #60
 942 003a 3100     		movs	r1, r6
 943 003c FFF7FEFF 		bl	vListInsertEnd
 944              	.LVL104:
1160:FreeRTOS\source/tasks.c **** 
 945              		.loc 1 1160 0
 946 0040 AB6E     		ldr	r3, [r5, #104]
 947 0042 0133     		adds	r3, r3, #1
 948 0044 AB66     		str	r3, [r5, #104]
 949 0046 08E0     		b	.L71
 950              	.L70:
1171:FreeRTOS\source/tasks.c **** 				prvDeleteTCB( pxTCB );
 951              		.loc 1 1171 0
 952 0048 0D4A     		ldr	r2, .L75
 953 004a 536D     		ldr	r3, [r2, #84]
 954 004c 013B     		subs	r3, r3, #1
 955 004e 5365     		str	r3, [r2, #84]
1172:FreeRTOS\source/tasks.c **** 
 956              		.loc 1 1172 0
 957 0050 2000     		movs	r0, r4
 958 0052 FFF7FEFF 		bl	prvDeleteTCB
 959              	.LVL105:
1176:FreeRTOS\source/tasks.c **** 			}
 960              		.loc 1 1176 0
 961 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 962              	.LVL106:
 963              	.L71:
1181:FreeRTOS\source/tasks.c **** 
 964              		.loc 1 1181 0
 965 005a FFF7FEFF 		bl	vPortExitCritical
 966              	.LVL107:
1185:FreeRTOS\source/tasks.c **** 		{
 967              		.loc 1 1185 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 108


 968 005e 084B     		ldr	r3, .L75
 969 0060 DB6D     		ldr	r3, [r3, #92]
 970 0062 002B     		cmp	r3, #0
 971 0064 0BD0     		beq	.L67
1187:FreeRTOS\source/tasks.c **** 			{
 972              		.loc 1 1187 0
 973 0066 064B     		ldr	r3, .L75
 974 0068 9B6D     		ldr	r3, [r3, #88]
 975 006a 9C42     		cmp	r4, r3
 976 006c 07D1     		bne	.L67
1189:FreeRTOS\source/tasks.c **** 				portYIELD_WITHIN_API();
 977              		.loc 1 1189 0
 978 006e 044B     		ldr	r3, .L75
 979 0070 1B6F     		ldr	r3, [r3, #112]
 980 0072 002B     		cmp	r3, #0
 981 0074 01D0     		beq	.L73
1189:FreeRTOS\source/tasks.c **** 				portYIELD_WITHIN_API();
 982              		.loc 1 1189 0 is_stmt 0 discriminator 1
 983              		.syntax divided
 984              	@ 1189 "FreeRTOS\source\tasks.c" 1
 985 0076 72B6     		 cpsid i 
 986              	@ 0 "" 2
 987              		.thumb
 988              		.syntax unified
 989              	.L74:
 990 0078 FEE7     		b	.L74
 991              	.L73:
1190:FreeRTOS\source/tasks.c **** 			}
 992              		.loc 1 1190 0 is_stmt 1
 993 007a FFF7FEFF 		bl	vPortYield
 994              	.LVL108:
 995              	.L67:
1197:FreeRTOS\source/tasks.c **** 
 996              		.loc 1 1197 0
 997              		@ sp needed
 998              	.LVL109:
 999              	.LVL110:
 1000 007e 70BD     		pop	{r4, r5, r6, pc}
 1001              	.L76:
 1002              		.align	2
 1003              	.L75:
 1004 0080 80000000 		.word	.LANCHOR1
 1005              		.cfi_endproc
 1006              	.LFE35:
 1007              		.size	vTaskDelete, .-vTaskDelete
 1008              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1009              		.align	2
 1010              		.global	uxTaskPriorityGet
 1011              		.code	16
 1012              		.thumb_func
 1013              		.type	uxTaskPriorityGet, %function
 1014              	uxTaskPriorityGet:
 1015              	.LFB38:
1405:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
 1016              		.loc 1 1405 0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 109


 1019              		@ frame_needed = 0, uses_anonymous_args = 0
 1020              	.LVL111:
 1021 0000 10B5     		push	{r4, lr}
 1022              		.cfi_def_cfa_offset 8
 1023              		.cfi_offset 4, -8
 1024              		.cfi_offset 14, -4
 1025 0002 0400     		movs	r4, r0
1409:FreeRTOS\source/tasks.c **** 		{
 1026              		.loc 1 1409 0
 1027 0004 FFF7FEFF 		bl	vPortEnterCritical
 1028              	.LVL112:
1413:FreeRTOS\source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1029              		.loc 1 1413 0
 1030 0008 002C     		cmp	r4, #0
 1031 000a 01D1     		bne	.L78
1413:FreeRTOS\source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1032              		.loc 1 1413 0 is_stmt 0 discriminator 1
 1033 000c 034B     		ldr	r3, .L79
 1034 000e 9C6D     		ldr	r4, [r3, #88]
 1035              	.LVL113:
 1036              	.L78:
1414:FreeRTOS\source/tasks.c **** 		}
 1037              		.loc 1 1414 0 is_stmt 1 discriminator 4
 1038 0010 E46A     		ldr	r4, [r4, #44]
 1039              	.LVL114:
1416:FreeRTOS\source/tasks.c **** 
 1040              		.loc 1 1416 0 discriminator 4
 1041 0012 FFF7FEFF 		bl	vPortExitCritical
 1042              	.LVL115:
1419:FreeRTOS\source/tasks.c **** 
 1043              		.loc 1 1419 0 discriminator 4
 1044 0016 2000     		movs	r0, r4
 1045              		@ sp needed
 1046              	.LVL116:
 1047 0018 10BD     		pop	{r4, pc}
 1048              	.L80:
 1049 001a C046     		.align	2
 1050              	.L79:
 1051 001c 80000000 		.word	.LANCHOR1
 1052              		.cfi_endproc
 1053              	.LFE38:
 1054              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1055              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1056              		.align	2
 1057              		.global	uxTaskPriorityGetFromISR
 1058              		.code	16
 1059              		.thumb_func
 1060              		.type	uxTaskPriorityGetFromISR, %function
 1061              	uxTaskPriorityGetFromISR:
 1062              	.LFB39:
1427:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
 1063              		.loc 1 1427 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 1067              	.LVL117:
 1068 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 110


 1069              		.cfi_def_cfa_offset 8
 1070              		.cfi_offset 4, -8
 1071              		.cfi_offset 14, -4
 1072 0002 0400     		movs	r4, r0
1449:FreeRTOS\source/tasks.c **** 		{
 1073              		.loc 1 1449 0
 1074 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1075              	.LVL118:
1453:FreeRTOS\source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1076              		.loc 1 1453 0
 1077 0008 002C     		cmp	r4, #0
 1078 000a 01D1     		bne	.L82
1453:FreeRTOS\source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1079              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1080 000c 034B     		ldr	r3, .L83
 1081 000e 9C6D     		ldr	r4, [r3, #88]
 1082              	.LVL119:
 1083              	.L82:
1454:FreeRTOS\source/tasks.c **** 		}
 1084              		.loc 1 1454 0 is_stmt 1 discriminator 4
 1085 0010 E46A     		ldr	r4, [r4, #44]
 1086              	.LVL120:
1456:FreeRTOS\source/tasks.c **** 
 1087              		.loc 1 1456 0 discriminator 4
 1088 0012 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1089              	.LVL121:
1459:FreeRTOS\source/tasks.c **** 
 1090              		.loc 1 1459 0 discriminator 4
 1091 0016 2000     		movs	r0, r4
 1092              		@ sp needed
 1093              	.LVL122:
 1094 0018 10BD     		pop	{r4, pc}
 1095              	.L84:
 1096 001a C046     		.align	2
 1097              	.L83:
 1098 001c 80000000 		.word	.LANCHOR1
 1099              		.cfi_endproc
 1100              	.LFE39:
 1101              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1102              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1103              		.align	2
 1104              		.global	vTaskPrioritySet
 1105              		.code	16
 1106              		.thumb_func
 1107              		.type	vTaskPrioritySet, %function
 1108              	vTaskPrioritySet:
 1109              	.LFB40:
1467:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
 1110              		.loc 1 1467 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              	.LVL123:
 1115 0000 70B5     		push	{r4, r5, r6, lr}
 1116              		.cfi_def_cfa_offset 16
 1117              		.cfi_offset 4, -16
 1118              		.cfi_offset 5, -12
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 111


 1119              		.cfi_offset 6, -8
 1120              		.cfi_offset 14, -4
 1121 0002 0400     		movs	r4, r0
 1122 0004 0D00     		movs	r5, r1
 1123              	.LVL124:
1472:FreeRTOS\source/tasks.c **** 
 1124              		.loc 1 1472 0
 1125 0006 0429     		cmp	r1, #4
 1126 0008 01D9     		bls	.L86
1472:FreeRTOS\source/tasks.c **** 
 1127              		.loc 1 1472 0 is_stmt 0 discriminator 1
 1128              		.syntax divided
 1129              	@ 1472 "FreeRTOS\source\tasks.c" 1
 1130 000a 72B6     		 cpsid i 
 1131              	@ 0 "" 2
 1132              		.thumb
 1133              		.syntax unified
 1134              	.L87:
 1135 000c FEE7     		b	.L87
 1136              	.L86:
1475:FreeRTOS\source/tasks.c **** 		{
 1137              		.loc 1 1475 0 is_stmt 1
 1138 000e 0429     		cmp	r1, #4
 1139 0010 00D9     		bls	.L88
1477:FreeRTOS\source/tasks.c **** 		}
 1140              		.loc 1 1477 0
 1141 0012 0425     		movs	r5, #4
 1142              	.L88:
 1143              	.LVL125:
1484:FreeRTOS\source/tasks.c **** 		{
 1144              		.loc 1 1484 0
 1145 0014 FFF7FEFF 		bl	vPortEnterCritical
 1146              	.LVL126:
1488:FreeRTOS\source/tasks.c **** 
 1147              		.loc 1 1488 0
 1148 0018 002C     		cmp	r4, #0
 1149 001a 01D1     		bne	.L89
1488:FreeRTOS\source/tasks.c **** 
 1150              		.loc 1 1488 0 is_stmt 0 discriminator 1
 1151 001c 274B     		ldr	r3, .L103
 1152 001e 9C6D     		ldr	r4, [r3, #88]
 1153              	.LVL127:
 1154              	.L89:
1494:FreeRTOS\source/tasks.c **** 			}
 1155              		.loc 1 1494 0 is_stmt 1 discriminator 4
 1156 0020 626C     		ldr	r2, [r4, #68]
 1157              	.LVL128:
1502:FreeRTOS\source/tasks.c **** 			{
 1158              		.loc 1 1502 0 discriminator 4
 1159 0022 9542     		cmp	r5, r2
 1160 0024 47D0     		beq	.L90
1506:FreeRTOS\source/tasks.c **** 				{
 1161              		.loc 1 1506 0
 1162 0026 0AD9     		bls	.L91
1508:FreeRTOS\source/tasks.c **** 					{
 1163              		.loc 1 1508 0
 1164 0028 244B     		ldr	r3, .L103
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 112


 1165 002a 9B6D     		ldr	r3, [r3, #88]
 1166 002c 9C42     		cmp	r4, r3
 1167 002e 0CD0     		beq	.L99
1513:FreeRTOS\source/tasks.c **** 						{
 1168              		.loc 1 1513 0
 1169 0030 224B     		ldr	r3, .L103
 1170 0032 9B6D     		ldr	r3, [r3, #88]
 1171 0034 DB6A     		ldr	r3, [r3, #44]
 1172 0036 9D42     		cmp	r5, r3
 1173 0038 09D2     		bcs	.L100
1470:FreeRTOS\source/tasks.c **** 
 1174              		.loc 1 1470 0
 1175 003a 0026     		movs	r6, #0
 1176 003c 0AE0     		b	.L92
 1177              	.L91:
1529:FreeRTOS\source/tasks.c **** 				{
 1178              		.loc 1 1529 0
 1179 003e 1F4B     		ldr	r3, .L103
 1180 0040 9B6D     		ldr	r3, [r3, #88]
 1181 0042 9C42     		cmp	r4, r3
 1182 0044 05D0     		beq	.L101
1470:FreeRTOS\source/tasks.c **** 
 1183              		.loc 1 1470 0
 1184 0046 0026     		movs	r6, #0
 1185 0048 04E0     		b	.L92
 1186              	.L99:
 1187 004a 0026     		movs	r6, #0
 1188 004c 02E0     		b	.L92
 1189              	.L100:
1515:FreeRTOS\source/tasks.c **** 						}
 1190              		.loc 1 1515 0
 1191 004e 0126     		movs	r6, #1
 1192 0050 00E0     		b	.L92
 1193              	.L101:
1534:FreeRTOS\source/tasks.c **** 				}
 1194              		.loc 1 1534 0
 1195 0052 0126     		movs	r6, #1
 1196              	.L92:
 1197              	.LVL129:
1546:FreeRTOS\source/tasks.c **** 
 1198              		.loc 1 1546 0
 1199 0054 E36A     		ldr	r3, [r4, #44]
 1200              	.LVL130:
1552:FreeRTOS\source/tasks.c **** 					{
 1201              		.loc 1 1552 0
 1202 0056 9A42     		cmp	r2, r3
 1203 0058 00D1     		bne	.L93
1554:FreeRTOS\source/tasks.c **** 					}
 1204              		.loc 1 1554 0
 1205 005a E562     		str	r5, [r4, #44]
 1206              	.L93:
1562:FreeRTOS\source/tasks.c **** 				}
 1207              		.loc 1 1562 0
 1208 005c 6564     		str	r5, [r4, #68]
1572:FreeRTOS\source/tasks.c **** 				{
 1209              		.loc 1 1572 0
 1210 005e A269     		ldr	r2, [r4, #24]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 113


 1211              	.LVL131:
 1212 0060 002A     		cmp	r2, #0
 1213 0062 02DB     		blt	.L94
1574:FreeRTOS\source/tasks.c **** 				}
 1214              		.loc 1 1574 0
 1215 0064 0522     		movs	r2, #5
 1216 0066 551B     		subs	r5, r2, r5
 1217              	.LVL132:
 1218 0068 A561     		str	r5, [r4, #24]
 1219              	.L94:
1585:FreeRTOS\source/tasks.c **** 				{
 1220              		.loc 1 1585 0
 1221 006a 9A00     		lsls	r2, r3, #2
 1222 006c D318     		adds	r3, r2, r3
 1223              	.LVL133:
 1224 006e 9A00     		lsls	r2, r3, #2
 1225 0070 134B     		ldr	r3, .L103+4
 1226 0072 3033     		adds	r3, r3, #48
 1227 0074 9A18     		adds	r2, r3, r2
 1228 0076 6369     		ldr	r3, [r4, #20]
 1229 0078 9342     		cmp	r3, r2
 1230 007a 01D1     		bne	.L102
 1231 007c 0123     		movs	r3, #1
 1232 007e 00E0     		b	.L95
 1233              	.L102:
 1234 0080 0023     		movs	r3, #0
 1235              	.L95:
1585:FreeRTOS\source/tasks.c **** 				{
 1236              		.loc 1 1585 0 is_stmt 0 discriminator 4
 1237 0082 002B     		cmp	r3, #0
 1238 0084 13D0     		beq	.L96
1590:FreeRTOS\source/tasks.c **** 					{
 1239              		.loc 1 1590 0 is_stmt 1
 1240 0086 251D     		adds	r5, r4, #4
 1241 0088 2800     		movs	r0, r5
 1242 008a FFF7FEFF 		bl	uxListRemove
 1243              	.LVL134:
1601:FreeRTOS\source/tasks.c **** 				}
 1244              		.loc 1 1601 0
 1245 008e E36A     		ldr	r3, [r4, #44]
 1246 0090 0A4A     		ldr	r2, .L103
 1247 0092 526E     		ldr	r2, [r2, #100]
 1248 0094 9342     		cmp	r3, r2
 1249 0096 01D9     		bls	.L97
1601:FreeRTOS\source/tasks.c **** 				}
 1250              		.loc 1 1601 0 is_stmt 0 discriminator 1
 1251 0098 084A     		ldr	r2, .L103
 1252 009a 5366     		str	r3, [r2, #100]
 1253              	.L97:
1601:FreeRTOS\source/tasks.c **** 				}
 1254              		.loc 1 1601 0 discriminator 3
 1255 009c 9A00     		lsls	r2, r3, #2
 1256 009e D318     		adds	r3, r2, r3
 1257 00a0 9A00     		lsls	r2, r3, #2
 1258 00a2 0748     		ldr	r0, .L103+4
 1259 00a4 3030     		adds	r0, r0, #48
 1260 00a6 8018     		adds	r0, r0, r2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 114


 1261 00a8 2900     		movs	r1, r5
 1262 00aa FFF7FEFF 		bl	vListInsertEnd
 1263              	.LVL135:
 1264              	.L96:
1608:FreeRTOS\source/tasks.c **** 				{
 1265              		.loc 1 1608 0 is_stmt 1
 1266 00ae 002E     		cmp	r6, #0
 1267 00b0 01D0     		beq	.L90
1610:FreeRTOS\source/tasks.c **** 				}
 1268              		.loc 1 1610 0
 1269 00b2 FFF7FEFF 		bl	vPortYield
 1270              	.LVL136:
 1271              	.L90:
1622:FreeRTOS\source/tasks.c **** 	}
 1272              		.loc 1 1622 0
 1273 00b6 FFF7FEFF 		bl	vPortExitCritical
 1274              	.LVL137:
1623:FreeRTOS\source/tasks.c **** 
 1275              		.loc 1 1623 0
 1276              		@ sp needed
 1277              	.LVL138:
 1278 00ba 70BD     		pop	{r4, r5, r6, pc}
 1279              	.L104:
 1280              		.align	2
 1281              	.L103:
 1282 00bc 80000000 		.word	.LANCHOR1
 1283 00c0 00000000 		.word	.LANCHOR0
 1284              		.cfi_endproc
 1285              	.LFE40:
 1286              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1287              		.section	.text.vTaskResume,"ax",%progbits
 1288              		.align	2
 1289              		.global	vTaskResume
 1290              		.code	16
 1291              		.thumb_func
 1292              		.type	vTaskResume, %function
 1293              	vTaskResume:
 1294              	.LFB43:
1778:FreeRTOS\source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1295              		.loc 1 1778 0
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 0
 1298              		@ frame_needed = 0, uses_anonymous_args = 0
 1299              	.LVL139:
 1300 0000 70B5     		push	{r4, r5, r6, lr}
 1301              		.cfi_def_cfa_offset 16
 1302              		.cfi_offset 4, -16
 1303              		.cfi_offset 5, -12
 1304              		.cfi_offset 6, -8
 1305              		.cfi_offset 14, -4
 1306 0002 041E     		subs	r4, r0, #0
 1307              	.LVL140:
1782:FreeRTOS\source/tasks.c **** 
 1308              		.loc 1 1782 0
 1309 0004 01D1     		bne	.L106
1782:FreeRTOS\source/tasks.c **** 
 1310              		.loc 1 1782 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 115


 1311              		.syntax divided
 1312              	@ 1782 "FreeRTOS\source\tasks.c" 1
 1313 0006 72B6     		 cpsid i 
 1314              	@ 0 "" 2
 1315              		.thumb
 1316              		.syntax unified
 1317              	.L107:
 1318 0008 FEE7     		b	.L107
 1319              	.L106:
1786:FreeRTOS\source/tasks.c **** 		{
 1320              		.loc 1 1786 0 is_stmt 1
 1321 000a 0028     		cmp	r0, #0
 1322 000c 28D0     		beq	.L105
1786:FreeRTOS\source/tasks.c **** 		{
 1323              		.loc 1 1786 0 is_stmt 0 discriminator 1
 1324 000e 154B     		ldr	r3, .L111
 1325 0010 9B6D     		ldr	r3, [r3, #88]
 1326 0012 9842     		cmp	r0, r3
 1327 0014 24D0     		beq	.L105
1788:FreeRTOS\source/tasks.c **** 			{
 1328              		.loc 1 1788 0 is_stmt 1
 1329 0016 FFF7FEFF 		bl	vPortEnterCritical
 1330              	.LVL141:
1790:FreeRTOS\source/tasks.c **** 				{
 1331              		.loc 1 1790 0
 1332 001a 2000     		movs	r0, r4
 1333 001c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1334              	.LVL142:
 1335 0020 0028     		cmp	r0, #0
 1336 0022 1BD0     		beq	.L109
1796:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1337              		.loc 1 1796 0
 1338 0024 251D     		adds	r5, r4, #4
 1339 0026 2800     		movs	r0, r5
 1340 0028 FFF7FEFF 		bl	uxListRemove
 1341              	.LVL143:
1797:FreeRTOS\source/tasks.c **** 
 1342              		.loc 1 1797 0
 1343 002c E36A     		ldr	r3, [r4, #44]
 1344 002e 0D4A     		ldr	r2, .L111
 1345 0030 526E     		ldr	r2, [r2, #100]
 1346 0032 9342     		cmp	r3, r2
 1347 0034 01D9     		bls	.L110
1797:FreeRTOS\source/tasks.c **** 
 1348              		.loc 1 1797 0 is_stmt 0 discriminator 1
 1349 0036 0B4A     		ldr	r2, .L111
 1350 0038 5366     		str	r3, [r2, #100]
 1351              	.L110:
1797:FreeRTOS\source/tasks.c **** 
 1352              		.loc 1 1797 0 discriminator 3
 1353 003a 9A00     		lsls	r2, r3, #2
 1354 003c D318     		adds	r3, r2, r3
 1355 003e 9A00     		lsls	r2, r3, #2
 1356 0040 0948     		ldr	r0, .L111+4
 1357 0042 3030     		adds	r0, r0, #48
 1358 0044 8018     		adds	r0, r0, r2
 1359 0046 2900     		movs	r1, r5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 116


 1360 0048 FFF7FEFF 		bl	vListInsertEnd
 1361              	.LVL144:
1800:FreeRTOS\source/tasks.c **** 					{
 1362              		.loc 1 1800 0 is_stmt 1 discriminator 3
 1363 004c E26A     		ldr	r2, [r4, #44]
 1364 004e 054B     		ldr	r3, .L111
 1365 0050 9B6D     		ldr	r3, [r3, #88]
 1366 0052 DB6A     		ldr	r3, [r3, #44]
 1367 0054 9A42     		cmp	r2, r3
 1368 0056 01D3     		bcc	.L109
1805:FreeRTOS\source/tasks.c **** 					}
 1369              		.loc 1 1805 0
 1370 0058 FFF7FEFF 		bl	vPortYield
 1371              	.LVL145:
 1372              	.L109:
1817:FreeRTOS\source/tasks.c **** 		}
 1373              		.loc 1 1817 0
 1374 005c FFF7FEFF 		bl	vPortExitCritical
 1375              	.LVL146:
 1376              	.L105:
1823:FreeRTOS\source/tasks.c **** 
 1377              		.loc 1 1823 0
 1378              		@ sp needed
 1379              	.LVL147:
 1380 0060 70BD     		pop	{r4, r5, r6, pc}
 1381              	.L112:
 1382 0062 C046     		.align	2
 1383              	.L111:
 1384 0064 80000000 		.word	.LANCHOR1
 1385 0068 00000000 		.word	.LANCHOR0
 1386              		.cfi_endproc
 1387              	.LFE43:
 1388              		.size	vTaskResume, .-vTaskResume
 1389              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1390              		.align	2
 1391              		.global	xTaskResumeFromISR
 1392              		.code	16
 1393              		.thumb_func
 1394              		.type	xTaskResumeFromISR, %function
 1395              	xTaskResumeFromISR:
 1396              	.LFB44:
1832:FreeRTOS\source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1397              		.loc 1 1832 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 0
 1400              		@ frame_needed = 0, uses_anonymous_args = 0
 1401              	.LVL148:
 1402 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1403              		.cfi_def_cfa_offset 24
 1404              		.cfi_offset 3, -24
 1405              		.cfi_offset 4, -20
 1406              		.cfi_offset 5, -16
 1407              		.cfi_offset 6, -12
 1408              		.cfi_offset 7, -8
 1409              		.cfi_offset 14, -4
 1410 0002 041E     		subs	r4, r0, #0
 1411              	.LVL149:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 117


1837:FreeRTOS\source/tasks.c **** 
 1412              		.loc 1 1837 0
 1413 0004 01D1     		bne	.L114
1837:FreeRTOS\source/tasks.c **** 
 1414              		.loc 1 1837 0 is_stmt 0 discriminator 1
 1415              		.syntax divided
 1416              	@ 1837 "FreeRTOS\source\tasks.c" 1
 1417 0006 72B6     		 cpsid i 
 1418              	@ 0 "" 2
 1419              		.thumb
 1420              		.syntax unified
 1421              	.L115:
 1422 0008 FEE7     		b	.L115
 1423              	.L114:
1857:FreeRTOS\source/tasks.c **** 		{
 1424              		.loc 1 1857 0 is_stmt 1
 1425 000a FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1426              	.LVL150:
 1427 000e 0500     		movs	r5, r0
 1428              	.LVL151:
1859:FreeRTOS\source/tasks.c **** 			{
 1429              		.loc 1 1859 0
 1430 0010 2000     		movs	r0, r4
 1431              	.LVL152:
 1432 0012 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1433              	.LVL153:
 1434 0016 0028     		cmp	r0, #0
 1435 0018 29D0     		beq	.L120
1864:FreeRTOS\source/tasks.c **** 				{
 1436              		.loc 1 1864 0
 1437 001a 184B     		ldr	r3, .L122
 1438 001c 1B6F     		ldr	r3, [r3, #112]
 1439 001e 002B     		cmp	r3, #0
 1440 0020 1DD1     		bne	.L117
1868:FreeRTOS\source/tasks.c **** 					{
 1441              		.loc 1 1868 0
 1442 0022 164B     		ldr	r3, .L122
 1443 0024 9B6D     		ldr	r3, [r3, #88]
 1444 0026 DB6A     		ldr	r3, [r3, #44]
 1445 0028 E26A     		ldr	r2, [r4, #44]
 1446 002a 9A42     		cmp	r2, r3
 1447 002c 01D2     		bcs	.L121
1833:FreeRTOS\source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1448              		.loc 1 1833 0
 1449 002e 0027     		movs	r7, #0
 1450 0030 00E0     		b	.L118
 1451              	.L121:
1870:FreeRTOS\source/tasks.c **** 					}
 1452              		.loc 1 1870 0
 1453 0032 0127     		movs	r7, #1
 1454              	.L118:
 1455              	.LVL154:
1877:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1456              		.loc 1 1877 0
 1457 0034 261D     		adds	r6, r4, #4
 1458 0036 3000     		movs	r0, r6
 1459 0038 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 118


 1460              	.LVL155:
1878:FreeRTOS\source/tasks.c **** 				}
 1461              		.loc 1 1878 0
 1462 003c E36A     		ldr	r3, [r4, #44]
 1463 003e 0F4A     		ldr	r2, .L122
 1464 0040 526E     		ldr	r2, [r2, #100]
 1465 0042 9342     		cmp	r3, r2
 1466 0044 01D9     		bls	.L119
1878:FreeRTOS\source/tasks.c **** 				}
 1467              		.loc 1 1878 0 is_stmt 0 discriminator 1
 1468 0046 0D4A     		ldr	r2, .L122
 1469 0048 5366     		str	r3, [r2, #100]
 1470              	.L119:
1878:FreeRTOS\source/tasks.c **** 				}
 1471              		.loc 1 1878 0 discriminator 3
 1472 004a 9A00     		lsls	r2, r3, #2
 1473 004c D318     		adds	r3, r2, r3
 1474 004e 9A00     		lsls	r2, r3, #2
 1475 0050 0B48     		ldr	r0, .L122+4
 1476 0052 3030     		adds	r0, r0, #48
 1477 0054 8018     		adds	r0, r0, r2
 1478 0056 3100     		movs	r1, r6
 1479 0058 FFF7FEFF 		bl	vListInsertEnd
 1480              	.LVL156:
 1481 005c 08E0     		b	.L116
 1482              	.LVL157:
 1483              	.L117:
1885:FreeRTOS\source/tasks.c **** 				}
 1484              		.loc 1 1885 0 is_stmt 1
 1485 005e 2100     		movs	r1, r4
 1486 0060 1831     		adds	r1, r1, #24
 1487 0062 0748     		ldr	r0, .L122+4
 1488 0064 1430     		adds	r0, r0, #20
 1489 0066 FFF7FEFF 		bl	vListInsertEnd
 1490              	.LVL158:
1833:FreeRTOS\source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1491              		.loc 1 1833 0
 1492 006a 0027     		movs	r7, #0
 1493 006c 00E0     		b	.L116
 1494              	.L120:
 1495 006e 0027     		movs	r7, #0
 1496              	.LVL159:
 1497              	.L116:
1893:FreeRTOS\source/tasks.c **** 
 1498              		.loc 1 1893 0
 1499 0070 2800     		movs	r0, r5
 1500 0072 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1501              	.LVL160:
1896:FreeRTOS\source/tasks.c **** 
 1502              		.loc 1 1896 0
 1503 0076 3800     		movs	r0, r7
 1504              		@ sp needed
 1505              	.LVL161:
 1506              	.LVL162:
 1507              	.LVL163:
 1508 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1509              	.L123:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 119


 1510 007a C046     		.align	2
 1511              	.L122:
 1512 007c 80000000 		.word	.LANCHOR1
 1513 0080 00000000 		.word	.LANCHOR0
 1514              		.cfi_endproc
 1515              	.LFE44:
 1516              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1517              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1518              		.align	2
 1519              		.global	vTaskStartScheduler
 1520              		.code	16
 1521              		.thumb_func
 1522              		.type	vTaskStartScheduler, %function
 1523              	vTaskStartScheduler:
 1524              	.LFB45:
1902:FreeRTOS\source/tasks.c **** BaseType_t xReturn;
 1525              		.loc 1 1902 0
 1526              		.cfi_startproc
 1527              		@ args = 0, pretend = 0, frame = 0
 1528              		@ frame_needed = 0, uses_anonymous_args = 0
 1529 0000 00B5     		push	{lr}
 1530              		.cfi_def_cfa_offset 4
 1531              		.cfi_offset 14, -4
 1532 0002 83B0     		sub	sp, sp, #12
 1533              		.cfi_def_cfa_offset 16
1935:FreeRTOS\source/tasks.c **** 								configIDLE_TASK_NAME,
 1534              		.loc 1 1935 0
 1535 0004 0F4B     		ldr	r3, .L128
 1536 0006 7433     		adds	r3, r3, #116
 1537 0008 0193     		str	r3, [sp, #4]
 1538 000a 0023     		movs	r3, #0
 1539 000c 0093     		str	r3, [sp]
 1540 000e 8022     		movs	r2, #128
 1541 0010 0D49     		ldr	r1, .L128+4
 1542 0012 0E48     		ldr	r0, .L128+8
 1543 0014 FFF7FEFF 		bl	xTaskCreate
 1544              	.LVL164:
1957:FreeRTOS\source/tasks.c **** 	{
 1545              		.loc 1 1957 0
 1546 0018 0128     		cmp	r0, #1
 1547 001a 0CD1     		bne	.L125
1973:FreeRTOS\source/tasks.c **** 
 1548              		.loc 1 1973 0
 1549              		.syntax divided
 1550              	@ 1973 "FreeRTOS\source\tasks.c" 1
 1551 001c 72B6     		 cpsid i 
 1552              	@ 0 "" 2
1983:FreeRTOS\source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1553              		.loc 1 1983 0
 1554              		.thumb
 1555              		.syntax unified
 1556 001e 0122     		movs	r2, #1
 1557 0020 5242     		rsbs	r2, r2, #0
 1558 0022 0B4B     		ldr	r3, .L128+12
 1559 0024 DA62     		str	r2, [r3, #44]
1984:FreeRTOS\source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1560              		.loc 1 1984 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 120


 1561 0026 074B     		ldr	r3, .L128
 1562 0028 0232     		adds	r2, r2, #2
 1563 002a DA65     		str	r2, [r3, #92]
1985:FreeRTOS\source/tasks.c **** 
 1564              		.loc 1 1985 0
 1565 002c 0022     		movs	r2, #0
 1566 002e DA66     		str	r2, [r3, #108]
1997:FreeRTOS\source/tasks.c **** 		{
 1567              		.loc 1 1997 0
 1568 0030 FFF7FEFF 		bl	xPortStartScheduler
 1569              	.LVL165:
 1570 0034 03E0     		b	.L124
 1571              	.LVL166:
 1572              	.L125:
2012:FreeRTOS\source/tasks.c **** 	}
 1573              		.loc 1 2012 0
 1574 0036 431C     		adds	r3, r0, #1
 1575 0038 01D1     		bne	.L124
2012:FreeRTOS\source/tasks.c **** 	}
 1576              		.loc 1 2012 0 is_stmt 0 discriminator 1
 1577              		.syntax divided
 1578              	@ 2012 "FreeRTOS\source\tasks.c" 1
 1579 003a 72B6     		 cpsid i 
 1580              	@ 0 "" 2
 1581              		.thumb
 1582              		.syntax unified
 1583              	.L127:
 1584 003c FEE7     		b	.L127
 1585              	.LVL167:
 1586              	.L124:
2018:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 1587              		.loc 1 2018 0 is_stmt 1
 1588 003e 03B0     		add	sp, sp, #12
 1589              		@ sp needed
 1590 0040 00BD     		pop	{pc}
 1591              	.L129:
 1592 0042 C046     		.align	2
 1593              	.L128:
 1594 0044 80000000 		.word	.LANCHOR1
 1595 0048 00000000 		.word	.LC29
 1596 004c 00000000 		.word	prvIdleTask
 1597 0050 00000000 		.word	.LANCHOR0
 1598              		.cfi_endproc
 1599              	.LFE45:
 1600              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1601              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1602              		.align	2
 1603              		.global	vTaskEndScheduler
 1604              		.code	16
 1605              		.thumb_func
 1606              		.type	vTaskEndScheduler, %function
 1607              	vTaskEndScheduler:
 1608              	.LFB46:
2022:FreeRTOS\source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1609              		.loc 1 2022 0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 121


 1612              		@ frame_needed = 0, uses_anonymous_args = 0
 1613 0000 10B5     		push	{r4, lr}
 1614              		.cfi_def_cfa_offset 8
 1615              		.cfi_offset 4, -8
 1616              		.cfi_offset 14, -4
2026:FreeRTOS\source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1617              		.loc 1 2026 0
 1618              		.syntax divided
 1619              	@ 2026 "FreeRTOS\source\tasks.c" 1
 1620 0002 72B6     		 cpsid i 
 1621              	@ 0 "" 2
2027:FreeRTOS\source/tasks.c **** 	vPortEndScheduler();
 1622              		.loc 1 2027 0
 1623              		.thumb
 1624              		.syntax unified
 1625 0004 0022     		movs	r2, #0
 1626 0006 024B     		ldr	r3, .L131
 1627 0008 DA65     		str	r2, [r3, #92]
2028:FreeRTOS\source/tasks.c **** }
 1628              		.loc 1 2028 0
 1629 000a FFF7FEFF 		bl	vPortEndScheduler
 1630              	.LVL168:
2029:FreeRTOS\source/tasks.c **** /*----------------------------------------------------------*/
 1631              		.loc 1 2029 0
 1632              		@ sp needed
 1633 000e 10BD     		pop	{r4, pc}
 1634              	.L132:
 1635              		.align	2
 1636              	.L131:
 1637 0010 80000000 		.word	.LANCHOR1
 1638              		.cfi_endproc
 1639              	.LFE46:
 1640              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1641              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1642              		.align	2
 1643              		.global	vTaskSuspendAll
 1644              		.code	16
 1645              		.thumb_func
 1646              		.type	vTaskSuspendAll, %function
 1647              	vTaskSuspendAll:
 1648              	.LFB47:
2033:FreeRTOS\source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1649              		.loc 1 2033 0
 1650              		.cfi_startproc
 1651              		@ args = 0, pretend = 0, frame = 0
 1652              		@ frame_needed = 0, uses_anonymous_args = 0
 1653              		@ link register save eliminated.
2038:FreeRTOS\source/tasks.c **** }
 1654              		.loc 1 2038 0
 1655 0000 024A     		ldr	r2, .L134
 1656 0002 136F     		ldr	r3, [r2, #112]
 1657 0004 0133     		adds	r3, r3, #1
 1658 0006 1367     		str	r3, [r2, #112]
2039:FreeRTOS\source/tasks.c **** /*----------------------------------------------------------*/
 1659              		.loc 1 2039 0
 1660              		@ sp needed
 1661 0008 7047     		bx	lr
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 122


 1662              	.L135:
 1663 000a C046     		.align	2
 1664              	.L134:
 1665 000c 80000000 		.word	.LANCHOR1
 1666              		.cfi_endproc
 1667              	.LFE47:
 1668              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1669              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1670              		.align	2
 1671              		.global	xTaskGetTickCount
 1672              		.code	16
 1673              		.thumb_func
 1674              		.type	xTaskGetTickCount, %function
 1675              	xTaskGetTickCount:
 1676              	.LFB49:
2216:FreeRTOS\source/tasks.c **** TickType_t xTicks;
 1677              		.loc 1 2216 0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 0
 1680              		@ frame_needed = 0, uses_anonymous_args = 0
 1681              		@ link register save eliminated.
2222:FreeRTOS\source/tasks.c **** 	}
 1682              		.loc 1 2222 0
 1683 0000 014B     		ldr	r3, .L137
 1684 0002 D86E     		ldr	r0, [r3, #108]
 1685              	.LVL169:
2227:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 1686              		.loc 1 2227 0
 1687              		@ sp needed
 1688 0004 7047     		bx	lr
 1689              	.L138:
 1690 0006 C046     		.align	2
 1691              	.L137:
 1692 0008 80000000 		.word	.LANCHOR1
 1693              		.cfi_endproc
 1694              	.LFE49:
 1695              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1696              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1697              		.align	2
 1698              		.global	xTaskGetTickCountFromISR
 1699              		.code	16
 1700              		.thumb_func
 1701              		.type	xTaskGetTickCountFromISR, %function
 1702              	xTaskGetTickCountFromISR:
 1703              	.LFB50:
2231:FreeRTOS\source/tasks.c **** TickType_t xReturn;
 1704              		.loc 1 2231 0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 0
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708              		@ link register save eliminated.
 1709              	.LVL170:
2253:FreeRTOS\source/tasks.c **** 	}
 1710              		.loc 1 2253 0
 1711 0000 014B     		ldr	r3, .L140
 1712 0002 D86E     		ldr	r0, [r3, #108]
 1713              	.LVL171:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 123


2258:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 1714              		.loc 1 2258 0
 1715              		@ sp needed
 1716 0004 7047     		bx	lr
 1717              	.L141:
 1718 0006 C046     		.align	2
 1719              	.L140:
 1720 0008 80000000 		.word	.LANCHOR1
 1721              		.cfi_endproc
 1722              	.LFE50:
 1723              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1724              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1725              		.align	2
 1726              		.global	uxTaskGetNumberOfTasks
 1727              		.code	16
 1728              		.thumb_func
 1729              		.type	uxTaskGetNumberOfTasks, %function
 1730              	uxTaskGetNumberOfTasks:
 1731              	.LFB51:
2262:FreeRTOS\source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1732              		.loc 1 2262 0
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 0
 1735              		@ frame_needed = 0, uses_anonymous_args = 0
 1736              		@ link register save eliminated.
2265:FreeRTOS\source/tasks.c **** }
 1737              		.loc 1 2265 0
 1738 0000 014B     		ldr	r3, .L143
 1739 0002 586D     		ldr	r0, [r3, #84]
2266:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 1740              		.loc 1 2266 0
 1741              		@ sp needed
 1742 0004 7047     		bx	lr
 1743              	.L144:
 1744 0006 C046     		.align	2
 1745              	.L143:
 1746 0008 80000000 		.word	.LANCHOR1
 1747              		.cfi_endproc
 1748              	.LFE51:
 1749              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1750              		.section	.text.pcTaskGetName,"ax",%progbits
 1751              		.align	2
 1752              		.global	pcTaskGetName
 1753              		.code	16
 1754              		.thumb_func
 1755              		.type	pcTaskGetName, %function
 1756              	pcTaskGetName:
 1757              	.LFB52:
2270:FreeRTOS\source/tasks.c **** TCB_t *pxTCB;
 1758              		.loc 1 2270 0
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 0
 1761              		@ frame_needed = 0, uses_anonymous_args = 0
 1762              		@ link register save eliminated.
 1763              	.LVL172:
2275:FreeRTOS\source/tasks.c **** 	configASSERT( pxTCB );
 1764              		.loc 1 2275 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 124


 1765 0000 0028     		cmp	r0, #0
 1766 0002 01D1     		bne	.L146
2275:FreeRTOS\source/tasks.c **** 	configASSERT( pxTCB );
 1767              		.loc 1 2275 0 is_stmt 0 discriminator 1
 1768 0004 034B     		ldr	r3, .L149
 1769 0006 986D     		ldr	r0, [r3, #88]
 1770              	.LVL173:
 1771              	.L146:
2276:FreeRTOS\source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1772              		.loc 1 2276 0 is_stmt 1 discriminator 4
 1773 0008 0028     		cmp	r0, #0
 1774 000a 01D1     		bne	.L147
2276:FreeRTOS\source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1775              		.loc 1 2276 0 is_stmt 0 discriminator 1
 1776              		.syntax divided
 1777              	@ 2276 "FreeRTOS\source\tasks.c" 1
 1778 000c 72B6     		 cpsid i 
 1779              	@ 0 "" 2
 1780              		.thumb
 1781              		.syntax unified
 1782              	.L148:
 1783 000e FEE7     		b	.L148
 1784              	.L147:
2277:FreeRTOS\source/tasks.c **** }
 1785              		.loc 1 2277 0 is_stmt 1
 1786 0010 3430     		adds	r0, r0, #52
 1787              	.LVL174:
2278:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 1788              		.loc 1 2278 0
 1789              		@ sp needed
 1790 0012 7047     		bx	lr
 1791              	.L150:
 1792              		.align	2
 1793              	.L149:
 1794 0014 80000000 		.word	.LANCHOR1
 1795              		.cfi_endproc
 1796              	.LFE52:
 1797              		.size	pcTaskGetName, .-pcTaskGetName
 1798              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1799              		.align	2
 1800              		.global	xTaskIncrementTick
 1801              		.code	16
 1802              		.thumb_func
 1803              		.type	xTaskIncrementTick, %function
 1804              	xTaskIncrementTick:
 1805              	.LFB53:
2590:FreeRTOS\source/tasks.c **** TCB_t * pxTCB;
 1806              		.loc 1 2590 0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 0
 1809              		@ frame_needed = 0, uses_anonymous_args = 0
 1810 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1811              		.cfi_def_cfa_offset 24
 1812              		.cfi_offset 3, -24
 1813              		.cfi_offset 4, -20
 1814              		.cfi_offset 5, -16
 1815              		.cfi_offset 6, -12
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 125


 1816              		.cfi_offset 7, -8
 1817              		.cfi_offset 14, -4
 1818              	.LVL175:
2599:FreeRTOS\source/tasks.c **** 	{
 1819              		.loc 1 2599 0
 1820 0002 364B     		ldr	r3, .L170
 1821 0004 1B6F     		ldr	r3, [r3, #112]
 1822 0006 002B     		cmp	r3, #0
 1823 0008 5BD1     		bne	.L152
 1824              	.LBB4:
2603:FreeRTOS\source/tasks.c **** 
 1825              		.loc 1 2603 0
 1826 000a 344B     		ldr	r3, .L170
 1827 000c DC6E     		ldr	r4, [r3, #108]
 1828 000e 0134     		adds	r4, r4, #1
 1829              	.LVL176:
2607:FreeRTOS\source/tasks.c **** 
 1830              		.loc 1 2607 0
 1831 0010 DC66     		str	r4, [r3, #108]
2609:FreeRTOS\source/tasks.c **** 		{
 1832              		.loc 1 2609 0
 1833 0012 002C     		cmp	r4, #0
 1834 0014 11D1     		bne	.L153
 1835              	.LBB5:
2611:FreeRTOS\source/tasks.c **** 		}
 1836              		.loc 1 2611 0
 1837 0016 324B     		ldr	r3, .L170+4
 1838 0018 9B6A     		ldr	r3, [r3, #40]
 1839 001a 1B68     		ldr	r3, [r3]
 1840 001c 002B     		cmp	r3, #0
 1841 001e 01D0     		beq	.L154
2611:FreeRTOS\source/tasks.c **** 		}
 1842              		.loc 1 2611 0 is_stmt 0 discriminator 1
 1843              		.syntax divided
 1844              	@ 2611 "FreeRTOS\source\tasks.c" 1
 1845 0020 72B6     		 cpsid i 
 1846              	@ 0 "" 2
 1847              		.thumb
 1848              		.syntax unified
 1849              	.L155:
 1850 0022 FEE7     		b	.L155
 1851              	.L154:
2611:FreeRTOS\source/tasks.c **** 		}
 1852              		.loc 1 2611 0 discriminator 2
 1853 0024 2E4A     		ldr	r2, .L170+4
 1854 0026 916A     		ldr	r1, [r2, #40]
 1855              	.LVL177:
 1856 0028 2C4B     		ldr	r3, .L170
 1857 002a 186D     		ldr	r0, [r3, #80]
 1858 002c 9062     		str	r0, [r2, #40]
 1859 002e 1965     		str	r1, [r3, #80]
 1860 0030 9A6F     		ldr	r2, [r3, #120]
 1861 0032 0132     		adds	r2, r2, #1
 1862 0034 9A67     		str	r2, [r3, #120]
 1863 0036 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1864              	.LVL178:
 1865              	.L153:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 126


 1866              	.LBE5:
2622:FreeRTOS\source/tasks.c **** 		{
 1867              		.loc 1 2622 0 is_stmt 1
 1868 003a 294B     		ldr	r3, .L170+4
 1869 003c DB6A     		ldr	r3, [r3, #44]
 1870 003e 9C42     		cmp	r4, r3
 1871 0040 03D2     		bcs	.L166
 1872              	.LBE4:
2593:FreeRTOS\source/tasks.c **** 
 1873              		.loc 1 2593 0
 1874 0042 0027     		movs	r7, #0
 1875 0044 42E0     		b	.L157
 1876              	.LVL179:
 1877              	.L168:
 1878              	.LBB6:
2688:FreeRTOS\source/tasks.c **** 						}
 1879              		.loc 1 2688 0
 1880 0046 0127     		movs	r7, #1
 1881              	.LVL180:
 1882 0048 00E0     		b	.L156
 1883              	.LVL181:
 1884              	.L166:
 1885 004a 0027     		movs	r7, #0
 1886              	.LVL182:
 1887              	.L156:
2626:FreeRTOS\source/tasks.c **** 				{
 1888              		.loc 1 2626 0
 1889 004c 244B     		ldr	r3, .L170+4
 1890 004e 9B6A     		ldr	r3, [r3, #40]
 1891 0050 1B68     		ldr	r3, [r3]
 1892 0052 002B     		cmp	r3, #0
 1893 0054 01D1     		bne	.L167
 1894 0056 0133     		adds	r3, r3, #1
 1895 0058 00E0     		b	.L158
 1896              	.L167:
 1897 005a 0023     		movs	r3, #0
 1898              	.L158:
2626:FreeRTOS\source/tasks.c **** 				{
 1899              		.loc 1 2626 0 is_stmt 0 discriminator 4
 1900 005c 002B     		cmp	r3, #0
 1901 005e 04D0     		beq	.L159
2633:FreeRTOS\source/tasks.c **** 					break;
 1902              		.loc 1 2633 0 is_stmt 1
 1903 0060 0122     		movs	r2, #1
 1904 0062 5242     		rsbs	r2, r2, #0
 1905 0064 1E4B     		ldr	r3, .L170+4
 1906 0066 DA62     		str	r2, [r3, #44]
2634:FreeRTOS\source/tasks.c **** 				}
 1907              		.loc 1 2634 0
 1908 0068 30E0     		b	.L157
 1909              	.L159:
2642:FreeRTOS\source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1910              		.loc 1 2642 0
 1911 006a 1D4B     		ldr	r3, .L170+4
 1912 006c 9B6A     		ldr	r3, [r3, #40]
 1913 006e DB68     		ldr	r3, [r3, #12]
 1914 0070 DE68     		ldr	r6, [r3, #12]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 127


 1915              	.LVL183:
2643:FreeRTOS\source/tasks.c **** 
 1916              		.loc 1 2643 0
 1917 0072 7368     		ldr	r3, [r6, #4]
 1918              	.LVL184:
2645:FreeRTOS\source/tasks.c **** 					{
 1919              		.loc 1 2645 0
 1920 0074 9C42     		cmp	r4, r3
 1921 0076 02D2     		bcs	.L160
2652:FreeRTOS\source/tasks.c **** 						break;
 1922              		.loc 1 2652 0
 1923 0078 194A     		ldr	r2, .L170+4
 1924 007a D362     		str	r3, [r2, #44]
2653:FreeRTOS\source/tasks.c **** 					}
 1925              		.loc 1 2653 0
 1926 007c 26E0     		b	.L157
 1927              	.L160:
2661:FreeRTOS\source/tasks.c **** 
 1928              		.loc 1 2661 0
 1929 007e 351D     		adds	r5, r6, #4
 1930 0080 2800     		movs	r0, r5
 1931 0082 FFF7FEFF 		bl	uxListRemove
 1932              	.LVL185:
2665:FreeRTOS\source/tasks.c **** 					{
 1933              		.loc 1 2665 0
 1934 0086 B36A     		ldr	r3, [r6, #40]
 1935 0088 002B     		cmp	r3, #0
 1936 008a 03D0     		beq	.L161
2667:FreeRTOS\source/tasks.c **** 					}
 1937              		.loc 1 2667 0
 1938 008c 3000     		movs	r0, r6
 1939 008e 1830     		adds	r0, r0, #24
 1940 0090 FFF7FEFF 		bl	uxListRemove
 1941              	.LVL186:
 1942              	.L161:
2676:FreeRTOS\source/tasks.c **** 
 1943              		.loc 1 2676 0
 1944 0094 F36A     		ldr	r3, [r6, #44]
 1945 0096 114A     		ldr	r2, .L170
 1946 0098 526E     		ldr	r2, [r2, #100]
 1947 009a 9342     		cmp	r3, r2
 1948 009c 01D9     		bls	.L162
2676:FreeRTOS\source/tasks.c **** 
 1949              		.loc 1 2676 0 is_stmt 0 discriminator 1
 1950 009e 0F4A     		ldr	r2, .L170
 1951 00a0 5366     		str	r3, [r2, #100]
 1952              	.L162:
2676:FreeRTOS\source/tasks.c **** 
 1953              		.loc 1 2676 0 discriminator 3
 1954 00a2 9A00     		lsls	r2, r3, #2
 1955 00a4 D318     		adds	r3, r2, r3
 1956 00a6 9A00     		lsls	r2, r3, #2
 1957 00a8 0D48     		ldr	r0, .L170+4
 1958 00aa 3030     		adds	r0, r0, #48
 1959 00ac 8018     		adds	r0, r0, r2
 1960 00ae 2900     		movs	r1, r5
 1961 00b0 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 128


 1962              	.LVL187:
2686:FreeRTOS\source/tasks.c **** 						{
 1963              		.loc 1 2686 0 is_stmt 1 discriminator 3
 1964 00b4 F26A     		ldr	r2, [r6, #44]
 1965 00b6 094B     		ldr	r3, .L170
 1966 00b8 9B6D     		ldr	r3, [r3, #88]
 1967 00ba DB6A     		ldr	r3, [r3, #44]
 1968 00bc 9A42     		cmp	r2, r3
 1969 00be C2D2     		bcs	.L168
 1970 00c0 C4E7     		b	.L156
 1971              	.LVL188:
 1972              	.L152:
 1973              	.LBE6:
2733:FreeRTOS\source/tasks.c **** 
 1974              		.loc 1 2733 0
 1975 00c2 064A     		ldr	r2, .L170
 1976 00c4 D36F     		ldr	r3, [r2, #124]
 1977 00c6 0133     		adds	r3, r3, #1
 1978 00c8 D367     		str	r3, [r2, #124]
2593:FreeRTOS\source/tasks.c **** 
 1979              		.loc 1 2593 0
 1980 00ca 0027     		movs	r7, #0
 1981              	.LVL189:
 1982              	.L157:
2746:FreeRTOS\source/tasks.c **** 		{
 1983              		.loc 1 2746 0
 1984 00cc 054B     		ldr	r3, .L170+8
 1985 00ce 1B68     		ldr	r3, [r3]
 1986 00d0 002B     		cmp	r3, #0
 1987 00d2 00D0     		beq	.L165
2748:FreeRTOS\source/tasks.c **** 		}
 1988              		.loc 1 2748 0
 1989 00d4 0127     		movs	r7, #1
 1990              	.LVL190:
 1991              	.L165:
2758:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 1992              		.loc 1 2758 0
 1993 00d6 3800     		movs	r0, r7
 1994              		@ sp needed
 1995              	.LVL191:
 1996 00d8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1997              	.L171:
 1998 00da C046     		.align	2
 1999              	.L170:
 2000 00dc 80000000 		.word	.LANCHOR1
 2001 00e0 00000000 		.word	.LANCHOR0
 2002 00e4 00010000 		.word	.LANCHOR2
 2003              		.cfi_endproc
 2004              	.LFE53:
 2005              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2006              		.section	.text.xTaskResumeAll,"ax",%progbits
 2007              		.align	2
 2008              		.global	xTaskResumeAll
 2009              		.code	16
 2010              		.thumb_func
 2011              		.type	xTaskResumeAll, %function
 2012              	xTaskResumeAll:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 129


 2013              	.LFB48:
2106:FreeRTOS\source/tasks.c **** TCB_t *pxTCB = NULL;
 2014              		.loc 1 2106 0
 2015              		.cfi_startproc
 2016              		@ args = 0, pretend = 0, frame = 0
 2017              		@ frame_needed = 0, uses_anonymous_args = 0
 2018 0000 70B5     		push	{r4, r5, r6, lr}
 2019              		.cfi_def_cfa_offset 16
 2020              		.cfi_offset 4, -16
 2021              		.cfi_offset 5, -12
 2022              		.cfi_offset 6, -8
 2023              		.cfi_offset 14, -4
 2024              	.LVL192:
2112:FreeRTOS\source/tasks.c **** 
 2025              		.loc 1 2112 0
 2026 0002 314B     		ldr	r3, .L187
 2027 0004 1B6F     		ldr	r3, [r3, #112]
 2028 0006 002B     		cmp	r3, #0
 2029 0008 01D1     		bne	.L173
2112:FreeRTOS\source/tasks.c **** 
 2030              		.loc 1 2112 0 is_stmt 0 discriminator 1
 2031              		.syntax divided
 2032              	@ 2112 "FreeRTOS\source\tasks.c" 1
 2033 000a 72B6     		 cpsid i 
 2034              	@ 0 "" 2
 2035              		.thumb
 2036              		.syntax unified
 2037              	.L174:
 2038 000c FEE7     		b	.L174
 2039              	.L173:
2119:FreeRTOS\source/tasks.c **** 	{
 2040              		.loc 1 2119 0 is_stmt 1
 2041 000e FFF7FEFF 		bl	vPortEnterCritical
 2042              	.LVL193:
2121:FreeRTOS\source/tasks.c **** 
 2043              		.loc 1 2121 0
 2044 0012 2D4B     		ldr	r3, .L187
 2045 0014 1A6F     		ldr	r2, [r3, #112]
 2046 0016 013A     		subs	r2, r2, #1
 2047 0018 1A67     		str	r2, [r3, #112]
2123:FreeRTOS\source/tasks.c **** 		{
 2048              		.loc 1 2123 0
 2049 001a 1B6F     		ldr	r3, [r3, #112]
 2050 001c 002B     		cmp	r3, #0
 2051 001e 4CD1     		bne	.L184
2125:FreeRTOS\source/tasks.c **** 			{
 2052              		.loc 1 2125 0
 2053 0020 294B     		ldr	r3, .L187
 2054 0022 5B6D     		ldr	r3, [r3, #84]
 2055 0024 002B     		cmp	r3, #0
 2056 0026 26D1     		bne	.L185
2108:FreeRTOS\source/tasks.c **** 
 2057              		.loc 1 2108 0
 2058 0028 0024     		movs	r4, #0
 2059 002a 49E0     		b	.L175
 2060              	.LVL194:
 2061              	.L179:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 130


2131:FreeRTOS\source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2062              		.loc 1 2131 0
 2063 002c 274B     		ldr	r3, .L187+4
 2064 002e 1B6A     		ldr	r3, [r3, #32]
 2065 0030 DC68     		ldr	r4, [r3, #12]
 2066              	.LVL195:
2132:FreeRTOS\source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2067              		.loc 1 2132 0
 2068 0032 2000     		movs	r0, r4
 2069 0034 1830     		adds	r0, r0, #24
 2070 0036 FFF7FEFF 		bl	uxListRemove
 2071              	.LVL196:
2133:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2072              		.loc 1 2133 0
 2073 003a 251D     		adds	r5, r4, #4
 2074 003c 2800     		movs	r0, r5
 2075 003e FFF7FEFF 		bl	uxListRemove
 2076              	.LVL197:
2134:FreeRTOS\source/tasks.c **** 
 2077              		.loc 1 2134 0
 2078 0042 E36A     		ldr	r3, [r4, #44]
 2079 0044 204A     		ldr	r2, .L187
 2080 0046 526E     		ldr	r2, [r2, #100]
 2081 0048 9342     		cmp	r3, r2
 2082 004a 01D9     		bls	.L177
2134:FreeRTOS\source/tasks.c **** 
 2083              		.loc 1 2134 0 is_stmt 0 discriminator 1
 2084 004c 1E4A     		ldr	r2, .L187
 2085 004e 5366     		str	r3, [r2, #100]
 2086              	.L177:
2134:FreeRTOS\source/tasks.c **** 
 2087              		.loc 1 2134 0 discriminator 3
 2088 0050 9A00     		lsls	r2, r3, #2
 2089 0052 D318     		adds	r3, r2, r3
 2090 0054 9A00     		lsls	r2, r3, #2
 2091 0056 1D48     		ldr	r0, .L187+4
 2092 0058 3030     		adds	r0, r0, #48
 2093 005a 8018     		adds	r0, r0, r2
 2094 005c 2900     		movs	r1, r5
 2095 005e FFF7FEFF 		bl	vListInsertEnd
 2096              	.LVL198:
2138:FreeRTOS\source/tasks.c **** 					{
 2097              		.loc 1 2138 0 is_stmt 1 discriminator 3
 2098 0062 194B     		ldr	r3, .L187
 2099 0064 9B6D     		ldr	r3, [r3, #88]
 2100 0066 DB6A     		ldr	r3, [r3, #44]
 2101 0068 E26A     		ldr	r2, [r4, #44]
 2102 006a 9A42     		cmp	r2, r3
 2103 006c 04D3     		bcc	.L176
2140:FreeRTOS\source/tasks.c **** 					}
 2104              		.loc 1 2140 0
 2105 006e 0122     		movs	r2, #1
 2106 0070 174B     		ldr	r3, .L187+8
 2107 0072 1A60     		str	r2, [r3]
 2108 0074 00E0     		b	.L176
 2109              	.LVL199:
 2110              	.L185:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 131


 2111 0076 0024     		movs	r4, #0
 2112              	.LVL200:
 2113              	.L176:
2129:FreeRTOS\source/tasks.c **** 				{
 2114              		.loc 1 2129 0
 2115 0078 144B     		ldr	r3, .L187+4
 2116 007a 5B69     		ldr	r3, [r3, #20]
 2117 007c 002B     		cmp	r3, #0
 2118 007e D5D1     		bne	.L179
2148:FreeRTOS\source/tasks.c **** 				{
 2119              		.loc 1 2148 0
 2120 0080 002C     		cmp	r4, #0
 2121 0082 01D0     		beq	.L180
2156:FreeRTOS\source/tasks.c **** 				}
 2122              		.loc 1 2156 0
 2123 0084 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2124              	.LVL201:
 2125              	.L180:
 2126              	.LBB7:
2164:FreeRTOS\source/tasks.c **** 
 2127              		.loc 1 2164 0
 2128 0088 0F4B     		ldr	r3, .L187
 2129 008a DC6F     		ldr	r4, [r3, #124]
 2130              	.LVL202:
2166:FreeRTOS\source/tasks.c **** 					{
 2131              		.loc 1 2166 0
 2132 008c 002C     		cmp	r4, #0
 2133 008e 0CD0     		beq	.L181
 2134              	.L183:
2170:FreeRTOS\source/tasks.c **** 							{
 2135              		.loc 1 2170 0
 2136 0090 FFF7FEFF 		bl	xTaskIncrementTick
 2137              	.LVL203:
 2138 0094 0028     		cmp	r0, #0
 2139 0096 02D0     		beq	.L182
2172:FreeRTOS\source/tasks.c **** 							}
 2140              		.loc 1 2172 0
 2141 0098 0122     		movs	r2, #1
 2142 009a 0D4B     		ldr	r3, .L187+8
 2143 009c 1A60     		str	r2, [r3]
 2144              	.L182:
2178:FreeRTOS\source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2145              		.loc 1 2178 0
 2146 009e 013C     		subs	r4, r4, #1
 2147              	.LVL204:
2179:FreeRTOS\source/tasks.c **** 
 2148              		.loc 1 2179 0
 2149 00a0 002C     		cmp	r4, #0
 2150 00a2 F5D1     		bne	.L183
2181:FreeRTOS\source/tasks.c **** 					}
 2151              		.loc 1 2181 0
 2152 00a4 0022     		movs	r2, #0
 2153 00a6 084B     		ldr	r3, .L187
 2154 00a8 DA67     		str	r2, [r3, #124]
 2155              	.L181:
 2156              	.LBE7:
2189:FreeRTOS\source/tasks.c **** 				{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 132


 2157              		.loc 1 2189 0
 2158 00aa 094B     		ldr	r3, .L187+8
 2159 00ac 1B68     		ldr	r3, [r3]
 2160 00ae 002B     		cmp	r3, #0
 2161 00b0 05D0     		beq	.L186
 2162              	.LVL205:
2196:FreeRTOS\source/tasks.c **** 				}
 2163              		.loc 1 2196 0
 2164 00b2 FFF7FEFF 		bl	vPortYield
 2165              	.LVL206:
2193:FreeRTOS\source/tasks.c **** 					}
 2166              		.loc 1 2193 0
 2167 00b6 0124     		movs	r4, #1
 2168              	.LVL207:
 2169 00b8 02E0     		b	.L175
 2170              	.LVL208:
 2171              	.L184:
2108:FreeRTOS\source/tasks.c **** 
 2172              		.loc 1 2108 0
 2173 00ba 0024     		movs	r4, #0
 2174 00bc 00E0     		b	.L175
 2175              	.LVL209:
 2176              	.L186:
 2177 00be 0024     		movs	r4, #0
 2178              	.LVL210:
 2179              	.L175:
2209:FreeRTOS\source/tasks.c **** 
 2180              		.loc 1 2209 0
 2181 00c0 FFF7FEFF 		bl	vPortExitCritical
 2182              	.LVL211:
2212:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 2183              		.loc 1 2212 0
 2184 00c4 2000     		movs	r0, r4
 2185              		@ sp needed
 2186              	.LVL212:
 2187 00c6 70BD     		pop	{r4, r5, r6, pc}
 2188              	.L188:
 2189              		.align	2
 2190              	.L187:
 2191 00c8 80000000 		.word	.LANCHOR1
 2192 00cc 00000000 		.word	.LANCHOR0
 2193 00d0 00010000 		.word	.LANCHOR2
 2194              		.cfi_endproc
 2195              	.LFE48:
 2196              		.size	xTaskResumeAll, .-xTaskResumeAll
 2197              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2198              		.align	2
 2199              		.global	vTaskDelayUntil
 2200              		.code	16
 2201              		.thumb_func
 2202              		.type	vTaskDelayUntil, %function
 2203              	vTaskDelayUntil:
 2204              	.LFB36:
1205:FreeRTOS\source/tasks.c **** 	TickType_t xTimeToWake;
 2205              		.loc 1 1205 0
 2206              		.cfi_startproc
 2207              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 133


 2208              		@ frame_needed = 0, uses_anonymous_args = 0
 2209              	.LVL213:
 2210 0000 70B5     		push	{r4, r5, r6, lr}
 2211              		.cfi_def_cfa_offset 16
 2212              		.cfi_offset 4, -16
 2213              		.cfi_offset 5, -12
 2214              		.cfi_offset 6, -8
 2215              		.cfi_offset 14, -4
 2216 0002 0500     		movs	r5, r0
 2217 0004 0C00     		movs	r4, r1
 2218              	.LVL214:
1209:FreeRTOS\source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2219              		.loc 1 1209 0
 2220 0006 0028     		cmp	r0, #0
 2221 0008 01D1     		bne	.L190
1209:FreeRTOS\source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2222              		.loc 1 1209 0 is_stmt 0 discriminator 1
 2223              		.syntax divided
 2224              	@ 1209 "FreeRTOS\source\tasks.c" 1
 2225 000a 72B6     		 cpsid i 
 2226              	@ 0 "" 2
 2227              		.thumb
 2228              		.syntax unified
 2229              	.L191:
 2230 000c FEE7     		b	.L191
 2231              	.L190:
1210:FreeRTOS\source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2232              		.loc 1 1210 0 is_stmt 1
 2233 000e 0029     		cmp	r1, #0
 2234 0010 01D1     		bne	.L192
1210:FreeRTOS\source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2235              		.loc 1 1210 0 is_stmt 0 discriminator 1
 2236              		.syntax divided
 2237              	@ 1210 "FreeRTOS\source\tasks.c" 1
 2238 0012 72B6     		 cpsid i 
 2239              	@ 0 "" 2
 2240              		.thumb
 2241              		.syntax unified
 2242              	.L193:
 2243 0014 FEE7     		b	.L193
 2244              	.L192:
1211:FreeRTOS\source/tasks.c **** 
 2245              		.loc 1 1211 0 is_stmt 1
 2246 0016 174B     		ldr	r3, .L204
 2247 0018 1B6F     		ldr	r3, [r3, #112]
 2248 001a 002B     		cmp	r3, #0
 2249 001c 01D0     		beq	.L194
1211:FreeRTOS\source/tasks.c **** 
 2250              		.loc 1 1211 0 is_stmt 0 discriminator 1
 2251              		.syntax divided
 2252              	@ 1211 "FreeRTOS\source\tasks.c" 1
 2253 001e 72B6     		 cpsid i 
 2254              	@ 0 "" 2
 2255              		.thumb
 2256              		.syntax unified
 2257              	.L195:
 2258 0020 FEE7     		b	.L195
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 134


 2259              	.L194:
1213:FreeRTOS\source/tasks.c **** 		{
 2260              		.loc 1 1213 0 is_stmt 1
 2261 0022 FFF7FEFF 		bl	vTaskSuspendAll
 2262              	.LVL215:
 2263              	.LBB8:
1217:FreeRTOS\source/tasks.c **** 
 2264              		.loc 1 1217 0
 2265 0026 134B     		ldr	r3, .L204
 2266 0028 D86E     		ldr	r0, [r3, #108]
 2267              	.LVL216:
1220:FreeRTOS\source/tasks.c **** 
 2268              		.loc 1 1220 0
 2269 002a 2A68     		ldr	r2, [r5]
 2270 002c A318     		adds	r3, r4, r2
 2271              	.LVL217:
1222:FreeRTOS\source/tasks.c **** 			{
 2272              		.loc 1 1222 0
 2273 002e 9042     		cmp	r0, r2
 2274 0030 05D2     		bcs	.L196
1229:FreeRTOS\source/tasks.c **** 				{
 2275              		.loc 1 1229 0
 2276 0032 9A42     		cmp	r2, r3
 2277 0034 09D9     		bls	.L200
1229:FreeRTOS\source/tasks.c **** 				{
 2278              		.loc 1 1229 0 is_stmt 0 discriminator 1
 2279 0036 9842     		cmp	r0, r3
 2280 0038 09D3     		bcc	.L201
 2281              	.LBE8:
1207:FreeRTOS\source/tasks.c **** 
 2282              		.loc 1 1207 0 is_stmt 1
 2283 003a 0022     		movs	r2, #0
 2284 003c 0CE0     		b	.L197
 2285              	.L196:
 2286              	.LBB9:
1243:FreeRTOS\source/tasks.c **** 				{
 2287              		.loc 1 1243 0
 2288 003e 9A42     		cmp	r2, r3
 2289 0040 07D8     		bhi	.L202
1243:FreeRTOS\source/tasks.c **** 				{
 2290              		.loc 1 1243 0 is_stmt 0 discriminator 1
 2291 0042 9842     		cmp	r0, r3
 2292 0044 07D3     		bcc	.L203
 2293              	.LBE9:
1207:FreeRTOS\source/tasks.c **** 
 2294              		.loc 1 1207 0 is_stmt 1
 2295 0046 0022     		movs	r2, #0
 2296 0048 06E0     		b	.L197
 2297              	.L200:
 2298 004a 0022     		movs	r2, #0
 2299 004c 04E0     		b	.L197
 2300              	.L201:
 2301              	.LBB10:
1231:FreeRTOS\source/tasks.c **** 				}
 2302              		.loc 1 1231 0
 2303 004e 0122     		movs	r2, #1
 2304 0050 02E0     		b	.L197
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 135


 2305              	.L202:
1245:FreeRTOS\source/tasks.c **** 				}
 2306              		.loc 1 1245 0
 2307 0052 0122     		movs	r2, #1
 2308 0054 00E0     		b	.L197
 2309              	.L203:
 2310 0056 0122     		movs	r2, #1
 2311              	.L197:
 2312              	.LVL218:
1254:FreeRTOS\source/tasks.c **** 
 2313              		.loc 1 1254 0
 2314 0058 2B60     		str	r3, [r5]
1256:FreeRTOS\source/tasks.c **** 			{
 2315              		.loc 1 1256 0
 2316 005a 002A     		cmp	r2, #0
 2317 005c 03D0     		beq	.L198
1262:FreeRTOS\source/tasks.c **** 			}
 2318              		.loc 1 1262 0
 2319 005e 181A     		subs	r0, r3, r0
 2320              	.LVL219:
 2321 0060 0021     		movs	r1, #0
 2322 0062 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2323              	.LVL220:
 2324              	.L198:
 2325              	.LBE10:
1269:FreeRTOS\source/tasks.c **** 
 2326              		.loc 1 1269 0
 2327 0066 FFF7FEFF 		bl	xTaskResumeAll
 2328              	.LVL221:
1273:FreeRTOS\source/tasks.c **** 		{
 2329              		.loc 1 1273 0
 2330 006a 0028     		cmp	r0, #0
 2331 006c 01D1     		bne	.L189
1275:FreeRTOS\source/tasks.c **** 		}
 2332              		.loc 1 1275 0
 2333 006e FFF7FEFF 		bl	vPortYield
 2334              	.LVL222:
 2335              	.L189:
1281:FreeRTOS\source/tasks.c **** 
 2336              		.loc 1 1281 0
 2337              		@ sp needed
 2338              	.LVL223:
 2339              	.LVL224:
 2340 0072 70BD     		pop	{r4, r5, r6, pc}
 2341              	.L205:
 2342              		.align	2
 2343              	.L204:
 2344 0074 80000000 		.word	.LANCHOR1
 2345              		.cfi_endproc
 2346              	.LFE36:
 2347              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2348              		.section	.text.vTaskDelay,"ax",%progbits
 2349              		.align	2
 2350              		.global	vTaskDelay
 2351              		.code	16
 2352              		.thumb_func
 2353              		.type	vTaskDelay, %function
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 136


 2354              	vTaskDelay:
 2355              	.LFB37:
1289:FreeRTOS\source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2356              		.loc 1 1289 0
 2357              		.cfi_startproc
 2358              		@ args = 0, pretend = 0, frame = 0
 2359              		@ frame_needed = 0, uses_anonymous_args = 0
 2360              	.LVL225:
 2361 0000 10B5     		push	{r4, lr}
 2362              		.cfi_def_cfa_offset 8
 2363              		.cfi_offset 4, -8
 2364              		.cfi_offset 14, -4
 2365 0002 041E     		subs	r4, r0, #0
 2366              	.LVL226:
1293:FreeRTOS\source/tasks.c **** 		{
 2367              		.loc 1 1293 0
 2368 0004 0ED0     		beq	.L211
1295:FreeRTOS\source/tasks.c **** 			vTaskSuspendAll();
 2369              		.loc 1 1295 0
 2370 0006 0A4B     		ldr	r3, .L212
 2371 0008 1B6F     		ldr	r3, [r3, #112]
 2372 000a 002B     		cmp	r3, #0
 2373 000c 01D0     		beq	.L208
1295:FreeRTOS\source/tasks.c **** 			vTaskSuspendAll();
 2374              		.loc 1 1295 0 is_stmt 0 discriminator 1
 2375              		.syntax divided
 2376              	@ 1295 "FreeRTOS\source\tasks.c" 1
 2377 000e 72B6     		 cpsid i 
 2378              	@ 0 "" 2
 2379              		.thumb
 2380              		.syntax unified
 2381              	.L209:
 2382 0010 FEE7     		b	.L209
 2383              	.L208:
1296:FreeRTOS\source/tasks.c **** 			{
 2384              		.loc 1 1296 0 is_stmt 1
 2385 0012 FFF7FEFF 		bl	vTaskSuspendAll
 2386              	.LVL227:
1307:FreeRTOS\source/tasks.c **** 			}
 2387              		.loc 1 1307 0
 2388 0016 0021     		movs	r1, #0
 2389 0018 2000     		movs	r0, r4
 2390 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2391              	.LVL228:
1309:FreeRTOS\source/tasks.c **** 		}
 2392              		.loc 1 1309 0
 2393 001e FFF7FEFF 		bl	xTaskResumeAll
 2394              	.LVL229:
 2395 0022 00E0     		b	.L207
 2396              	.LVL230:
 2397              	.L211:
1290:FreeRTOS\source/tasks.c **** 
 2398              		.loc 1 1290 0
 2399 0024 0020     		movs	r0, #0
 2400              	.LVL231:
 2401              	.L207:
1318:FreeRTOS\source/tasks.c **** 		{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 137


 2402              		.loc 1 1318 0
 2403 0026 0028     		cmp	r0, #0
 2404 0028 01D1     		bne	.L206
1320:FreeRTOS\source/tasks.c **** 		}
 2405              		.loc 1 1320 0
 2406 002a FFF7FEFF 		bl	vPortYield
 2407              	.LVL232:
 2408              	.L206:
1326:FreeRTOS\source/tasks.c **** 
 2409              		.loc 1 1326 0
 2410              		@ sp needed
 2411              	.LVL233:
 2412 002e 10BD     		pop	{r4, pc}
 2413              	.L213:
 2414              		.align	2
 2415              	.L212:
 2416 0030 80000000 		.word	.LANCHOR1
 2417              		.cfi_endproc
 2418              	.LFE37:
 2419              		.size	vTaskDelay, .-vTaskDelay
 2420              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2421              		.align	2
 2422              		.global	vTaskSwitchContext
 2423              		.code	16
 2424              		.thumb_func
 2425              		.type	vTaskSwitchContext, %function
 2426              	vTaskSwitchContext:
 2427              	.LFB54:
2852:FreeRTOS\source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2428              		.loc 1 2852 0
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 0
 2431              		@ frame_needed = 0, uses_anonymous_args = 0
 2432 0000 10B5     		push	{r4, lr}
 2433              		.cfi_def_cfa_offset 8
 2434              		.cfi_offset 4, -8
 2435              		.cfi_offset 14, -4
2853:FreeRTOS\source/tasks.c **** 	{
 2436              		.loc 1 2853 0
 2437 0002 1E4B     		ldr	r3, .L222
 2438 0004 1B6F     		ldr	r3, [r3, #112]
 2439 0006 002B     		cmp	r3, #0
 2440 0008 03D0     		beq	.L215
2857:FreeRTOS\source/tasks.c **** 	}
 2441              		.loc 1 2857 0
 2442 000a 0122     		movs	r2, #1
 2443 000c 1C4B     		ldr	r3, .L222+4
 2444 000e 1A60     		str	r2, [r3]
 2445 0010 33E0     		b	.L214
 2446              	.L215:
2861:FreeRTOS\source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2447              		.loc 1 2861 0
 2448 0012 0022     		movs	r2, #0
 2449 0014 1A4B     		ldr	r3, .L222+4
 2450 0016 1A60     		str	r2, [r3]
 2451              	.LBB11:
2896:FreeRTOS\source/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 138


 2452              		.loc 1 2896 0
 2453 0018 184B     		ldr	r3, .L222
 2454 001a 5B6E     		ldr	r3, [r3, #100]
 2455              	.LVL234:
 2456 001c 04E0     		b	.L217
 2457              	.L220:
2896:FreeRTOS\source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2458              		.loc 1 2896 0 is_stmt 0 discriminator 5
 2459 001e 002B     		cmp	r3, #0
 2460 0020 01D1     		bne	.L218
2896:FreeRTOS\source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2461              		.loc 1 2896 0 discriminator 2
 2462              		.syntax divided
 2463              	@ 2896 "FreeRTOS\source\tasks.c" 1
 2464 0022 72B6     		 cpsid i 
 2465              	@ 0 "" 2
 2466              		.thumb
 2467              		.syntax unified
 2468              	.L219:
 2469 0024 FEE7     		b	.L219
 2470              	.L218:
2896:FreeRTOS\source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2471              		.loc 1 2896 0 discriminator 3
 2472 0026 013B     		subs	r3, r3, #1
 2473              	.LVL235:
 2474              	.L217:
2896:FreeRTOS\source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2475              		.loc 1 2896 0 discriminator 4
 2476 0028 9900     		lsls	r1, r3, #2
 2477 002a C918     		adds	r1, r1, r3
 2478 002c 8A00     		lsls	r2, r1, #2
 2479 002e 1549     		ldr	r1, .L222+8
 2480 0030 8A18     		adds	r2, r1, r2
 2481 0032 126B     		ldr	r2, [r2, #48]
 2482 0034 002A     		cmp	r2, #0
 2483 0036 F2D0     		beq	.L220
 2484              	.LVL236:
 2485              	.LBB12:
2896:FreeRTOS\source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2486              		.loc 1 2896 0 discriminator 6
 2487 0038 0A00     		movs	r2, r1
 2488 003a 9900     		lsls	r1, r3, #2
 2489 003c CC18     		adds	r4, r1, r3
 2490 003e A000     		lsls	r0, r4, #2
 2491 0040 1018     		adds	r0, r2, r0
 2492 0042 446B     		ldr	r4, [r0, #52]
 2493 0044 6468     		ldr	r4, [r4, #4]
 2494 0046 4463     		str	r4, [r0, #52]
 2495 0048 3032     		adds	r2, r2, #48
 2496 004a 1000     		movs	r0, r2
 2497 004c C918     		adds	r1, r1, r3
 2498 004e 8A00     		lsls	r2, r1, #2
 2499 0050 0832     		adds	r2, r2, #8
 2500 0052 8218     		adds	r2, r0, r2
 2501 0054 9442     		cmp	r4, r2
 2502 0056 06D1     		bne	.L221
2896:FreeRTOS\source/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 139


 2503              		.loc 1 2896 0 discriminator 7
 2504 0058 6068     		ldr	r0, [r4, #4]
 2505 005a 9900     		lsls	r1, r3, #2
 2506 005c C918     		adds	r1, r1, r3
 2507 005e 8A00     		lsls	r2, r1, #2
 2508 0060 0849     		ldr	r1, .L222+8
 2509 0062 8A18     		adds	r2, r1, r2
 2510 0064 5063     		str	r0, [r2, #52]
 2511              	.L221:
2896:FreeRTOS\source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2512              		.loc 1 2896 0 discriminator 9
 2513 0066 9900     		lsls	r1, r3, #2
 2514 0068 C918     		adds	r1, r1, r3
 2515 006a 8A00     		lsls	r2, r1, #2
 2516 006c 0549     		ldr	r1, .L222+8
 2517 006e 8A18     		adds	r2, r1, r2
 2518 0070 526B     		ldr	r2, [r2, #52]
 2519 0072 D168     		ldr	r1, [r2, #12]
 2520 0074 014A     		ldr	r2, .L222
 2521 0076 9165     		str	r1, [r2, #88]
 2522              	.LBE12:
 2523 0078 5366     		str	r3, [r2, #100]
 2524              	.LVL237:
 2525              	.L214:
 2526              	.LBE11:
2907:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 2527              		.loc 1 2907 0 is_stmt 1
 2528              		@ sp needed
 2529 007a 10BD     		pop	{r4, pc}
 2530              	.L223:
 2531              		.align	2
 2532              	.L222:
 2533 007c 80000000 		.word	.LANCHOR1
 2534 0080 00010000 		.word	.LANCHOR2
 2535 0084 00000000 		.word	.LANCHOR0
 2536              		.cfi_endproc
 2537              	.LFE54:
 2538              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2539              		.section	.text.vTaskSuspend,"ax",%progbits
 2540              		.align	2
 2541              		.global	vTaskSuspend
 2542              		.code	16
 2543              		.thumb_func
 2544              		.type	vTaskSuspend, %function
 2545              	vTaskSuspend:
 2546              	.LFB41:
1631:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
 2547              		.loc 1 1631 0
 2548              		.cfi_startproc
 2549              		@ args = 0, pretend = 0, frame = 0
 2550              		@ frame_needed = 0, uses_anonymous_args = 0
 2551              	.LVL238:
 2552 0000 70B5     		push	{r4, r5, r6, lr}
 2553              		.cfi_def_cfa_offset 16
 2554              		.cfi_offset 4, -16
 2555              		.cfi_offset 5, -12
 2556              		.cfi_offset 6, -8
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 140


 2557              		.cfi_offset 14, -4
 2558 0002 0400     		movs	r4, r0
1634:FreeRTOS\source/tasks.c **** 		{
 2559              		.loc 1 1634 0
 2560 0004 FFF7FEFF 		bl	vPortEnterCritical
 2561              	.LVL239:
1638:FreeRTOS\source/tasks.c **** 
 2562              		.loc 1 1638 0
 2563 0008 002C     		cmp	r4, #0
 2564 000a 01D1     		bne	.L225
1638:FreeRTOS\source/tasks.c **** 
 2565              		.loc 1 1638 0 is_stmt 0 discriminator 1
 2566 000c 204B     		ldr	r3, .L234
 2567 000e 9C6D     		ldr	r4, [r3, #88]
 2568              	.LVL240:
 2569              	.L225:
1644:FreeRTOS\source/tasks.c **** 			{
 2570              		.loc 1 1644 0 is_stmt 1 discriminator 4
 2571 0010 251D     		adds	r5, r4, #4
 2572 0012 2800     		movs	r0, r5
 2573 0014 FFF7FEFF 		bl	uxListRemove
 2574              	.LVL241:
1654:FreeRTOS\source/tasks.c **** 			{
 2575              		.loc 1 1654 0 discriminator 4
 2576 0018 A36A     		ldr	r3, [r4, #40]
 2577 001a 002B     		cmp	r3, #0
 2578 001c 03D0     		beq	.L226
1656:FreeRTOS\source/tasks.c **** 			}
 2579              		.loc 1 1656 0
 2580 001e 2000     		movs	r0, r4
 2581 0020 1830     		adds	r0, r0, #24
 2582 0022 FFF7FEFF 		bl	uxListRemove
 2583              	.LVL242:
 2584              	.L226:
1663:FreeRTOS\source/tasks.c **** 
 2585              		.loc 1 1663 0
 2586 0026 2900     		movs	r1, r5
 2587 0028 1A48     		ldr	r0, .L234+4
 2588 002a FFF7FEFF 		bl	vListInsertEnd
 2589              	.LVL243:
1667:FreeRTOS\source/tasks.c **** 				{
 2590              		.loc 1 1667 0
 2591 002e 6423     		movs	r3, #100
 2592 0030 E35C     		ldrb	r3, [r4, r3]
 2593 0032 012B     		cmp	r3, #1
 2594 0034 02D1     		bne	.L227
1671:FreeRTOS\source/tasks.c **** 				}
 2595              		.loc 1 1671 0
 2596 0036 0022     		movs	r2, #0
 2597 0038 6333     		adds	r3, r3, #99
 2598 003a E254     		strb	r2, [r4, r3]
 2599              	.L227:
1676:FreeRTOS\source/tasks.c **** 
 2600              		.loc 1 1676 0
 2601 003c FFF7FEFF 		bl	vPortExitCritical
 2602              	.LVL244:
1678:FreeRTOS\source/tasks.c **** 		{
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 141


 2603              		.loc 1 1678 0
 2604 0040 134B     		ldr	r3, .L234
 2605 0042 DB6D     		ldr	r3, [r3, #92]
 2606 0044 002B     		cmp	r3, #0
 2607 0046 05D0     		beq	.L228
1682:FreeRTOS\source/tasks.c **** 			{
 2608              		.loc 1 1682 0
 2609 0048 FFF7FEFF 		bl	vPortEnterCritical
 2610              	.LVL245:
1684:FreeRTOS\source/tasks.c **** 			}
 2611              		.loc 1 1684 0
 2612 004c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2613              	.LVL246:
1686:FreeRTOS\source/tasks.c **** 		}
 2614              		.loc 1 1686 0
 2615 0050 FFF7FEFF 		bl	vPortExitCritical
 2616              	.LVL247:
 2617              	.L228:
1693:FreeRTOS\source/tasks.c **** 		{
 2618              		.loc 1 1693 0
 2619 0054 0E4B     		ldr	r3, .L234
 2620 0056 9B6D     		ldr	r3, [r3, #88]
 2621 0058 9C42     		cmp	r4, r3
 2622 005a 18D1     		bne	.L224
1695:FreeRTOS\source/tasks.c **** 			{
 2623              		.loc 1 1695 0
 2624 005c 0C4B     		ldr	r3, .L234
 2625 005e DB6D     		ldr	r3, [r3, #92]
 2626 0060 002B     		cmp	r3, #0
 2627 0062 08D0     		beq	.L230
1698:FreeRTOS\source/tasks.c **** 				portYIELD_WITHIN_API();
 2628              		.loc 1 1698 0
 2629 0064 0A4B     		ldr	r3, .L234
 2630 0066 1B6F     		ldr	r3, [r3, #112]
 2631 0068 002B     		cmp	r3, #0
 2632 006a 01D0     		beq	.L231
1698:FreeRTOS\source/tasks.c **** 				portYIELD_WITHIN_API();
 2633              		.loc 1 1698 0 is_stmt 0 discriminator 1
 2634              		.syntax divided
 2635              	@ 1698 "FreeRTOS\source\tasks.c" 1
 2636 006c 72B6     		 cpsid i 
 2637              	@ 0 "" 2
 2638              		.thumb
 2639              		.syntax unified
 2640              	.L232:
 2641 006e FEE7     		b	.L232
 2642              	.L231:
1699:FreeRTOS\source/tasks.c **** 			}
 2643              		.loc 1 1699 0 is_stmt 1
 2644 0070 FFF7FEFF 		bl	vPortYield
 2645              	.LVL248:
 2646 0074 0BE0     		b	.L224
 2647              	.L230:
1706:FreeRTOS\source/tasks.c **** 				{
 2648              		.loc 1 1706 0
 2649 0076 074B     		ldr	r3, .L234+4
 2650 0078 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 142


 2651 007a 054B     		ldr	r3, .L234
 2652 007c 5B6D     		ldr	r3, [r3, #84]
 2653 007e 9A42     		cmp	r2, r3
 2654 0080 03D1     		bne	.L233
1712:FreeRTOS\source/tasks.c **** 				}
 2655              		.loc 1 1712 0
 2656 0082 0022     		movs	r2, #0
 2657 0084 024B     		ldr	r3, .L234
 2658 0086 9A65     		str	r2, [r3, #88]
 2659 0088 01E0     		b	.L224
 2660              	.L233:
1716:FreeRTOS\source/tasks.c **** 				}
 2661              		.loc 1 1716 0
 2662 008a FFF7FEFF 		bl	vTaskSwitchContext
 2663              	.LVL249:
 2664              	.L224:
1724:FreeRTOS\source/tasks.c **** 
 2665              		.loc 1 1724 0
 2666              		@ sp needed
 2667              	.LVL250:
 2668              	.LVL251:
 2669 008e 70BD     		pop	{r4, r5, r6, pc}
 2670              	.L235:
 2671              		.align	2
 2672              	.L234:
 2673 0090 80000000 		.word	.LANCHOR1
 2674 0094 00000000 		.word	.LANCHOR0
 2675              		.cfi_endproc
 2676              	.LFE41:
 2677              		.size	vTaskSuspend, .-vTaskSuspend
 2678              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2679              		.align	2
 2680              		.global	vTaskPlaceOnEventList
 2681              		.code	16
 2682              		.thumb_func
 2683              		.type	vTaskPlaceOnEventList, %function
 2684              	vTaskPlaceOnEventList:
 2685              	.LFB55:
2911:FreeRTOS\source/tasks.c **** 	configASSERT( pxEventList );
 2686              		.loc 1 2911 0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 0
 2689              		@ frame_needed = 0, uses_anonymous_args = 0
 2690              	.LVL252:
 2691 0000 10B5     		push	{r4, lr}
 2692              		.cfi_def_cfa_offset 8
 2693              		.cfi_offset 4, -8
 2694              		.cfi_offset 14, -4
 2695 0002 0C00     		movs	r4, r1
2912:FreeRTOS\source/tasks.c **** 
 2696              		.loc 1 2912 0
 2697 0004 0028     		cmp	r0, #0
 2698 0006 01D1     		bne	.L237
2912:FreeRTOS\source/tasks.c **** 
 2699              		.loc 1 2912 0 is_stmt 0 discriminator 1
 2700              		.syntax divided
 2701              	@ 2912 "FreeRTOS\source\tasks.c" 1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 143


 2702 0008 72B6     		 cpsid i 
 2703              	@ 0 "" 2
 2704              		.thumb
 2705              		.syntax unified
 2706              	.L238:
 2707 000a FEE7     		b	.L238
 2708              	.L237:
2921:FreeRTOS\source/tasks.c **** 
 2709              		.loc 1 2921 0 is_stmt 1
 2710 000c 044B     		ldr	r3, .L239
 2711 000e 996D     		ldr	r1, [r3, #88]
 2712              	.LVL253:
 2713 0010 1831     		adds	r1, r1, #24
 2714 0012 FFF7FEFF 		bl	vListInsert
 2715              	.LVL254:
2923:FreeRTOS\source/tasks.c **** }
 2716              		.loc 1 2923 0
 2717 0016 0121     		movs	r1, #1
 2718 0018 2000     		movs	r0, r4
 2719 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2720              	.LVL255:
2924:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 2721              		.loc 1 2924 0
 2722              		@ sp needed
 2723              	.LVL256:
 2724 001e 10BD     		pop	{r4, pc}
 2725              	.L240:
 2726              		.align	2
 2727              	.L239:
 2728 0020 80000000 		.word	.LANCHOR1
 2729              		.cfi_endproc
 2730              	.LFE55:
 2731              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2732              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2733              		.align	2
 2734              		.global	vTaskPlaceOnUnorderedEventList
 2735              		.code	16
 2736              		.thumb_func
 2737              		.type	vTaskPlaceOnUnorderedEventList, %function
 2738              	vTaskPlaceOnUnorderedEventList:
 2739              	.LFB56:
2928:FreeRTOS\source/tasks.c **** 	configASSERT( pxEventList );
 2740              		.loc 1 2928 0
 2741              		.cfi_startproc
 2742              		@ args = 0, pretend = 0, frame = 0
 2743              		@ frame_needed = 0, uses_anonymous_args = 0
 2744              	.LVL257:
 2745 0000 70B5     		push	{r4, r5, r6, lr}
 2746              		.cfi_def_cfa_offset 16
 2747              		.cfi_offset 4, -16
 2748              		.cfi_offset 5, -12
 2749              		.cfi_offset 6, -8
 2750              		.cfi_offset 14, -4
 2751 0002 1400     		movs	r4, r2
2929:FreeRTOS\source/tasks.c **** 
 2752              		.loc 1 2929 0
 2753 0004 0028     		cmp	r0, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 144


 2754 0006 01D1     		bne	.L242
2929:FreeRTOS\source/tasks.c **** 
 2755              		.loc 1 2929 0 is_stmt 0 discriminator 1
 2756              		.syntax divided
 2757              	@ 2929 "FreeRTOS\source\tasks.c" 1
 2758 0008 72B6     		 cpsid i 
 2759              	@ 0 "" 2
 2760              		.thumb
 2761              		.syntax unified
 2762              	.L243:
 2763 000a FEE7     		b	.L243
 2764              	.L242:
2933:FreeRTOS\source/tasks.c **** 
 2765              		.loc 1 2933 0 is_stmt 1
 2766 000c 0A4B     		ldr	r3, .L246
 2767 000e 1B6F     		ldr	r3, [r3, #112]
 2768 0010 002B     		cmp	r3, #0
 2769 0012 01D1     		bne	.L244
2933:FreeRTOS\source/tasks.c **** 
 2770              		.loc 1 2933 0 is_stmt 0 discriminator 1
 2771              		.syntax divided
 2772              	@ 2933 "FreeRTOS\source\tasks.c" 1
 2773 0014 72B6     		 cpsid i 
 2774              	@ 0 "" 2
 2775              		.thumb
 2776              		.syntax unified
 2777              	.L245:
 2778 0016 FEE7     		b	.L245
 2779              	.L244:
2938:FreeRTOS\source/tasks.c **** 
 2780              		.loc 1 2938 0 is_stmt 1
 2781 0018 074B     		ldr	r3, .L246
 2782 001a 9A6D     		ldr	r2, [r3, #88]
 2783              	.LVL258:
 2784 001c 8025     		movs	r5, #128
 2785 001e 2D06     		lsls	r5, r5, #24
 2786 0020 2943     		orrs	r1, r5
 2787              	.LVL259:
 2788 0022 9161     		str	r1, [r2, #24]
2945:FreeRTOS\source/tasks.c **** 
 2789              		.loc 1 2945 0
 2790 0024 996D     		ldr	r1, [r3, #88]
 2791 0026 1831     		adds	r1, r1, #24
 2792 0028 FFF7FEFF 		bl	vListInsertEnd
 2793              	.LVL260:
2947:FreeRTOS\source/tasks.c **** }
 2794              		.loc 1 2947 0
 2795 002c 0121     		movs	r1, #1
 2796 002e 2000     		movs	r0, r4
 2797 0030 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2798              	.LVL261:
2948:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 2799              		.loc 1 2948 0
 2800              		@ sp needed
 2801              	.LVL262:
 2802 0034 70BD     		pop	{r4, r5, r6, pc}
 2803              	.L247:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 145


 2804 0036 C046     		.align	2
 2805              	.L246:
 2806 0038 80000000 		.word	.LANCHOR1
 2807              		.cfi_endproc
 2808              	.LFE56:
 2809              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2810              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2811              		.align	2
 2812              		.global	xTaskRemoveFromEventList
 2813              		.code	16
 2814              		.thumb_func
 2815              		.type	xTaskRemoveFromEventList, %function
 2816              	xTaskRemoveFromEventList:
 2817              	.LFB57:
2985:FreeRTOS\source/tasks.c **** TCB_t *pxUnblockedTCB;
 2818              		.loc 1 2985 0
 2819              		.cfi_startproc
 2820              		@ args = 0, pretend = 0, frame = 0
 2821              		@ frame_needed = 0, uses_anonymous_args = 0
 2822              	.LVL263:
 2823 0000 70B5     		push	{r4, r5, r6, lr}
 2824              		.cfi_def_cfa_offset 16
 2825              		.cfi_offset 4, -16
 2826              		.cfi_offset 5, -12
 2827              		.cfi_offset 6, -8
 2828              		.cfi_offset 14, -4
3002:FreeRTOS\source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2829              		.loc 1 3002 0
 2830 0002 C368     		ldr	r3, [r0, #12]
 2831 0004 DC68     		ldr	r4, [r3, #12]
 2832              	.LVL264:
3003:FreeRTOS\source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2833              		.loc 1 3003 0
 2834 0006 002C     		cmp	r4, #0
 2835 0008 01D1     		bne	.L249
3003:FreeRTOS\source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2836              		.loc 1 3003 0 is_stmt 0 discriminator 1
 2837              		.syntax divided
 2838              	@ 3003 "FreeRTOS\source\tasks.c" 1
 2839 000a 72B6     		 cpsid i 
 2840              	@ 0 "" 2
 2841              		.thumb
 2842              		.syntax unified
 2843              	.L250:
 2844 000c FEE7     		b	.L250
 2845              	.L249:
3004:FreeRTOS\source/tasks.c **** 
 2846              		.loc 1 3004 0 is_stmt 1
 2847 000e 2500     		movs	r5, r4
 2848 0010 1835     		adds	r5, r5, #24
 2849 0012 2800     		movs	r0, r5
 2850              	.LVL265:
 2851 0014 FFF7FEFF 		bl	uxListRemove
 2852              	.LVL266:
3006:FreeRTOS\source/tasks.c **** 	{
 2853              		.loc 1 3006 0
 2854 0018 154B     		ldr	r3, .L256
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 146


 2855 001a 1B6F     		ldr	r3, [r3, #112]
 2856 001c 002B     		cmp	r3, #0
 2857 001e 14D1     		bne	.L251
3008:FreeRTOS\source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2858              		.loc 1 3008 0
 2859 0020 251D     		adds	r5, r4, #4
 2860 0022 2800     		movs	r0, r5
 2861 0024 FFF7FEFF 		bl	uxListRemove
 2862              	.LVL267:
3009:FreeRTOS\source/tasks.c **** 	}
 2863              		.loc 1 3009 0
 2864 0028 E36A     		ldr	r3, [r4, #44]
 2865 002a 114A     		ldr	r2, .L256
 2866 002c 526E     		ldr	r2, [r2, #100]
 2867 002e 9342     		cmp	r3, r2
 2868 0030 01D9     		bls	.L252
3009:FreeRTOS\source/tasks.c **** 	}
 2869              		.loc 1 3009 0 is_stmt 0 discriminator 1
 2870 0032 0F4A     		ldr	r2, .L256
 2871 0034 5366     		str	r3, [r2, #100]
 2872              	.L252:
3009:FreeRTOS\source/tasks.c **** 	}
 2873              		.loc 1 3009 0 discriminator 3
 2874 0036 9A00     		lsls	r2, r3, #2
 2875 0038 D318     		adds	r3, r2, r3
 2876 003a 9A00     		lsls	r2, r3, #2
 2877 003c 0D48     		ldr	r0, .L256+4
 2878 003e 3030     		adds	r0, r0, #48
 2879 0040 8018     		adds	r0, r0, r2
 2880 0042 2900     		movs	r1, r5
 2881 0044 FFF7FEFF 		bl	vListInsertEnd
 2882              	.LVL268:
 2883 0048 04E0     		b	.L253
 2884              	.L251:
3015:FreeRTOS\source/tasks.c **** 	}
 2885              		.loc 1 3015 0 is_stmt 1
 2886 004a 2900     		movs	r1, r5
 2887 004c 0948     		ldr	r0, .L256+4
 2888 004e 1430     		adds	r0, r0, #20
 2889 0050 FFF7FEFF 		bl	vListInsertEnd
 2890              	.LVL269:
 2891              	.L253:
3018:FreeRTOS\source/tasks.c **** 	{
 2892              		.loc 1 3018 0
 2893 0054 E26A     		ldr	r2, [r4, #44]
 2894 0056 064B     		ldr	r3, .L256
 2895 0058 9B6D     		ldr	r3, [r3, #88]
 2896 005a DB6A     		ldr	r3, [r3, #44]
 2897 005c 9A42     		cmp	r2, r3
 2898 005e 04D9     		bls	.L255
 2899              	.LVL270:
3027:FreeRTOS\source/tasks.c **** 	}
 2900              		.loc 1 3027 0
 2901 0060 0122     		movs	r2, #1
 2902 0062 054B     		ldr	r3, .L256+8
 2903 0064 1A60     		str	r2, [r3]
3023:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 147


 2904              		.loc 1 3023 0
 2905 0066 0120     		movs	r0, #1
 2906 0068 00E0     		b	.L254
 2907              	.LVL271:
 2908              	.L255:
3031:FreeRTOS\source/tasks.c **** 	}
 2909              		.loc 1 3031 0
 2910 006a 0020     		movs	r0, #0
 2911              	.L254:
 2912              	.LVL272:
3049:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 2913              		.loc 1 3049 0
 2914              		@ sp needed
 2915              	.LVL273:
 2916 006c 70BD     		pop	{r4, r5, r6, pc}
 2917              	.L257:
 2918 006e C046     		.align	2
 2919              	.L256:
 2920 0070 80000000 		.word	.LANCHOR1
 2921 0074 00000000 		.word	.LANCHOR0
 2922 0078 00010000 		.word	.LANCHOR2
 2923              		.cfi_endproc
 2924              	.LFE57:
 2925              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2926              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 2927              		.align	2
 2928              		.global	vTaskRemoveFromUnorderedEventList
 2929              		.code	16
 2930              		.thumb_func
 2931              		.type	vTaskRemoveFromUnorderedEventList, %function
 2932              	vTaskRemoveFromUnorderedEventList:
 2933              	.LFB58:
3053:FreeRTOS\source/tasks.c **** TCB_t *pxUnblockedTCB;
 2934              		.loc 1 3053 0
 2935              		.cfi_startproc
 2936              		@ args = 0, pretend = 0, frame = 0
 2937              		@ frame_needed = 0, uses_anonymous_args = 0
 2938              	.LVL274:
 2939 0000 70B5     		push	{r4, r5, r6, lr}
 2940              		.cfi_def_cfa_offset 16
 2941              		.cfi_offset 4, -16
 2942              		.cfi_offset 5, -12
 2943              		.cfi_offset 6, -8
 2944              		.cfi_offset 14, -4
3058:FreeRTOS\source/tasks.c **** 
 2945              		.loc 1 3058 0
 2946 0002 174B     		ldr	r3, .L265
 2947 0004 1B6F     		ldr	r3, [r3, #112]
 2948 0006 002B     		cmp	r3, #0
 2949 0008 01D1     		bne	.L259
3058:FreeRTOS\source/tasks.c **** 
 2950              		.loc 1 3058 0 is_stmt 0 discriminator 1
 2951              		.syntax divided
 2952              	@ 3058 "FreeRTOS\source\tasks.c" 1
 2953 000a 72B6     		 cpsid i 
 2954              	@ 0 "" 2
 2955              		.thumb
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 148


 2956              		.syntax unified
 2957              	.L260:
 2958 000c FEE7     		b	.L260
 2959              	.L259:
3061:FreeRTOS\source/tasks.c **** 
 2960              		.loc 1 3061 0 is_stmt 1
 2961 000e 8023     		movs	r3, #128
 2962 0010 1B06     		lsls	r3, r3, #24
 2963 0012 1943     		orrs	r1, r3
 2964              	.LVL275:
 2965 0014 0160     		str	r1, [r0]
3065:FreeRTOS\source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2966              		.loc 1 3065 0
 2967 0016 C468     		ldr	r4, [r0, #12]
 2968              	.LVL276:
3066:FreeRTOS\source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 2969              		.loc 1 3066 0
 2970 0018 002C     		cmp	r4, #0
 2971 001a 01D1     		bne	.L261
3066:FreeRTOS\source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 2972              		.loc 1 3066 0 is_stmt 0 discriminator 1
 2973              		.syntax divided
 2974              	@ 3066 "FreeRTOS\source\tasks.c" 1
 2975 001c 72B6     		 cpsid i 
 2976              	@ 0 "" 2
 2977              		.thumb
 2978              		.syntax unified
 2979              	.L262:
 2980 001e FEE7     		b	.L262
 2981              	.L261:
3067:FreeRTOS\source/tasks.c **** 
 2982              		.loc 1 3067 0 is_stmt 1
 2983 0020 FFF7FEFF 		bl	uxListRemove
 2984              	.LVL277:
3072:FreeRTOS\source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2985              		.loc 1 3072 0
 2986 0024 251D     		adds	r5, r4, #4
 2987 0026 2800     		movs	r0, r5
 2988 0028 FFF7FEFF 		bl	uxListRemove
 2989              	.LVL278:
3073:FreeRTOS\source/tasks.c **** 
 2990              		.loc 1 3073 0
 2991 002c E36A     		ldr	r3, [r4, #44]
 2992 002e 0C4A     		ldr	r2, .L265
 2993 0030 526E     		ldr	r2, [r2, #100]
 2994 0032 9342     		cmp	r3, r2
 2995 0034 01D9     		bls	.L263
3073:FreeRTOS\source/tasks.c **** 
 2996              		.loc 1 3073 0 is_stmt 0 discriminator 1
 2997 0036 0A4A     		ldr	r2, .L265
 2998 0038 5366     		str	r3, [r2, #100]
 2999              	.L263:
3073:FreeRTOS\source/tasks.c **** 
 3000              		.loc 1 3073 0 discriminator 3
 3001 003a 9A00     		lsls	r2, r3, #2
 3002 003c D318     		adds	r3, r2, r3
 3003 003e 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 149


 3004 0040 0848     		ldr	r0, .L265+4
 3005 0042 3030     		adds	r0, r0, #48
 3006 0044 8018     		adds	r0, r0, r2
 3007 0046 2900     		movs	r1, r5
 3008 0048 FFF7FEFF 		bl	vListInsertEnd
 3009              	.LVL279:
3075:FreeRTOS\source/tasks.c **** 	{
 3010              		.loc 1 3075 0 is_stmt 1 discriminator 3
 3011 004c E26A     		ldr	r2, [r4, #44]
 3012 004e 044B     		ldr	r3, .L265
 3013 0050 9B6D     		ldr	r3, [r3, #88]
 3014 0052 DB6A     		ldr	r3, [r3, #44]
 3015 0054 9A42     		cmp	r2, r3
 3016 0056 02D9     		bls	.L258
3081:FreeRTOS\source/tasks.c **** 	}
 3017              		.loc 1 3081 0
 3018 0058 0122     		movs	r2, #1
 3019 005a 034B     		ldr	r3, .L265+8
 3020 005c 1A60     		str	r2, [r3]
 3021              	.L258:
3083:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 3022              		.loc 1 3083 0
 3023              		@ sp needed
 3024              	.LVL280:
 3025              	.LVL281:
 3026 005e 70BD     		pop	{r4, r5, r6, pc}
 3027              	.L266:
 3028              		.align	2
 3029              	.L265:
 3030 0060 80000000 		.word	.LANCHOR1
 3031 0064 00000000 		.word	.LANCHOR0
 3032 0068 00010000 		.word	.LANCHOR2
 3033              		.cfi_endproc
 3034              	.LFE58:
 3035              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 3036              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3037              		.align	2
 3038              		.global	vTaskSetTimeOutState
 3039              		.code	16
 3040              		.thumb_func
 3041              		.type	vTaskSetTimeOutState, %function
 3042              	vTaskSetTimeOutState:
 3043              	.LFB59:
3087:FreeRTOS\source/tasks.c **** 	configASSERT( pxTimeOut );
 3044              		.loc 1 3087 0
 3045              		.cfi_startproc
 3046              		@ args = 0, pretend = 0, frame = 0
 3047              		@ frame_needed = 0, uses_anonymous_args = 0
 3048              	.LVL282:
 3049 0000 10B5     		push	{r4, lr}
 3050              		.cfi_def_cfa_offset 8
 3051              		.cfi_offset 4, -8
 3052              		.cfi_offset 14, -4
 3053 0002 041E     		subs	r4, r0, #0
3088:FreeRTOS\source/tasks.c **** 	taskENTER_CRITICAL();
 3054              		.loc 1 3088 0
 3055 0004 01D1     		bne	.L268
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 150


3088:FreeRTOS\source/tasks.c **** 	taskENTER_CRITICAL();
 3056              		.loc 1 3088 0 is_stmt 0 discriminator 1
 3057              		.syntax divided
 3058              	@ 3088 "FreeRTOS\source\tasks.c" 1
 3059 0006 72B6     		 cpsid i 
 3060              	@ 0 "" 2
 3061              		.thumb
 3062              		.syntax unified
 3063              	.L269:
 3064 0008 FEE7     		b	.L269
 3065              	.L268:
3089:FreeRTOS\source/tasks.c **** 	{
 3066              		.loc 1 3089 0 is_stmt 1
 3067 000a FFF7FEFF 		bl	vPortEnterCritical
 3068              	.LVL283:
3091:FreeRTOS\source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3069              		.loc 1 3091 0
 3070 000e 044B     		ldr	r3, .L270
 3071 0010 9A6F     		ldr	r2, [r3, #120]
 3072 0012 2260     		str	r2, [r4]
3092:FreeRTOS\source/tasks.c **** 	}
 3073              		.loc 1 3092 0
 3074 0014 DB6E     		ldr	r3, [r3, #108]
 3075 0016 6360     		str	r3, [r4, #4]
3094:FreeRTOS\source/tasks.c **** }
 3076              		.loc 1 3094 0
 3077 0018 FFF7FEFF 		bl	vPortExitCritical
 3078              	.LVL284:
3095:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 3079              		.loc 1 3095 0
 3080              		@ sp needed
 3081              	.LVL285:
 3082 001c 10BD     		pop	{r4, pc}
 3083              	.L271:
 3084 001e C046     		.align	2
 3085              	.L270:
 3086 0020 80000000 		.word	.LANCHOR1
 3087              		.cfi_endproc
 3088              	.LFE59:
 3089              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3090              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3091              		.align	2
 3092              		.global	vTaskInternalSetTimeOutState
 3093              		.code	16
 3094              		.thumb_func
 3095              		.type	vTaskInternalSetTimeOutState, %function
 3096              	vTaskInternalSetTimeOutState:
 3097              	.LFB60:
3099:FreeRTOS\source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3098              		.loc 1 3099 0
 3099              		.cfi_startproc
 3100              		@ args = 0, pretend = 0, frame = 0
 3101              		@ frame_needed = 0, uses_anonymous_args = 0
 3102              		@ link register save eliminated.
 3103              	.LVL286:
3101:FreeRTOS\source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3104              		.loc 1 3101 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 151


 3105 0000 024B     		ldr	r3, .L273
 3106 0002 9A6F     		ldr	r2, [r3, #120]
 3107 0004 0260     		str	r2, [r0]
3102:FreeRTOS\source/tasks.c **** }
 3108              		.loc 1 3102 0
 3109 0006 DB6E     		ldr	r3, [r3, #108]
 3110 0008 4360     		str	r3, [r0, #4]
3103:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 3111              		.loc 1 3103 0
 3112              		@ sp needed
 3113 000a 7047     		bx	lr
 3114              	.L274:
 3115              		.align	2
 3116              	.L273:
 3117 000c 80000000 		.word	.LANCHOR1
 3118              		.cfi_endproc
 3119              	.LFE60:
 3120              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 3121              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3122              		.align	2
 3123              		.global	xTaskCheckForTimeOut
 3124              		.code	16
 3125              		.thumb_func
 3126              		.type	xTaskCheckForTimeOut, %function
 3127              	xTaskCheckForTimeOut:
 3128              	.LFB61:
3107:FreeRTOS\source/tasks.c **** BaseType_t xReturn;
 3129              		.loc 1 3107 0
 3130              		.cfi_startproc
 3131              		@ args = 0, pretend = 0, frame = 0
 3132              		@ frame_needed = 0, uses_anonymous_args = 0
 3133              	.LVL287:
 3134 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3135              		.cfi_def_cfa_offset 24
 3136              		.cfi_offset 3, -24
 3137              		.cfi_offset 4, -20
 3138              		.cfi_offset 5, -16
 3139              		.cfi_offset 6, -12
 3140              		.cfi_offset 7, -8
 3141              		.cfi_offset 14, -4
 3142 0002 0500     		movs	r5, r0
 3143 0004 0C00     		movs	r4, r1
3110:FreeRTOS\source/tasks.c **** 	configASSERT( pxTicksToWait );
 3144              		.loc 1 3110 0
 3145 0006 0028     		cmp	r0, #0
 3146 0008 01D1     		bne	.L276
3110:FreeRTOS\source/tasks.c **** 	configASSERT( pxTicksToWait );
 3147              		.loc 1 3110 0 is_stmt 0 discriminator 1
 3148              		.syntax divided
 3149              	@ 3110 "FreeRTOS\source\tasks.c" 1
 3150 000a 72B6     		 cpsid i 
 3151              	@ 0 "" 2
 3152              		.thumb
 3153              		.syntax unified
 3154              	.L277:
 3155 000c FEE7     		b	.L277
 3156              	.L276:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 152


3111:FreeRTOS\source/tasks.c **** 
 3157              		.loc 1 3111 0 is_stmt 1
 3158 000e 0029     		cmp	r1, #0
 3159 0010 01D1     		bne	.L278
3111:FreeRTOS\source/tasks.c **** 
 3160              		.loc 1 3111 0 is_stmt 0 discriminator 1
 3161              		.syntax divided
 3162              	@ 3111 "FreeRTOS\source\tasks.c" 1
 3163 0012 72B6     		 cpsid i 
 3164              	@ 0 "" 2
 3165              		.thumb
 3166              		.syntax unified
 3167              	.L279:
 3168 0014 FEE7     		b	.L279
 3169              	.L278:
3113:FreeRTOS\source/tasks.c **** 	{
 3170              		.loc 1 3113 0 is_stmt 1
 3171 0016 FFF7FEFF 		bl	vPortEnterCritical
 3172              	.LVL288:
 3173              	.LBB13:
3116:FreeRTOS\source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3174              		.loc 1 3116 0
 3175 001a 114B     		ldr	r3, .L285
 3176 001c D86E     		ldr	r0, [r3, #108]
 3177              	.LVL289:
3117:FreeRTOS\source/tasks.c **** 
 3178              		.loc 1 3117 0
 3179 001e 6968     		ldr	r1, [r5, #4]
 3180 0020 421A     		subs	r2, r0, r1
 3181              	.LVL290:
3131:FreeRTOS\source/tasks.c **** 			{
 3182              		.loc 1 3131 0
 3183 0022 2368     		ldr	r3, [r4]
 3184 0024 5E1C     		adds	r6, r3, #1
 3185 0026 13D0     		beq	.L283
3141:FreeRTOS\source/tasks.c **** 		{
 3186              		.loc 1 3141 0
 3187 0028 0D4E     		ldr	r6, .L285
 3188 002a B66F     		ldr	r6, [r6, #120]
 3189 002c 2F68     		ldr	r7, [r5]
 3190 002e B742     		cmp	r7, r6
 3191 0030 01D0     		beq	.L281
3141:FreeRTOS\source/tasks.c **** 		{
 3192              		.loc 1 3141 0 is_stmt 0 discriminator 1
 3193 0032 8842     		cmp	r0, r1
 3194 0034 0ED2     		bcs	.L284
 3195              	.L281:
3150:FreeRTOS\source/tasks.c **** 		{
 3196              		.loc 1 3150 0 is_stmt 1
 3197 0036 9A42     		cmp	r2, r3
 3198 0038 06D2     		bcs	.L282
3153:FreeRTOS\source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3199              		.loc 1 3153 0
 3200 003a 9B1A     		subs	r3, r3, r2
 3201 003c 2360     		str	r3, [r4]
3154:FreeRTOS\source/tasks.c **** 			xReturn = pdFALSE;
 3202              		.loc 1 3154 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 153


 3203 003e 2800     		movs	r0, r5
 3204              	.LVL291:
 3205 0040 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3206              	.LVL292:
3155:FreeRTOS\source/tasks.c **** 		}
 3207              		.loc 1 3155 0
 3208 0044 0024     		movs	r4, #0
 3209              	.LVL293:
 3210 0046 06E0     		b	.L280
 3211              	.LVL294:
 3212              	.L282:
3159:FreeRTOS\source/tasks.c **** 			xReturn = pdTRUE;
 3213              		.loc 1 3159 0
 3214 0048 0023     		movs	r3, #0
 3215 004a 2360     		str	r3, [r4]
 3216              	.LVL295:
3160:FreeRTOS\source/tasks.c **** 		}
 3217              		.loc 1 3160 0
 3218 004c 0124     		movs	r4, #1
 3219              	.LVL296:
 3220 004e 02E0     		b	.L280
 3221              	.LVL297:
 3222              	.L283:
3136:FreeRTOS\source/tasks.c **** 			}
 3223              		.loc 1 3136 0
 3224 0050 0024     		movs	r4, #0
 3225              	.LVL298:
 3226 0052 00E0     		b	.L280
 3227              	.LVL299:
 3228              	.L284:
3148:FreeRTOS\source/tasks.c **** 		}
 3229              		.loc 1 3148 0
 3230 0054 0124     		movs	r4, #1
 3231              	.LVL300:
 3232              	.L280:
 3233              	.LBE13:
3163:FreeRTOS\source/tasks.c **** 
 3234              		.loc 1 3163 0
 3235 0056 FFF7FEFF 		bl	vPortExitCritical
 3236              	.LVL301:
3166:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 3237              		.loc 1 3166 0
 3238 005a 2000     		movs	r0, r4
 3239              		@ sp needed
 3240              	.LVL302:
 3241              	.LVL303:
 3242 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3243              	.L286:
 3244 005e C046     		.align	2
 3245              	.L285:
 3246 0060 80000000 		.word	.LANCHOR1
 3247              		.cfi_endproc
 3248              	.LFE61:
 3249              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3250              		.section	.text.vTaskMissedYield,"ax",%progbits
 3251              		.align	2
 3252              		.global	vTaskMissedYield
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 154


 3253              		.code	16
 3254              		.thumb_func
 3255              		.type	vTaskMissedYield, %function
 3256              	vTaskMissedYield:
 3257              	.LFB62:
3170:FreeRTOS\source/tasks.c **** 	xYieldPending = pdTRUE;
 3258              		.loc 1 3170 0
 3259              		.cfi_startproc
 3260              		@ args = 0, pretend = 0, frame = 0
 3261              		@ frame_needed = 0, uses_anonymous_args = 0
 3262              		@ link register save eliminated.
3171:FreeRTOS\source/tasks.c **** }
 3263              		.loc 1 3171 0
 3264 0000 0122     		movs	r2, #1
 3265 0002 014B     		ldr	r3, .L288
 3266 0004 1A60     		str	r2, [r3]
3172:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 3267              		.loc 1 3172 0
 3268              		@ sp needed
 3269 0006 7047     		bx	lr
 3270              	.L289:
 3271              		.align	2
 3272              	.L288:
 3273 0008 00010000 		.word	.LANCHOR2
 3274              		.cfi_endproc
 3275              	.LFE62:
 3276              		.size	vTaskMissedYield, .-vTaskMissedYield
 3277              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 3278              		.align	2
 3279              		.global	vTaskSetThreadLocalStoragePointer
 3280              		.code	16
 3281              		.thumb_func
 3282              		.type	vTaskSetThreadLocalStoragePointer, %function
 3283              	vTaskSetThreadLocalStoragePointer:
 3284              	.LFB64:
3384:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
 3285              		.loc 1 3384 0
 3286              		.cfi_startproc
 3287              		@ args = 0, pretend = 0, frame = 0
 3288              		@ frame_needed = 0, uses_anonymous_args = 0
 3289              		@ link register save eliminated.
 3290              	.LVL304:
3387:FreeRTOS\source/tasks.c **** 		{
 3291              		.loc 1 3387 0
 3292 0000 0429     		cmp	r1, #4
 3293 0002 07DC     		bgt	.L290
3389:FreeRTOS\source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 3294              		.loc 1 3389 0
 3295 0004 0028     		cmp	r0, #0
 3296 0006 01D1     		bne	.L292
3389:FreeRTOS\source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 3297              		.loc 1 3389 0 is_stmt 0 discriminator 1
 3298 0008 034B     		ldr	r3, .L293
 3299 000a 986D     		ldr	r0, [r3, #88]
 3300              	.LVL305:
 3301              	.L292:
3390:FreeRTOS\source/tasks.c **** 		}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 155


 3302              		.loc 1 3390 0 is_stmt 1 discriminator 4
 3303 000c 1231     		adds	r1, r1, #18
 3304              	.LVL306:
 3305 000e 8900     		lsls	r1, r1, #2
 3306              	.LVL307:
 3307 0010 4018     		adds	r0, r0, r1
 3308              	.LVL308:
 3309 0012 4260     		str	r2, [r0, #4]
 3310              	.L290:
3392:FreeRTOS\source/tasks.c **** 
 3311              		.loc 1 3392 0
 3312              		@ sp needed
 3313 0014 7047     		bx	lr
 3314              	.L294:
 3315 0016 C046     		.align	2
 3316              	.L293:
 3317 0018 80000000 		.word	.LANCHOR1
 3318              		.cfi_endproc
 3319              	.LFE64:
 3320              		.size	vTaskSetThreadLocalStoragePointer, .-vTaskSetThreadLocalStoragePointer
 3321              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 3322              		.align	2
 3323              		.global	pvTaskGetThreadLocalStoragePointer
 3324              		.code	16
 3325              		.thumb_func
 3326              		.type	pvTaskGetThreadLocalStoragePointer, %function
 3327              	pvTaskGetThreadLocalStoragePointer:
 3328              	.LFB65:
3400:FreeRTOS\source/tasks.c **** 	void *pvReturn = NULL;
 3329              		.loc 1 3400 0
 3330              		.cfi_startproc
 3331              		@ args = 0, pretend = 0, frame = 0
 3332              		@ frame_needed = 0, uses_anonymous_args = 0
 3333              		@ link register save eliminated.
 3334              	.LVL309:
3404:FreeRTOS\source/tasks.c **** 		{
 3335              		.loc 1 3404 0
 3336 0000 0429     		cmp	r1, #4
 3337 0002 08DC     		bgt	.L298
3406:FreeRTOS\source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3338              		.loc 1 3406 0
 3339 0004 0028     		cmp	r0, #0
 3340 0006 01D1     		bne	.L297
3406:FreeRTOS\source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3341              		.loc 1 3406 0 is_stmt 0 discriminator 1
 3342 0008 044B     		ldr	r3, .L299
 3343 000a 986D     		ldr	r0, [r3, #88]
 3344              	.LVL310:
 3345              	.L297:
3407:FreeRTOS\source/tasks.c **** 		}
 3346              		.loc 1 3407 0 is_stmt 1 discriminator 4
 3347 000c 1231     		adds	r1, r1, #18
 3348              	.LVL311:
 3349 000e 8900     		lsls	r1, r1, #2
 3350              	.LVL312:
 3351 0010 4018     		adds	r0, r0, r1
 3352              	.LVL313:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 156


 3353 0012 4068     		ldr	r0, [r0, #4]
 3354              	.LVL314:
 3355 0014 00E0     		b	.L296
 3356              	.LVL315:
 3357              	.L298:
3411:FreeRTOS\source/tasks.c **** 		}
 3358              		.loc 1 3411 0
 3359 0016 0020     		movs	r0, #0
 3360              	.LVL316:
 3361              	.L296:
3415:FreeRTOS\source/tasks.c **** 
 3362              		.loc 1 3415 0
 3363              		@ sp needed
 3364 0018 7047     		bx	lr
 3365              	.L300:
 3366 001a C046     		.align	2
 3367              	.L299:
 3368 001c 80000000 		.word	.LANCHOR1
 3369              		.cfi_endproc
 3370              	.LFE65:
 3371              		.size	pvTaskGetThreadLocalStoragePointer, .-pvTaskGetThreadLocalStoragePointer
 3372              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3373              		.align	2
 3374              		.global	uxTaskGetStackHighWaterMark
 3375              		.code	16
 3376              		.thumb_func
 3377              		.type	uxTaskGetStackHighWaterMark, %function
 3378              	uxTaskGetStackHighWaterMark:
 3379              	.LFB69:
3649:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
 3380              		.loc 1 3649 0
 3381              		.cfi_startproc
 3382              		@ args = 0, pretend = 0, frame = 0
 3383              		@ frame_needed = 0, uses_anonymous_args = 0
 3384              	.LVL317:
 3385 0000 10B5     		push	{r4, lr}
 3386              		.cfi_def_cfa_offset 8
 3387              		.cfi_offset 4, -8
 3388              		.cfi_offset 14, -4
3654:FreeRTOS\source/tasks.c **** 
 3389              		.loc 1 3654 0
 3390 0002 0028     		cmp	r0, #0
 3391 0004 01D1     		bne	.L302
3654:FreeRTOS\source/tasks.c **** 
 3392              		.loc 1 3654 0 is_stmt 0 discriminator 1
 3393 0006 034B     		ldr	r3, .L303
 3394 0008 986D     		ldr	r0, [r3, #88]
 3395              	.LVL318:
 3396              	.L302:
3658:FreeRTOS\source/tasks.c **** 		}
 3397              		.loc 1 3658 0 is_stmt 1 discriminator 4
 3398 000a 006B     		ldr	r0, [r0, #48]
 3399              	.LVL319:
3666:FreeRTOS\source/tasks.c **** 
 3400              		.loc 1 3666 0 discriminator 4
 3401 000c FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3402              	.LVL320:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 157


3669:FreeRTOS\source/tasks.c **** 
 3403              		.loc 1 3669 0 discriminator 4
 3404              		@ sp needed
 3405 0010 10BD     		pop	{r4, pc}
 3406              	.L304:
 3407 0012 C046     		.align	2
 3408              	.L303:
 3409 0014 80000000 		.word	.LANCHOR1
 3410              		.cfi_endproc
 3411              	.LFE69:
 3412              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3413              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3414              		.align	2
 3415              		.global	xTaskGetCurrentTaskHandle
 3416              		.code	16
 3417              		.thumb_func
 3418              		.type	xTaskGetCurrentTaskHandle, %function
 3419              	xTaskGetCurrentTaskHandle:
 3420              	.LFB72:
3757:FreeRTOS\source/tasks.c **** 	TaskHandle_t xReturn;
 3421              		.loc 1 3757 0
 3422              		.cfi_startproc
 3423              		@ args = 0, pretend = 0, frame = 0
 3424              		@ frame_needed = 0, uses_anonymous_args = 0
 3425              		@ link register save eliminated.
3763:FreeRTOS\source/tasks.c **** 
 3426              		.loc 1 3763 0
 3427 0000 014B     		ldr	r3, .L306
 3428 0002 986D     		ldr	r0, [r3, #88]
 3429              	.LVL321:
3766:FreeRTOS\source/tasks.c **** 
 3430              		.loc 1 3766 0
 3431              		@ sp needed
 3432 0004 7047     		bx	lr
 3433              	.L307:
 3434 0006 C046     		.align	2
 3435              	.L306:
 3436 0008 80000000 		.word	.LANCHOR1
 3437              		.cfi_endproc
 3438              	.LFE72:
 3439              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3440              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3441              		.align	2
 3442              		.global	xTaskGetSchedulerState
 3443              		.code	16
 3444              		.thumb_func
 3445              		.type	xTaskGetSchedulerState, %function
 3446              	xTaskGetSchedulerState:
 3447              	.LFB73:
3774:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn;
 3448              		.loc 1 3774 0
 3449              		.cfi_startproc
 3450              		@ args = 0, pretend = 0, frame = 0
 3451              		@ frame_needed = 0, uses_anonymous_args = 0
 3452              		@ link register save eliminated.
3777:FreeRTOS\source/tasks.c **** 		{
 3453              		.loc 1 3777 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 158


 3454 0000 064B     		ldr	r3, .L312
 3455 0002 DB6D     		ldr	r3, [r3, #92]
 3456 0004 002B     		cmp	r3, #0
 3457 0006 05D0     		beq	.L310
3783:FreeRTOS\source/tasks.c **** 			{
 3458              		.loc 1 3783 0
 3459 0008 044B     		ldr	r3, .L312
 3460 000a 1B6F     		ldr	r3, [r3, #112]
 3461 000c 002B     		cmp	r3, #0
 3462 000e 03D1     		bne	.L311
3785:FreeRTOS\source/tasks.c **** 			}
 3463              		.loc 1 3785 0
 3464 0010 0220     		movs	r0, #2
 3465 0012 02E0     		b	.L309
 3466              	.L310:
3779:FreeRTOS\source/tasks.c **** 		}
 3467              		.loc 1 3779 0
 3468 0014 0120     		movs	r0, #1
 3469 0016 00E0     		b	.L309
 3470              	.L311:
3789:FreeRTOS\source/tasks.c **** 			}
 3471              		.loc 1 3789 0
 3472 0018 0020     		movs	r0, #0
 3473              	.L309:
 3474              	.LVL322:
3794:FreeRTOS\source/tasks.c **** 
 3475              		.loc 1 3794 0
 3476              		@ sp needed
 3477 001a 7047     		bx	lr
 3478              	.L313:
 3479              		.align	2
 3480              	.L312:
 3481 001c 80000000 		.word	.LANCHOR1
 3482              		.cfi_endproc
 3483              	.LFE73:
 3484              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 3485              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3486              		.align	2
 3487              		.global	xTaskPriorityInherit
 3488              		.code	16
 3489              		.thumb_func
 3490              		.type	xTaskPriorityInherit, %function
 3491              	xTaskPriorityInherit:
 3492              	.LFB74:
3802:FreeRTOS\source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3493              		.loc 1 3802 0
 3494              		.cfi_startproc
 3495              		@ args = 0, pretend = 0, frame = 0
 3496              		@ frame_needed = 0, uses_anonymous_args = 0
 3497              	.LVL323:
 3498 0000 70B5     		push	{r4, r5, r6, lr}
 3499              		.cfi_def_cfa_offset 16
 3500              		.cfi_offset 4, -16
 3501              		.cfi_offset 5, -12
 3502              		.cfi_offset 6, -8
 3503              		.cfi_offset 14, -4
 3504 0002 041E     		subs	r4, r0, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 159


 3505              	.LVL324:
3809:FreeRTOS\source/tasks.c **** 		{
 3506              		.loc 1 3809 0
 3507 0004 42D0     		beq	.L321
3814:FreeRTOS\source/tasks.c **** 			{
 3508              		.loc 1 3814 0
 3509 0006 C36A     		ldr	r3, [r0, #44]
 3510 0008 224A     		ldr	r2, .L324
 3511 000a 926D     		ldr	r2, [r2, #88]
 3512 000c D26A     		ldr	r2, [r2, #44]
 3513 000e 9342     		cmp	r3, r2
 3514 0010 34D2     		bcs	.L316
3819:FreeRTOS\source/tasks.c **** 				{
 3515              		.loc 1 3819 0
 3516 0012 8269     		ldr	r2, [r0, #24]
 3517 0014 002A     		cmp	r2, #0
 3518 0016 05DB     		blt	.L317
3821:FreeRTOS\source/tasks.c **** 				}
 3519              		.loc 1 3821 0
 3520 0018 1E4A     		ldr	r2, .L324
 3521 001a 926D     		ldr	r2, [r2, #88]
 3522 001c D16A     		ldr	r1, [r2, #44]
 3523 001e 0522     		movs	r2, #5
 3524 0020 521A     		subs	r2, r2, r1
 3525 0022 8261     		str	r2, [r0, #24]
 3526              	.L317:
3830:FreeRTOS\source/tasks.c **** 				{
 3527              		.loc 1 3830 0
 3528 0024 9A00     		lsls	r2, r3, #2
 3529 0026 D318     		adds	r3, r2, r3
 3530 0028 9A00     		lsls	r2, r3, #2
 3531 002a 1B4B     		ldr	r3, .L324+4
 3532 002c 3033     		adds	r3, r3, #48
 3533 002e 9A18     		adds	r2, r3, r2
 3534 0030 6369     		ldr	r3, [r4, #20]
 3535 0032 9342     		cmp	r3, r2
 3536 0034 01D1     		bne	.L322
 3537 0036 0123     		movs	r3, #1
 3538 0038 00E0     		b	.L318
 3539              	.L322:
 3540 003a 0023     		movs	r3, #0
 3541              	.L318:
3830:FreeRTOS\source/tasks.c **** 				{
 3542              		.loc 1 3830 0 is_stmt 0 discriminator 4
 3543 003c 002B     		cmp	r3, #0
 3544 003e 17D0     		beq	.L319
3832:FreeRTOS\source/tasks.c **** 					{
 3545              		.loc 1 3832 0 is_stmt 1
 3546 0040 251D     		adds	r5, r4, #4
 3547 0042 2800     		movs	r0, r5
 3548              	.LVL325:
 3549 0044 FFF7FEFF 		bl	uxListRemove
 3550              	.LVL326:
3842:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3551              		.loc 1 3842 0
 3552 0048 124A     		ldr	r2, .L324
 3553 004a 936D     		ldr	r3, [r2, #88]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 160


 3554 004c DB6A     		ldr	r3, [r3, #44]
 3555 004e E362     		str	r3, [r4, #44]
3843:FreeRTOS\source/tasks.c **** 				}
 3556              		.loc 1 3843 0
 3557 0050 526E     		ldr	r2, [r2, #100]
 3558 0052 9342     		cmp	r3, r2
 3559 0054 01D9     		bls	.L320
3843:FreeRTOS\source/tasks.c **** 				}
 3560              		.loc 1 3843 0 is_stmt 0 discriminator 1
 3561 0056 0F4A     		ldr	r2, .L324
 3562 0058 5366     		str	r3, [r2, #100]
 3563              	.L320:
3843:FreeRTOS\source/tasks.c **** 				}
 3564              		.loc 1 3843 0 discriminator 3
 3565 005a 9A00     		lsls	r2, r3, #2
 3566 005c D318     		adds	r3, r2, r3
 3567 005e 9A00     		lsls	r2, r3, #2
 3568 0060 0D48     		ldr	r0, .L324+4
 3569 0062 3030     		adds	r0, r0, #48
 3570 0064 8018     		adds	r0, r0, r2
 3571 0066 2900     		movs	r1, r5
 3572 0068 FFF7FEFF 		bl	vListInsertEnd
 3573              	.LVL327:
3854:FreeRTOS\source/tasks.c **** 			}
 3574              		.loc 1 3854 0 is_stmt 1 discriminator 3
 3575 006c 0120     		movs	r0, #1
 3576 006e 10E0     		b	.L315
 3577              	.LVL328:
 3578              	.L319:
3848:FreeRTOS\source/tasks.c **** 				}
 3579              		.loc 1 3848 0
 3580 0070 084B     		ldr	r3, .L324
 3581 0072 9B6D     		ldr	r3, [r3, #88]
 3582 0074 DB6A     		ldr	r3, [r3, #44]
 3583 0076 E362     		str	r3, [r4, #44]
3854:FreeRTOS\source/tasks.c **** 			}
 3584              		.loc 1 3854 0
 3585 0078 0120     		movs	r0, #1
 3586              	.LVL329:
 3587 007a 0AE0     		b	.L315
 3588              	.LVL330:
 3589              	.L316:
3858:FreeRTOS\source/tasks.c **** 				{
 3590              		.loc 1 3858 0
 3591 007c 426C     		ldr	r2, [r0, #68]
 3592 007e 054B     		ldr	r3, .L324
 3593 0080 9B6D     		ldr	r3, [r3, #88]
 3594 0082 DB6A     		ldr	r3, [r3, #44]
 3595 0084 9A42     		cmp	r2, r3
 3596 0086 03D3     		bcc	.L323
3804:FreeRTOS\source/tasks.c **** 
 3597              		.loc 1 3804 0
 3598 0088 0020     		movs	r0, #0
 3599              	.LVL331:
 3600 008a 02E0     		b	.L315
 3601              	.LVL332:
 3602              	.L321:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 161


 3603 008c 0020     		movs	r0, #0
 3604              	.LVL333:
 3605 008e 00E0     		b	.L315
 3606              	.LVL334:
 3607              	.L323:
3867:FreeRTOS\source/tasks.c **** 				}
 3608              		.loc 1 3867 0
 3609 0090 0120     		movs	r0, #1
 3610              	.LVL335:
 3611              	.L315:
3881:FreeRTOS\source/tasks.c **** 
 3612              		.loc 1 3881 0
 3613              		@ sp needed
 3614              	.LVL336:
 3615 0092 70BD     		pop	{r4, r5, r6, pc}
 3616              	.L325:
 3617              		.align	2
 3618              	.L324:
 3619 0094 80000000 		.word	.LANCHOR1
 3620 0098 00000000 		.word	.LANCHOR0
 3621              		.cfi_endproc
 3622              	.LFE74:
 3623              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3624              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3625              		.align	2
 3626              		.global	xTaskPriorityDisinherit
 3627              		.code	16
 3628              		.thumb_func
 3629              		.type	xTaskPriorityDisinherit, %function
 3630              	xTaskPriorityDisinherit:
 3631              	.LFB75:
3889:FreeRTOS\source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3632              		.loc 1 3889 0
 3633              		.cfi_startproc
 3634              		@ args = 0, pretend = 0, frame = 0
 3635              		@ frame_needed = 0, uses_anonymous_args = 0
 3636              	.LVL337:
 3637 0000 70B5     		push	{r4, r5, r6, lr}
 3638              		.cfi_def_cfa_offset 16
 3639              		.cfi_offset 4, -16
 3640              		.cfi_offset 5, -12
 3641              		.cfi_offset 6, -8
 3642              		.cfi_offset 14, -4
 3643 0002 041E     		subs	r4, r0, #0
 3644              	.LVL338:
3893:FreeRTOS\source/tasks.c **** 		{
 3645              		.loc 1 3893 0
 3646 0004 2CD0     		beq	.L333
3899:FreeRTOS\source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 3647              		.loc 1 3899 0
 3648 0006 194B     		ldr	r3, .L336
 3649 0008 9B6D     		ldr	r3, [r3, #88]
 3650 000a 9842     		cmp	r0, r3
 3651 000c 01D0     		beq	.L328
3899:FreeRTOS\source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 3652              		.loc 1 3899 0 is_stmt 0 discriminator 1
 3653              		.syntax divided
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 162


 3654              	@ 3899 "FreeRTOS\source\tasks.c" 1
 3655 000e 72B6     		 cpsid i 
 3656              	@ 0 "" 2
 3657              		.thumb
 3658              		.syntax unified
 3659              	.L329:
 3660 0010 FEE7     		b	.L329
 3661              	.L328:
3900:FreeRTOS\source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3662              		.loc 1 3900 0 is_stmt 1
 3663 0012 836C     		ldr	r3, [r0, #72]
 3664 0014 002B     		cmp	r3, #0
 3665 0016 01D1     		bne	.L330
3900:FreeRTOS\source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3666              		.loc 1 3900 0 is_stmt 0 discriminator 1
 3667              		.syntax divided
 3668              	@ 3900 "FreeRTOS\source\tasks.c" 1
 3669 0018 72B6     		 cpsid i 
 3670              	@ 0 "" 2
 3671              		.thumb
 3672              		.syntax unified
 3673              	.L331:
 3674 001a FEE7     		b	.L331
 3675              	.L330:
3901:FreeRTOS\source/tasks.c **** 
 3676              		.loc 1 3901 0 is_stmt 1
 3677 001c 013B     		subs	r3, r3, #1
 3678 001e 8364     		str	r3, [r0, #72]
3905:FreeRTOS\source/tasks.c **** 			{
 3679              		.loc 1 3905 0
 3680 0020 C26A     		ldr	r2, [r0, #44]
 3681 0022 416C     		ldr	r1, [r0, #68]
 3682 0024 8A42     		cmp	r2, r1
 3683 0026 1DD0     		beq	.L334
3908:FreeRTOS\source/tasks.c **** 				{
 3684              		.loc 1 3908 0
 3685 0028 002B     		cmp	r3, #0
 3686 002a 1DD1     		bne	.L335
3915:FreeRTOS\source/tasks.c **** 					{
 3687              		.loc 1 3915 0
 3688 002c 051D     		adds	r5, r0, #4
 3689 002e 2800     		movs	r0, r5
 3690              	.LVL339:
 3691 0030 FFF7FEFF 		bl	uxListRemove
 3692              	.LVL340:
3927:FreeRTOS\source/tasks.c **** 
 3693              		.loc 1 3927 0
 3694 0034 636C     		ldr	r3, [r4, #68]
 3695 0036 E362     		str	r3, [r4, #44]
3932:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3696              		.loc 1 3932 0
 3697 0038 0522     		movs	r2, #5
 3698 003a D21A     		subs	r2, r2, r3
 3699 003c A261     		str	r2, [r4, #24]
3933:FreeRTOS\source/tasks.c **** 
 3700              		.loc 1 3933 0
 3701 003e 0B4A     		ldr	r2, .L336
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 163


 3702 0040 526E     		ldr	r2, [r2, #100]
 3703 0042 9342     		cmp	r3, r2
 3704 0044 01D9     		bls	.L332
3933:FreeRTOS\source/tasks.c **** 
 3705              		.loc 1 3933 0 is_stmt 0 discriminator 1
 3706 0046 094A     		ldr	r2, .L336
 3707 0048 5366     		str	r3, [r2, #100]
 3708              	.L332:
3933:FreeRTOS\source/tasks.c **** 
 3709              		.loc 1 3933 0 discriminator 3
 3710 004a 9A00     		lsls	r2, r3, #2
 3711 004c D318     		adds	r3, r2, r3
 3712 004e 9A00     		lsls	r2, r3, #2
 3713 0050 0748     		ldr	r0, .L336+4
 3714 0052 3030     		adds	r0, r0, #48
 3715 0054 8018     		adds	r0, r0, r2
 3716 0056 2900     		movs	r1, r5
 3717 0058 FFF7FEFF 		bl	vListInsertEnd
 3718              	.LVL341:
3943:FreeRTOS\source/tasks.c **** 				}
 3719              		.loc 1 3943 0 is_stmt 1 discriminator 3
 3720 005c 0120     		movs	r0, #1
 3721 005e 04E0     		b	.L327
 3722              	.LVL342:
 3723              	.L333:
3891:FreeRTOS\source/tasks.c **** 
 3724              		.loc 1 3891 0
 3725 0060 0020     		movs	r0, #0
 3726              	.LVL343:
 3727 0062 02E0     		b	.L327
 3728              	.LVL344:
 3729              	.L334:
 3730 0064 0020     		movs	r0, #0
 3731              	.LVL345:
 3732 0066 00E0     		b	.L327
 3733              	.LVL346:
 3734              	.L335:
 3735 0068 0020     		movs	r0, #0
 3736              	.LVL347:
 3737              	.L327:
3961:FreeRTOS\source/tasks.c **** 
 3738              		.loc 1 3961 0
 3739              		@ sp needed
 3740              	.LVL348:
 3741 006a 70BD     		pop	{r4, r5, r6, pc}
 3742              	.L337:
 3743              		.align	2
 3744              	.L336:
 3745 006c 80000000 		.word	.LANCHOR1
 3746 0070 00000000 		.word	.LANCHOR0
 3747              		.cfi_endproc
 3748              	.LFE75:
 3749              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3750              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3751              		.align	2
 3752              		.global	vTaskPriorityDisinheritAfterTimeout
 3753              		.code	16
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 164


 3754              		.thumb_func
 3755              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 3756              	vTaskPriorityDisinheritAfterTimeout:
 3757              	.LFB76:
3969:FreeRTOS\source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3758              		.loc 1 3969 0
 3759              		.cfi_startproc
 3760              		@ args = 0, pretend = 0, frame = 0
 3761              		@ frame_needed = 0, uses_anonymous_args = 0
 3762              	.LVL349:
 3763 0000 70B5     		push	{r4, r5, r6, lr}
 3764              		.cfi_def_cfa_offset 16
 3765              		.cfi_offset 4, -16
 3766              		.cfi_offset 5, -12
 3767              		.cfi_offset 6, -8
 3768              		.cfi_offset 14, -4
 3769 0002 041E     		subs	r4, r0, #0
 3770              	.LVL350:
3974:FreeRTOS\source/tasks.c **** 		{
 3771              		.loc 1 3974 0
 3772 0004 3CD0     		beq	.L338
3978:FreeRTOS\source/tasks.c **** 
 3773              		.loc 1 3978 0
 3774 0006 806C     		ldr	r0, [r0, #72]
 3775              	.LVL351:
 3776 0008 0028     		cmp	r0, #0
 3777 000a 01D1     		bne	.L340
3978:FreeRTOS\source/tasks.c **** 
 3778              		.loc 1 3978 0 is_stmt 0 discriminator 1
 3779              		.syntax divided
 3780              	@ 3978 "FreeRTOS\source\tasks.c" 1
 3781 000c 72B6     		 cpsid i 
 3782              	@ 0 "" 2
 3783              		.thumb
 3784              		.syntax unified
 3785              	.L341:
 3786 000e FEE7     		b	.L341
 3787              	.L340:
3984:FreeRTOS\source/tasks.c **** 			{
 3788              		.loc 1 3984 0 is_stmt 1
 3789 0010 626C     		ldr	r2, [r4, #68]
 3790 0012 8A42     		cmp	r2, r1
 3791 0014 00D2     		bcs	.L342
3986:FreeRTOS\source/tasks.c **** 			}
 3792              		.loc 1 3986 0
 3793 0016 0A00     		movs	r2, r1
 3794              	.L342:
 3795              	.LVL352:
3994:FreeRTOS\source/tasks.c **** 			{
 3796              		.loc 1 3994 0
 3797 0018 E36A     		ldr	r3, [r4, #44]
 3798 001a 9A42     		cmp	r2, r3
 3799 001c 30D0     		beq	.L338
4000:FreeRTOS\source/tasks.c **** 				{
 3800              		.loc 1 4000 0
 3801 001e 0128     		cmp	r0, #1
 3802 0020 2ED1     		bne	.L338
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 165


4005:FreeRTOS\source/tasks.c **** 
 3803              		.loc 1 4005 0
 3804 0022 1849     		ldr	r1, .L349
 3805              	.LVL353:
 3806 0024 896D     		ldr	r1, [r1, #88]
 3807 0026 8C42     		cmp	r4, r1
 3808 0028 01D1     		bne	.L343
4005:FreeRTOS\source/tasks.c **** 
 3809              		.loc 1 4005 0 is_stmt 0 discriminator 1
 3810              		.syntax divided
 3811              	@ 4005 "FreeRTOS\source\tasks.c" 1
 3812 002a 72B6     		 cpsid i 
 3813              	@ 0 "" 2
 3814              		.thumb
 3815              		.syntax unified
 3816              	.L344:
 3817 002c FEE7     		b	.L344
 3818              	.L343:
 3819              	.LVL354:
4012:FreeRTOS\source/tasks.c **** 
 3820              		.loc 1 4012 0 is_stmt 1
 3821 002e E262     		str	r2, [r4, #44]
4016:FreeRTOS\source/tasks.c **** 					{
 3822              		.loc 1 4016 0
 3823 0030 A169     		ldr	r1, [r4, #24]
 3824 0032 0029     		cmp	r1, #0
 3825 0034 02DB     		blt	.L345
4018:FreeRTOS\source/tasks.c **** 					}
 3826              		.loc 1 4018 0
 3827 0036 0521     		movs	r1, #5
 3828 0038 8A1A     		subs	r2, r1, r2
 3829              	.LVL355:
 3830 003a A261     		str	r2, [r4, #24]
 3831              	.L345:
4031:FreeRTOS\source/tasks.c **** 					{
 3832              		.loc 1 4031 0
 3833 003c 9A00     		lsls	r2, r3, #2
 3834 003e D318     		adds	r3, r2, r3
 3835              	.LVL356:
 3836 0040 9A00     		lsls	r2, r3, #2
 3837 0042 114B     		ldr	r3, .L349+4
 3838 0044 3033     		adds	r3, r3, #48
 3839 0046 9A18     		adds	r2, r3, r2
 3840 0048 6369     		ldr	r3, [r4, #20]
 3841 004a 9342     		cmp	r3, r2
 3842 004c 01D1     		bne	.L348
 3843 004e 0123     		movs	r3, #1
 3844 0050 00E0     		b	.L346
 3845              	.L348:
 3846 0052 0023     		movs	r3, #0
 3847              	.L346:
4031:FreeRTOS\source/tasks.c **** 					{
 3848              		.loc 1 4031 0 is_stmt 0 discriminator 4
 3849 0054 002B     		cmp	r3, #0
 3850 0056 13D0     		beq	.L338
4033:FreeRTOS\source/tasks.c **** 						{
 3851              		.loc 1 4033 0 is_stmt 1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 166


 3852 0058 251D     		adds	r5, r4, #4
 3853 005a 2800     		movs	r0, r5
 3854 005c FFF7FEFF 		bl	uxListRemove
 3855              	.LVL357:
4042:FreeRTOS\source/tasks.c **** 					}
 3856              		.loc 1 4042 0
 3857 0060 E36A     		ldr	r3, [r4, #44]
 3858 0062 084A     		ldr	r2, .L349
 3859 0064 526E     		ldr	r2, [r2, #100]
 3860 0066 9342     		cmp	r3, r2
 3861 0068 01D9     		bls	.L347
4042:FreeRTOS\source/tasks.c **** 					}
 3862              		.loc 1 4042 0 is_stmt 0 discriminator 1
 3863 006a 064A     		ldr	r2, .L349
 3864 006c 5366     		str	r3, [r2, #100]
 3865              	.L347:
4042:FreeRTOS\source/tasks.c **** 					}
 3866              		.loc 1 4042 0 discriminator 3
 3867 006e 9A00     		lsls	r2, r3, #2
 3868 0070 D318     		adds	r3, r2, r3
 3869 0072 9A00     		lsls	r2, r3, #2
 3870 0074 0448     		ldr	r0, .L349+4
 3871 0076 3030     		adds	r0, r0, #48
 3872 0078 8018     		adds	r0, r0, r2
 3873 007a 2900     		movs	r1, r5
 3874 007c FFF7FEFF 		bl	vListInsertEnd
 3875              	.LVL358:
 3876              	.L338:
4063:FreeRTOS\source/tasks.c **** 
 3877              		.loc 1 4063 0 is_stmt 1
 3878              		@ sp needed
 3879              	.LVL359:
 3880 0080 70BD     		pop	{r4, r5, r6, pc}
 3881              	.L350:
 3882 0082 C046     		.align	2
 3883              	.L349:
 3884 0084 80000000 		.word	.LANCHOR1
 3885 0088 00000000 		.word	.LANCHOR0
 3886              		.cfi_endproc
 3887              	.LFE76:
 3888              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 3889              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3890              		.align	2
 3891              		.global	uxTaskResetEventItemValue
 3892              		.code	16
 3893              		.thumb_func
 3894              		.type	uxTaskResetEventItemValue, %function
 3895              	uxTaskResetEventItemValue:
 3896              	.LFB77:
4383:FreeRTOS\source/tasks.c **** TickType_t uxReturn;
 3897              		.loc 1 4383 0
 3898              		.cfi_startproc
 3899              		@ args = 0, pretend = 0, frame = 0
 3900              		@ frame_needed = 0, uses_anonymous_args = 0
 3901              		@ link register save eliminated.
4386:FreeRTOS\source/tasks.c **** 
 3902              		.loc 1 4386 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 167


 3903 0000 044B     		ldr	r3, .L352
 3904 0002 9A6D     		ldr	r2, [r3, #88]
 3905 0004 9069     		ldr	r0, [r2, #24]
 3906              	.LVL360:
4390:FreeRTOS\source/tasks.c **** 
 3907              		.loc 1 4390 0
 3908 0006 9A6D     		ldr	r2, [r3, #88]
 3909 0008 9B6D     		ldr	r3, [r3, #88]
 3910 000a D96A     		ldr	r1, [r3, #44]
 3911 000c 0523     		movs	r3, #5
 3912 000e 5B1A     		subs	r3, r3, r1
 3913 0010 9361     		str	r3, [r2, #24]
4393:FreeRTOS\source/tasks.c **** /*-----------------------------------------------------------*/
 3914              		.loc 1 4393 0
 3915              		@ sp needed
 3916 0012 7047     		bx	lr
 3917              	.L353:
 3918              		.align	2
 3919              	.L352:
 3920 0014 80000000 		.word	.LANCHOR1
 3921              		.cfi_endproc
 3922              	.LFE77:
 3923              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3924              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3925              		.align	2
 3926              		.global	pvTaskIncrementMutexHeldCount
 3927              		.code	16
 3928              		.thumb_func
 3929              		.type	pvTaskIncrementMutexHeldCount, %function
 3930              	pvTaskIncrementMutexHeldCount:
 3931              	.LFB78:
4399:FreeRTOS\source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3932              		.loc 1 4399 0
 3933              		.cfi_startproc
 3934              		@ args = 0, pretend = 0, frame = 0
 3935              		@ frame_needed = 0, uses_anonymous_args = 0
 3936              		@ link register save eliminated.
4402:FreeRTOS\source/tasks.c **** 		{
 3937              		.loc 1 4402 0
 3938 0000 054B     		ldr	r3, .L356
 3939 0002 9B6D     		ldr	r3, [r3, #88]
 3940 0004 002B     		cmp	r3, #0
 3941 0006 04D0     		beq	.L355
4404:FreeRTOS\source/tasks.c **** 		}
 3942              		.loc 1 4404 0
 3943 0008 034B     		ldr	r3, .L356
 3944 000a 9A6D     		ldr	r2, [r3, #88]
 3945 000c 936C     		ldr	r3, [r2, #72]
 3946 000e 0133     		adds	r3, r3, #1
 3947 0010 9364     		str	r3, [r2, #72]
 3948              	.L355:
4407:FreeRTOS\source/tasks.c **** 	}
 3949              		.loc 1 4407 0
 3950 0012 014B     		ldr	r3, .L356
 3951 0014 986D     		ldr	r0, [r3, #88]
4408:FreeRTOS\source/tasks.c **** 
 3952              		.loc 1 4408 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 168


 3953              		@ sp needed
 3954 0016 7047     		bx	lr
 3955              	.L357:
 3956              		.align	2
 3957              	.L356:
 3958 0018 80000000 		.word	.LANCHOR1
 3959              		.cfi_endproc
 3960              	.LFE78:
 3961              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3962              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3963              		.align	2
 3964              		.global	ulTaskNotifyTake
 3965              		.code	16
 3966              		.thumb_func
 3967              		.type	ulTaskNotifyTake, %function
 3968              	ulTaskNotifyTake:
 3969              	.LFB79:
4416:FreeRTOS\source/tasks.c **** 	uint32_t ulReturn;
 3970              		.loc 1 4416 0
 3971              		.cfi_startproc
 3972              		@ args = 0, pretend = 0, frame = 0
 3973              		@ frame_needed = 0, uses_anonymous_args = 0
 3974              	.LVL361:
 3975 0000 70B5     		push	{r4, r5, r6, lr}
 3976              		.cfi_def_cfa_offset 16
 3977              		.cfi_offset 4, -16
 3978              		.cfi_offset 5, -12
 3979              		.cfi_offset 6, -8
 3980              		.cfi_offset 14, -4
 3981 0002 0500     		movs	r5, r0
 3982 0004 0C00     		movs	r4, r1
4419:FreeRTOS\source/tasks.c **** 		{
 3983              		.loc 1 4419 0
 3984 0006 FFF7FEFF 		bl	vPortEnterCritical
 3985              	.LVL362:
4422:FreeRTOS\source/tasks.c **** 			{
 3986              		.loc 1 4422 0
 3987 000a 174B     		ldr	r3, .L362
 3988 000c 9B6D     		ldr	r3, [r3, #88]
 3989 000e 1B6E     		ldr	r3, [r3, #96]
 3990 0010 002B     		cmp	r3, #0
 3991 0012 0BD1     		bne	.L359
4425:FreeRTOS\source/tasks.c **** 
 3992              		.loc 1 4425 0
 3993 0014 144B     		ldr	r3, .L362
 3994 0016 9A6D     		ldr	r2, [r3, #88]
 3995 0018 0121     		movs	r1, #1
 3996 001a 6423     		movs	r3, #100
 3997 001c D154     		strb	r1, [r2, r3]
4427:FreeRTOS\source/tasks.c **** 				{
 3998              		.loc 1 4427 0
 3999 001e 002C     		cmp	r4, #0
 4000 0020 04D0     		beq	.L359
4429:FreeRTOS\source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4001              		.loc 1 4429 0
 4002 0022 2000     		movs	r0, r4
 4003 0024 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 169


 4004              	.LVL363:
4436:FreeRTOS\source/tasks.c **** 				}
 4005              		.loc 1 4436 0
 4006 0028 FFF7FEFF 		bl	vPortYield
 4007              	.LVL364:
 4008              	.L359:
4448:FreeRTOS\source/tasks.c **** 
 4009              		.loc 1 4448 0
 4010 002c FFF7FEFF 		bl	vPortExitCritical
 4011              	.LVL365:
4450:FreeRTOS\source/tasks.c **** 		{
 4012              		.loc 1 4450 0
 4013 0030 FFF7FEFF 		bl	vPortEnterCritical
 4014              	.LVL366:
4453:FreeRTOS\source/tasks.c **** 
 4015              		.loc 1 4453 0
 4016 0034 0C4B     		ldr	r3, .L362
 4017 0036 9B6D     		ldr	r3, [r3, #88]
 4018 0038 1C6E     		ldr	r4, [r3, #96]
 4019              	.LVL367:
4455:FreeRTOS\source/tasks.c **** 			{
 4020              		.loc 1 4455 0
 4021 003a 002C     		cmp	r4, #0
 4022 003c 0AD0     		beq	.L360
4457:FreeRTOS\source/tasks.c **** 				{
 4023              		.loc 1 4457 0
 4024 003e 002D     		cmp	r5, #0
 4025 0040 04D0     		beq	.L361
4459:FreeRTOS\source/tasks.c **** 				}
 4026              		.loc 1 4459 0
 4027 0042 094B     		ldr	r3, .L362
 4028 0044 9B6D     		ldr	r3, [r3, #88]
 4029 0046 0022     		movs	r2, #0
 4030 0048 1A66     		str	r2, [r3, #96]
 4031 004a 03E0     		b	.L360
 4032              	.L361:
4463:FreeRTOS\source/tasks.c **** 				}
 4033              		.loc 1 4463 0
 4034 004c 064B     		ldr	r3, .L362
 4035 004e 9B6D     		ldr	r3, [r3, #88]
 4036 0050 621E     		subs	r2, r4, #1
 4037 0052 1A66     		str	r2, [r3, #96]
 4038              	.L360:
4471:FreeRTOS\source/tasks.c **** 		}
 4039              		.loc 1 4471 0
 4040 0054 044B     		ldr	r3, .L362
 4041 0056 9A6D     		ldr	r2, [r3, #88]
 4042 0058 0021     		movs	r1, #0
 4043 005a 6423     		movs	r3, #100
 4044 005c D154     		strb	r1, [r2, r3]
4473:FreeRTOS\source/tasks.c **** 
 4045              		.loc 1 4473 0
 4046 005e FFF7FEFF 		bl	vPortExitCritical
 4047              	.LVL368:
4476:FreeRTOS\source/tasks.c **** 
 4048              		.loc 1 4476 0
 4049 0062 2000     		movs	r0, r4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 170


 4050              		@ sp needed
 4051              	.LVL369:
 4052              	.LVL370:
 4053 0064 70BD     		pop	{r4, r5, r6, pc}
 4054              	.L363:
 4055 0066 C046     		.align	2
 4056              	.L362:
 4057 0068 80000000 		.word	.LANCHOR1
 4058              		.cfi_endproc
 4059              	.LFE79:
 4060              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 4061              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4062              		.align	2
 4063              		.global	xTaskNotifyWait
 4064              		.code	16
 4065              		.thumb_func
 4066              		.type	xTaskNotifyWait, %function
 4067              	xTaskNotifyWait:
 4068              	.LFB80:
4484:FreeRTOS\source/tasks.c **** 	BaseType_t xReturn;
 4069              		.loc 1 4484 0
 4070              		.cfi_startproc
 4071              		@ args = 0, pretend = 0, frame = 0
 4072              		@ frame_needed = 0, uses_anonymous_args = 0
 4073              	.LVL371:
 4074 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4075              		.cfi_def_cfa_offset 24
 4076              		.cfi_offset 3, -24
 4077              		.cfi_offset 4, -20
 4078              		.cfi_offset 5, -16
 4079              		.cfi_offset 6, -12
 4080              		.cfi_offset 7, -8
 4081              		.cfi_offset 14, -4
 4082 0002 0600     		movs	r6, r0
 4083 0004 0D00     		movs	r5, r1
 4084 0006 1700     		movs	r7, r2
 4085 0008 1C00     		movs	r4, r3
4487:FreeRTOS\source/tasks.c **** 		{
 4086              		.loc 1 4487 0
 4087 000a FFF7FEFF 		bl	vPortEnterCritical
 4088              	.LVL372:
4490:FreeRTOS\source/tasks.c **** 			{
 4089              		.loc 1 4490 0
 4090 000e 1B4B     		ldr	r3, .L369
 4091 0010 9A6D     		ldr	r2, [r3, #88]
 4092 0012 6423     		movs	r3, #100
 4093 0014 D35C     		ldrb	r3, [r2, r3]
 4094 0016 022B     		cmp	r3, #2
 4095 0018 0FD0     		beq	.L365
4495:FreeRTOS\source/tasks.c **** 
 4096              		.loc 1 4495 0
 4097 001a 184A     		ldr	r2, .L369
 4098 001c 916D     		ldr	r1, [r2, #88]
 4099 001e 0B6E     		ldr	r3, [r1, #96]
 4100 0020 B343     		bics	r3, r6
 4101 0022 0B66     		str	r3, [r1, #96]
4498:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 171


 4102              		.loc 1 4498 0
 4103 0024 926D     		ldr	r2, [r2, #88]
 4104 0026 0121     		movs	r1, #1
 4105 0028 6423     		movs	r3, #100
 4106 002a D154     		strb	r1, [r2, r3]
4500:FreeRTOS\source/tasks.c **** 				{
 4107              		.loc 1 4500 0
 4108 002c 002C     		cmp	r4, #0
 4109 002e 04D0     		beq	.L365
4502:FreeRTOS\source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4110              		.loc 1 4502 0
 4111 0030 2000     		movs	r0, r4
 4112 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4113              	.LVL373:
4509:FreeRTOS\source/tasks.c **** 				}
 4114              		.loc 1 4509 0
 4115 0036 FFF7FEFF 		bl	vPortYield
 4116              	.LVL374:
 4117              	.L365:
4521:FreeRTOS\source/tasks.c **** 
 4118              		.loc 1 4521 0
 4119 003a FFF7FEFF 		bl	vPortExitCritical
 4120              	.LVL375:
4523:FreeRTOS\source/tasks.c **** 		{
 4121              		.loc 1 4523 0
 4122 003e FFF7FEFF 		bl	vPortEnterCritical
 4123              	.LVL376:
4527:FreeRTOS\source/tasks.c **** 			{
 4124              		.loc 1 4527 0
 4125 0042 002F     		cmp	r7, #0
 4126 0044 03D0     		beq	.L366
4531:FreeRTOS\source/tasks.c **** 			}
 4127              		.loc 1 4531 0
 4128 0046 0D4B     		ldr	r3, .L369
 4129 0048 9B6D     		ldr	r3, [r3, #88]
 4130 004a 1B6E     		ldr	r3, [r3, #96]
 4131 004c 3B60     		str	r3, [r7]
 4132              	.L366:
4538:FreeRTOS\source/tasks.c **** 			{
 4133              		.loc 1 4538 0
 4134 004e 0B4B     		ldr	r3, .L369
 4135 0050 9A6D     		ldr	r2, [r3, #88]
 4136 0052 6423     		movs	r3, #100
 4137 0054 D35C     		ldrb	r3, [r2, r3]
 4138 0056 022B     		cmp	r3, #2
 4139 0058 06D1     		bne	.L368
4547:FreeRTOS\source/tasks.c **** 				xReturn = pdTRUE;
 4140              		.loc 1 4547 0
 4141 005a 084B     		ldr	r3, .L369
 4142 005c 9A6D     		ldr	r2, [r3, #88]
 4143 005e 136E     		ldr	r3, [r2, #96]
 4144 0060 AB43     		bics	r3, r5
 4145 0062 1366     		str	r3, [r2, #96]
 4146              	.LVL377:
4548:FreeRTOS\source/tasks.c **** 			}
 4147              		.loc 1 4548 0
 4148 0064 0124     		movs	r4, #1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 172


 4149              	.LVL378:
 4150 0066 00E0     		b	.L367
 4151              	.LVL379:
 4152              	.L368:
4541:FreeRTOS\source/tasks.c **** 			}
 4153              		.loc 1 4541 0
 4154 0068 0024     		movs	r4, #0
 4155              	.LVL380:
 4156              	.L367:
4551:FreeRTOS\source/tasks.c **** 		}
 4157              		.loc 1 4551 0
 4158 006a 044B     		ldr	r3, .L369
 4159 006c 9A6D     		ldr	r2, [r3, #88]
 4160 006e 0021     		movs	r1, #0
 4161 0070 6423     		movs	r3, #100
 4162 0072 D154     		strb	r1, [r2, r3]
4553:FreeRTOS\source/tasks.c **** 
 4163              		.loc 1 4553 0
 4164 0074 FFF7FEFF 		bl	vPortExitCritical
 4165              	.LVL381:
4556:FreeRTOS\source/tasks.c **** 
 4166              		.loc 1 4556 0
 4167 0078 2000     		movs	r0, r4
 4168              		@ sp needed
 4169              	.LVL382:
 4170              	.LVL383:
 4171              	.LVL384:
 4172              	.LVL385:
 4173 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4174              	.L370:
 4175              		.align	2
 4176              	.L369:
 4177 007c 80000000 		.word	.LANCHOR1
 4178              		.cfi_endproc
 4179              	.LFE80:
 4180              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 4181              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4182              		.align	2
 4183              		.global	xTaskGenericNotify
 4184              		.code	16
 4185              		.thumb_func
 4186              		.type	xTaskGenericNotify, %function
 4187              	xTaskGenericNotify:
 4188              	.LFB81:
4564:FreeRTOS\source/tasks.c **** 	TCB_t * pxTCB;
 4189              		.loc 1 4564 0
 4190              		.cfi_startproc
 4191              		@ args = 0, pretend = 0, frame = 0
 4192              		@ frame_needed = 0, uses_anonymous_args = 0
 4193              	.LVL386:
 4194 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4195              		.cfi_def_cfa_offset 24
 4196              		.cfi_offset 3, -24
 4197              		.cfi_offset 4, -20
 4198              		.cfi_offset 5, -16
 4199              		.cfi_offset 6, -12
 4200              		.cfi_offset 7, -8
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 173


 4201              		.cfi_offset 14, -4
 4202 0002 0400     		movs	r4, r0
 4203 0004 0E00     		movs	r6, r1
 4204 0006 1500     		movs	r5, r2
 4205 0008 1F00     		movs	r7, r3
 4206              	.LVL387:
4569:FreeRTOS\source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4207              		.loc 1 4569 0
 4208 000a 0028     		cmp	r0, #0
 4209 000c 01D1     		bne	.L372
4569:FreeRTOS\source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4210              		.loc 1 4569 0 is_stmt 0 discriminator 1
 4211              		.syntax divided
 4212              	@ 4569 "FreeRTOS\source\tasks.c" 1
 4213 000e 72B6     		 cpsid i 
 4214              	@ 0 "" 2
 4215              		.thumb
 4216              		.syntax unified
 4217              	.L373:
 4218 0010 FEE7     		b	.L373
 4219              	.L372:
 4220              	.LVL388:
4572:FreeRTOS\source/tasks.c **** 		{
 4221              		.loc 1 4572 0 is_stmt 1
 4222 0012 FFF7FEFF 		bl	vPortEnterCritical
 4223              	.LVL389:
4574:FreeRTOS\source/tasks.c **** 			{
 4224              		.loc 1 4574 0
 4225 0016 002F     		cmp	r7, #0
 4226 0018 01D0     		beq	.L374
4576:FreeRTOS\source/tasks.c **** 			}
 4227              		.loc 1 4576 0
 4228 001a 236E     		ldr	r3, [r4, #96]
 4229 001c 3B60     		str	r3, [r7]
 4230              	.L374:
4579:FreeRTOS\source/tasks.c **** 
 4231              		.loc 1 4579 0
 4232 001e 6422     		movs	r2, #100
 4233 0020 A35C     		ldrb	r3, [r4, r2]
 4234 0022 DBB2     		uxtb	r3, r3
 4235              	.LVL390:
4581:FreeRTOS\source/tasks.c **** 
 4236              		.loc 1 4581 0
 4237 0024 0221     		movs	r1, #2
 4238 0026 A154     		strb	r1, [r4, r2]
4583:FreeRTOS\source/tasks.c **** 			{
 4239              		.loc 1 4583 0
 4240 0028 022D     		cmp	r5, #2
 4241 002a 0DD0     		beq	.L376
 4242 002c 02D8     		bhi	.L377
 4243 002e 012D     		cmp	r5, #1
 4244 0030 05D0     		beq	.L378
 4245 0032 16E0     		b	.L385
 4246              	.L377:
 4247 0034 032D     		cmp	r5, #3
 4248 0036 0CD0     		beq	.L379
 4249 0038 042D     		cmp	r5, #4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 174


 4250 003a 0DD0     		beq	.L380
 4251 003c 11E0     		b	.L385
 4252              	.L378:
4586:FreeRTOS\source/tasks.c **** 					break;
 4253              		.loc 1 4586 0
 4254 003e 226E     		ldr	r2, [r4, #96]
 4255 0040 1643     		orrs	r6, r2
 4256              	.LVL391:
 4257 0042 2666     		str	r6, [r4, #96]
4566:FreeRTOS\source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4258              		.loc 1 4566 0
 4259 0044 0126     		movs	r6, #1
4587:FreeRTOS\source/tasks.c **** 
 4260              		.loc 1 4587 0
 4261 0046 0FE0     		b	.L375
 4262              	.LVL392:
 4263              	.L376:
4590:FreeRTOS\source/tasks.c **** 					break;
 4264              		.loc 1 4590 0
 4265 0048 226E     		ldr	r2, [r4, #96]
 4266 004a 0132     		adds	r2, r2, #1
 4267 004c 2266     		str	r2, [r4, #96]
4566:FreeRTOS\source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4268              		.loc 1 4566 0
 4269 004e 0126     		movs	r6, #1
 4270              	.LVL393:
4591:FreeRTOS\source/tasks.c **** 
 4271              		.loc 1 4591 0
 4272 0050 0AE0     		b	.L375
 4273              	.LVL394:
 4274              	.L379:
4594:FreeRTOS\source/tasks.c **** 					break;
 4275              		.loc 1 4594 0
 4276 0052 2666     		str	r6, [r4, #96]
4566:FreeRTOS\source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4277              		.loc 1 4566 0
 4278 0054 0126     		movs	r6, #1
 4279              	.LVL395:
4595:FreeRTOS\source/tasks.c **** 
 4280              		.loc 1 4595 0
 4281 0056 07E0     		b	.L375
 4282              	.LVL396:
 4283              	.L380:
4598:FreeRTOS\source/tasks.c **** 					{
 4284              		.loc 1 4598 0
 4285 0058 022B     		cmp	r3, #2
 4286 005a 04D0     		beq	.L386
4600:FreeRTOS\source/tasks.c **** 					}
 4287              		.loc 1 4600 0
 4288 005c 2666     		str	r6, [r4, #96]
4566:FreeRTOS\source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4289              		.loc 1 4566 0
 4290 005e 0126     		movs	r6, #1
 4291              	.LVL397:
 4292 0060 02E0     		b	.L375
 4293              	.LVL398:
 4294              	.L385:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 175


 4295 0062 0126     		movs	r6, #1
 4296              	.LVL399:
 4297 0064 00E0     		b	.L375
 4298              	.LVL400:
 4299              	.L386:
4605:FreeRTOS\source/tasks.c **** 					}
 4300              		.loc 1 4605 0
 4301 0066 0026     		movs	r6, #0
 4302              	.LVL401:
 4303              	.L375:
4619:FreeRTOS\source/tasks.c **** 			{
 4304              		.loc 1 4619 0
 4305 0068 012B     		cmp	r3, #1
 4306 006a 20D1     		bne	.L381
4621:FreeRTOS\source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4307              		.loc 1 4621 0
 4308 006c 251D     		adds	r5, r4, #4
 4309 006e 2800     		movs	r0, r5
 4310 0070 FFF7FEFF 		bl	uxListRemove
 4311              	.LVL402:
4622:FreeRTOS\source/tasks.c **** 
 4312              		.loc 1 4622 0
 4313 0074 E36A     		ldr	r3, [r4, #44]
 4314 0076 104A     		ldr	r2, .L387
 4315 0078 526E     		ldr	r2, [r2, #100]
 4316 007a 9342     		cmp	r3, r2
 4317 007c 01D9     		bls	.L382
4622:FreeRTOS\source/tasks.c **** 
 4318              		.loc 1 4622 0 is_stmt 0 discriminator 1
 4319 007e 0E4A     		ldr	r2, .L387
 4320 0080 5366     		str	r3, [r2, #100]
 4321              	.L382:
4622:FreeRTOS\source/tasks.c **** 
 4322              		.loc 1 4622 0 discriminator 3
 4323 0082 9A00     		lsls	r2, r3, #2
 4324 0084 D318     		adds	r3, r2, r3
 4325 0086 9A00     		lsls	r2, r3, #2
 4326 0088 0C48     		ldr	r0, .L387+4
 4327 008a 3030     		adds	r0, r0, #48
 4328 008c 8018     		adds	r0, r0, r2
 4329 008e 2900     		movs	r1, r5
 4330 0090 FFF7FEFF 		bl	vListInsertEnd
 4331              	.LVL403:
4625:FreeRTOS\source/tasks.c **** 
 4332              		.loc 1 4625 0 is_stmt 1 discriminator 3
 4333 0094 A36A     		ldr	r3, [r4, #40]
 4334 0096 002B     		cmp	r3, #0
 4335 0098 01D0     		beq	.L383
4625:FreeRTOS\source/tasks.c **** 
 4336              		.loc 1 4625 0 is_stmt 0 discriminator 1
 4337              		.syntax divided
 4338              	@ 4625 "FreeRTOS\source\tasks.c" 1
 4339 009a 72B6     		 cpsid i 
 4340              	@ 0 "" 2
 4341              		.thumb
 4342              		.syntax unified
 4343              	.L384:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 176


 4344 009c FEE7     		b	.L384
 4345              	.L383:
4643:FreeRTOS\source/tasks.c **** 				{
 4346              		.loc 1 4643 0 is_stmt 1
 4347 009e E26A     		ldr	r2, [r4, #44]
 4348 00a0 054B     		ldr	r3, .L387
 4349 00a2 9B6D     		ldr	r3, [r3, #88]
 4350 00a4 DB6A     		ldr	r3, [r3, #44]
 4351 00a6 9A42     		cmp	r2, r3
 4352 00a8 01D9     		bls	.L381
4647:FreeRTOS\source/tasks.c **** 				}
 4353              		.loc 1 4647 0
 4354 00aa FFF7FEFF 		bl	vPortYield
 4355              	.LVL404:
 4356              	.L381:
4659:FreeRTOS\source/tasks.c **** 
 4357              		.loc 1 4659 0
 4358 00ae FFF7FEFF 		bl	vPortExitCritical
 4359              	.LVL405:
4662:FreeRTOS\source/tasks.c **** 
 4360              		.loc 1 4662 0
 4361 00b2 3000     		movs	r0, r6
 4362              		@ sp needed
 4363              	.LVL406:
 4364              	.LVL407:
 4365              	.LVL408:
 4366 00b4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4367              	.L388:
 4368 00b6 C046     		.align	2
 4369              	.L387:
 4370 00b8 80000000 		.word	.LANCHOR1
 4371 00bc 00000000 		.word	.LANCHOR0
 4372              		.cfi_endproc
 4373              	.LFE81:
 4374              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4375              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4376              		.align	2
 4377              		.global	xTaskGenericNotifyFromISR
 4378              		.code	16
 4379              		.thumb_func
 4380              		.type	xTaskGenericNotifyFromISR, %function
 4381              	xTaskGenericNotifyFromISR:
 4382              	.LFB82:
4670:FreeRTOS\source/tasks.c **** 	TCB_t * pxTCB;
 4383              		.loc 1 4670 0
 4384              		.cfi_startproc
 4385              		@ args = 4, pretend = 0, frame = 8
 4386              		@ frame_needed = 0, uses_anonymous_args = 0
 4387              	.LVL409:
 4388 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4389              		.cfi_def_cfa_offset 20
 4390              		.cfi_offset 4, -20
 4391              		.cfi_offset 5, -16
 4392              		.cfi_offset 6, -12
 4393              		.cfi_offset 7, -8
 4394              		.cfi_offset 14, -4
 4395 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 177


 4396              		.cfi_def_cfa_offset 32
 4397 0004 0400     		movs	r4, r0
 4398 0006 0F00     		movs	r7, r1
 4399 0008 1600     		movs	r6, r2
 4400 000a 1D00     		movs	r5, r3
 4401              	.LVL410:
4676:FreeRTOS\source/tasks.c **** 
 4402              		.loc 1 4676 0
 4403 000c 0028     		cmp	r0, #0
 4404 000e 01D1     		bne	.L390
4676:FreeRTOS\source/tasks.c **** 
 4405              		.loc 1 4676 0 is_stmt 0 discriminator 1
 4406              		.syntax divided
 4407              	@ 4676 "FreeRTOS\source\tasks.c" 1
 4408 0010 72B6     		 cpsid i 
 4409              	@ 0 "" 2
 4410              		.thumb
 4411              		.syntax unified
 4412              	.L391:
 4413 0012 FEE7     		b	.L391
 4414              	.L390:
 4415              	.LVL411:
4698:FreeRTOS\source/tasks.c **** 		{
 4416              		.loc 1 4698 0 is_stmt 1
 4417 0014 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4418              	.LVL412:
 4419 0018 0190     		str	r0, [sp, #4]
 4420              	.LVL413:
4700:FreeRTOS\source/tasks.c **** 			{
 4421              		.loc 1 4700 0
 4422 001a 002D     		cmp	r5, #0
 4423 001c 01D0     		beq	.L392
4702:FreeRTOS\source/tasks.c **** 			}
 4424              		.loc 1 4702 0
 4425 001e 236E     		ldr	r3, [r4, #96]
 4426 0020 2B60     		str	r3, [r5]
 4427              	.L392:
4705:FreeRTOS\source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4428              		.loc 1 4705 0
 4429 0022 6422     		movs	r2, #100
 4430 0024 A35C     		ldrb	r3, [r4, r2]
 4431 0026 DBB2     		uxtb	r3, r3
 4432              	.LVL414:
4706:FreeRTOS\source/tasks.c **** 
 4433              		.loc 1 4706 0
 4434 0028 0221     		movs	r1, #2
 4435 002a A154     		strb	r1, [r4, r2]
4708:FreeRTOS\source/tasks.c **** 			{
 4436              		.loc 1 4708 0
 4437 002c 022E     		cmp	r6, #2
 4438 002e 0DD0     		beq	.L394
 4439 0030 02D8     		bhi	.L395
 4440 0032 012E     		cmp	r6, #1
 4441 0034 05D0     		beq	.L396
 4442 0036 16E0     		b	.L406
 4443              	.L395:
 4444 0038 032E     		cmp	r6, #3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 178


 4445 003a 0CD0     		beq	.L397
 4446 003c 042E     		cmp	r6, #4
 4447 003e 0DD0     		beq	.L398
 4448 0040 11E0     		b	.L406
 4449              	.L396:
4711:FreeRTOS\source/tasks.c **** 					break;
 4450              		.loc 1 4711 0
 4451 0042 226E     		ldr	r2, [r4, #96]
 4452 0044 3A43     		orrs	r2, r7
 4453 0046 2266     		str	r2, [r4, #96]
4673:FreeRTOS\source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4454              		.loc 1 4673 0
 4455 0048 0127     		movs	r7, #1
 4456              	.LVL415:
4712:FreeRTOS\source/tasks.c **** 
 4457              		.loc 1 4712 0
 4458 004a 0FE0     		b	.L393
 4459              	.LVL416:
 4460              	.L394:
4715:FreeRTOS\source/tasks.c **** 					break;
 4461              		.loc 1 4715 0
 4462 004c 226E     		ldr	r2, [r4, #96]
 4463 004e 0132     		adds	r2, r2, #1
 4464 0050 2266     		str	r2, [r4, #96]
4673:FreeRTOS\source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4465              		.loc 1 4673 0
 4466 0052 0127     		movs	r7, #1
 4467              	.LVL417:
4716:FreeRTOS\source/tasks.c **** 
 4468              		.loc 1 4716 0
 4469 0054 0AE0     		b	.L393
 4470              	.LVL418:
 4471              	.L397:
4719:FreeRTOS\source/tasks.c **** 					break;
 4472              		.loc 1 4719 0
 4473 0056 2766     		str	r7, [r4, #96]
4673:FreeRTOS\source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4474              		.loc 1 4673 0
 4475 0058 0127     		movs	r7, #1
 4476              	.LVL419:
4720:FreeRTOS\source/tasks.c **** 
 4477              		.loc 1 4720 0
 4478 005a 07E0     		b	.L393
 4479              	.LVL420:
 4480              	.L398:
4723:FreeRTOS\source/tasks.c **** 					{
 4481              		.loc 1 4723 0
 4482 005c 022B     		cmp	r3, #2
 4483 005e 04D0     		beq	.L407
4725:FreeRTOS\source/tasks.c **** 					}
 4484              		.loc 1 4725 0
 4485 0060 2766     		str	r7, [r4, #96]
4673:FreeRTOS\source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4486              		.loc 1 4673 0
 4487 0062 0127     		movs	r7, #1
 4488              	.LVL421:
 4489 0064 02E0     		b	.L393
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 179


 4490              	.LVL422:
 4491              	.L406:
 4492 0066 0127     		movs	r7, #1
 4493              	.LVL423:
 4494 0068 00E0     		b	.L393
 4495              	.LVL424:
 4496              	.L407:
4730:FreeRTOS\source/tasks.c **** 					}
 4497              		.loc 1 4730 0
 4498 006a 0027     		movs	r7, #0
 4499              	.LVL425:
 4500              	.L393:
4744:FreeRTOS\source/tasks.c **** 			{
 4501              		.loc 1 4744 0
 4502 006c 012B     		cmp	r3, #1
 4503 006e 33D1     		bne	.L399
4747:FreeRTOS\source/tasks.c **** 
 4504              		.loc 1 4747 0
 4505 0070 A36A     		ldr	r3, [r4, #40]
 4506              	.LVL426:
 4507 0072 002B     		cmp	r3, #0
 4508 0074 01D0     		beq	.L400
4747:FreeRTOS\source/tasks.c **** 
 4509              		.loc 1 4747 0 is_stmt 0 discriminator 1
 4510              		.syntax divided
 4511              	@ 4747 "FreeRTOS\source\tasks.c" 1
 4512 0076 72B6     		 cpsid i 
 4513              	@ 0 "" 2
 4514              		.thumb
 4515              		.syntax unified
 4516              	.L401:
 4517 0078 FEE7     		b	.L401
 4518              	.L400:
4749:FreeRTOS\source/tasks.c **** 				{
 4519              		.loc 1 4749 0 is_stmt 1
 4520 007a 1A4B     		ldr	r3, .L408
 4521 007c 1B6F     		ldr	r3, [r3, #112]
 4522 007e 002B     		cmp	r3, #0
 4523 0080 14D1     		bne	.L402
4751:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4524              		.loc 1 4751 0
 4525 0082 261D     		adds	r6, r4, #4
 4526 0084 3000     		movs	r0, r6
 4527              	.LVL427:
 4528 0086 FFF7FEFF 		bl	uxListRemove
 4529              	.LVL428:
4752:FreeRTOS\source/tasks.c **** 				}
 4530              		.loc 1 4752 0
 4531 008a E36A     		ldr	r3, [r4, #44]
 4532 008c 154A     		ldr	r2, .L408
 4533 008e 526E     		ldr	r2, [r2, #100]
 4534 0090 9342     		cmp	r3, r2
 4535 0092 01D9     		bls	.L403
4752:FreeRTOS\source/tasks.c **** 				}
 4536              		.loc 1 4752 0 is_stmt 0 discriminator 1
 4537 0094 134A     		ldr	r2, .L408
 4538 0096 5366     		str	r3, [r2, #100]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 180


 4539              	.L403:
4752:FreeRTOS\source/tasks.c **** 				}
 4540              		.loc 1 4752 0 discriminator 3
 4541 0098 9A00     		lsls	r2, r3, #2
 4542 009a D318     		adds	r3, r2, r3
 4543 009c 9A00     		lsls	r2, r3, #2
 4544 009e 1248     		ldr	r0, .L408+4
 4545 00a0 3030     		adds	r0, r0, #48
 4546 00a2 8018     		adds	r0, r0, r2
 4547 00a4 3100     		movs	r1, r6
 4548 00a6 FFF7FEFF 		bl	vListInsertEnd
 4549              	.LVL429:
 4550 00aa 05E0     		b	.L404
 4551              	.LVL430:
 4552              	.L402:
4758:FreeRTOS\source/tasks.c **** 				}
 4553              		.loc 1 4758 0 is_stmt 1
 4554 00ac 2100     		movs	r1, r4
 4555 00ae 1831     		adds	r1, r1, #24
 4556 00b0 0D48     		ldr	r0, .L408+4
 4557              	.LVL431:
 4558 00b2 1430     		adds	r0, r0, #20
 4559 00b4 FFF7FEFF 		bl	vListInsertEnd
 4560              	.LVL432:
 4561              	.L404:
4761:FreeRTOS\source/tasks.c **** 				{
 4562              		.loc 1 4761 0
 4563 00b8 E26A     		ldr	r2, [r4, #44]
 4564 00ba 0A4B     		ldr	r3, .L408
 4565 00bc 9B6D     		ldr	r3, [r3, #88]
 4566 00be DB6A     		ldr	r3, [r3, #44]
 4567 00c0 9A42     		cmp	r2, r3
 4568 00c2 09D9     		bls	.L399
4765:FreeRTOS\source/tasks.c **** 					{
 4569              		.loc 1 4765 0
 4570 00c4 089B     		ldr	r3, [sp, #32]
 4571 00c6 002B     		cmp	r3, #0
 4572 00c8 03D0     		beq	.L405
4767:FreeRTOS\source/tasks.c **** 					}
 4573              		.loc 1 4767 0
 4574 00ca 0123     		movs	r3, #1
 4575 00cc 089A     		ldr	r2, [sp, #32]
 4576 00ce 1360     		str	r3, [r2]
 4577 00d0 02E0     		b	.L399
 4578              	.L405:
4774:FreeRTOS\source/tasks.c **** 					}
 4579              		.loc 1 4774 0
 4580 00d2 0122     		movs	r2, #1
 4581 00d4 054B     		ldr	r3, .L408+8
 4582 00d6 1A60     		str	r2, [r3]
 4583              	.L399:
4783:FreeRTOS\source/tasks.c **** 
 4584              		.loc 1 4783 0
 4585 00d8 0198     		ldr	r0, [sp, #4]
 4586 00da FFF7FEFF 		bl	vClearInterruptMaskFromISR
 4587              	.LVL433:
4786:FreeRTOS\source/tasks.c **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 181


 4588              		.loc 1 4786 0
 4589 00de 3800     		movs	r0, r7
 4590 00e0 03B0     		add	sp, sp, #12
 4591              		@ sp needed
 4592              	.LVL434:
 4593              	.LVL435:
 4594              	.LVL436:
 4595 00e2 F0BD     		pop	{r4, r5, r6, r7, pc}
 4596              	.L409:
 4597              		.align	2
 4598              	.L408:
 4599 00e4 80000000 		.word	.LANCHOR1
 4600 00e8 00000000 		.word	.LANCHOR0
 4601 00ec 00010000 		.word	.LANCHOR2
 4602              		.cfi_endproc
 4603              	.LFE82:
 4604              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4605              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4606              		.align	2
 4607              		.global	vTaskNotifyGiveFromISR
 4608              		.code	16
 4609              		.thumb_func
 4610              		.type	vTaskNotifyGiveFromISR, %function
 4611              	vTaskNotifyGiveFromISR:
 4612              	.LFB83:
4794:FreeRTOS\source/tasks.c **** 	TCB_t * pxTCB;
 4613              		.loc 1 4794 0
 4614              		.cfi_startproc
 4615              		@ args = 0, pretend = 0, frame = 0
 4616              		@ frame_needed = 0, uses_anonymous_args = 0
 4617              	.LVL437:
 4618 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4619              		.cfi_def_cfa_offset 24
 4620              		.cfi_offset 3, -24
 4621              		.cfi_offset 4, -20
 4622              		.cfi_offset 5, -16
 4623              		.cfi_offset 6, -12
 4624              		.cfi_offset 7, -8
 4625              		.cfi_offset 14, -4
 4626 0002 0400     		movs	r4, r0
 4627 0004 0F00     		movs	r7, r1
4799:FreeRTOS\source/tasks.c **** 
 4628              		.loc 1 4799 0
 4629 0006 0028     		cmp	r0, #0
 4630 0008 01D1     		bne	.L411
4799:FreeRTOS\source/tasks.c **** 
 4631              		.loc 1 4799 0 is_stmt 0 discriminator 1
 4632              		.syntax divided
 4633              	@ 4799 "FreeRTOS\source\tasks.c" 1
 4634 000a 72B6     		 cpsid i 
 4635              	@ 0 "" 2
 4636              		.thumb
 4637              		.syntax unified
 4638              	.L412:
 4639 000c FEE7     		b	.L412
 4640              	.L411:
 4641              	.LVL438:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 182


4821:FreeRTOS\source/tasks.c **** 		{
 4642              		.loc 1 4821 0 is_stmt 1
 4643 000e FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4644              	.LVL439:
 4645 0012 0600     		movs	r6, r0
 4646              	.LVL440:
4823:FreeRTOS\source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4647              		.loc 1 4823 0
 4648 0014 6423     		movs	r3, #100
 4649 0016 E25C     		ldrb	r2, [r4, r3]
 4650              	.LVL441:
4824:FreeRTOS\source/tasks.c **** 
 4651              		.loc 1 4824 0
 4652 0018 0221     		movs	r1, #2
 4653 001a E154     		strb	r1, [r4, r3]
4828:FreeRTOS\source/tasks.c **** 
 4654              		.loc 1 4828 0
 4655 001c 236E     		ldr	r3, [r4, #96]
 4656 001e 0133     		adds	r3, r3, #1
 4657 0020 2366     		str	r3, [r4, #96]
4834:FreeRTOS\source/tasks.c **** 			{
 4658              		.loc 1 4834 0
 4659 0022 012A     		cmp	r2, #1
 4660 0024 31D1     		bne	.L413
4837:FreeRTOS\source/tasks.c **** 
 4661              		.loc 1 4837 0
 4662 0026 A36A     		ldr	r3, [r4, #40]
 4663 0028 002B     		cmp	r3, #0
 4664 002a 01D0     		beq	.L414
4837:FreeRTOS\source/tasks.c **** 
 4665              		.loc 1 4837 0 is_stmt 0 discriminator 1
 4666              		.syntax divided
 4667              	@ 4837 "FreeRTOS\source\tasks.c" 1
 4668 002c 72B6     		 cpsid i 
 4669              	@ 0 "" 2
 4670              		.thumb
 4671              		.syntax unified
 4672              	.L415:
 4673 002e FEE7     		b	.L415
 4674              	.L414:
4839:FreeRTOS\source/tasks.c **** 				{
 4675              		.loc 1 4839 0 is_stmt 1
 4676 0030 184B     		ldr	r3, .L420
 4677 0032 1B6F     		ldr	r3, [r3, #112]
 4678 0034 002B     		cmp	r3, #0
 4679 0036 14D1     		bne	.L416
4841:FreeRTOS\source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4680              		.loc 1 4841 0
 4681 0038 251D     		adds	r5, r4, #4
 4682 003a 2800     		movs	r0, r5
 4683              	.LVL442:
 4684 003c FFF7FEFF 		bl	uxListRemove
 4685              	.LVL443:
4842:FreeRTOS\source/tasks.c **** 				}
 4686              		.loc 1 4842 0
 4687 0040 E36A     		ldr	r3, [r4, #44]
 4688 0042 144A     		ldr	r2, .L420
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 183


 4689 0044 526E     		ldr	r2, [r2, #100]
 4690 0046 9342     		cmp	r3, r2
 4691 0048 01D9     		bls	.L417
4842:FreeRTOS\source/tasks.c **** 				}
 4692              		.loc 1 4842 0 is_stmt 0 discriminator 1
 4693 004a 124A     		ldr	r2, .L420
 4694 004c 5366     		str	r3, [r2, #100]
 4695              	.L417:
4842:FreeRTOS\source/tasks.c **** 				}
 4696              		.loc 1 4842 0 discriminator 3
 4697 004e 9A00     		lsls	r2, r3, #2
 4698 0050 D318     		adds	r3, r2, r3
 4699 0052 9A00     		lsls	r2, r3, #2
 4700 0054 1048     		ldr	r0, .L420+4
 4701 0056 3030     		adds	r0, r0, #48
 4702 0058 8018     		adds	r0, r0, r2
 4703 005a 2900     		movs	r1, r5
 4704 005c FFF7FEFF 		bl	vListInsertEnd
 4705              	.LVL444:
 4706 0060 05E0     		b	.L418
 4707              	.LVL445:
 4708              	.L416:
4848:FreeRTOS\source/tasks.c **** 				}
 4709              		.loc 1 4848 0 is_stmt 1
 4710 0062 2100     		movs	r1, r4
 4711 0064 1831     		adds	r1, r1, #24
 4712 0066 0C48     		ldr	r0, .L420+4
 4713              	.LVL446:
 4714 0068 1430     		adds	r0, r0, #20
 4715 006a FFF7FEFF 		bl	vListInsertEnd
 4716              	.LVL447:
 4717              	.L418:
4851:FreeRTOS\source/tasks.c **** 				{
 4718              		.loc 1 4851 0
 4719 006e E26A     		ldr	r2, [r4, #44]
 4720 0070 084B     		ldr	r3, .L420
 4721 0072 9B6D     		ldr	r3, [r3, #88]
 4722 0074 DB6A     		ldr	r3, [r3, #44]
 4723 0076 9A42     		cmp	r2, r3
 4724 0078 07D9     		bls	.L413
4855:FreeRTOS\source/tasks.c **** 					{
 4725              		.loc 1 4855 0
 4726 007a 002F     		cmp	r7, #0
 4727 007c 02D0     		beq	.L419
4857:FreeRTOS\source/tasks.c **** 					}
 4728              		.loc 1 4857 0
 4729 007e 0123     		movs	r3, #1
 4730 0080 3B60     		str	r3, [r7]
 4731 0082 02E0     		b	.L413
 4732              	.L419:
4864:FreeRTOS\source/tasks.c **** 					}
 4733              		.loc 1 4864 0
 4734 0084 0122     		movs	r2, #1
 4735 0086 054B     		ldr	r3, .L420+8
 4736 0088 1A60     		str	r2, [r3]
 4737              	.L413:
4873:FreeRTOS\source/tasks.c **** 	}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 184


 4738              		.loc 1 4873 0
 4739 008a 3000     		movs	r0, r6
 4740 008c FFF7FEFF 		bl	vClearInterruptMaskFromISR
 4741              	.LVL448:
4874:FreeRTOS\source/tasks.c **** 
 4742              		.loc 1 4874 0
 4743              		@ sp needed
 4744              	.LVL449:
 4745              	.LVL450:
 4746              	.LVL451:
 4747 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4748              	.L421:
 4749 0092 C046     		.align	2
 4750              	.L420:
 4751 0094 80000000 		.word	.LANCHOR1
 4752 0098 00000000 		.word	.LANCHOR0
 4753 009c 00010000 		.word	.LANCHOR2
 4754              		.cfi_endproc
 4755              	.LFE83:
 4756              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 4757              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4758              		.align	2
 4759              		.global	xTaskNotifyStateClear
 4760              		.code	16
 4761              		.thumb_func
 4762              		.type	xTaskNotifyStateClear, %function
 4763              	xTaskNotifyStateClear:
 4764              	.LFB84:
4883:FreeRTOS\source/tasks.c **** 	TCB_t *pxTCB;
 4765              		.loc 1 4883 0
 4766              		.cfi_startproc
 4767              		@ args = 0, pretend = 0, frame = 0
 4768              		@ frame_needed = 0, uses_anonymous_args = 0
 4769              	.LVL452:
 4770 0000 10B5     		push	{r4, lr}
 4771              		.cfi_def_cfa_offset 8
 4772              		.cfi_offset 4, -8
 4773              		.cfi_offset 14, -4
 4774 0002 041E     		subs	r4, r0, #0
4889:FreeRTOS\source/tasks.c **** 
 4775              		.loc 1 4889 0
 4776 0004 01D1     		bne	.L423
4889:FreeRTOS\source/tasks.c **** 
 4777              		.loc 1 4889 0 is_stmt 0 discriminator 1
 4778 0006 094B     		ldr	r3, .L426
 4779 0008 9C6D     		ldr	r4, [r3, #88]
 4780              	.LVL453:
 4781              	.L423:
4891:FreeRTOS\source/tasks.c **** 		{
 4782              		.loc 1 4891 0 is_stmt 1 discriminator 4
 4783 000a FFF7FEFF 		bl	vPortEnterCritical
 4784              	.LVL454:
4893:FreeRTOS\source/tasks.c **** 			{
 4785              		.loc 1 4893 0 discriminator 4
 4786 000e 6423     		movs	r3, #100
 4787 0010 E35C     		ldrb	r3, [r4, r3]
 4788 0012 022B     		cmp	r3, #2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 185


 4789 0014 04D1     		bne	.L425
4895:FreeRTOS\source/tasks.c **** 				xReturn = pdPASS;
 4790              		.loc 1 4895 0
 4791 0016 0022     		movs	r2, #0
 4792 0018 6233     		adds	r3, r3, #98
 4793 001a E254     		strb	r2, [r4, r3]
 4794              	.LVL455:
4896:FreeRTOS\source/tasks.c **** 			}
 4795              		.loc 1 4896 0
 4796 001c 0124     		movs	r4, #1
 4797              	.LVL456:
 4798 001e 00E0     		b	.L424
 4799              	.LVL457:
 4800              	.L425:
4900:FreeRTOS\source/tasks.c **** 			}
 4801              		.loc 1 4900 0
 4802 0020 0024     		movs	r4, #0
 4803              	.LVL458:
 4804              	.L424:
4903:FreeRTOS\source/tasks.c **** 
 4805              		.loc 1 4903 0
 4806 0022 FFF7FEFF 		bl	vPortExitCritical
 4807              	.LVL459:
4906:FreeRTOS\source/tasks.c **** 
 4808              		.loc 1 4906 0
 4809 0026 2000     		movs	r0, r4
 4810              		@ sp needed
 4811              	.LVL460:
 4812 0028 10BD     		pop	{r4, pc}
 4813              	.L427:
 4814 002a C046     		.align	2
 4815              	.L426:
 4816 002c 80000000 		.word	.LANCHOR1
 4817              		.cfi_endproc
 4818              	.LFE84:
 4819              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 4820              		.global	pxCurrentTCB
 4821              		.section	.rodata.str1.4,"aMS",%progbits,1
 4822              		.align	2
 4823              	.LC29:
 4824 0000 49444C45 		.ascii	"IDLE\000"
 4824      00
 4825              		.bss
 4826              		.align	2
 4827              		.set	.LANCHOR0,. + 0
 4828              		.set	.LANCHOR1,. + 128
 4829              		.set	.LANCHOR2,. + 256
 4830              		.type	xSuspendedTaskList, %object
 4831              		.size	xSuspendedTaskList, 20
 4832              	xSuspendedTaskList:
 4833 0000 00000000 		.space	20
 4833      00000000 
 4833      00000000 
 4833      00000000 
 4833      00000000 
 4834              		.type	xPendingReadyList, %object
 4835              		.size	xPendingReadyList, 20
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 186


 4836              	xPendingReadyList:
 4837 0014 00000000 		.space	20
 4837      00000000 
 4837      00000000 
 4837      00000000 
 4837      00000000 
 4838              		.type	pxDelayedTaskList, %object
 4839              		.size	pxDelayedTaskList, 4
 4840              	pxDelayedTaskList:
 4841 0028 00000000 		.space	4
 4842              		.type	xNextTaskUnblockTime, %object
 4843              		.size	xNextTaskUnblockTime, 4
 4844              	xNextTaskUnblockTime:
 4845 002c 00000000 		.space	4
 4846              		.type	pxReadyTasksLists, %object
 4847              		.size	pxReadyTasksLists, 100
 4848              	pxReadyTasksLists:
 4849 0030 00000000 		.space	100
 4849      00000000 
 4849      00000000 
 4849      00000000 
 4849      00000000 
 4850              		.type	xDelayedTaskList1, %object
 4851              		.size	xDelayedTaskList1, 20
 4852              	xDelayedTaskList1:
 4853 0094 00000000 		.space	20
 4853      00000000 
 4853      00000000 
 4853      00000000 
 4853      00000000 
 4854              		.type	xDelayedTaskList2, %object
 4855              		.size	xDelayedTaskList2, 20
 4856              	xDelayedTaskList2:
 4857 00a8 00000000 		.space	20
 4857      00000000 
 4857      00000000 
 4857      00000000 
 4857      00000000 
 4858              		.type	xTasksWaitingTermination, %object
 4859              		.size	xTasksWaitingTermination, 20
 4860              	xTasksWaitingTermination:
 4861 00bc 00000000 		.space	20
 4861      00000000 
 4861      00000000 
 4861      00000000 
 4861      00000000 
 4862              		.type	pxOverflowDelayedTaskList, %object
 4863              		.size	pxOverflowDelayedTaskList, 4
 4864              	pxOverflowDelayedTaskList:
 4865 00d0 00000000 		.space	4
 4866              		.type	uxCurrentNumberOfTasks, %object
 4867              		.size	uxCurrentNumberOfTasks, 4
 4868              	uxCurrentNumberOfTasks:
 4869 00d4 00000000 		.space	4
 4870              		.type	pxCurrentTCB, %object
 4871              		.size	pxCurrentTCB, 4
 4872              	pxCurrentTCB:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 187


 4873 00d8 00000000 		.space	4
 4874              		.type	xSchedulerRunning, %object
 4875              		.size	xSchedulerRunning, 4
 4876              	xSchedulerRunning:
 4877 00dc 00000000 		.space	4
 4878              		.type	uxTaskNumber, %object
 4879              		.size	uxTaskNumber, 4
 4880              	uxTaskNumber:
 4881 00e0 00000000 		.space	4
 4882              		.type	uxTopReadyPriority, %object
 4883              		.size	uxTopReadyPriority, 4
 4884              	uxTopReadyPriority:
 4885 00e4 00000000 		.space	4
 4886              		.type	uxDeletedTasksWaitingCleanUp, %object
 4887              		.size	uxDeletedTasksWaitingCleanUp, 4
 4888              	uxDeletedTasksWaitingCleanUp:
 4889 00e8 00000000 		.space	4
 4890              		.type	xTickCount, %object
 4891              		.size	xTickCount, 4
 4892              	xTickCount:
 4893 00ec 00000000 		.space	4
 4894              		.type	uxSchedulerSuspended, %object
 4895              		.size	uxSchedulerSuspended, 4
 4896              	uxSchedulerSuspended:
 4897 00f0 00000000 		.space	4
 4898              		.type	xIdleTaskHandle, %object
 4899              		.size	xIdleTaskHandle, 4
 4900              	xIdleTaskHandle:
 4901 00f4 00000000 		.space	4
 4902              		.type	xNumOfOverflows, %object
 4903              		.size	xNumOfOverflows, 4
 4904              	xNumOfOverflows:
 4905 00f8 00000000 		.space	4
 4906              		.type	uxPendedTicks, %object
 4907              		.size	uxPendedTicks, 4
 4908              	uxPendedTicks:
 4909 00fc 00000000 		.space	4
 4910              		.type	xYieldPending, %object
 4911              		.size	xYieldPending, 4
 4912              	xYieldPending:
 4913 0100 00000000 		.space	4
 4914              		.text
 4915              	.Letext0:
 4916              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4917              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4918              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4919              		.file 5 ".\\FreeRTOS/projdefs.h"
 4920              		.file 6 ".\\FreeRTOS/portmacro.h"
 4921              		.file 7 ".\\FreeRTOS/list.h"
 4922              		.file 8 ".\\FreeRTOS/task.h"
 4923              		.file 9 ".\\FreeRTOS/portable.h"
 4924              		.file 10 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4
 4925              		.section	.debug_info,"",%progbits
 4926              	.Ldebug_info0:
 4927 0000 C21E0000 		.4byte	0x1ec2
 4928 0004 0400     		.2byte	0x4
 4929 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 188


 4930 000a 04       		.byte	0x4
 4931 000b 01       		.uleb128 0x1
 4932 000c 76040000 		.4byte	.LASF226
 4933 0010 0C       		.byte	0xc
 4934 0011 E70D0000 		.4byte	.LASF227
 4935 0015 C50E0000 		.4byte	.LASF228
 4936 0019 38000000 		.4byte	.Ldebug_ranges0+0x38
 4937 001d 00000000 		.4byte	0
 4938 0021 00000000 		.4byte	.Ldebug_line0
 4939 0025 02       		.uleb128 0x2
 4940 0026 12050000 		.4byte	.LASF4
 4941 002a 02       		.byte	0x2
 4942 002b D8       		.byte	0xd8
 4943 002c 30000000 		.4byte	0x30
 4944 0030 03       		.uleb128 0x3
 4945 0031 04       		.byte	0x4
 4946 0032 07       		.byte	0x7
 4947 0033 1F010000 		.4byte	.LASF0
 4948 0037 04       		.uleb128 0x4
 4949 0038 04       		.byte	0x4
 4950 0039 05       		.byte	0x5
 4951 003a 696E7400 		.ascii	"int\000"
 4952 003e 03       		.uleb128 0x3
 4953 003f 08       		.byte	0x8
 4954 0040 05       		.byte	0x5
 4955 0041 9A070000 		.4byte	.LASF1
 4956 0045 03       		.uleb128 0x3
 4957 0046 08       		.byte	0x8
 4958 0047 04       		.byte	0x4
 4959 0048 43090000 		.4byte	.LASF2
 4960 004c 03       		.uleb128 0x3
 4961 004d 01       		.byte	0x1
 4962 004e 06       		.byte	0x6
 4963 004f DB0D0000 		.4byte	.LASF3
 4964 0053 02       		.uleb128 0x2
 4965 0054 0E0B0000 		.4byte	.LASF5
 4966 0058 03       		.byte	0x3
 4967 0059 1D       		.byte	0x1d
 4968 005a 5E000000 		.4byte	0x5e
 4969 005e 03       		.uleb128 0x3
 4970 005f 01       		.byte	0x1
 4971 0060 08       		.byte	0x8
 4972 0061 210C0000 		.4byte	.LASF6
 4973 0065 03       		.uleb128 0x3
 4974 0066 02       		.byte	0x2
 4975 0067 05       		.byte	0x5
 4976 0068 DF090000 		.4byte	.LASF7
 4977 006c 02       		.uleb128 0x2
 4978 006d C2030000 		.4byte	.LASF8
 4979 0071 03       		.byte	0x3
 4980 0072 2B       		.byte	0x2b
 4981 0073 77000000 		.4byte	0x77
 4982 0077 03       		.uleb128 0x3
 4983 0078 02       		.byte	0x2
 4984 0079 07       		.byte	0x7
 4985 007a FF0D0000 		.4byte	.LASF9
 4986 007e 03       		.uleb128 0x3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 189


 4987 007f 04       		.byte	0x4
 4988 0080 05       		.byte	0x5
 4989 0081 150A0000 		.4byte	.LASF10
 4990 0085 02       		.uleb128 0x2
 4991 0086 4E0C0000 		.4byte	.LASF11
 4992 008a 03       		.byte	0x3
 4993 008b 41       		.byte	0x41
 4994 008c 90000000 		.4byte	0x90
 4995 0090 03       		.uleb128 0x3
 4996 0091 04       		.byte	0x4
 4997 0092 07       		.byte	0x7
 4998 0093 640B0000 		.4byte	.LASF12
 4999 0097 03       		.uleb128 0x3
 5000 0098 08       		.byte	0x8
 5001 0099 07       		.byte	0x7
 5002 009a 31030000 		.4byte	.LASF13
 5003 009e 03       		.uleb128 0x3
 5004 009f 04       		.byte	0x4
 5005 00a0 07       		.byte	0x7
 5006 00a1 3C0B0000 		.4byte	.LASF14
 5007 00a5 05       		.uleb128 0x5
 5008 00a6 04       		.byte	0x4
 5009 00a7 06       		.uleb128 0x6
 5010 00a8 04       		.byte	0x4
 5011 00a9 AD000000 		.4byte	0xad
 5012 00ad 03       		.uleb128 0x3
 5013 00ae 01       		.byte	0x1
 5014 00af 08       		.byte	0x8
 5015 00b0 7F060000 		.4byte	.LASF15
 5016 00b4 06       		.uleb128 0x6
 5017 00b5 04       		.byte	0x4
 5018 00b6 BA000000 		.4byte	0xba
 5019 00ba 07       		.uleb128 0x7
 5020 00bb AD000000 		.4byte	0xad
 5021 00bf 02       		.uleb128 0x2
 5022 00c0 39070000 		.4byte	.LASF16
 5023 00c4 04       		.byte	0x4
 5024 00c5 18       		.byte	0x18
 5025 00c6 53000000 		.4byte	0x53
 5026 00ca 02       		.uleb128 0x2
 5027 00cb 5E090000 		.4byte	.LASF17
 5028 00cf 04       		.byte	0x4
 5029 00d0 24       		.byte	0x24
 5030 00d1 6C000000 		.4byte	0x6c
 5031 00d5 02       		.uleb128 0x2
 5032 00d6 93020000 		.4byte	.LASF18
 5033 00da 04       		.byte	0x4
 5034 00db 30       		.byte	0x30
 5035 00dc 85000000 		.4byte	0x85
 5036 00e0 03       		.uleb128 0x3
 5037 00e1 04       		.byte	0x4
 5038 00e2 04       		.byte	0x4
 5039 00e3 D9020000 		.4byte	.LASF19
 5040 00e7 03       		.uleb128 0x3
 5041 00e8 08       		.byte	0x8
 5042 00e9 04       		.byte	0x4
 5043 00ea 330E0000 		.4byte	.LASF20
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 190


 5044 00ee 08       		.uleb128 0x8
 5045 00ef D5000000 		.4byte	0xd5
 5046 00f3 02       		.uleb128 0x2
 5047 00f4 06080000 		.4byte	.LASF21
 5048 00f8 05       		.byte	0x5
 5049 00f9 23       		.byte	0x23
 5050 00fa FE000000 		.4byte	0xfe
 5051 00fe 06       		.uleb128 0x6
 5052 00ff 04       		.byte	0x4
 5053 0100 04010000 		.4byte	0x104
 5054 0104 09       		.uleb128 0x9
 5055 0105 0F010000 		.4byte	0x10f
 5056 0109 0A       		.uleb128 0xa
 5057 010a A5000000 		.4byte	0xa5
 5058 010e 00       		.byte	0
 5059 010f 02       		.uleb128 0x2
 5060 0110 52010000 		.4byte	.LASF22
 5061 0114 06       		.byte	0x6
 5062 0115 37       		.byte	0x37
 5063 0116 D5000000 		.4byte	0xd5
 5064 011a 02       		.uleb128 0x2
 5065 011b C1070000 		.4byte	.LASF23
 5066 011f 06       		.byte	0x6
 5067 0120 38       		.byte	0x38
 5068 0121 7E000000 		.4byte	0x7e
 5069 0125 02       		.uleb128 0x2
 5070 0126 B9060000 		.4byte	.LASF24
 5071 012a 06       		.byte	0x6
 5072 012b 39       		.byte	0x39
 5073 012c 90000000 		.4byte	0x90
 5074 0130 02       		.uleb128 0x2
 5075 0131 1B090000 		.4byte	.LASF25
 5076 0135 06       		.byte	0x6
 5077 0136 3F       		.byte	0x3f
 5078 0137 D5000000 		.4byte	0xd5
 5079 013b 06       		.uleb128 0x6
 5080 013c 04       		.byte	0x4
 5081 013d BF000000 		.4byte	0xbf
 5082 0141 0B       		.uleb128 0xb
 5083 0142 A5000000 		.4byte	0xa5
 5084 0146 51010000 		.4byte	0x151
 5085 014a 0C       		.uleb128 0xc
 5086 014b 9E000000 		.4byte	0x9e
 5087 014f 04       		.byte	0x4
 5088 0150 00       		.byte	0
 5089 0151 0D       		.uleb128 0xd
 5090 0152 85010000 		.4byte	.LASF32
 5091 0156 14       		.byte	0x14
 5092 0157 07       		.byte	0x7
 5093 0158 8B       		.byte	0x8b
 5094 0159 9A010000 		.4byte	0x19a
 5095 015d 0E       		.uleb128 0xe
 5096 015e 0A0A0000 		.4byte	.LASF26
 5097 0162 07       		.byte	0x7
 5098 0163 8E       		.byte	0x8e
 5099 0164 30010000 		.4byte	0x130
 5100 0168 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 191


 5101 0169 0E       		.uleb128 0xe
 5102 016a 15080000 		.4byte	.LASF27
 5103 016e 07       		.byte	0x7
 5104 016f 8F       		.byte	0x8f
 5105 0170 9A010000 		.4byte	0x19a
 5106 0174 04       		.byte	0x4
 5107 0175 0E       		.uleb128 0xe
 5108 0176 9E030000 		.4byte	.LASF28
 5109 017a 07       		.byte	0x7
 5110 017b 90       		.byte	0x90
 5111 017c 9A010000 		.4byte	0x19a
 5112 0180 08       		.byte	0x8
 5113 0181 0E       		.uleb128 0xe
 5114 0182 FE0C0000 		.4byte	.LASF29
 5115 0186 07       		.byte	0x7
 5116 0187 91       		.byte	0x91
 5117 0188 A5000000 		.4byte	0xa5
 5118 018c 0C       		.byte	0xc
 5119 018d 0E       		.uleb128 0xe
 5120 018e A6090000 		.4byte	.LASF30
 5121 0192 07       		.byte	0x7
 5122 0193 92       		.byte	0x92
 5123 0194 A5000000 		.4byte	0xa5
 5124 0198 10       		.byte	0x10
 5125 0199 00       		.byte	0
 5126 019a 06       		.uleb128 0x6
 5127 019b 04       		.byte	0x4
 5128 019c 51010000 		.4byte	0x151
 5129 01a0 02       		.uleb128 0x2
 5130 01a1 84060000 		.4byte	.LASF31
 5131 01a5 07       		.byte	0x7
 5132 01a6 95       		.byte	0x95
 5133 01a7 51010000 		.4byte	0x151
 5134 01ab 0D       		.uleb128 0xd
 5135 01ac 24050000 		.4byte	.LASF33
 5136 01b0 0C       		.byte	0xc
 5137 01b1 07       		.byte	0x7
 5138 01b2 97       		.byte	0x97
 5139 01b3 DC010000 		.4byte	0x1dc
 5140 01b7 0E       		.uleb128 0xe
 5141 01b8 0A0A0000 		.4byte	.LASF26
 5142 01bc 07       		.byte	0x7
 5143 01bd 9A       		.byte	0x9a
 5144 01be 30010000 		.4byte	0x130
 5145 01c2 00       		.byte	0
 5146 01c3 0E       		.uleb128 0xe
 5147 01c4 15080000 		.4byte	.LASF27
 5148 01c8 07       		.byte	0x7
 5149 01c9 9B       		.byte	0x9b
 5150 01ca 9A010000 		.4byte	0x19a
 5151 01ce 04       		.byte	0x4
 5152 01cf 0E       		.uleb128 0xe
 5153 01d0 9E030000 		.4byte	.LASF28
 5154 01d4 07       		.byte	0x7
 5155 01d5 9C       		.byte	0x9c
 5156 01d6 9A010000 		.4byte	0x19a
 5157 01da 08       		.byte	0x8
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 192


 5158 01db 00       		.byte	0
 5159 01dc 02       		.uleb128 0x2
 5160 01dd 05070000 		.4byte	.LASF34
 5161 01e1 07       		.byte	0x7
 5162 01e2 9E       		.byte	0x9e
 5163 01e3 AB010000 		.4byte	0x1ab
 5164 01e7 0D       		.uleb128 0xd
 5165 01e8 47050000 		.4byte	.LASF35
 5166 01ec 14       		.byte	0x14
 5167 01ed 07       		.byte	0x7
 5168 01ee A3       		.byte	0xa3
 5169 01ef 18020000 		.4byte	0x218
 5170 01f3 0E       		.uleb128 0xe
 5171 01f4 0B000000 		.4byte	.LASF36
 5172 01f8 07       		.byte	0x7
 5173 01f9 A6       		.byte	0xa6
 5174 01fa 18020000 		.4byte	0x218
 5175 01fe 00       		.byte	0
 5176 01ff 0E       		.uleb128 0xe
 5177 0200 4A010000 		.4byte	.LASF37
 5178 0204 07       		.byte	0x7
 5179 0205 A7       		.byte	0xa7
 5180 0206 1D020000 		.4byte	0x21d
 5181 020a 04       		.byte	0x4
 5182 020b 0E       		.uleb128 0xe
 5183 020c EB060000 		.4byte	.LASF38
 5184 0210 07       		.byte	0x7
 5185 0211 A8       		.byte	0xa8
 5186 0212 DC010000 		.4byte	0x1dc
 5187 0216 08       		.byte	0x8
 5188 0217 00       		.byte	0
 5189 0218 08       		.uleb128 0x8
 5190 0219 25010000 		.4byte	0x125
 5191 021d 06       		.uleb128 0x6
 5192 021e 04       		.byte	0x4
 5193 021f A0010000 		.4byte	0x1a0
 5194 0223 02       		.uleb128 0x2
 5195 0224 07090000 		.4byte	.LASF39
 5196 0228 07       		.byte	0x7
 5197 0229 AA       		.byte	0xaa
 5198 022a E7010000 		.4byte	0x1e7
 5199 022e 02       		.uleb128 0x2
 5200 022f AD080000 		.4byte	.LASF40
 5201 0233 08       		.byte	0x8
 5202 0234 3D       		.byte	0x3d
 5203 0235 A5000000 		.4byte	0xa5
 5204 0239 0F       		.uleb128 0xf
 5205 023a 01       		.byte	0x1
 5206 023b 5E000000 		.4byte	0x5e
 5207 023f 08       		.byte	0x8
 5208 0240 52       		.byte	0x52
 5209 0241 64020000 		.4byte	0x264
 5210 0245 10       		.uleb128 0x10
 5211 0246 02010000 		.4byte	.LASF41
 5212 024a 00       		.byte	0
 5213 024b 10       		.uleb128 0x10
 5214 024c 3A090000 		.4byte	.LASF42
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 193


 5215 0250 01       		.byte	0x1
 5216 0251 10       		.uleb128 0x10
 5217 0252 19050000 		.4byte	.LASF43
 5218 0256 02       		.byte	0x2
 5219 0257 10       		.uleb128 0x10
 5220 0258 1A030000 		.4byte	.LASF44
 5221 025c 03       		.byte	0x3
 5222 025d 10       		.uleb128 0x10
 5223 025e 8F060000 		.4byte	.LASF45
 5224 0262 04       		.byte	0x4
 5225 0263 00       		.byte	0
 5226 0264 02       		.uleb128 0x2
 5227 0265 04050000 		.4byte	.LASF46
 5228 0269 08       		.byte	0x8
 5229 026a 58       		.byte	0x58
 5230 026b 39020000 		.4byte	0x239
 5231 026f 0D       		.uleb128 0xd
 5232 0270 5E010000 		.4byte	.LASF47
 5233 0274 08       		.byte	0x8
 5234 0275 08       		.byte	0x8
 5235 0276 5D       		.byte	0x5d
 5236 0277 94020000 		.4byte	0x294
 5237 027b 0E       		.uleb128 0xe
 5238 027c 18020000 		.4byte	.LASF48
 5239 0280 08       		.byte	0x8
 5240 0281 5F       		.byte	0x5f
 5241 0282 1A010000 		.4byte	0x11a
 5242 0286 00       		.byte	0
 5243 0287 0E       		.uleb128 0xe
 5244 0288 E8070000 		.4byte	.LASF49
 5245 028c 08       		.byte	0x8
 5246 028d 60       		.byte	0x60
 5247 028e 30010000 		.4byte	0x130
 5248 0292 04       		.byte	0x4
 5249 0293 00       		.byte	0
 5250 0294 02       		.uleb128 0x2
 5251 0295 79080000 		.4byte	.LASF50
 5252 0299 08       		.byte	0x8
 5253 029a 61       		.byte	0x61
 5254 029b 6F020000 		.4byte	0x26f
 5255 029f 0D       		.uleb128 0xd
 5256 02a0 4F090000 		.4byte	.LASF51
 5257 02a4 0C       		.byte	0xc
 5258 02a5 08       		.byte	0x8
 5259 02a6 66       		.byte	0x66
 5260 02a7 D0020000 		.4byte	0x2d0
 5261 02ab 0E       		.uleb128 0xe
 5262 02ac 0C0C0000 		.4byte	.LASF52
 5263 02b0 08       		.byte	0x8
 5264 02b1 68       		.byte	0x68
 5265 02b2 A5000000 		.4byte	0xa5
 5266 02b6 00       		.byte	0
 5267 02b7 0E       		.uleb128 0xe
 5268 02b8 B1070000 		.4byte	.LASF53
 5269 02bc 08       		.byte	0x8
 5270 02bd 69       		.byte	0x69
 5271 02be D5000000 		.4byte	0xd5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 194


 5272 02c2 04       		.byte	0x4
 5273 02c3 0E       		.uleb128 0xe
 5274 02c4 3A020000 		.4byte	.LASF54
 5275 02c8 08       		.byte	0x8
 5276 02c9 6A       		.byte	0x6a
 5277 02ca D5000000 		.4byte	0xd5
 5278 02ce 08       		.byte	0x8
 5279 02cf 00       		.byte	0
 5280 02d0 02       		.uleb128 0x2
 5281 02d1 55070000 		.4byte	.LASF55
 5282 02d5 08       		.byte	0x8
 5283 02d6 6B       		.byte	0x6b
 5284 02d7 9F020000 		.4byte	0x29f
 5285 02db 07       		.uleb128 0x7
 5286 02dc B4000000 		.4byte	0xb4
 5287 02e0 06       		.uleb128 0x6
 5288 02e1 04       		.byte	0x4
 5289 02e2 0F010000 		.4byte	0x10f
 5290 02e6 11       		.uleb128 0x11
 5291 02e7 63000000 		.4byte	.LASF56
 5292 02eb 68       		.byte	0x68
 5293 02ec 01       		.byte	0x1
 5294 02ed 0D01     		.2byte	0x10d
 5295 02ef 83030000 		.4byte	0x383
 5296 02f3 12       		.uleb128 0x12
 5297 02f4 4F0E0000 		.4byte	.LASF57
 5298 02f8 01       		.byte	0x1
 5299 02f9 0F01     		.2byte	0x10f
 5300 02fb 83030000 		.4byte	0x383
 5301 02ff 00       		.byte	0
 5302 0300 12       		.uleb128 0x12
 5303 0301 1E0E0000 		.4byte	.LASF58
 5304 0305 01       		.byte	0x1
 5305 0306 1501     		.2byte	0x115
 5306 0308 A0010000 		.4byte	0x1a0
 5307 030c 04       		.byte	0x4
 5308 030d 12       		.uleb128 0x12
 5309 030e C60C0000 		.4byte	.LASF59
 5310 0312 01       		.byte	0x1
 5311 0313 1601     		.2byte	0x116
 5312 0315 A0010000 		.4byte	0x1a0
 5313 0319 18       		.byte	0x18
 5314 031a 12       		.uleb128 0x12
 5315 031b 41000000 		.4byte	.LASF60
 5316 031f 01       		.byte	0x1
 5317 0320 1701     		.2byte	0x117
 5318 0322 25010000 		.4byte	0x125
 5319 0326 2C       		.byte	0x2c
 5320 0327 12       		.uleb128 0x12
 5321 0328 9D0A0000 		.4byte	.LASF61
 5322 032c 01       		.byte	0x1
 5323 032d 1801     		.2byte	0x118
 5324 032f E0020000 		.4byte	0x2e0
 5325 0333 30       		.byte	0x30
 5326 0334 12       		.uleb128 0x12
 5327 0335 00000000 		.4byte	.LASF62
 5328 0339 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 195


 5329 033a 1901     		.2byte	0x119
 5330 033c 8E030000 		.4byte	0x38e
 5331 0340 34       		.byte	0x34
 5332 0341 12       		.uleb128 0x12
 5333 0342 A70C0000 		.4byte	.LASF63
 5334 0346 01       		.byte	0x1
 5335 0347 2901     		.2byte	0x129
 5336 0349 25010000 		.4byte	0x125
 5337 034d 44       		.byte	0x44
 5338 034e 12       		.uleb128 0x12
 5339 034f 40060000 		.4byte	.LASF64
 5340 0353 01       		.byte	0x1
 5341 0354 2A01     		.2byte	0x12a
 5342 0356 25010000 		.4byte	0x125
 5343 035a 48       		.byte	0x48
 5344 035b 12       		.uleb128 0x12
 5345 035c 59040000 		.4byte	.LASF65
 5346 0360 01       		.byte	0x1
 5347 0361 3201     		.2byte	0x132
 5348 0363 41010000 		.4byte	0x141
 5349 0367 4C       		.byte	0x4c
 5350 0368 12       		.uleb128 0x12
 5351 0369 0E060000 		.4byte	.LASF66
 5352 036d 01       		.byte	0x1
 5353 036e 4501     		.2byte	0x145
 5354 0370 EE000000 		.4byte	0xee
 5355 0374 60       		.byte	0x60
 5356 0375 12       		.uleb128 0x12
 5357 0376 9C020000 		.4byte	.LASF67
 5358 037a 01       		.byte	0x1
 5359 037b 4601     		.2byte	0x146
 5360 037d 9E030000 		.4byte	0x39e
 5361 0381 64       		.byte	0x64
 5362 0382 00       		.byte	0
 5363 0383 06       		.uleb128 0x6
 5364 0384 04       		.byte	0x4
 5365 0385 89030000 		.4byte	0x389
 5366 0389 08       		.uleb128 0x8
 5367 038a 0F010000 		.4byte	0x10f
 5368 038e 0B       		.uleb128 0xb
 5369 038f AD000000 		.4byte	0xad
 5370 0393 9E030000 		.4byte	0x39e
 5371 0397 0C       		.uleb128 0xc
 5372 0398 9E000000 		.4byte	0x9e
 5373 039c 0F       		.byte	0xf
 5374 039d 00       		.byte	0
 5375 039e 08       		.uleb128 0x8
 5376 039f BF000000 		.4byte	0xbf
 5377 03a3 13       		.uleb128 0x13
 5378 03a4 75020000 		.4byte	.LASF68
 5379 03a8 01       		.byte	0x1
 5380 03a9 5301     		.2byte	0x153
 5381 03ab E6020000 		.4byte	0x2e6
 5382 03af 13       		.uleb128 0x13
 5383 03b0 EB0C0000 		.4byte	.LASF69
 5384 03b4 01       		.byte	0x1
 5385 03b5 5701     		.2byte	0x157
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 196


 5386 03b7 A3030000 		.4byte	0x3a3
 5387 03bb 14       		.uleb128 0x14
 5388 03bc 680A0000 		.4byte	.LASF72
 5389 03c0 01       		.byte	0x1
 5390 03c1 C306     		.2byte	0x6c3
 5391 03c3 1A010000 		.4byte	0x11a
 5392 03c7 00000000 		.4byte	.LFB42
 5393 03cb 44000000 		.4byte	.LFE42-.LFB42
 5394 03cf 01       		.uleb128 0x1
 5395 03d0 9C       		.byte	0x9c
 5396 03d1 06040000 		.4byte	0x406
 5397 03d5 15       		.uleb128 0x15
 5398 03d6 34090000 		.4byte	.LASF74
 5399 03da 01       		.byte	0x1
 5400 03db C306     		.2byte	0x6c3
 5401 03dd 06040000 		.4byte	0x406
 5402 03e1 00000000 		.4byte	.LLST0
 5403 03e5 16       		.uleb128 0x16
 5404 03e6 340B0000 		.4byte	.LASF70
 5405 03ea 01       		.byte	0x1
 5406 03eb C506     		.2byte	0x6c5
 5407 03ed 1A010000 		.4byte	0x11a
 5408 03f1 6C000000 		.4byte	.LLST1
 5409 03f5 16       		.uleb128 0x16
 5410 03f6 2D0E0000 		.4byte	.LASF71
 5411 03fa 01       		.byte	0x1
 5412 03fb C606     		.2byte	0x6c6
 5413 03fd 16040000 		.4byte	0x416
 5414 0401 8B000000 		.4byte	.LLST2
 5415 0405 00       		.byte	0
 5416 0406 07       		.uleb128 0x7
 5417 0407 2E020000 		.4byte	0x22e
 5418 040b 06       		.uleb128 0x6
 5419 040c 04       		.byte	0x4
 5420 040d 11040000 		.4byte	0x411
 5421 0411 07       		.uleb128 0x7
 5422 0412 AF030000 		.4byte	0x3af
 5423 0416 07       		.uleb128 0x7
 5424 0417 0B040000 		.4byte	0x40b
 5425 041b 14       		.uleb128 0x14
 5426 041c 650D0000 		.4byte	.LASF73
 5427 0420 01       		.byte	0x1
 5428 0421 2C0E     		.2byte	0xe2c
 5429 0423 CA000000 		.4byte	0xca
 5430 0427 00000000 		.4byte	.LFB68
 5431 042b 14000000 		.4byte	.LFE68-.LFB68
 5432 042f 01       		.uleb128 0x1
 5433 0430 9C       		.byte	0x9c
 5434 0431 56040000 		.4byte	0x456
 5435 0435 15       		.uleb128 0x15
 5436 0436 E7010000 		.4byte	.LASF75
 5437 043a 01       		.byte	0x1
 5438 043b 2C0E     		.2byte	0xe2c
 5439 043d 56040000 		.4byte	0x456
 5440 0441 F7000000 		.4byte	.LLST3
 5441 0445 16       		.uleb128 0x16
 5442 0446 71080000 		.4byte	.LASF76
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 197


 5443 044a 01       		.byte	0x1
 5444 044b 2E0E     		.2byte	0xe2e
 5445 044d D5000000 		.4byte	0xd5
 5446 0451 15010000 		.4byte	.LLST4
 5447 0455 00       		.byte	0
 5448 0456 06       		.uleb128 0x6
 5449 0457 04       		.byte	0x4
 5450 0458 5C040000 		.4byte	0x45c
 5451 045c 07       		.uleb128 0x7
 5452 045d BF000000 		.4byte	0xbf
 5453 0461 17       		.uleb128 0x17
 5454 0462 CC070000 		.4byte	.LASF77
 5455 0466 01       		.byte	0x1
 5456 0467 920E     		.2byte	0xe92
 5457 0469 00000000 		.4byte	.LFB71
 5458 046d 30000000 		.4byte	.LFE71-.LFB71
 5459 0471 01       		.uleb128 0x1
 5460 0472 9C       		.byte	0x9c
 5461 0473 88040000 		.4byte	0x488
 5462 0477 16       		.uleb128 0x16
 5463 0478 2D0E0000 		.4byte	.LASF71
 5464 047c 01       		.byte	0x1
 5465 047d 940E     		.2byte	0xe94
 5466 047f 88040000 		.4byte	0x488
 5467 0483 34010000 		.4byte	.LLST5
 5468 0487 00       		.byte	0
 5469 0488 06       		.uleb128 0x6
 5470 0489 04       		.byte	0x4
 5471 048a AF030000 		.4byte	0x3af
 5472 048e 17       		.uleb128 0x17
 5473 048f 060D0000 		.4byte	.LASF78
 5474 0493 01       		.byte	0x1
 5475 0494 5C0E     		.2byte	0xe5c
 5476 0496 00000000 		.4byte	.LFB70
 5477 049a 12000000 		.4byte	.LFE70-.LFB70
 5478 049e 01       		.uleb128 0x1
 5479 049f 9C       		.byte	0x9c
 5480 04a0 CE040000 		.4byte	0x4ce
 5481 04a4 15       		.uleb128 0x15
 5482 04a5 2D0E0000 		.4byte	.LASF71
 5483 04a9 01       		.byte	0x1
 5484 04aa 5C0E     		.2byte	0xe5c
 5485 04ac 88040000 		.4byte	0x488
 5486 04b0 47010000 		.4byte	.LLST6
 5487 04b4 18       		.uleb128 0x18
 5488 04b5 0A000000 		.4byte	.LVL18
 5489 04b9 101E0000 		.4byte	0x1e10
 5490 04bd 19       		.uleb128 0x19
 5491 04be 10000000 		.4byte	.LVL19
 5492 04c2 101E0000 		.4byte	0x1e10
 5493 04c6 1A       		.uleb128 0x1a
 5494 04c7 01       		.uleb128 0x1
 5495 04c8 50       		.byte	0x50
 5496 04c9 02       		.uleb128 0x2
 5497 04ca 74       		.byte	0x74
 5498 04cb 00       		.sleb128 0
 5499 04cc 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 198


 5500 04cd 00       		.byte	0
 5501 04ce 17       		.uleb128 0x17
 5502 04cf BC000000 		.4byte	.LASF79
 5503 04d3 01       		.byte	0x1
 5504 04d4 3703     		.2byte	0x337
 5505 04d6 00000000 		.4byte	.LFB33
 5506 04da AC000000 		.4byte	.LFE33-.LFB33
 5507 04de 01       		.uleb128 0x1
 5508 04df 9C       		.byte	0x9c
 5509 04e0 E2050000 		.4byte	0x5e2
 5510 04e4 15       		.uleb128 0x15
 5511 04e5 4A070000 		.4byte	.LASF80
 5512 04e9 01       		.byte	0x1
 5513 04ea 3703     		.2byte	0x337
 5514 04ec F3000000 		.4byte	0xf3
 5515 04f0 73010000 		.4byte	.LLST7
 5516 04f4 15       		.uleb128 0x15
 5517 04f5 A3050000 		.4byte	.LASF81
 5518 04f9 01       		.byte	0x1
 5519 04fa 3803     		.2byte	0x338
 5520 04fc DB020000 		.4byte	0x2db
 5521 0500 9E010000 		.4byte	.LLST8
 5522 0504 15       		.uleb128 0x15
 5523 0505 C5060000 		.4byte	.LASF82
 5524 0509 01       		.byte	0x1
 5525 050a 3903     		.2byte	0x339
 5526 050c E2050000 		.4byte	0x5e2
 5527 0510 CA010000 		.4byte	.LLST9
 5528 0514 15       		.uleb128 0x15
 5529 0515 FD090000 		.4byte	.LASF83
 5530 0519 01       		.byte	0x1
 5531 051a 3A03     		.2byte	0x33a
 5532 051c E7050000 		.4byte	0x5e7
 5533 0520 F6010000 		.4byte	.LLST10
 5534 0524 15       		.uleb128 0x15
 5535 0525 41000000 		.4byte	.LASF60
 5536 0529 01       		.byte	0x1
 5537 052a 3B03     		.2byte	0x33b
 5538 052c 25010000 		.4byte	0x125
 5539 0530 15020000 		.4byte	.LLST11
 5540 0534 1B       		.uleb128 0x1b
 5541 0535 970E0000 		.4byte	.LASF84
 5542 0539 01       		.byte	0x1
 5543 053a 3C03     		.2byte	0x33c
 5544 053c F2050000 		.4byte	0x5f2
 5545 0540 02       		.uleb128 0x2
 5546 0541 91       		.byte	0x91
 5547 0542 04       		.sleb128 4
 5548 0543 1B       		.uleb128 0x1b
 5549 0544 41070000 		.4byte	.LASF85
 5550 0548 01       		.byte	0x1
 5551 0549 3D03     		.2byte	0x33d
 5552 054b 88040000 		.4byte	0x488
 5553 054f 02       		.uleb128 0x2
 5554 0550 91       		.byte	0x91
 5555 0551 08       		.sleb128 8
 5556 0552 1B       		.uleb128 0x1b
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 199


 5557 0553 800D0000 		.4byte	.LASF86
 5558 0557 01       		.byte	0x1
 5559 0558 3E03     		.2byte	0x33e
 5560 055a 02060000 		.4byte	0x602
 5561 055e 02       		.uleb128 0x2
 5562 055f 91       		.byte	0x91
 5563 0560 0C       		.sleb128 12
 5564 0561 16       		.uleb128 0x16
 5565 0562 4F0E0000 		.4byte	.LASF57
 5566 0566 01       		.byte	0x1
 5567 0567 4003     		.2byte	0x340
 5568 0569 E0020000 		.4byte	0x2e0
 5569 056d 34020000 		.4byte	.LLST12
 5570 0571 1C       		.uleb128 0x1c
 5571 0572 7800     		.ascii	"x\000"
 5572 0574 01       		.byte	0x1
 5573 0575 4103     		.2byte	0x341
 5574 0577 25010000 		.4byte	0x125
 5575 057b 73020000 		.4byte	.LLST13
 5576 057f 1D       		.uleb128 0x1d
 5577 0580 1A000000 		.4byte	.LVL25
 5578 0584 1B1E0000 		.4byte	0x1e1b
 5579 0588 9B050000 		.4byte	0x59b
 5580 058c 1A       		.uleb128 0x1a
 5581 058d 01       		.uleb128 0x1
 5582 058e 51       		.byte	0x51
 5583 058f 02       		.uleb128 0x2
 5584 0590 08       		.byte	0x8
 5585 0591 A5       		.byte	0xa5
 5586 0592 1A       		.uleb128 0x1a
 5587 0593 01       		.uleb128 0x1
 5588 0594 52       		.byte	0x52
 5589 0595 04       		.uleb128 0x4
 5590 0596 77       		.byte	0x77
 5591 0597 00       		.sleb128 0
 5592 0598 32       		.byte	0x32
 5593 0599 24       		.byte	0x24
 5594 059a 00       		.byte	0
 5595 059b 1D       		.uleb128 0x1d
 5596 059c 60000000 		.4byte	.LVL34
 5597 05a0 261E0000 		.4byte	0x1e26
 5598 05a4 AF050000 		.4byte	0x5af
 5599 05a8 1A       		.uleb128 0x1a
 5600 05a9 01       		.uleb128 0x1
 5601 05aa 50       		.byte	0x50
 5602 05ab 02       		.uleb128 0x2
 5603 05ac 76       		.byte	0x76
 5604 05ad 04       		.sleb128 4
 5605 05ae 00       		.byte	0
 5606 05af 1D       		.uleb128 0x1d
 5607 05b0 68000000 		.4byte	.LVL35
 5608 05b4 261E0000 		.4byte	0x1e26
 5609 05b8 C3050000 		.4byte	0x5c3
 5610 05bc 1A       		.uleb128 0x1a
 5611 05bd 01       		.uleb128 0x1
 5612 05be 50       		.byte	0x50
 5613 05bf 02       		.uleb128 0x2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 200


 5614 05c0 76       		.byte	0x76
 5615 05c1 18       		.sleb128 24
 5616 05c2 00       		.byte	0
 5617 05c3 19       		.uleb128 0x19
 5618 05c4 9A000000 		.4byte	.LVL41
 5619 05c8 321E0000 		.4byte	0x1e32
 5620 05cc 1A       		.uleb128 0x1a
 5621 05cd 01       		.uleb128 0x1
 5622 05ce 50       		.byte	0x50
 5623 05cf 02       		.uleb128 0x2
 5624 05d0 77       		.byte	0x77
 5625 05d1 00       		.sleb128 0
 5626 05d2 1A       		.uleb128 0x1a
 5627 05d3 01       		.uleb128 0x1
 5628 05d4 51       		.byte	0x51
 5629 05d5 03       		.uleb128 0x3
 5630 05d6 7D       		.byte	0x7d
 5631 05d7 00       		.sleb128 0
 5632 05d8 06       		.byte	0x6
 5633 05d9 1A       		.uleb128 0x1a
 5634 05da 01       		.uleb128 0x1
 5635 05db 52       		.byte	0x52
 5636 05dc 03       		.uleb128 0x3
 5637 05dd 91       		.byte	0x91
 5638 05de 64       		.sleb128 -28
 5639 05df 06       		.byte	0x6
 5640 05e0 00       		.byte	0
 5641 05e1 00       		.byte	0
 5642 05e2 07       		.uleb128 0x7
 5643 05e3 D5000000 		.4byte	0xd5
 5644 05e7 07       		.uleb128 0x7
 5645 05e8 A5000000 		.4byte	0xa5
 5646 05ec 06       		.uleb128 0x6
 5647 05ed 04       		.byte	0x4
 5648 05ee 2E020000 		.4byte	0x22e
 5649 05f2 07       		.uleb128 0x7
 5650 05f3 EC050000 		.4byte	0x5ec
 5651 05f7 06       		.uleb128 0x6
 5652 05f8 04       		.byte	0x4
 5653 05f9 FD050000 		.4byte	0x5fd
 5654 05fd 07       		.uleb128 0x7
 5655 05fe D0020000 		.4byte	0x2d0
 5656 0602 07       		.uleb128 0x7
 5657 0603 F7050000 		.4byte	0x5f7
 5658 0607 17       		.uleb128 0x17
 5659 0608 680E0000 		.4byte	.LASF87
 5660 060c 01       		.byte	0x1
 5661 060d 6C0D     		.2byte	0xd6c
 5662 060f 00000000 		.4byte	.LFB66
 5663 0613 58000000 		.4byte	.LFE66-.LFB66
 5664 0617 01       		.uleb128 0x1
 5665 0618 9C       		.byte	0x9c
 5666 0619 AF060000 		.4byte	0x6af
 5667 061d 16       		.uleb128 0x16
 5668 061e 41000000 		.4byte	.LASF60
 5669 0622 01       		.byte	0x1
 5670 0623 6E0D     		.2byte	0xd6e
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 201


 5671 0625 25010000 		.4byte	0x125
 5672 0629 9D020000 		.4byte	.LLST14
 5673 062d 1D       		.uleb128 0x1d
 5674 062e 16000000 		.4byte	.LVL47
 5675 0632 3D1E0000 		.4byte	0x1e3d
 5676 0636 4E060000 		.4byte	0x64e
 5677 063a 1A       		.uleb128 0x1a
 5678 063b 01       		.uleb128 0x1
 5679 063c 50       		.byte	0x50
 5680 063d 0F       		.uleb128 0xf
 5681 063e 74       		.byte	0x74
 5682 063f 00       		.sleb128 0
 5683 0640 32       		.byte	0x32
 5684 0641 24       		.byte	0x24
 5685 0642 74       		.byte	0x74
 5686 0643 00       		.sleb128 0
 5687 0644 22       		.byte	0x22
 5688 0645 32       		.byte	0x32
 5689 0646 24       		.byte	0x24
 5690 0647 03       		.byte	0x3
 5691 0648 30000000 		.4byte	.LANCHOR0+48
 5692 064c 22       		.byte	0x22
 5693 064d 00       		.byte	0
 5694 064e 1D       		.uleb128 0x1d
 5695 064f 28000000 		.4byte	.LVL50
 5696 0653 3D1E0000 		.4byte	0x1e3d
 5697 0657 62060000 		.4byte	0x662
 5698 065b 1A       		.uleb128 0x1a
 5699 065c 01       		.uleb128 0x1
 5700 065d 50       		.byte	0x50
 5701 065e 02       		.uleb128 0x2
 5702 065f 77       		.byte	0x77
 5703 0660 00       		.sleb128 0
 5704 0661 00       		.byte	0
 5705 0662 1D       		.uleb128 0x1d
 5706 0663 32000000 		.4byte	.LVL51
 5707 0667 3D1E0000 		.4byte	0x1e3d
 5708 066b 76060000 		.4byte	0x676
 5709 066f 1A       		.uleb128 0x1a
 5710 0670 01       		.uleb128 0x1
 5711 0671 50       		.byte	0x50
 5712 0672 02       		.uleb128 0x2
 5713 0673 76       		.byte	0x76
 5714 0674 00       		.sleb128 0
 5715 0675 00       		.byte	0
 5716 0676 1D       		.uleb128 0x1d
 5717 0677 3C000000 		.4byte	.LVL52
 5718 067b 3D1E0000 		.4byte	0x1e3d
 5719 067f 8A060000 		.4byte	0x68a
 5720 0683 1A       		.uleb128 0x1a
 5721 0684 01       		.uleb128 0x1
 5722 0685 50       		.byte	0x50
 5723 0686 02       		.uleb128 0x2
 5724 0687 75       		.byte	0x75
 5725 0688 14       		.sleb128 20
 5726 0689 00       		.byte	0
 5727 068a 1D       		.uleb128 0x1d
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 202


 5728 068b 44000000 		.4byte	.LVL53
 5729 068f 3D1E0000 		.4byte	0x1e3d
 5730 0693 9E060000 		.4byte	0x69e
 5731 0697 1A       		.uleb128 0x1a
 5732 0698 01       		.uleb128 0x1
 5733 0699 50       		.byte	0x50
 5734 069a 02       		.uleb128 0x2
 5735 069b 74       		.byte	0x74
 5736 069c 3C       		.sleb128 60
 5737 069d 00       		.byte	0
 5738 069e 19       		.uleb128 0x19
 5739 069f 4A000000 		.4byte	.LVL54
 5740 06a3 3D1E0000 		.4byte	0x1e3d
 5741 06a7 1A       		.uleb128 0x1a
 5742 06a8 01       		.uleb128 0x1
 5743 06a9 50       		.byte	0x50
 5744 06aa 02       		.uleb128 0x2
 5745 06ab 75       		.byte	0x75
 5746 06ac 00       		.sleb128 0
 5747 06ad 00       		.byte	0
 5748 06ae 00       		.byte	0
 5749 06af 17       		.uleb128 0x17
 5750 06b0 20070000 		.4byte	.LASF88
 5751 06b4 01       		.byte	0x1
 5752 06b5 0304     		.2byte	0x403
 5753 06b7 00000000 		.4byte	.LFB34
 5754 06bb 8C000000 		.4byte	.LFE34-.LFB34
 5755 06bf 01       		.uleb128 0x1
 5756 06c0 9C       		.byte	0x9c
 5757 06c1 0E070000 		.4byte	0x70e
 5758 06c5 15       		.uleb128 0x15
 5759 06c6 41070000 		.4byte	.LASF85
 5760 06ca 01       		.byte	0x1
 5761 06cb 0304     		.2byte	0x403
 5762 06cd 88040000 		.4byte	0x488
 5763 06d1 BC020000 		.4byte	.LLST15
 5764 06d5 18       		.uleb128 0x18
 5765 06d6 08000000 		.4byte	.LVL56
 5766 06da 491E0000 		.4byte	0x1e49
 5767 06de 18       		.uleb128 0x18
 5768 06df 24000000 		.4byte	.LVL57
 5769 06e3 07060000 		.4byte	0x607
 5770 06e7 1D       		.uleb128 0x1d
 5771 06e8 64000000 		.4byte	.LVL58
 5772 06ec 541E0000 		.4byte	0x1e54
 5773 06f0 FB060000 		.4byte	0x6fb
 5774 06f4 1A       		.uleb128 0x1a
 5775 06f5 01       		.uleb128 0x1
 5776 06f6 51       		.byte	0x51
 5777 06f7 02       		.uleb128 0x2
 5778 06f8 74       		.byte	0x74
 5779 06f9 04       		.sleb128 4
 5780 06fa 00       		.byte	0
 5781 06fb 18       		.uleb128 0x18
 5782 06fc 68000000 		.4byte	.LVL59
 5783 0700 601E0000 		.4byte	0x1e60
 5784 0704 18       		.uleb128 0x18
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 203


 5785 0705 80000000 		.4byte	.LVL60
 5786 0709 6B1E0000 		.4byte	0x1e6b
 5787 070d 00       		.byte	0
 5788 070e 17       		.uleb128 0x17
 5789 070f A50E0000 		.4byte	.LASF89
 5790 0713 01       		.byte	0x1
 5791 0714 8C0D     		.2byte	0xd8c
 5792 0716 00000000 		.4byte	.LFB67
 5793 071a 38000000 		.4byte	.LFE67-.LFB67
 5794 071e 01       		.uleb128 0x1
 5795 071f 9C       		.byte	0x9c
 5796 0720 75070000 		.4byte	0x775
 5797 0724 1E       		.uleb128 0x1e
 5798 0725 02000000 		.4byte	.LBB2
 5799 0729 30000000 		.4byte	.LBE2-.LBB2
 5800 072d 16       		.uleb128 0x16
 5801 072e 2D0E0000 		.4byte	.LASF71
 5802 0732 01       		.byte	0x1
 5803 0733 930D     		.2byte	0xd93
 5804 0735 88040000 		.4byte	0x488
 5805 0739 E8020000 		.4byte	.LLST16
 5806 073d 18       		.uleb128 0x18
 5807 073e 08000000 		.4byte	.LVL62
 5808 0742 491E0000 		.4byte	0x1e49
 5809 0746 1D       		.uleb128 0x1d
 5810 0747 14000000 		.4byte	.LVL64
 5811 074b 761E0000 		.4byte	0x1e76
 5812 074f 5A070000 		.4byte	0x75a
 5813 0753 1A       		.uleb128 0x1a
 5814 0754 01       		.uleb128 0x1
 5815 0755 50       		.byte	0x50
 5816 0756 02       		.uleb128 0x2
 5817 0757 75       		.byte	0x75
 5818 0758 04       		.sleb128 4
 5819 0759 00       		.byte	0
 5820 075a 18       		.uleb128 0x18
 5821 075b 24000000 		.4byte	.LVL65
 5822 075f 601E0000 		.4byte	0x1e60
 5823 0763 19       		.uleb128 0x19
 5824 0764 2A000000 		.4byte	.LVL66
 5825 0768 8E040000 		.4byte	0x48e
 5826 076c 1A       		.uleb128 0x1a
 5827 076d 01       		.uleb128 0x1
 5828 076e 50       		.byte	0x50
 5829 076f 02       		.uleb128 0x2
 5830 0770 75       		.byte	0x75
 5831 0771 00       		.sleb128 0
 5832 0772 00       		.byte	0
 5833 0773 00       		.byte	0
 5834 0774 00       		.byte	0
 5835 0775 1F       		.uleb128 0x1f
 5836 0776 DF060000 		.4byte	.LASF90
 5837 077a 01       		.byte	0x1
 5838 077b 980C     		.2byte	0xc98
 5839 077d 00000000 		.4byte	.LFB63
 5840 0781 08000000 		.4byte	.LFE63-.LFB63
 5841 0785 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 204


 5842 0786 9C       		.byte	0x9c
 5843 0787 A5070000 		.4byte	0x7a5
 5844 078b 15       		.uleb128 0x15
 5845 078c FD090000 		.4byte	.LASF83
 5846 0790 01       		.byte	0x1
 5847 0791 980C     		.2byte	0xc98
 5848 0793 A5000000 		.4byte	0xa5
 5849 0797 FB020000 		.4byte	.LLST17
 5850 079b 18       		.uleb128 0x18
 5851 079c 06000000 		.4byte	.LVL69
 5852 07a0 0E070000 		.4byte	0x70e
 5853 07a4 00       		.byte	0
 5854 07a5 17       		.uleb128 0x17
 5855 07a6 890D0000 		.4byte	.LASF91
 5856 07aa 01       		.byte	0x1
 5857 07ab 3013     		.2byte	0x1330
 5858 07ad 00000000 		.4byte	.LFB85
 5859 07b1 64000000 		.4byte	.LFE85-.LFB85
 5860 07b5 01       		.uleb128 0x1
 5861 07b6 9C       		.byte	0x9c
 5862 07b7 2E080000 		.4byte	0x82e
 5863 07bb 15       		.uleb128 0x15
 5864 07bc F10C0000 		.4byte	.LASF92
 5865 07c0 01       		.byte	0x1
 5866 07c1 3013     		.2byte	0x1330
 5867 07c3 30010000 		.4byte	0x130
 5868 07c7 1C030000 		.4byte	.LLST18
 5869 07cb 15       		.uleb128 0x15
 5870 07cc D30B0000 		.4byte	.LASF93
 5871 07d0 01       		.byte	0x1
 5872 07d1 3013     		.2byte	0x1330
 5873 07d3 2E080000 		.4byte	0x82e
 5874 07d7 48030000 		.4byte	.LLST19
 5875 07db 16       		.uleb128 0x16
 5876 07dc 120E0000 		.4byte	.LASF94
 5877 07e0 01       		.byte	0x1
 5878 07e1 3213     		.2byte	0x1332
 5879 07e3 30010000 		.4byte	0x130
 5880 07e7 74030000 		.4byte	.LLST20
 5881 07eb 16       		.uleb128 0x16
 5882 07ec 71050000 		.4byte	.LASF95
 5883 07f0 01       		.byte	0x1
 5884 07f1 3313     		.2byte	0x1333
 5885 07f3 33080000 		.4byte	0x833
 5886 07f7 87030000 		.4byte	.LLST21
 5887 07fb 18       		.uleb128 0x18
 5888 07fc 12000000 		.4byte	.LVL73
 5889 0800 761E0000 		.4byte	0x1e76
 5890 0804 1D       		.uleb128 0x1d
 5891 0805 26000000 		.4byte	.LVL74
 5892 0809 541E0000 		.4byte	0x1e54
 5893 080d 1B080000 		.4byte	0x81b
 5894 0811 1A       		.uleb128 0x1a
 5895 0812 01       		.uleb128 0x1
 5896 0813 50       		.byte	0x50
 5897 0814 05       		.uleb128 0x5
 5898 0815 03       		.byte	0x3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 205


 5899 0816 00000000 		.4byte	.LANCHOR0
 5900 081a 00       		.byte	0
 5901 081b 18       		.uleb128 0x18
 5902 081c 40000000 		.4byte	.LVL76
 5903 0820 821E0000 		.4byte	0x1e82
 5904 0824 18       		.uleb128 0x18
 5905 0825 50000000 		.4byte	.LVL78
 5906 0829 821E0000 		.4byte	0x1e82
 5907 082d 00       		.byte	0
 5908 082e 07       		.uleb128 0x7
 5909 082f 1A010000 		.4byte	0x11a
 5910 0833 07       		.uleb128 0x7
 5911 0834 30010000 		.4byte	0x130
 5912 0838 20       		.uleb128 0x20
 5913 0839 14070000 		.4byte	.LASF98
 5914 083d 01       		.byte	0x1
 5915 083e DC02     		.2byte	0x2dc
 5916 0840 1A010000 		.4byte	0x11a
 5917 0844 00000000 		.4byte	.LFB32
 5918 0848 5E000000 		.4byte	.LFE32-.LFB32
 5919 084c 01       		.uleb128 0x1
 5920 084d 9C       		.byte	0x9c
 5921 084e 7E090000 		.4byte	0x97e
 5922 0852 15       		.uleb128 0x15
 5923 0853 4A070000 		.4byte	.LASF80
 5924 0857 01       		.byte	0x1
 5925 0858 DC02     		.2byte	0x2dc
 5926 085a F3000000 		.4byte	0xf3
 5927 085e 9A030000 		.4byte	.LLST22
 5928 0862 15       		.uleb128 0x15
 5929 0863 A3050000 		.4byte	.LASF81
 5930 0867 01       		.byte	0x1
 5931 0868 DD02     		.2byte	0x2dd
 5932 086a DB020000 		.4byte	0x2db
 5933 086e B9030000 		.4byte	.LLST23
 5934 0872 15       		.uleb128 0x15
 5935 0873 EE020000 		.4byte	.LASF96
 5936 0877 01       		.byte	0x1
 5937 0878 DE02     		.2byte	0x2de
 5938 087a 7E090000 		.4byte	0x97e
 5939 087e D8030000 		.4byte	.LLST24
 5940 0882 15       		.uleb128 0x15
 5941 0883 FD090000 		.4byte	.LASF83
 5942 0887 01       		.byte	0x1
 5943 0888 DF02     		.2byte	0x2df
 5944 088a E7050000 		.4byte	0x5e7
 5945 088e F9030000 		.4byte	.LLST25
 5946 0892 1B       		.uleb128 0x1b
 5947 0893 41000000 		.4byte	.LASF60
 5948 0897 01       		.byte	0x1
 5949 0898 E002     		.2byte	0x2e0
 5950 089a 25010000 		.4byte	0x125
 5951 089e 02       		.uleb128 0x2
 5952 089f 91       		.byte	0x91
 5953 08a0 00       		.sleb128 0
 5954 08a1 1B       		.uleb128 0x1b
 5955 08a2 970E0000 		.4byte	.LASF84
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 206


 5956 08a6 01       		.byte	0x1
 5957 08a7 E102     		.2byte	0x2e1
 5958 08a9 F2050000 		.4byte	0x5f2
 5959 08ad 02       		.uleb128 0x2
 5960 08ae 91       		.byte	0x91
 5961 08af 04       		.sleb128 4
 5962 08b0 16       		.uleb128 0x16
 5963 08b1 41070000 		.4byte	.LASF85
 5964 08b5 01       		.byte	0x1
 5965 08b6 E302     		.2byte	0x2e3
 5966 08b8 88040000 		.4byte	0x488
 5967 08bc 25040000 		.4byte	.LLST26
 5968 08c0 16       		.uleb128 0x16
 5969 08c1 340B0000 		.4byte	.LASF70
 5970 08c5 01       		.byte	0x1
 5971 08c6 E402     		.2byte	0x2e4
 5972 08c8 1A010000 		.4byte	0x11a
 5973 08cc 4E040000 		.4byte	.LLST27
 5974 08d0 21       		.uleb128 0x21
 5975 08d1 0C000000 		.4byte	.LBB3
 5976 08d5 22000000 		.4byte	.LBE3-.LBB3
 5977 08d9 28090000 		.4byte	0x928
 5978 08dd 16       		.uleb128 0x16
 5979 08de 9D0A0000 		.4byte	.LASF61
 5980 08e2 01       		.byte	0x1
 5981 08e3 0103     		.2byte	0x301
 5982 08e5 E0020000 		.4byte	0x2e0
 5983 08e9 6D040000 		.4byte	.LLST28
 5984 08ed 1D       		.uleb128 0x1d
 5985 08ee 12000000 		.4byte	.LVL83
 5986 08f2 8E1E0000 		.4byte	0x1e8e
 5987 08f6 03090000 		.4byte	0x903
 5988 08fa 1A       		.uleb128 0x1a
 5989 08fb 01       		.uleb128 0x1
 5990 08fc 50       		.byte	0x50
 5991 08fd 04       		.uleb128 0x4
 5992 08fe 74       		.byte	0x74
 5993 08ff 00       		.sleb128 0
 5994 0900 32       		.byte	0x32
 5995 0901 24       		.byte	0x24
 5996 0902 00       		.byte	0
 5997 0903 1D       		.uleb128 0x1d
 5998 0904 1C000000 		.4byte	.LVL86
 5999 0908 8E1E0000 		.4byte	0x1e8e
 6000 090c 17090000 		.4byte	0x917
 6001 0910 1A       		.uleb128 0x1a
 6002 0911 01       		.uleb128 0x1
 6003 0912 50       		.byte	0x50
 6004 0913 02       		.uleb128 0x2
 6005 0914 08       		.byte	0x8
 6006 0915 68       		.byte	0x68
 6007 0916 00       		.byte	0
 6008 0917 19       		.uleb128 0x19
 6009 0918 2A000000 		.4byte	.LVL89
 6010 091c 101E0000 		.4byte	0x1e10
 6011 0920 1A       		.uleb128 0x1a
 6012 0921 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 207


 6013 0922 50       		.byte	0x50
 6014 0923 02       		.uleb128 0x2
 6015 0924 76       		.byte	0x76
 6016 0925 00       		.sleb128 0
 6017 0926 00       		.byte	0
 6018 0927 00       		.byte	0
 6019 0928 1D       		.uleb128 0x1d
 6020 0929 4C000000 		.4byte	.LVL92
 6021 092d CE040000 		.4byte	0x4ce
 6022 0931 6D090000 		.4byte	0x96d
 6023 0935 1A       		.uleb128 0x1a
 6024 0936 01       		.uleb128 0x1
 6025 0937 50       		.byte	0x50
 6026 0938 03       		.uleb128 0x3
 6027 0939 91       		.byte	0x91
 6028 093a 60       		.sleb128 -32
 6029 093b 06       		.byte	0x6
 6030 093c 1A       		.uleb128 0x1a
 6031 093d 01       		.uleb128 0x1
 6032 093e 51       		.byte	0x51
 6033 093f 03       		.uleb128 0x3
 6034 0940 91       		.byte	0x91
 6035 0941 64       		.sleb128 -28
 6036 0942 06       		.byte	0x6
 6037 0943 1A       		.uleb128 0x1a
 6038 0944 01       		.uleb128 0x1
 6039 0945 52       		.byte	0x52
 6040 0946 02       		.uleb128 0x2
 6041 0947 74       		.byte	0x74
 6042 0948 00       		.sleb128 0
 6043 0949 1A       		.uleb128 0x1a
 6044 094a 01       		.uleb128 0x1
 6045 094b 53       		.byte	0x53
 6046 094c 02       		.uleb128 0x2
 6047 094d 77       		.byte	0x77
 6048 094e 00       		.sleb128 0
 6049 094f 1A       		.uleb128 0x1a
 6050 0950 02       		.uleb128 0x2
 6051 0951 7D       		.byte	0x7d
 6052 0952 00       		.sleb128 0
 6053 0953 03       		.uleb128 0x3
 6054 0954 91       		.byte	0x91
 6055 0955 00       		.sleb128 0
 6056 0956 06       		.byte	0x6
 6057 0957 1A       		.uleb128 0x1a
 6058 0958 02       		.uleb128 0x2
 6059 0959 7D       		.byte	0x7d
 6060 095a 04       		.sleb128 4
 6061 095b 03       		.uleb128 0x3
 6062 095c 91       		.byte	0x91
 6063 095d 04       		.sleb128 4
 6064 095e 06       		.byte	0x6
 6065 095f 1A       		.uleb128 0x1a
 6066 0960 02       		.uleb128 0x2
 6067 0961 7D       		.byte	0x7d
 6068 0962 08       		.sleb128 8
 6069 0963 02       		.uleb128 0x2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 208


 6070 0964 75       		.byte	0x75
 6071 0965 00       		.sleb128 0
 6072 0966 1A       		.uleb128 0x1a
 6073 0967 02       		.uleb128 0x2
 6074 0968 7D       		.byte	0x7d
 6075 0969 0C       		.sleb128 12
 6076 096a 01       		.uleb128 0x1
 6077 096b 30       		.byte	0x30
 6078 096c 00       		.byte	0
 6079 096d 19       		.uleb128 0x19
 6080 096e 52000000 		.4byte	.LVL93
 6081 0972 AF060000 		.4byte	0x6af
 6082 0976 1A       		.uleb128 0x1a
 6083 0977 01       		.uleb128 0x1
 6084 0978 50       		.byte	0x50
 6085 0979 02       		.uleb128 0x2
 6086 097a 75       		.byte	0x75
 6087 097b 00       		.sleb128 0
 6088 097c 00       		.byte	0
 6089 097d 00       		.byte	0
 6090 097e 07       		.uleb128 0x7
 6091 097f CA000000 		.4byte	0xca
 6092 0983 22       		.uleb128 0x22
 6093 0984 67090000 		.4byte	.LASF103
 6094 0988 01       		.byte	0x1
 6095 0989 5804     		.2byte	0x458
 6096 098b 00000000 		.4byte	.LFB35
 6097 098f 84000000 		.4byte	.LFE35-.LFB35
 6098 0993 01       		.uleb128 0x1
 6099 0994 9C       		.byte	0x9c
 6100 0995 340A0000 		.4byte	0xa34
 6101 0999 15       		.uleb128 0x15
 6102 099a A50A0000 		.4byte	.LASF97
 6103 099e 01       		.byte	0x1
 6104 099f 5804     		.2byte	0x458
 6105 09a1 2E020000 		.4byte	0x22e
 6106 09a5 A1040000 		.4byte	.LLST29
 6107 09a9 16       		.uleb128 0x16
 6108 09aa 2D0E0000 		.4byte	.LASF71
 6109 09ae 01       		.byte	0x1
 6110 09af 5A04     		.2byte	0x45a
 6111 09b1 88040000 		.4byte	0x488
 6112 09b5 BF040000 		.4byte	.LLST30
 6113 09b9 18       		.uleb128 0x18
 6114 09ba 08000000 		.4byte	.LVL100
 6115 09be 491E0000 		.4byte	0x1e49
 6116 09c2 1D       		.uleb128 0x1d
 6117 09c3 18000000 		.4byte	.LVL102
 6118 09c7 761E0000 		.4byte	0x1e76
 6119 09cb D6090000 		.4byte	0x9d6
 6120 09cf 1A       		.uleb128 0x1a
 6121 09d0 01       		.uleb128 0x1
 6122 09d1 50       		.byte	0x50
 6123 09d2 02       		.uleb128 0x2
 6124 09d3 76       		.byte	0x76
 6125 09d4 00       		.sleb128 0
 6126 09d5 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 209


 6127 09d6 1D       		.uleb128 0x1d
 6128 09d7 26000000 		.4byte	.LVL103
 6129 09db 761E0000 		.4byte	0x1e76
 6130 09df EA090000 		.4byte	0x9ea
 6131 09e3 1A       		.uleb128 0x1a
 6132 09e4 01       		.uleb128 0x1
 6133 09e5 50       		.byte	0x50
 6134 09e6 02       		.uleb128 0x2
 6135 09e7 74       		.byte	0x74
 6136 09e8 18       		.sleb128 24
 6137 09e9 00       		.byte	0
 6138 09ea 1D       		.uleb128 0x1d
 6139 09eb 40000000 		.4byte	.LVL104
 6140 09ef 541E0000 		.4byte	0x1e54
 6141 09f3 040A0000 		.4byte	0xa04
 6142 09f7 1A       		.uleb128 0x1a
 6143 09f8 01       		.uleb128 0x1
 6144 09f9 50       		.byte	0x50
 6145 09fa 02       		.uleb128 0x2
 6146 09fb 75       		.byte	0x75
 6147 09fc 3C       		.sleb128 60
 6148 09fd 1A       		.uleb128 0x1a
 6149 09fe 01       		.uleb128 0x1
 6150 09ff 51       		.byte	0x51
 6151 0a00 02       		.uleb128 0x2
 6152 0a01 76       		.byte	0x76
 6153 0a02 00       		.sleb128 0
 6154 0a03 00       		.byte	0
 6155 0a04 1D       		.uleb128 0x1d
 6156 0a05 56000000 		.4byte	.LVL105
 6157 0a09 8E040000 		.4byte	0x48e
 6158 0a0d 180A0000 		.4byte	0xa18
 6159 0a11 1A       		.uleb128 0x1a
 6160 0a12 01       		.uleb128 0x1
 6161 0a13 50       		.byte	0x50
 6162 0a14 02       		.uleb128 0x2
 6163 0a15 74       		.byte	0x74
 6164 0a16 00       		.sleb128 0
 6165 0a17 00       		.byte	0
 6166 0a18 18       		.uleb128 0x18
 6167 0a19 5A000000 		.4byte	.LVL106
 6168 0a1d 61040000 		.4byte	0x461
 6169 0a21 18       		.uleb128 0x18
 6170 0a22 5E000000 		.4byte	.LVL107
 6171 0a26 601E0000 		.4byte	0x1e60
 6172 0a2a 18       		.uleb128 0x18
 6173 0a2b 7E000000 		.4byte	.LVL108
 6174 0a2f 6B1E0000 		.4byte	0x1e6b
 6175 0a33 00       		.byte	0
 6176 0a34 20       		.uleb128 0x20
 6177 0a35 5F050000 		.4byte	.LASF99
 6178 0a39 01       		.byte	0x1
 6179 0a3a 7C05     		.2byte	0x57c
 6180 0a3c 25010000 		.4byte	0x125
 6181 0a40 00000000 		.4byte	.LFB38
 6182 0a44 20000000 		.4byte	.LFE38-.LFB38
 6183 0a48 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 210


 6184 0a49 9C       		.byte	0x9c
 6185 0a4a 910A0000 		.4byte	0xa91
 6186 0a4e 15       		.uleb128 0x15
 6187 0a4f 34090000 		.4byte	.LASF74
 6188 0a53 01       		.byte	0x1
 6189 0a54 7C05     		.2byte	0x57c
 6190 0a56 2E020000 		.4byte	0x22e
 6191 0a5a DF040000 		.4byte	.LLST31
 6192 0a5e 16       		.uleb128 0x16
 6193 0a5f 2D0E0000 		.4byte	.LASF71
 6194 0a63 01       		.byte	0x1
 6195 0a64 7E05     		.2byte	0x57e
 6196 0a66 88040000 		.4byte	0x488
 6197 0a6a FD040000 		.4byte	.LLST32
 6198 0a6e 16       		.uleb128 0x16
 6199 0a6f 55020000 		.4byte	.LASF100
 6200 0a73 01       		.byte	0x1
 6201 0a74 7F05     		.2byte	0x57f
 6202 0a76 25010000 		.4byte	0x125
 6203 0a7a 10050000 		.4byte	.LLST33
 6204 0a7e 18       		.uleb128 0x18
 6205 0a7f 08000000 		.4byte	.LVL112
 6206 0a83 491E0000 		.4byte	0x1e49
 6207 0a87 18       		.uleb128 0x18
 6208 0a88 16000000 		.4byte	.LVL115
 6209 0a8c 601E0000 		.4byte	0x1e60
 6210 0a90 00       		.byte	0
 6211 0a91 20       		.uleb128 0x20
 6212 0a92 58080000 		.4byte	.LASF101
 6213 0a96 01       		.byte	0x1
 6214 0a97 9205     		.2byte	0x592
 6215 0a99 25010000 		.4byte	0x125
 6216 0a9d 00000000 		.4byte	.LFB39
 6217 0aa1 20000000 		.4byte	.LFE39-.LFB39
 6218 0aa5 01       		.uleb128 0x1
 6219 0aa6 9C       		.byte	0x9c
 6220 0aa7 FE0A0000 		.4byte	0xafe
 6221 0aab 15       		.uleb128 0x15
 6222 0aac 34090000 		.4byte	.LASF74
 6223 0ab0 01       		.byte	0x1
 6224 0ab1 9205     		.2byte	0x592
 6225 0ab3 2E020000 		.4byte	0x22e
 6226 0ab7 2E050000 		.4byte	.LLST34
 6227 0abb 16       		.uleb128 0x16
 6228 0abc 2D0E0000 		.4byte	.LASF71
 6229 0ac0 01       		.byte	0x1
 6230 0ac1 9405     		.2byte	0x594
 6231 0ac3 88040000 		.4byte	0x488
 6232 0ac7 4C050000 		.4byte	.LLST35
 6233 0acb 16       		.uleb128 0x16
 6234 0acc 55020000 		.4byte	.LASF100
 6235 0ad0 01       		.byte	0x1
 6236 0ad1 9505     		.2byte	0x595
 6237 0ad3 25010000 		.4byte	0x125
 6238 0ad7 5F050000 		.4byte	.LLST36
 6239 0adb 16       		.uleb128 0x16
 6240 0adc 61030000 		.4byte	.LASF102
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 211


 6241 0ae0 01       		.byte	0x1
 6242 0ae1 9505     		.2byte	0x595
 6243 0ae3 25010000 		.4byte	0x125
 6244 0ae7 7D050000 		.4byte	.LLST37
 6245 0aeb 18       		.uleb128 0x18
 6246 0aec 08000000 		.4byte	.LVL118
 6247 0af0 991E0000 		.4byte	0x1e99
 6248 0af4 18       		.uleb128 0x18
 6249 0af5 16000000 		.4byte	.LVL121
 6250 0af9 A41E0000 		.4byte	0x1ea4
 6251 0afd 00       		.byte	0
 6252 0afe 22       		.uleb128 0x22
 6253 0aff DC080000 		.4byte	.LASF104
 6254 0b03 01       		.byte	0x1
 6255 0b04 BA05     		.2byte	0x5ba
 6256 0b06 00000000 		.4byte	.LFB40
 6257 0b0a C4000000 		.4byte	.LFE40-.LFB40
 6258 0b0e 01       		.uleb128 0x1
 6259 0b0f 9C       		.byte	0x9c
 6260 0b10 B80B0000 		.4byte	0xbb8
 6261 0b14 15       		.uleb128 0x15
 6262 0b15 34090000 		.4byte	.LASF74
 6263 0b19 01       		.byte	0x1
 6264 0b1a BA05     		.2byte	0x5ba
 6265 0b1c 2E020000 		.4byte	0x22e
 6266 0b20 90050000 		.4byte	.LLST38
 6267 0b24 15       		.uleb128 0x15
 6268 0b25 F8070000 		.4byte	.LASF105
 6269 0b29 01       		.byte	0x1
 6270 0b2a BA05     		.2byte	0x5ba
 6271 0b2c 25010000 		.4byte	0x125
 6272 0b30 AE050000 		.4byte	.LLST39
 6273 0b34 16       		.uleb128 0x16
 6274 0b35 2D0E0000 		.4byte	.LASF71
 6275 0b39 01       		.byte	0x1
 6276 0b3a BC05     		.2byte	0x5bc
 6277 0b3c 88040000 		.4byte	0x488
 6278 0b40 D9050000 		.4byte	.LLST40
 6279 0b44 16       		.uleb128 0x16
 6280 0b45 F70E0000 		.4byte	.LASF106
 6281 0b49 01       		.byte	0x1
 6282 0b4a BD05     		.2byte	0x5bd
 6283 0b4c 25010000 		.4byte	0x125
 6284 0b50 EC050000 		.4byte	.LLST41
 6285 0b54 16       		.uleb128 0x16
 6286 0b55 D50C0000 		.4byte	.LASF107
 6287 0b59 01       		.byte	0x1
 6288 0b5a BD05     		.2byte	0x5bd
 6289 0b5c 25010000 		.4byte	0x125
 6290 0b60 FF050000 		.4byte	.LLST42
 6291 0b64 16       		.uleb128 0x16
 6292 0b65 B7020000 		.4byte	.LASF108
 6293 0b69 01       		.byte	0x1
 6294 0b6a BE05     		.2byte	0x5be
 6295 0b6c 1A010000 		.4byte	0x11a
 6296 0b70 12060000 		.4byte	.LLST43
 6297 0b74 18       		.uleb128 0x18
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 212


 6298 0b75 18000000 		.4byte	.LVL126
 6299 0b79 491E0000 		.4byte	0x1e49
 6300 0b7d 1D       		.uleb128 0x1d
 6301 0b7e 8E000000 		.4byte	.LVL134
 6302 0b82 761E0000 		.4byte	0x1e76
 6303 0b86 910B0000 		.4byte	0xb91
 6304 0b8a 1A       		.uleb128 0x1a
 6305 0b8b 01       		.uleb128 0x1
 6306 0b8c 50       		.byte	0x50
 6307 0b8d 02       		.uleb128 0x2
 6308 0b8e 75       		.byte	0x75
 6309 0b8f 00       		.sleb128 0
 6310 0b90 00       		.byte	0
 6311 0b91 1D       		.uleb128 0x1d
 6312 0b92 AE000000 		.4byte	.LVL135
 6313 0b96 541E0000 		.4byte	0x1e54
 6314 0b9a A50B0000 		.4byte	0xba5
 6315 0b9e 1A       		.uleb128 0x1a
 6316 0b9f 01       		.uleb128 0x1
 6317 0ba0 51       		.byte	0x51
 6318 0ba1 02       		.uleb128 0x2
 6319 0ba2 75       		.byte	0x75
 6320 0ba3 00       		.sleb128 0
 6321 0ba4 00       		.byte	0
 6322 0ba5 18       		.uleb128 0x18
 6323 0ba6 B6000000 		.4byte	.LVL136
 6324 0baa 6B1E0000 		.4byte	0x1e6b
 6325 0bae 18       		.uleb128 0x18
 6326 0baf BA000000 		.4byte	.LVL137
 6327 0bb3 601E0000 		.4byte	0x1e60
 6328 0bb7 00       		.byte	0
 6329 0bb8 22       		.uleb128 0x22
 6330 0bb9 5C0E0000 		.4byte	.LASF109
 6331 0bbd 01       		.byte	0x1
 6332 0bbe F106     		.2byte	0x6f1
 6333 0bc0 00000000 		.4byte	.LFB43
 6334 0bc4 6C000000 		.4byte	.LFE43-.LFB43
 6335 0bc8 01       		.uleb128 0x1
 6336 0bc9 9C       		.byte	0x9c
 6337 0bca 460C0000 		.4byte	0xc46
 6338 0bce 15       		.uleb128 0x15
 6339 0bcf 47020000 		.4byte	.LASF110
 6340 0bd3 01       		.byte	0x1
 6341 0bd4 F106     		.2byte	0x6f1
 6342 0bd6 2E020000 		.4byte	0x22e
 6343 0bda 31060000 		.4byte	.LLST44
 6344 0bde 16       		.uleb128 0x16
 6345 0bdf 2D0E0000 		.4byte	.LASF71
 6346 0be3 01       		.byte	0x1
 6347 0be4 F306     		.2byte	0x6f3
 6348 0be6 460C0000 		.4byte	0xc46
 6349 0bea 5D060000 		.4byte	.LLST45
 6350 0bee 18       		.uleb128 0x18
 6351 0bef 1A000000 		.4byte	.LVL141
 6352 0bf3 491E0000 		.4byte	0x1e49
 6353 0bf7 1D       		.uleb128 0x1d
 6354 0bf8 20000000 		.4byte	.LVL142
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 213


 6355 0bfc BB030000 		.4byte	0x3bb
 6356 0c00 0B0C0000 		.4byte	0xc0b
 6357 0c04 1A       		.uleb128 0x1a
 6358 0c05 01       		.uleb128 0x1
 6359 0c06 50       		.byte	0x50
 6360 0c07 02       		.uleb128 0x2
 6361 0c08 74       		.byte	0x74
 6362 0c09 00       		.sleb128 0
 6363 0c0a 00       		.byte	0
 6364 0c0b 1D       		.uleb128 0x1d
 6365 0c0c 2C000000 		.4byte	.LVL143
 6366 0c10 761E0000 		.4byte	0x1e76
 6367 0c14 1F0C0000 		.4byte	0xc1f
 6368 0c18 1A       		.uleb128 0x1a
 6369 0c19 01       		.uleb128 0x1
 6370 0c1a 50       		.byte	0x50
 6371 0c1b 02       		.uleb128 0x2
 6372 0c1c 75       		.byte	0x75
 6373 0c1d 00       		.sleb128 0
 6374 0c1e 00       		.byte	0
 6375 0c1f 1D       		.uleb128 0x1d
 6376 0c20 4C000000 		.4byte	.LVL144
 6377 0c24 541E0000 		.4byte	0x1e54
 6378 0c28 330C0000 		.4byte	0xc33
 6379 0c2c 1A       		.uleb128 0x1a
 6380 0c2d 01       		.uleb128 0x1
 6381 0c2e 51       		.byte	0x51
 6382 0c2f 02       		.uleb128 0x2
 6383 0c30 75       		.byte	0x75
 6384 0c31 00       		.sleb128 0
 6385 0c32 00       		.byte	0
 6386 0c33 18       		.uleb128 0x18
 6387 0c34 5C000000 		.4byte	.LVL145
 6388 0c38 6B1E0000 		.4byte	0x1e6b
 6389 0c3c 18       		.uleb128 0x18
 6390 0c3d 60000000 		.4byte	.LVL146
 6391 0c41 601E0000 		.4byte	0x1e60
 6392 0c45 00       		.byte	0
 6393 0c46 07       		.uleb128 0x7
 6394 0c47 88040000 		.4byte	0x488
 6395 0c4b 20       		.uleb128 0x20
 6396 0c4c FA030000 		.4byte	.LASF111
 6397 0c50 01       		.byte	0x1
 6398 0c51 2707     		.2byte	0x727
 6399 0c53 1A010000 		.4byte	0x11a
 6400 0c57 00000000 		.4byte	.LFB44
 6401 0c5b 84000000 		.4byte	.LFE44-.LFB44
 6402 0c5f 01       		.uleb128 0x1
 6403 0c60 9C       		.byte	0x9c
 6404 0c61 180D0000 		.4byte	0xd18
 6405 0c65 15       		.uleb128 0x15
 6406 0c66 47020000 		.4byte	.LASF110
 6407 0c6a 01       		.byte	0x1
 6408 0c6b 2707     		.2byte	0x727
 6409 0c6d 2E020000 		.4byte	0x22e
 6410 0c71 89060000 		.4byte	.LLST46
 6411 0c75 16       		.uleb128 0x16
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 214


 6412 0c76 B7020000 		.4byte	.LASF108
 6413 0c7a 01       		.byte	0x1
 6414 0c7b 2907     		.2byte	0x729
 6415 0c7d 1A010000 		.4byte	0x11a
 6416 0c81 B5060000 		.4byte	.LLST47
 6417 0c85 16       		.uleb128 0x16
 6418 0c86 2D0E0000 		.4byte	.LASF71
 6419 0c8a 01       		.byte	0x1
 6420 0c8b 2A07     		.2byte	0x72a
 6421 0c8d 460C0000 		.4byte	0xc46
 6422 0c91 F6060000 		.4byte	.LLST48
 6423 0c95 16       		.uleb128 0x16
 6424 0c96 7C020000 		.4byte	.LASF112
 6425 0c9a 01       		.byte	0x1
 6426 0c9b 2B07     		.2byte	0x72b
 6427 0c9d 25010000 		.4byte	0x125
 6428 0ca1 22070000 		.4byte	.LLST49
 6429 0ca5 18       		.uleb128 0x18
 6430 0ca6 0E000000 		.4byte	.LVL150
 6431 0caa 991E0000 		.4byte	0x1e99
 6432 0cae 1D       		.uleb128 0x1d
 6433 0caf 16000000 		.4byte	.LVL153
 6434 0cb3 BB030000 		.4byte	0x3bb
 6435 0cb7 C20C0000 		.4byte	0xcc2
 6436 0cbb 1A       		.uleb128 0x1a
 6437 0cbc 01       		.uleb128 0x1
 6438 0cbd 50       		.byte	0x50
 6439 0cbe 02       		.uleb128 0x2
 6440 0cbf 74       		.byte	0x74
 6441 0cc0 00       		.sleb128 0
 6442 0cc1 00       		.byte	0
 6443 0cc2 1D       		.uleb128 0x1d
 6444 0cc3 3C000000 		.4byte	.LVL155
 6445 0cc7 761E0000 		.4byte	0x1e76
 6446 0ccb D60C0000 		.4byte	0xcd6
 6447 0ccf 1A       		.uleb128 0x1a
 6448 0cd0 01       		.uleb128 0x1
 6449 0cd1 50       		.byte	0x50
 6450 0cd2 02       		.uleb128 0x2
 6451 0cd3 76       		.byte	0x76
 6452 0cd4 00       		.sleb128 0
 6453 0cd5 00       		.byte	0
 6454 0cd6 1D       		.uleb128 0x1d
 6455 0cd7 5C000000 		.4byte	.LVL156
 6456 0cdb 541E0000 		.4byte	0x1e54
 6457 0cdf EA0C0000 		.4byte	0xcea
 6458 0ce3 1A       		.uleb128 0x1a
 6459 0ce4 01       		.uleb128 0x1
 6460 0ce5 51       		.byte	0x51
 6461 0ce6 02       		.uleb128 0x2
 6462 0ce7 76       		.byte	0x76
 6463 0ce8 00       		.sleb128 0
 6464 0ce9 00       		.byte	0
 6465 0cea 1D       		.uleb128 0x1d
 6466 0ceb 6A000000 		.4byte	.LVL158
 6467 0cef 541E0000 		.4byte	0x1e54
 6468 0cf3 070D0000 		.4byte	0xd07
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 215


 6469 0cf7 1A       		.uleb128 0x1a
 6470 0cf8 01       		.uleb128 0x1
 6471 0cf9 50       		.byte	0x50
 6472 0cfa 05       		.uleb128 0x5
 6473 0cfb 03       		.byte	0x3
 6474 0cfc 14000000 		.4byte	.LANCHOR0+20
 6475 0d00 1A       		.uleb128 0x1a
 6476 0d01 01       		.uleb128 0x1
 6477 0d02 51       		.byte	0x51
 6478 0d03 02       		.uleb128 0x2
 6479 0d04 74       		.byte	0x74
 6480 0d05 18       		.sleb128 24
 6481 0d06 00       		.byte	0
 6482 0d07 19       		.uleb128 0x19
 6483 0d08 76000000 		.4byte	.LVL160
 6484 0d0c A41E0000 		.4byte	0x1ea4
 6485 0d10 1A       		.uleb128 0x1a
 6486 0d11 01       		.uleb128 0x1
 6487 0d12 50       		.byte	0x50
 6488 0d13 02       		.uleb128 0x2
 6489 0d14 75       		.byte	0x75
 6490 0d15 00       		.sleb128 0
 6491 0d16 00       		.byte	0
 6492 0d17 00       		.byte	0
 6493 0d18 22       		.uleb128 0x22
 6494 0d19 BF0B0000 		.4byte	.LASF113
 6495 0d1d 01       		.byte	0x1
 6496 0d1e 6D07     		.2byte	0x76d
 6497 0d20 00000000 		.4byte	.LFB45
 6498 0d24 54000000 		.4byte	.LFE45-.LFB45
 6499 0d28 01       		.uleb128 0x1
 6500 0d29 9C       		.byte	0x9c
 6501 0d2a 830D0000 		.4byte	0xd83
 6502 0d2e 16       		.uleb128 0x16
 6503 0d2f 340B0000 		.4byte	.LASF70
 6504 0d33 01       		.byte	0x1
 6505 0d34 6F07     		.2byte	0x76f
 6506 0d36 1A010000 		.4byte	0x11a
 6507 0d3a 40070000 		.4byte	.LLST50
 6508 0d3e 1D       		.uleb128 0x1d
 6509 0d3f 18000000 		.4byte	.LVL164
 6510 0d43 38080000 		.4byte	0x838
 6511 0d47 790D0000 		.4byte	0xd79
 6512 0d4b 1A       		.uleb128 0x1a
 6513 0d4c 01       		.uleb128 0x1
 6514 0d4d 50       		.byte	0x50
 6515 0d4e 05       		.uleb128 0x5
 6516 0d4f 03       		.byte	0x3
 6517 0d50 00000000 		.4byte	prvIdleTask
 6518 0d54 1A       		.uleb128 0x1a
 6519 0d55 01       		.uleb128 0x1
 6520 0d56 51       		.byte	0x51
 6521 0d57 05       		.uleb128 0x5
 6522 0d58 03       		.byte	0x3
 6523 0d59 00000000 		.4byte	.LC29
 6524 0d5d 1A       		.uleb128 0x1a
 6525 0d5e 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 216


 6526 0d5f 52       		.byte	0x52
 6527 0d60 02       		.uleb128 0x2
 6528 0d61 08       		.byte	0x8
 6529 0d62 80       		.byte	0x80
 6530 0d63 1A       		.uleb128 0x1a
 6531 0d64 01       		.uleb128 0x1
 6532 0d65 53       		.byte	0x53
 6533 0d66 01       		.uleb128 0x1
 6534 0d67 30       		.byte	0x30
 6535 0d68 1A       		.uleb128 0x1a
 6536 0d69 02       		.uleb128 0x2
 6537 0d6a 7D       		.byte	0x7d
 6538 0d6b 00       		.sleb128 0
 6539 0d6c 01       		.uleb128 0x1
 6540 0d6d 30       		.byte	0x30
 6541 0d6e 1A       		.uleb128 0x1a
 6542 0d6f 02       		.uleb128 0x2
 6543 0d70 7D       		.byte	0x7d
 6544 0d71 04       		.sleb128 4
 6545 0d72 05       		.uleb128 0x5
 6546 0d73 03       		.byte	0x3
 6547 0d74 F4000000 		.4byte	.LANCHOR1+116
 6548 0d78 00       		.byte	0
 6549 0d79 18       		.uleb128 0x18
 6550 0d7a 34000000 		.4byte	.LVL165
 6551 0d7e AF1E0000 		.4byte	0x1eaf
 6552 0d82 00       		.byte	0
 6553 0d83 22       		.uleb128 0x22
 6554 0d84 4D050000 		.4byte	.LASF114
 6555 0d88 01       		.byte	0x1
 6556 0d89 E507     		.2byte	0x7e5
 6557 0d8b 00000000 		.4byte	.LFB46
 6558 0d8f 14000000 		.4byte	.LFE46-.LFB46
 6559 0d93 01       		.uleb128 0x1
 6560 0d94 9C       		.byte	0x9c
 6561 0d95 A30D0000 		.4byte	0xda3
 6562 0d99 18       		.uleb128 0x18
 6563 0d9a 0E000000 		.4byte	.LVL168
 6564 0d9e BA1E0000 		.4byte	0x1eba
 6565 0da2 00       		.byte	0
 6566 0da3 23       		.uleb128 0x23
 6567 0da4 1A040000 		.4byte	.LASF150
 6568 0da8 01       		.byte	0x1
 6569 0da9 F007     		.2byte	0x7f0
 6570 0dab 00000000 		.4byte	.LFB47
 6571 0daf 10000000 		.4byte	.LFE47-.LFB47
 6572 0db3 01       		.uleb128 0x1
 6573 0db4 9C       		.byte	0x9c
 6574 0db5 20       		.uleb128 0x20
 6575 0db6 560A0000 		.4byte	.LASF115
 6576 0dba 01       		.byte	0x1
 6577 0dbb A708     		.2byte	0x8a7
 6578 0dbd 30010000 		.4byte	0x130
 6579 0dc1 00000000 		.4byte	.LFB49
 6580 0dc5 0C000000 		.4byte	.LFE49-.LFB49
 6581 0dc9 01       		.uleb128 0x1
 6582 0dca 9C       		.byte	0x9c
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 217


 6583 0dcb DE0D0000 		.4byte	0xdde
 6584 0dcf 24       		.uleb128 0x24
 6585 0dd0 B80B0000 		.4byte	.LASF116
 6586 0dd4 01       		.byte	0x1
 6587 0dd5 A908     		.2byte	0x8a9
 6588 0dd7 30010000 		.4byte	0x130
 6589 0ddb 01       		.uleb128 0x1
 6590 0ddc 50       		.byte	0x50
 6591 0ddd 00       		.byte	0
 6592 0dde 20       		.uleb128 0x20
 6593 0ddf 48030000 		.4byte	.LASF117
 6594 0de3 01       		.byte	0x1
 6595 0de4 B608     		.2byte	0x8b6
 6596 0de6 30010000 		.4byte	0x130
 6597 0dea 00000000 		.4byte	.LFB50
 6598 0dee 0C000000 		.4byte	.LFE50-.LFB50
 6599 0df2 01       		.uleb128 0x1
 6600 0df3 9C       		.byte	0x9c
 6601 0df4 140E0000 		.4byte	0xe14
 6602 0df8 24       		.uleb128 0x24
 6603 0df9 340B0000 		.4byte	.LASF70
 6604 0dfd 01       		.byte	0x1
 6605 0dfe B808     		.2byte	0x8b8
 6606 0e00 30010000 		.4byte	0x130
 6607 0e04 01       		.uleb128 0x1
 6608 0e05 50       		.byte	0x50
 6609 0e06 25       		.uleb128 0x25
 6610 0e07 7C020000 		.4byte	.LASF112
 6611 0e0b 01       		.byte	0x1
 6612 0e0c B908     		.2byte	0x8b9
 6613 0e0e 25010000 		.4byte	0x125
 6614 0e12 00       		.byte	0
 6615 0e13 00       		.byte	0
 6616 0e14 26       		.uleb128 0x26
 6617 0e15 5E020000 		.4byte	.LASF171
 6618 0e19 01       		.byte	0x1
 6619 0e1a D508     		.2byte	0x8d5
 6620 0e1c 25010000 		.4byte	0x125
 6621 0e20 00000000 		.4byte	.LFB51
 6622 0e24 0C000000 		.4byte	.LFE51-.LFB51
 6623 0e28 01       		.uleb128 0x1
 6624 0e29 9C       		.byte	0x9c
 6625 0e2a 20       		.uleb128 0x20
 6626 0e2b AA0B0000 		.4byte	.LASF118
 6627 0e2f 01       		.byte	0x1
 6628 0e30 DD08     		.2byte	0x8dd
 6629 0e32 A7000000 		.4byte	0xa7
 6630 0e36 00000000 		.4byte	.LFB52
 6631 0e3a 18000000 		.4byte	.LFE52-.LFB52
 6632 0e3e 01       		.uleb128 0x1
 6633 0e3f 9C       		.byte	0x9c
 6634 0e40 650E0000 		.4byte	0xe65
 6635 0e44 15       		.uleb128 0x15
 6636 0e45 0E090000 		.4byte	.LASF119
 6637 0e49 01       		.byte	0x1
 6638 0e4a DD08     		.2byte	0x8dd
 6639 0e4c 2E020000 		.4byte	0x22e
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 218


 6640 0e50 5E070000 		.4byte	.LLST51
 6641 0e54 16       		.uleb128 0x16
 6642 0e55 2D0E0000 		.4byte	.LASF71
 6643 0e59 01       		.byte	0x1
 6644 0e5a DF08     		.2byte	0x8df
 6645 0e5c 88040000 		.4byte	0x488
 6646 0e60 71070000 		.4byte	.LLST52
 6647 0e64 00       		.byte	0
 6648 0e65 20       		.uleb128 0x20
 6649 0e66 46040000 		.4byte	.LASF120
 6650 0e6a 01       		.byte	0x1
 6651 0e6b 1D0A     		.2byte	0xa1d
 6652 0e6d 1A010000 		.4byte	0x11a
 6653 0e71 00000000 		.4byte	.LFB53
 6654 0e75 E8000000 		.4byte	.LFE53-.LFB53
 6655 0e79 01       		.uleb128 0x1
 6656 0e7a 9C       		.byte	0x9c
 6657 0e7b 250F0000 		.4byte	0xf25
 6658 0e7f 16       		.uleb128 0x16
 6659 0e80 2D0E0000 		.4byte	.LASF71
 6660 0e84 01       		.byte	0x1
 6661 0e85 1F0A     		.2byte	0xa1f
 6662 0e87 88040000 		.4byte	0x488
 6663 0e8b 91070000 		.4byte	.LLST53
 6664 0e8f 16       		.uleb128 0x16
 6665 0e90 0A0A0000 		.4byte	.LASF26
 6666 0e94 01       		.byte	0x1
 6667 0e95 200A     		.2byte	0xa20
 6668 0e97 30010000 		.4byte	0x130
 6669 0e9b AF070000 		.4byte	.LLST54
 6670 0e9f 16       		.uleb128 0x16
 6671 0ea0 7F0A0000 		.4byte	.LASF121
 6672 0ea4 01       		.byte	0x1
 6673 0ea5 210A     		.2byte	0xa21
 6674 0ea7 1A010000 		.4byte	0x11a
 6675 0eab C2070000 		.4byte	.LLST55
 6676 0eaf 27       		.uleb128 0x27
 6677 0eb0 00000000 		.4byte	.Ldebug_ranges0+0
 6678 0eb4 16       		.uleb128 0x16
 6679 0eb5 71050000 		.4byte	.LASF95
 6680 0eb9 01       		.byte	0x1
 6681 0eba 2B0A     		.2byte	0xa2b
 6682 0ebc 33080000 		.4byte	0x833
 6683 0ec0 1A080000 		.4byte	.LLST56
 6684 0ec4 21       		.uleb128 0x21
 6685 0ec5 16000000 		.4byte	.LBB5
 6686 0ec9 24000000 		.4byte	.LBE5-.LBB5
 6687 0ecd EB0E0000 		.4byte	0xeeb
 6688 0ed1 16       		.uleb128 0x16
 6689 0ed2 1A0C0000 		.4byte	.LASF122
 6690 0ed6 01       		.byte	0x1
 6691 0ed7 330A     		.2byte	0xa33
 6692 0ed9 250F0000 		.4byte	0xf25
 6693 0edd 2D080000 		.4byte	.LLST57
 6694 0ee1 18       		.uleb128 0x18
 6695 0ee2 3A000000 		.4byte	.LVL178
 6696 0ee6 61040000 		.4byte	0x461
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 219


 6697 0eea 00       		.byte	0
 6698 0eeb 1D       		.uleb128 0x1d
 6699 0eec 86000000 		.4byte	.LVL185
 6700 0ef0 761E0000 		.4byte	0x1e76
 6701 0ef4 FF0E0000 		.4byte	0xeff
 6702 0ef8 1A       		.uleb128 0x1a
 6703 0ef9 01       		.uleb128 0x1
 6704 0efa 50       		.byte	0x50
 6705 0efb 02       		.uleb128 0x2
 6706 0efc 75       		.byte	0x75
 6707 0efd 00       		.sleb128 0
 6708 0efe 00       		.byte	0
 6709 0eff 1D       		.uleb128 0x1d
 6710 0f00 94000000 		.4byte	.LVL186
 6711 0f04 761E0000 		.4byte	0x1e76
 6712 0f08 130F0000 		.4byte	0xf13
 6713 0f0c 1A       		.uleb128 0x1a
 6714 0f0d 01       		.uleb128 0x1
 6715 0f0e 50       		.byte	0x50
 6716 0f0f 02       		.uleb128 0x2
 6717 0f10 76       		.byte	0x76
 6718 0f11 18       		.sleb128 24
 6719 0f12 00       		.byte	0
 6720 0f13 19       		.uleb128 0x19
 6721 0f14 B4000000 		.4byte	.LVL187
 6722 0f18 541E0000 		.4byte	0x1e54
 6723 0f1c 1A       		.uleb128 0x1a
 6724 0f1d 01       		.uleb128 0x1
 6725 0f1e 51       		.byte	0x51
 6726 0f1f 02       		.uleb128 0x2
 6727 0f20 75       		.byte	0x75
 6728 0f21 00       		.sleb128 0
 6729 0f22 00       		.byte	0
 6730 0f23 00       		.byte	0
 6731 0f24 00       		.byte	0
 6732 0f25 06       		.uleb128 0x6
 6733 0f26 04       		.byte	0x4
 6734 0f27 23020000 		.4byte	0x223
 6735 0f2b 20       		.uleb128 0x20
 6736 0f2c 1E0A0000 		.4byte	.LASF123
 6737 0f30 01       		.byte	0x1
 6738 0f31 3908     		.2byte	0x839
 6739 0f33 1A010000 		.4byte	0x11a
 6740 0f37 00000000 		.4byte	.LFB48
 6741 0f3b D4000000 		.4byte	.LFE48-.LFB48
 6742 0f3f 01       		.uleb128 0x1
 6743 0f40 9C       		.byte	0x9c
 6744 0f41 ED0F0000 		.4byte	0xfed
 6745 0f45 16       		.uleb128 0x16
 6746 0f46 2D0E0000 		.4byte	.LASF71
 6747 0f4a 01       		.byte	0x1
 6748 0f4b 3B08     		.2byte	0x83b
 6749 0f4d 88040000 		.4byte	0x488
 6750 0f51 40080000 		.4byte	.LLST58
 6751 0f55 16       		.uleb128 0x16
 6752 0f56 3B0D0000 		.4byte	.LASF124
 6753 0f5a 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 220


 6754 0f5b 3C08     		.2byte	0x83c
 6755 0f5d 1A010000 		.4byte	0x11a
 6756 0f61 82080000 		.4byte	.LLST59
 6757 0f65 21       		.uleb128 0x21
 6758 0f66 88000000 		.4byte	.LBB7
 6759 0f6a 22000000 		.4byte	.LBE7-.LBB7
 6760 0f6e 8C0F0000 		.4byte	0xf8c
 6761 0f72 16       		.uleb128 0x16
 6762 0f73 77000000 		.4byte	.LASF125
 6763 0f77 01       		.byte	0x1
 6764 0f78 7408     		.2byte	0x874
 6765 0f7a 25010000 		.4byte	0x125
 6766 0f7e C4080000 		.4byte	.LLST60
 6767 0f82 18       		.uleb128 0x18
 6768 0f83 94000000 		.4byte	.LVL203
 6769 0f87 650E0000 		.4byte	0xe65
 6770 0f8b 00       		.byte	0
 6771 0f8c 18       		.uleb128 0x18
 6772 0f8d 12000000 		.4byte	.LVL193
 6773 0f91 491E0000 		.4byte	0x1e49
 6774 0f95 1D       		.uleb128 0x1d
 6775 0f96 3A000000 		.4byte	.LVL196
 6776 0f9a 761E0000 		.4byte	0x1e76
 6777 0f9e A90F0000 		.4byte	0xfa9
 6778 0fa2 1A       		.uleb128 0x1a
 6779 0fa3 01       		.uleb128 0x1
 6780 0fa4 50       		.byte	0x50
 6781 0fa5 02       		.uleb128 0x2
 6782 0fa6 74       		.byte	0x74
 6783 0fa7 18       		.sleb128 24
 6784 0fa8 00       		.byte	0
 6785 0fa9 1D       		.uleb128 0x1d
 6786 0faa 42000000 		.4byte	.LVL197
 6787 0fae 761E0000 		.4byte	0x1e76
 6788 0fb2 BD0F0000 		.4byte	0xfbd
 6789 0fb6 1A       		.uleb128 0x1a
 6790 0fb7 01       		.uleb128 0x1
 6791 0fb8 50       		.byte	0x50
 6792 0fb9 02       		.uleb128 0x2
 6793 0fba 75       		.byte	0x75
 6794 0fbb 00       		.sleb128 0
 6795 0fbc 00       		.byte	0
 6796 0fbd 1D       		.uleb128 0x1d
 6797 0fbe 62000000 		.4byte	.LVL198
 6798 0fc2 541E0000 		.4byte	0x1e54
 6799 0fc6 D10F0000 		.4byte	0xfd1
 6800 0fca 1A       		.uleb128 0x1a
 6801 0fcb 01       		.uleb128 0x1
 6802 0fcc 51       		.byte	0x51
 6803 0fcd 02       		.uleb128 0x2
 6804 0fce 75       		.byte	0x75
 6805 0fcf 00       		.sleb128 0
 6806 0fd0 00       		.byte	0
 6807 0fd1 18       		.uleb128 0x18
 6808 0fd2 88000000 		.4byte	.LVL201
 6809 0fd6 61040000 		.4byte	0x461
 6810 0fda 18       		.uleb128 0x18
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 221


 6811 0fdb B6000000 		.4byte	.LVL206
 6812 0fdf 6B1E0000 		.4byte	0x1e6b
 6813 0fe3 18       		.uleb128 0x18
 6814 0fe4 C4000000 		.4byte	.LVL211
 6815 0fe8 601E0000 		.4byte	0x1e60
 6816 0fec 00       		.byte	0
 6817 0fed 22       		.uleb128 0x22
 6818 0fee B60C0000 		.4byte	.LASF126
 6819 0ff2 01       		.byte	0x1
 6820 0ff3 B404     		.2byte	0x4b4
 6821 0ff5 00000000 		.4byte	.LFB36
 6822 0ff9 78000000 		.4byte	.LFE36-.LFB36
 6823 0ffd 01       		.uleb128 0x1
 6824 0ffe 9C       		.byte	0x9c
 6825 0fff 98100000 		.4byte	0x1098
 6826 1003 15       		.uleb128 0x15
 6827 1004 FB0A0000 		.4byte	.LASF127
 6828 1008 01       		.byte	0x1
 6829 1009 B404     		.2byte	0x4b4
 6830 100b 9E100000 		.4byte	0x109e
 6831 100f E2080000 		.4byte	.LLST61
 6832 1013 15       		.uleb128 0x15
 6833 1014 CC0D0000 		.4byte	.LASF128
 6834 1018 01       		.byte	0x1
 6835 1019 B404     		.2byte	0x4b4
 6836 101b 33080000 		.4byte	0x833
 6837 101f 0E090000 		.4byte	.LLST62
 6838 1023 16       		.uleb128 0x16
 6839 1024 120E0000 		.4byte	.LASF94
 6840 1028 01       		.byte	0x1
 6841 1029 B604     		.2byte	0x4b6
 6842 102b 30010000 		.4byte	0x130
 6843 102f 3A090000 		.4byte	.LLST63
 6844 1033 16       		.uleb128 0x16
 6845 1034 3B0D0000 		.4byte	.LASF124
 6846 1038 01       		.byte	0x1
 6847 1039 B704     		.2byte	0x4b7
 6848 103b 1A010000 		.4byte	0x11a
 6849 103f 4D090000 		.4byte	.LLST64
 6850 1043 16       		.uleb128 0x16
 6851 1044 D2060000 		.4byte	.LASF129
 6852 1048 01       		.byte	0x1
 6853 1049 B704     		.2byte	0x4b7
 6854 104b 1A010000 		.4byte	0x11a
 6855 104f 60090000 		.4byte	.LLST65
 6856 1053 28       		.uleb128 0x28
 6857 1054 18000000 		.4byte	.Ldebug_ranges0+0x18
 6858 1058 7C100000 		.4byte	0x107c
 6859 105c 16       		.uleb128 0x16
 6860 105d 71050000 		.4byte	.LASF95
 6861 1061 01       		.byte	0x1
 6862 1062 C104     		.2byte	0x4c1
 6863 1064 33080000 		.4byte	0x833
 6864 1068 7F090000 		.4byte	.LLST66
 6865 106c 19       		.uleb128 0x19
 6866 106d 66000000 		.4byte	.LVL220
 6867 1071 A5070000 		.4byte	0x7a5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 222


 6868 1075 1A       		.uleb128 0x1a
 6869 1076 01       		.uleb128 0x1
 6870 1077 51       		.byte	0x51
 6871 1078 01       		.uleb128 0x1
 6872 1079 30       		.byte	0x30
 6873 107a 00       		.byte	0
 6874 107b 00       		.byte	0
 6875 107c 18       		.uleb128 0x18
 6876 107d 26000000 		.4byte	.LVL215
 6877 1081 A30D0000 		.4byte	0xda3
 6878 1085 18       		.uleb128 0x18
 6879 1086 6A000000 		.4byte	.LVL221
 6880 108a 2B0F0000 		.4byte	0xf2b
 6881 108e 18       		.uleb128 0x18
 6882 108f 72000000 		.4byte	.LVL222
 6883 1093 6B1E0000 		.4byte	0x1e6b
 6884 1097 00       		.byte	0
 6885 1098 06       		.uleb128 0x6
 6886 1099 04       		.byte	0x4
 6887 109a 30010000 		.4byte	0x130
 6888 109e 07       		.uleb128 0x7
 6889 109f 98100000 		.4byte	0x1098
 6890 10a3 22       		.uleb128 0x22
 6891 10a4 E5050000 		.4byte	.LASF130
 6892 10a8 01       		.byte	0x1
 6893 10a9 0805     		.2byte	0x508
 6894 10ab 00000000 		.4byte	.LFB37
 6895 10af 34000000 		.4byte	.LFE37-.LFB37
 6896 10b3 01       		.uleb128 0x1
 6897 10b4 9C       		.byte	0x9c
 6898 10b5 0E110000 		.4byte	0x110e
 6899 10b9 15       		.uleb128 0x15
 6900 10ba 4A080000 		.4byte	.LASF131
 6901 10be 01       		.byte	0x1
 6902 10bf 0805     		.2byte	0x508
 6903 10c1 33080000 		.4byte	0x833
 6904 10c5 92090000 		.4byte	.LLST67
 6905 10c9 16       		.uleb128 0x16
 6906 10ca 3B0D0000 		.4byte	.LASF124
 6907 10ce 01       		.byte	0x1
 6908 10cf 0A05     		.2byte	0x50a
 6909 10d1 1A010000 		.4byte	0x11a
 6910 10d5 D4090000 		.4byte	.LLST68
 6911 10d9 18       		.uleb128 0x18
 6912 10da 16000000 		.4byte	.LVL227
 6913 10de A30D0000 		.4byte	0xda3
 6914 10e2 1D       		.uleb128 0x1d
 6915 10e3 1E000000 		.4byte	.LVL228
 6916 10e7 A5070000 		.4byte	0x7a5
 6917 10eb FB100000 		.4byte	0x10fb
 6918 10ef 1A       		.uleb128 0x1a
 6919 10f0 01       		.uleb128 0x1
 6920 10f1 50       		.byte	0x50
 6921 10f2 02       		.uleb128 0x2
 6922 10f3 74       		.byte	0x74
 6923 10f4 00       		.sleb128 0
 6924 10f5 1A       		.uleb128 0x1a
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 223


 6925 10f6 01       		.uleb128 0x1
 6926 10f7 51       		.byte	0x51
 6927 10f8 01       		.uleb128 0x1
 6928 10f9 30       		.byte	0x30
 6929 10fa 00       		.byte	0
 6930 10fb 18       		.uleb128 0x18
 6931 10fc 22000000 		.4byte	.LVL229
 6932 1100 2B0F0000 		.4byte	0xf2b
 6933 1104 18       		.uleb128 0x18
 6934 1105 2E000000 		.4byte	.LVL232
 6935 1109 6B1E0000 		.4byte	0x1e6b
 6936 110d 00       		.byte	0
 6937 110e 22       		.uleb128 0x22
 6938 110f 83090000 		.4byte	.LASF132
 6939 1113 01       		.byte	0x1
 6940 1114 230B     		.2byte	0xb23
 6941 1116 00000000 		.4byte	.LFB54
 6942 111a 88000000 		.4byte	.LFE54-.LFB54
 6943 111e 01       		.uleb128 0x1
 6944 111f 9C       		.byte	0x9c
 6945 1120 59110000 		.4byte	0x1159
 6946 1124 1E       		.uleb128 0x1e
 6947 1125 18000000 		.4byte	.LBB11
 6948 1129 62000000 		.4byte	.LBE11-.LBB11
 6949 112d 16       		.uleb128 0x16
 6950 112e 990C0000 		.4byte	.LASF133
 6951 1132 01       		.byte	0x1
 6952 1133 500B     		.2byte	0xb50
 6953 1135 25010000 		.4byte	0x125
 6954 1139 0A0A0000 		.4byte	.LLST69
 6955 113d 1E       		.uleb128 0x1e
 6956 113e 38000000 		.4byte	.LBB12
 6957 1142 40000000 		.4byte	.LBE12-.LBB12
 6958 1146 16       		.uleb128 0x16
 6959 1147 4C000000 		.4byte	.LASF134
 6960 114b 01       		.byte	0x1
 6961 114c 500B     		.2byte	0xb50
 6962 114e 59110000 		.4byte	0x1159
 6963 1152 1D0A0000 		.4byte	.LLST70
 6964 1156 00       		.byte	0
 6965 1157 00       		.byte	0
 6966 1158 00       		.byte	0
 6967 1159 07       		.uleb128 0x7
 6968 115a 250F0000 		.4byte	0xf25
 6969 115e 22       		.uleb128 0x22
 6970 115f 130D0000 		.4byte	.LASF135
 6971 1163 01       		.byte	0x1
 6972 1164 5E06     		.2byte	0x65e
 6973 1166 00000000 		.4byte	.LFB41
 6974 116a 98000000 		.4byte	.LFE41-.LFB41
 6975 116e 01       		.uleb128 0x1
 6976 116f 9C       		.byte	0x9c
 6977 1170 19120000 		.4byte	0x1219
 6978 1174 15       		.uleb128 0x15
 6979 1175 BB0A0000 		.4byte	.LASF136
 6980 1179 01       		.byte	0x1
 6981 117a 5E06     		.2byte	0x65e
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 224


 6982 117c 2E020000 		.4byte	0x22e
 6983 1180 3A0A0000 		.4byte	.LLST71
 6984 1184 16       		.uleb128 0x16
 6985 1185 2D0E0000 		.4byte	.LASF71
 6986 1189 01       		.byte	0x1
 6987 118a 6006     		.2byte	0x660
 6988 118c 88040000 		.4byte	0x488
 6989 1190 580A0000 		.4byte	.LLST72
 6990 1194 18       		.uleb128 0x18
 6991 1195 08000000 		.4byte	.LVL239
 6992 1199 491E0000 		.4byte	0x1e49
 6993 119d 1D       		.uleb128 0x1d
 6994 119e 18000000 		.4byte	.LVL241
 6995 11a2 761E0000 		.4byte	0x1e76
 6996 11a6 B1110000 		.4byte	0x11b1
 6997 11aa 1A       		.uleb128 0x1a
 6998 11ab 01       		.uleb128 0x1
 6999 11ac 50       		.byte	0x50
 7000 11ad 02       		.uleb128 0x2
 7001 11ae 75       		.byte	0x75
 7002 11af 00       		.sleb128 0
 7003 11b0 00       		.byte	0
 7004 11b1 1D       		.uleb128 0x1d
 7005 11b2 26000000 		.4byte	.LVL242
 7006 11b6 761E0000 		.4byte	0x1e76
 7007 11ba C5110000 		.4byte	0x11c5
 7008 11be 1A       		.uleb128 0x1a
 7009 11bf 01       		.uleb128 0x1
 7010 11c0 50       		.byte	0x50
 7011 11c1 02       		.uleb128 0x2
 7012 11c2 74       		.byte	0x74
 7013 11c3 18       		.sleb128 24
 7014 11c4 00       		.byte	0
 7015 11c5 1D       		.uleb128 0x1d
 7016 11c6 2E000000 		.4byte	.LVL243
 7017 11ca 541E0000 		.4byte	0x1e54
 7018 11ce E2110000 		.4byte	0x11e2
 7019 11d2 1A       		.uleb128 0x1a
 7020 11d3 01       		.uleb128 0x1
 7021 11d4 50       		.byte	0x50
 7022 11d5 05       		.uleb128 0x5
 7023 11d6 03       		.byte	0x3
 7024 11d7 00000000 		.4byte	.LANCHOR0
 7025 11db 1A       		.uleb128 0x1a
 7026 11dc 01       		.uleb128 0x1
 7027 11dd 51       		.byte	0x51
 7028 11de 02       		.uleb128 0x2
 7029 11df 75       		.byte	0x75
 7030 11e0 00       		.sleb128 0
 7031 11e1 00       		.byte	0
 7032 11e2 18       		.uleb128 0x18
 7033 11e3 40000000 		.4byte	.LVL244
 7034 11e7 601E0000 		.4byte	0x1e60
 7035 11eb 18       		.uleb128 0x18
 7036 11ec 4C000000 		.4byte	.LVL245
 7037 11f0 491E0000 		.4byte	0x1e49
 7038 11f4 18       		.uleb128 0x18
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 225


 7039 11f5 50000000 		.4byte	.LVL246
 7040 11f9 61040000 		.4byte	0x461
 7041 11fd 18       		.uleb128 0x18
 7042 11fe 54000000 		.4byte	.LVL247
 7043 1202 601E0000 		.4byte	0x1e60
 7044 1206 18       		.uleb128 0x18
 7045 1207 74000000 		.4byte	.LVL248
 7046 120b 6B1E0000 		.4byte	0x1e6b
 7047 120f 18       		.uleb128 0x18
 7048 1210 8E000000 		.4byte	.LVL249
 7049 1214 0E110000 		.4byte	0x110e
 7050 1218 00       		.byte	0
 7051 1219 22       		.uleb128 0x22
 7052 121a CF050000 		.4byte	.LASF137
 7053 121e 01       		.byte	0x1
 7054 121f 5E0B     		.2byte	0xb5e
 7055 1221 00000000 		.4byte	.LFB55
 7056 1225 24000000 		.4byte	.LFE55-.LFB55
 7057 1229 01       		.uleb128 0x1
 7058 122a 9C       		.byte	0x9c
 7059 122b 6E120000 		.4byte	0x126e
 7060 122f 15       		.uleb128 0x15
 7061 1230 2C010000 		.4byte	.LASF138
 7062 1234 01       		.byte	0x1
 7063 1235 5E0B     		.2byte	0xb5e
 7064 1237 59110000 		.4byte	0x1159
 7065 123b 780A0000 		.4byte	.LLST73
 7066 123f 15       		.uleb128 0x15
 7067 1240 F10C0000 		.4byte	.LASF92
 7068 1244 01       		.byte	0x1
 7069 1245 5E0B     		.2byte	0xb5e
 7070 1247 33080000 		.4byte	0x833
 7071 124b 990A0000 		.4byte	.LLST74
 7072 124f 18       		.uleb128 0x18
 7073 1250 16000000 		.4byte	.LVL254
 7074 1254 821E0000 		.4byte	0x1e82
 7075 1258 19       		.uleb128 0x19
 7076 1259 1E000000 		.4byte	.LVL255
 7077 125d A5070000 		.4byte	0x7a5
 7078 1261 1A       		.uleb128 0x1a
 7079 1262 01       		.uleb128 0x1
 7080 1263 50       		.byte	0x50
 7081 1264 02       		.uleb128 0x2
 7082 1265 74       		.byte	0x74
 7083 1266 00       		.sleb128 0
 7084 1267 1A       		.uleb128 0x1a
 7085 1268 01       		.uleb128 0x1
 7086 1269 51       		.byte	0x51
 7087 126a 01       		.uleb128 0x1
 7088 126b 31       		.byte	0x31
 7089 126c 00       		.byte	0
 7090 126d 00       		.byte	0
 7091 126e 22       		.uleb128 0x22
 7092 126f 2F0C0000 		.4byte	.LASF139
 7093 1273 01       		.byte	0x1
 7094 1274 6F0B     		.2byte	0xb6f
 7095 1276 00000000 		.4byte	.LFB56
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 226


 7096 127a 3C000000 		.4byte	.LFE56-.LFB56
 7097 127e 01       		.uleb128 0x1
 7098 127f 9C       		.byte	0x9c
 7099 1280 D3120000 		.4byte	0x12d3
 7100 1284 15       		.uleb128 0x15
 7101 1285 2C010000 		.4byte	.LASF138
 7102 1289 01       		.byte	0x1
 7103 128a 6F0B     		.2byte	0xb6f
 7104 128c 250F0000 		.4byte	0xf25
 7105 1290 C50A0000 		.4byte	.LLST75
 7106 1294 15       		.uleb128 0x15
 7107 1295 0A0A0000 		.4byte	.LASF26
 7108 1299 01       		.byte	0x1
 7109 129a 6F0B     		.2byte	0xb6f
 7110 129c 33080000 		.4byte	0x833
 7111 12a0 E60A0000 		.4byte	.LLST76
 7112 12a4 15       		.uleb128 0x15
 7113 12a5 F10C0000 		.4byte	.LASF92
 7114 12a9 01       		.byte	0x1
 7115 12aa 6F0B     		.2byte	0xb6f
 7116 12ac 33080000 		.4byte	0x833
 7117 12b0 070B0000 		.4byte	.LLST77
 7118 12b4 18       		.uleb128 0x18
 7119 12b5 2C000000 		.4byte	.LVL260
 7120 12b9 541E0000 		.4byte	0x1e54
 7121 12bd 19       		.uleb128 0x19
 7122 12be 34000000 		.4byte	.LVL261
 7123 12c2 A5070000 		.4byte	0x7a5
 7124 12c6 1A       		.uleb128 0x1a
 7125 12c7 01       		.uleb128 0x1
 7126 12c8 50       		.byte	0x50
 7127 12c9 02       		.uleb128 0x2
 7128 12ca 74       		.byte	0x74
 7129 12cb 00       		.sleb128 0
 7130 12cc 1A       		.uleb128 0x1a
 7131 12cd 01       		.uleb128 0x1
 7132 12ce 51       		.byte	0x51
 7133 12cf 01       		.uleb128 0x1
 7134 12d0 31       		.byte	0x31
 7135 12d1 00       		.byte	0
 7136 12d2 00       		.byte	0
 7137 12d3 20       		.uleb128 0x20
 7138 12d4 66060000 		.4byte	.LASF140
 7139 12d8 01       		.byte	0x1
 7140 12d9 A80B     		.2byte	0xba8
 7141 12db 1A010000 		.4byte	0x11a
 7142 12df 00000000 		.4byte	.LFB57
 7143 12e3 7C000000 		.4byte	.LFE57-.LFB57
 7144 12e7 01       		.uleb128 0x1
 7145 12e8 9C       		.byte	0x9c
 7146 12e9 73130000 		.4byte	0x1373
 7147 12ed 15       		.uleb128 0x15
 7148 12ee 2C010000 		.4byte	.LASF138
 7149 12f2 01       		.byte	0x1
 7150 12f3 A80B     		.2byte	0xba8
 7151 12f5 7E130000 		.4byte	0x137e
 7152 12f9 330B0000 		.4byte	.LLST78
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 227


 7153 12fd 16       		.uleb128 0x16
 7154 12fe DF020000 		.4byte	.LASF141
 7155 1302 01       		.byte	0x1
 7156 1303 AA0B     		.2byte	0xbaa
 7157 1305 88040000 		.4byte	0x488
 7158 1309 540B0000 		.4byte	.LLST79
 7159 130d 16       		.uleb128 0x16
 7160 130e 340B0000 		.4byte	.LASF70
 7161 1312 01       		.byte	0x1
 7162 1313 AB0B     		.2byte	0xbab
 7163 1315 1A010000 		.4byte	0x11a
 7164 1319 670B0000 		.4byte	.LLST80
 7165 131d 1D       		.uleb128 0x1d
 7166 131e 18000000 		.4byte	.LVL266
 7167 1322 761E0000 		.4byte	0x1e76
 7168 1326 31130000 		.4byte	0x1331
 7169 132a 1A       		.uleb128 0x1a
 7170 132b 01       		.uleb128 0x1
 7171 132c 50       		.byte	0x50
 7172 132d 02       		.uleb128 0x2
 7173 132e 75       		.byte	0x75
 7174 132f 00       		.sleb128 0
 7175 1330 00       		.byte	0
 7176 1331 1D       		.uleb128 0x1d
 7177 1332 28000000 		.4byte	.LVL267
 7178 1336 761E0000 		.4byte	0x1e76
 7179 133a 45130000 		.4byte	0x1345
 7180 133e 1A       		.uleb128 0x1a
 7181 133f 01       		.uleb128 0x1
 7182 1340 50       		.byte	0x50
 7183 1341 02       		.uleb128 0x2
 7184 1342 75       		.byte	0x75
 7185 1343 00       		.sleb128 0
 7186 1344 00       		.byte	0
 7187 1345 1D       		.uleb128 0x1d
 7188 1346 48000000 		.4byte	.LVL268
 7189 134a 541E0000 		.4byte	0x1e54
 7190 134e 59130000 		.4byte	0x1359
 7191 1352 1A       		.uleb128 0x1a
 7192 1353 01       		.uleb128 0x1
 7193 1354 51       		.byte	0x51
 7194 1355 02       		.uleb128 0x2
 7195 1356 75       		.byte	0x75
 7196 1357 00       		.sleb128 0
 7197 1358 00       		.byte	0
 7198 1359 19       		.uleb128 0x19
 7199 135a 54000000 		.4byte	.LVL269
 7200 135e 541E0000 		.4byte	0x1e54
 7201 1362 1A       		.uleb128 0x1a
 7202 1363 01       		.uleb128 0x1
 7203 1364 50       		.byte	0x50
 7204 1365 05       		.uleb128 0x5
 7205 1366 03       		.byte	0x3
 7206 1367 14000000 		.4byte	.LANCHOR0+20
 7207 136b 1A       		.uleb128 0x1a
 7208 136c 01       		.uleb128 0x1
 7209 136d 51       		.byte	0x51
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 228


 7210 136e 02       		.uleb128 0x2
 7211 136f 75       		.byte	0x75
 7212 1370 00       		.sleb128 0
 7213 1371 00       		.byte	0
 7214 1372 00       		.byte	0
 7215 1373 06       		.uleb128 0x6
 7216 1374 04       		.byte	0x4
 7217 1375 79130000 		.4byte	0x1379
 7218 1379 07       		.uleb128 0x7
 7219 137a 23020000 		.4byte	0x223
 7220 137e 07       		.uleb128 0x7
 7221 137f 73130000 		.4byte	0x1373
 7222 1383 22       		.uleb128 0x22
 7223 1384 1E060000 		.4byte	.LASF142
 7224 1388 01       		.byte	0x1
 7225 1389 EC0B     		.2byte	0xbec
 7226 138b 00000000 		.4byte	.LFB58
 7227 138f 6C000000 		.4byte	.LFE58-.LFB58
 7228 1393 01       		.uleb128 0x1
 7229 1394 9C       		.byte	0x9c
 7230 1395 F7130000 		.4byte	0x13f7
 7231 1399 15       		.uleb128 0x15
 7232 139a 7F0E0000 		.4byte	.LASF143
 7233 139e 01       		.byte	0x1
 7234 139f EC0B     		.2byte	0xbec
 7235 13a1 1D020000 		.4byte	0x21d
 7236 13a5 860B0000 		.4byte	.LLST81
 7237 13a9 15       		.uleb128 0x15
 7238 13aa 0A0A0000 		.4byte	.LASF26
 7239 13ae 01       		.byte	0x1
 7240 13af EC0B     		.2byte	0xbec
 7241 13b1 33080000 		.4byte	0x833
 7242 13b5 A70B0000 		.4byte	.LLST82
 7243 13b9 16       		.uleb128 0x16
 7244 13ba DF020000 		.4byte	.LASF141
 7245 13be 01       		.byte	0x1
 7246 13bf EE0B     		.2byte	0xbee
 7247 13c1 88040000 		.4byte	0x488
 7248 13c5 C80B0000 		.4byte	.LLST83
 7249 13c9 18       		.uleb128 0x18
 7250 13ca 24000000 		.4byte	.LVL277
 7251 13ce 761E0000 		.4byte	0x1e76
 7252 13d2 1D       		.uleb128 0x1d
 7253 13d3 2C000000 		.4byte	.LVL278
 7254 13d7 761E0000 		.4byte	0x1e76
 7255 13db E6130000 		.4byte	0x13e6
 7256 13df 1A       		.uleb128 0x1a
 7257 13e0 01       		.uleb128 0x1
 7258 13e1 50       		.byte	0x50
 7259 13e2 02       		.uleb128 0x2
 7260 13e3 75       		.byte	0x75
 7261 13e4 00       		.sleb128 0
 7262 13e5 00       		.byte	0
 7263 13e6 19       		.uleb128 0x19
 7264 13e7 4C000000 		.4byte	.LVL279
 7265 13eb 541E0000 		.4byte	0x1e54
 7266 13ef 1A       		.uleb128 0x1a
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 229


 7267 13f0 01       		.uleb128 0x1
 7268 13f1 51       		.byte	0x51
 7269 13f2 02       		.uleb128 0x2
 7270 13f3 75       		.byte	0x75
 7271 13f4 00       		.sleb128 0
 7272 13f5 00       		.byte	0
 7273 13f6 00       		.byte	0
 7274 13f7 22       		.uleb128 0x22
 7275 13f8 B8010000 		.4byte	.LASF144
 7276 13fc 01       		.byte	0x1
 7277 13fd 0E0C     		.2byte	0xc0e
 7278 13ff 00000000 		.4byte	.LFB59
 7279 1403 24000000 		.4byte	.LFE59-.LFB59
 7280 1407 01       		.uleb128 0x1
 7281 1408 9C       		.byte	0x9c
 7282 1409 30140000 		.4byte	0x1430
 7283 140d 15       		.uleb128 0x15
 7284 140e 40080000 		.4byte	.LASF145
 7285 1412 01       		.byte	0x1
 7286 1413 0E0C     		.2byte	0xc0e
 7287 1415 36140000 		.4byte	0x1436
 7288 1419 E80B0000 		.4byte	.LLST84
 7289 141d 18       		.uleb128 0x18
 7290 141e 0E000000 		.4byte	.LVL283
 7291 1422 491E0000 		.4byte	0x1e49
 7292 1426 18       		.uleb128 0x18
 7293 1427 1C000000 		.4byte	.LVL284
 7294 142b 601E0000 		.4byte	0x1e60
 7295 142f 00       		.byte	0
 7296 1430 06       		.uleb128 0x6
 7297 1431 04       		.byte	0x4
 7298 1432 94020000 		.4byte	0x294
 7299 1436 07       		.uleb128 0x7
 7300 1437 30140000 		.4byte	0x1430
 7301 143b 22       		.uleb128 0x22
 7302 143c 83080000 		.4byte	.LASF146
 7303 1440 01       		.byte	0x1
 7304 1441 1A0C     		.2byte	0xc1a
 7305 1443 00000000 		.4byte	.LFB60
 7306 1447 10000000 		.4byte	.LFE60-.LFB60
 7307 144b 01       		.uleb128 0x1
 7308 144c 9C       		.byte	0x9c
 7309 144d 60140000 		.4byte	0x1460
 7310 1451 1B       		.uleb128 0x1b
 7311 1452 40080000 		.4byte	.LASF145
 7312 1456 01       		.byte	0x1
 7313 1457 1A0C     		.2byte	0xc1a
 7314 1459 36140000 		.4byte	0x1436
 7315 145d 01       		.uleb128 0x1
 7316 145e 50       		.byte	0x50
 7317 145f 00       		.byte	0
 7318 1460 20       		.uleb128 0x20
 7319 1461 CA0A0000 		.4byte	.LASF147
 7320 1465 01       		.byte	0x1
 7321 1466 220C     		.2byte	0xc22
 7322 1468 1A010000 		.4byte	0x11a
 7323 146c 00000000 		.4byte	.LFB61
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 230


 7324 1470 64000000 		.4byte	.LFE61-.LFB61
 7325 1474 01       		.uleb128 0x1
 7326 1475 9C       		.byte	0x9c
 7327 1476 FB140000 		.4byte	0x14fb
 7328 147a 15       		.uleb128 0x15
 7329 147b 40080000 		.4byte	.LASF145
 7330 147f 01       		.byte	0x1
 7331 1480 220C     		.2byte	0xc22
 7332 1482 36140000 		.4byte	0x1436
 7333 1486 140C0000 		.4byte	.LLST85
 7334 148a 15       		.uleb128 0x15
 7335 148b 7F0C0000 		.4byte	.LASF148
 7336 148f 01       		.byte	0x1
 7337 1490 220C     		.2byte	0xc22
 7338 1492 9E100000 		.4byte	0x109e
 7339 1496 400C0000 		.4byte	.LLST86
 7340 149a 16       		.uleb128 0x16
 7341 149b 340B0000 		.4byte	.LASF70
 7342 149f 01       		.byte	0x1
 7343 14a0 240C     		.2byte	0xc24
 7344 14a2 1A010000 		.4byte	0x11a
 7345 14a6 B70C0000 		.4byte	.LLST87
 7346 14aa 21       		.uleb128 0x21
 7347 14ab 1A000000 		.4byte	.LBB13
 7348 14af 3C000000 		.4byte	.LBE13-.LBB13
 7349 14b3 E8140000 		.4byte	0x14e8
 7350 14b7 16       		.uleb128 0x16
 7351 14b8 71050000 		.4byte	.LASF95
 7352 14bc 01       		.byte	0x1
 7353 14bd 2C0C     		.2byte	0xc2c
 7354 14bf 33080000 		.4byte	0x833
 7355 14c3 ED0C0000 		.4byte	.LLST88
 7356 14c7 16       		.uleb128 0x16
 7357 14c8 0D030000 		.4byte	.LASF149
 7358 14cc 01       		.byte	0x1
 7359 14cd 2D0C     		.2byte	0xc2d
 7360 14cf 33080000 		.4byte	0x833
 7361 14d3 0B0D0000 		.4byte	.LLST89
 7362 14d7 19       		.uleb128 0x19
 7363 14d8 44000000 		.4byte	.LVL292
 7364 14dc 3B140000 		.4byte	0x143b
 7365 14e0 1A       		.uleb128 0x1a
 7366 14e1 01       		.uleb128 0x1
 7367 14e2 50       		.byte	0x50
 7368 14e3 02       		.uleb128 0x2
 7369 14e4 75       		.byte	0x75
 7370 14e5 00       		.sleb128 0
 7371 14e6 00       		.byte	0
 7372 14e7 00       		.byte	0
 7373 14e8 18       		.uleb128 0x18
 7374 14e9 1A000000 		.4byte	.LVL288
 7375 14ed 491E0000 		.4byte	0x1e49
 7376 14f1 18       		.uleb128 0x18
 7377 14f2 5A000000 		.4byte	.LVL301
 7378 14f6 601E0000 		.4byte	0x1e60
 7379 14fa 00       		.byte	0
 7380 14fb 23       		.uleb128 0x23
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 231


 7381 14fc 450B0000 		.4byte	.LASF151
 7382 1500 01       		.byte	0x1
 7383 1501 610C     		.2byte	0xc61
 7384 1503 00000000 		.4byte	.LFB62
 7385 1507 0C000000 		.4byte	.LFE62-.LFB62
 7386 150b 01       		.uleb128 0x1
 7387 150c 9C       		.byte	0x9c
 7388 150d 22       		.uleb128 0x22
 7389 150e 86000000 		.4byte	.LASF152
 7390 1512 01       		.byte	0x1
 7391 1513 370D     		.2byte	0xd37
 7392 1515 00000000 		.4byte	.LFB64
 7393 1519 1C000000 		.4byte	.LFE64-.LFB64
 7394 151d 01       		.uleb128 0x1
 7395 151e 9C       		.byte	0x9c
 7396 151f 62150000 		.4byte	0x1562
 7397 1523 15       		.uleb128 0x15
 7398 1524 AA050000 		.4byte	.LASF153
 7399 1528 01       		.byte	0x1
 7400 1529 370D     		.2byte	0xd37
 7401 152b 2E020000 		.4byte	0x22e
 7402 152f 290D0000 		.4byte	.LLST90
 7403 1533 15       		.uleb128 0x15
 7404 1534 180B0000 		.4byte	.LASF154
 7405 1538 01       		.byte	0x1
 7406 1539 370D     		.2byte	0xd37
 7407 153b 1A010000 		.4byte	0x11a
 7408 153f 3C0D0000 		.4byte	.LLST91
 7409 1543 1B       		.uleb128 0x1b
 7410 1544 8F0E0000 		.4byte	.LASF155
 7411 1548 01       		.byte	0x1
 7412 1549 370D     		.2byte	0xd37
 7413 154b A5000000 		.4byte	0xa5
 7414 154f 01       		.uleb128 0x1
 7415 1550 52       		.byte	0x52
 7416 1551 16       		.uleb128 0x16
 7417 1552 2D0E0000 		.4byte	.LASF71
 7418 1556 01       		.byte	0x1
 7419 1557 390D     		.2byte	0xd39
 7420 1559 88040000 		.4byte	0x488
 7421 155d 6A0D0000 		.4byte	.LLST92
 7422 1561 00       		.byte	0
 7423 1562 20       		.uleb128 0x20
 7424 1563 E90B0000 		.4byte	.LASF156
 7425 1567 01       		.byte	0x1
 7426 1568 470D     		.2byte	0xd47
 7427 156a A5000000 		.4byte	0xa5
 7428 156e 00000000 		.4byte	.LFB65
 7429 1572 20000000 		.4byte	.LFE65-.LFB65
 7430 1576 01       		.uleb128 0x1
 7431 1577 9C       		.byte	0x9c
 7432 1578 BD150000 		.4byte	0x15bd
 7433 157c 15       		.uleb128 0x15
 7434 157d 0E090000 		.4byte	.LASF119
 7435 1581 01       		.byte	0x1
 7436 1582 470D     		.2byte	0xd47
 7437 1584 2E020000 		.4byte	0x22e
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 232


 7438 1588 7D0D0000 		.4byte	.LLST93
 7439 158c 15       		.uleb128 0x15
 7440 158d 180B0000 		.4byte	.LASF154
 7441 1591 01       		.byte	0x1
 7442 1592 470D     		.2byte	0xd47
 7443 1594 1A010000 		.4byte	0x11a
 7444 1598 9B0D0000 		.4byte	.LLST94
 7445 159c 16       		.uleb128 0x16
 7446 159d F1030000 		.4byte	.LASF157
 7447 15a1 01       		.byte	0x1
 7448 15a2 490D     		.2byte	0xd49
 7449 15a4 A5000000 		.4byte	0xa5
 7450 15a8 E20D0000 		.4byte	.LLST95
 7451 15ac 16       		.uleb128 0x16
 7452 15ad 2D0E0000 		.4byte	.LASF71
 7453 15b1 01       		.byte	0x1
 7454 15b2 4A0D     		.2byte	0xd4a
 7455 15b4 88040000 		.4byte	0x488
 7456 15b8 180E0000 		.4byte	.LLST96
 7457 15bc 00       		.byte	0
 7458 15bd 20       		.uleb128 0x20
 7459 15be 2A040000 		.4byte	.LASF158
 7460 15c2 01       		.byte	0x1
 7461 15c3 400E     		.2byte	0xe40
 7462 15c5 25010000 		.4byte	0x125
 7463 15c9 00000000 		.4byte	.LFB69
 7464 15cd 18000000 		.4byte	.LFE69-.LFB69
 7465 15d1 01       		.uleb128 0x1
 7466 15d2 9C       		.byte	0x9c
 7467 15d3 1F160000 		.4byte	0x161f
 7468 15d7 15       		.uleb128 0x15
 7469 15d8 34090000 		.4byte	.LASF74
 7470 15dc 01       		.byte	0x1
 7471 15dd 400E     		.2byte	0xe40
 7472 15df 2E020000 		.4byte	0x22e
 7473 15e3 2B0E0000 		.4byte	.LLST97
 7474 15e7 16       		.uleb128 0x16
 7475 15e8 2D0E0000 		.4byte	.LASF71
 7476 15ec 01       		.byte	0x1
 7477 15ed 420E     		.2byte	0xe42
 7478 15ef 88040000 		.4byte	0x488
 7479 15f3 3E0E0000 		.4byte	.LLST98
 7480 15f7 16       		.uleb128 0x16
 7481 15f8 8B0B0000 		.4byte	.LASF159
 7482 15fc 01       		.byte	0x1
 7483 15fd 430E     		.2byte	0xe43
 7484 15ff 3B010000 		.4byte	0x13b
 7485 1603 510E0000 		.4byte	.LLST99
 7486 1607 24       		.uleb128 0x24
 7487 1608 55020000 		.4byte	.LASF100
 7488 160c 01       		.byte	0x1
 7489 160d 440E     		.2byte	0xe44
 7490 160f 25010000 		.4byte	0x125
 7491 1613 01       		.uleb128 0x1
 7492 1614 50       		.byte	0x50
 7493 1615 18       		.uleb128 0x18
 7494 1616 10000000 		.4byte	.LVL320
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 233


 7495 161a 1B040000 		.4byte	0x41b
 7496 161e 00       		.byte	0
 7497 161f 20       		.uleb128 0x20
 7498 1620 4B0D0000 		.4byte	.LASF160
 7499 1624 01       		.byte	0x1
 7500 1625 AC0E     		.2byte	0xeac
 7501 1627 2E020000 		.4byte	0x22e
 7502 162b 00000000 		.4byte	.LFB72
 7503 162f 0C000000 		.4byte	.LFE72-.LFB72
 7504 1633 01       		.uleb128 0x1
 7505 1634 9C       		.byte	0x9c
 7506 1635 48160000 		.4byte	0x1648
 7507 1639 24       		.uleb128 0x24
 7508 163a 340B0000 		.4byte	.LASF70
 7509 163e 01       		.byte	0x1
 7510 163f AE0E     		.2byte	0xeae
 7511 1641 2E020000 		.4byte	0x22e
 7512 1645 01       		.uleb128 0x1
 7513 1646 50       		.byte	0x50
 7514 1647 00       		.byte	0
 7515 1648 20       		.uleb128 0x20
 7516 1649 D1000000 		.4byte	.LASF161
 7517 164d 01       		.byte	0x1
 7518 164e BD0E     		.2byte	0xebd
 7519 1650 1A010000 		.4byte	0x11a
 7520 1654 00000000 		.4byte	.LFB73
 7521 1658 20000000 		.4byte	.LFE73-.LFB73
 7522 165c 01       		.uleb128 0x1
 7523 165d 9C       		.byte	0x9c
 7524 165e 71160000 		.4byte	0x1671
 7525 1662 24       		.uleb128 0x24
 7526 1663 340B0000 		.4byte	.LASF70
 7527 1667 01       		.byte	0x1
 7528 1668 BF0E     		.2byte	0xebf
 7529 166a 1A010000 		.4byte	0x11a
 7530 166e 01       		.uleb128 0x1
 7531 166f 50       		.byte	0x50
 7532 1670 00       		.byte	0
 7533 1671 20       		.uleb128 0x20
 7534 1672 760B0000 		.4byte	.LASF162
 7535 1676 01       		.byte	0x1
 7536 1677 D90E     		.2byte	0xed9
 7537 1679 1A010000 		.4byte	0x11a
 7538 167d 00000000 		.4byte	.LFB74
 7539 1681 9C000000 		.4byte	.LFE74-.LFB74
 7540 1685 01       		.uleb128 0x1
 7541 1686 9C       		.byte	0x9c
 7542 1687 E0160000 		.4byte	0x16e0
 7543 168b 15       		.uleb128 0x15
 7544 168c 8F0A0000 		.4byte	.LASF163
 7545 1690 01       		.byte	0x1
 7546 1691 D90E     		.2byte	0xed9
 7547 1693 06040000 		.4byte	0x406
 7548 1697 640E0000 		.4byte	.LLST100
 7549 169b 16       		.uleb128 0x16
 7550 169c 990B0000 		.4byte	.LASF164
 7551 16a0 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 234


 7552 16a1 DB0E     		.2byte	0xedb
 7553 16a3 460C0000 		.4byte	0xc46
 7554 16a7 E80E0000 		.4byte	.LLST101
 7555 16ab 16       		.uleb128 0x16
 7556 16ac 340B0000 		.4byte	.LASF70
 7557 16b0 01       		.byte	0x1
 7558 16b1 DC0E     		.2byte	0xedc
 7559 16b3 1A010000 		.4byte	0x11a
 7560 16b7 6C0F0000 		.4byte	.LLST102
 7561 16bb 1D       		.uleb128 0x1d
 7562 16bc 48000000 		.4byte	.LVL326
 7563 16c0 761E0000 		.4byte	0x1e76
 7564 16c4 CF160000 		.4byte	0x16cf
 7565 16c8 1A       		.uleb128 0x1a
 7566 16c9 01       		.uleb128 0x1
 7567 16ca 50       		.byte	0x50
 7568 16cb 02       		.uleb128 0x2
 7569 16cc 75       		.byte	0x75
 7570 16cd 00       		.sleb128 0
 7571 16ce 00       		.byte	0
 7572 16cf 19       		.uleb128 0x19
 7573 16d0 6C000000 		.4byte	.LVL327
 7574 16d4 541E0000 		.4byte	0x1e54
 7575 16d8 1A       		.uleb128 0x1a
 7576 16d9 01       		.uleb128 0x1
 7577 16da 51       		.byte	0x51
 7578 16db 02       		.uleb128 0x2
 7579 16dc 75       		.byte	0x75
 7580 16dd 00       		.sleb128 0
 7581 16de 00       		.byte	0
 7582 16df 00       		.byte	0
 7583 16e0 20       		.uleb128 0x20
 7584 16e1 4E060000 		.4byte	.LASF165
 7585 16e5 01       		.byte	0x1
 7586 16e6 300F     		.2byte	0xf30
 7587 16e8 1A010000 		.4byte	0x11a
 7588 16ec 00000000 		.4byte	.LFB75
 7589 16f0 74000000 		.4byte	.LFE75-.LFB75
 7590 16f4 01       		.uleb128 0x1
 7591 16f5 9C       		.byte	0x9c
 7592 16f6 4F170000 		.4byte	0x174f
 7593 16fa 15       		.uleb128 0x15
 7594 16fb 8F0A0000 		.4byte	.LASF163
 7595 16ff 01       		.byte	0x1
 7596 1700 300F     		.2byte	0xf30
 7597 1702 06040000 		.4byte	0x406
 7598 1706 8B0F0000 		.4byte	.LLST103
 7599 170a 16       		.uleb128 0x16
 7600 170b 2D0E0000 		.4byte	.LASF71
 7601 170f 01       		.byte	0x1
 7602 1710 320F     		.2byte	0xf32
 7603 1712 460C0000 		.4byte	0xc46
 7604 1716 F90F0000 		.4byte	.LLST104
 7605 171a 16       		.uleb128 0x16
 7606 171b 340B0000 		.4byte	.LASF70
 7607 171f 01       		.byte	0x1
 7608 1720 330F     		.2byte	0xf33
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 235


 7609 1722 1A010000 		.4byte	0x11a
 7610 1726 67100000 		.4byte	.LLST105
 7611 172a 1D       		.uleb128 0x1d
 7612 172b 34000000 		.4byte	.LVL340
 7613 172f 761E0000 		.4byte	0x1e76
 7614 1733 3E170000 		.4byte	0x173e
 7615 1737 1A       		.uleb128 0x1a
 7616 1738 01       		.uleb128 0x1
 7617 1739 50       		.byte	0x50
 7618 173a 02       		.uleb128 0x2
 7619 173b 75       		.byte	0x75
 7620 173c 00       		.sleb128 0
 7621 173d 00       		.byte	0
 7622 173e 19       		.uleb128 0x19
 7623 173f 5C000000 		.4byte	.LVL341
 7624 1743 541E0000 		.4byte	0x1e54
 7625 1747 1A       		.uleb128 0x1a
 7626 1748 01       		.uleb128 0x1
 7627 1749 51       		.byte	0x51
 7628 174a 02       		.uleb128 0x2
 7629 174b 75       		.byte	0x75
 7630 174c 00       		.sleb128 0
 7631 174d 00       		.byte	0
 7632 174e 00       		.byte	0
 7633 174f 22       		.uleb128 0x22
 7634 1750 CD030000 		.4byte	.LASF166
 7635 1754 01       		.byte	0x1
 7636 1755 800F     		.2byte	0xf80
 7637 1757 00000000 		.4byte	.LFB76
 7638 175b 8C000000 		.4byte	.LFE76-.LFB76
 7639 175f 01       		.uleb128 0x1
 7640 1760 9C       		.byte	0x9c
 7641 1761 E7170000 		.4byte	0x17e7
 7642 1765 15       		.uleb128 0x15
 7643 1766 8F0A0000 		.4byte	.LASF163
 7644 176a 01       		.byte	0x1
 7645 176b 800F     		.2byte	0xf80
 7646 176d 06040000 		.4byte	0x406
 7647 1771 9E100000 		.4byte	.LLST106
 7648 1775 15       		.uleb128 0x15
 7649 1776 C2090000 		.4byte	.LASF167
 7650 177a 01       		.byte	0x1
 7651 177b 800F     		.2byte	0xf80
 7652 177d 25010000 		.4byte	0x125
 7653 1781 CA100000 		.4byte	.LLST107
 7654 1785 16       		.uleb128 0x16
 7655 1786 2D0E0000 		.4byte	.LASF71
 7656 178a 01       		.byte	0x1
 7657 178b 820F     		.2byte	0xf82
 7658 178d 460C0000 		.4byte	0xc46
 7659 1791 EB100000 		.4byte	.LLST108
 7660 1795 16       		.uleb128 0x16
 7661 1796 D50C0000 		.4byte	.LASF107
 7662 179a 01       		.byte	0x1
 7663 179b 830F     		.2byte	0xf83
 7664 179d 25010000 		.4byte	0x125
 7665 17a1 17110000 		.4byte	.LLST109
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 236


 7666 17a5 16       		.uleb128 0x16
 7667 17a6 73090000 		.4byte	.LASF168
 7668 17aa 01       		.byte	0x1
 7669 17ab 830F     		.2byte	0xf83
 7670 17ad 25010000 		.4byte	0x125
 7671 17b1 2A110000 		.4byte	.LLST110
 7672 17b5 25       		.uleb128 0x25
 7673 17b6 34050000 		.4byte	.LASF169
 7674 17ba 01       		.byte	0x1
 7675 17bb 840F     		.2byte	0xf84
 7676 17bd E7170000 		.4byte	0x17e7
 7677 17c1 01       		.byte	0x1
 7678 17c2 1D       		.uleb128 0x1d
 7679 17c3 60000000 		.4byte	.LVL357
 7680 17c7 761E0000 		.4byte	0x1e76
 7681 17cb D6170000 		.4byte	0x17d6
 7682 17cf 1A       		.uleb128 0x1a
 7683 17d0 01       		.uleb128 0x1
 7684 17d1 50       		.byte	0x50
 7685 17d2 02       		.uleb128 0x2
 7686 17d3 75       		.byte	0x75
 7687 17d4 00       		.sleb128 0
 7688 17d5 00       		.byte	0
 7689 17d6 19       		.uleb128 0x19
 7690 17d7 80000000 		.4byte	.LVL358
 7691 17db 541E0000 		.4byte	0x1e54
 7692 17df 1A       		.uleb128 0x1a
 7693 17e0 01       		.uleb128 0x1
 7694 17e1 51       		.byte	0x51
 7695 17e2 02       		.uleb128 0x2
 7696 17e3 75       		.byte	0x75
 7697 17e4 00       		.sleb128 0
 7698 17e5 00       		.byte	0
 7699 17e6 00       		.byte	0
 7700 17e7 07       		.uleb128 0x7
 7701 17e8 25010000 		.4byte	0x125
 7702 17ec 20       		.uleb128 0x20
 7703 17ed C2080000 		.4byte	.LASF170
 7704 17f1 01       		.byte	0x1
 7705 17f2 1E11     		.2byte	0x111e
 7706 17f4 30010000 		.4byte	0x130
 7707 17f8 00000000 		.4byte	.LFB77
 7708 17fc 18000000 		.4byte	.LFE77-.LFB77
 7709 1800 01       		.uleb128 0x1
 7710 1801 9C       		.byte	0x9c
 7711 1802 15180000 		.4byte	0x1815
 7712 1806 24       		.uleb128 0x24
 7713 1807 55020000 		.4byte	.LASF100
 7714 180b 01       		.byte	0x1
 7715 180c 2011     		.2byte	0x1120
 7716 180e 30010000 		.4byte	0x130
 7717 1812 01       		.uleb128 0x1
 7718 1813 50       		.byte	0x50
 7719 1814 00       		.byte	0
 7720 1815 26       		.uleb128 0x26
 7721 1816 F0050000 		.4byte	.LASF172
 7722 181a 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 237


 7723 181b 2E11     		.2byte	0x112e
 7724 181d A5000000 		.4byte	0xa5
 7725 1821 00000000 		.4byte	.LFB78
 7726 1825 1C000000 		.4byte	.LFE78-.LFB78
 7727 1829 01       		.uleb128 0x1
 7728 182a 9C       		.byte	0x9c
 7729 182b 20       		.uleb128 0x20
 7730 182c F4060000 		.4byte	.LASF173
 7731 1830 01       		.byte	0x1
 7732 1831 3F11     		.2byte	0x113f
 7733 1833 D5000000 		.4byte	0xd5
 7734 1837 00000000 		.4byte	.LFB79
 7735 183b 6C000000 		.4byte	.LFE79-.LFB79
 7736 183f 01       		.uleb128 0x1
 7737 1840 9C       		.byte	0x9c
 7738 1841 BC180000 		.4byte	0x18bc
 7739 1845 15       		.uleb128 0x15
 7740 1846 FB020000 		.4byte	.LASF174
 7741 184a 01       		.byte	0x1
 7742 184b 3F11     		.2byte	0x113f
 7743 184d 1A010000 		.4byte	0x11a
 7744 1851 49110000 		.4byte	.LLST111
 7745 1855 15       		.uleb128 0x15
 7746 1856 F10C0000 		.4byte	.LASF92
 7747 185a 01       		.byte	0x1
 7748 185b 3F11     		.2byte	0x113f
 7749 185d 30010000 		.4byte	0x130
 7750 1861 75110000 		.4byte	.LLST112
 7751 1865 16       		.uleb128 0x16
 7752 1866 A8070000 		.4byte	.LASF175
 7753 186a 01       		.byte	0x1
 7754 186b 4111     		.2byte	0x1141
 7755 186d D5000000 		.4byte	0xd5
 7756 1871 A1110000 		.4byte	.LLST113
 7757 1875 18       		.uleb128 0x18
 7758 1876 0A000000 		.4byte	.LVL362
 7759 187a 491E0000 		.4byte	0x1e49
 7760 187e 1D       		.uleb128 0x1d
 7761 187f 28000000 		.4byte	.LVL363
 7762 1883 A5070000 		.4byte	0x7a5
 7763 1887 97180000 		.4byte	0x1897
 7764 188b 1A       		.uleb128 0x1a
 7765 188c 01       		.uleb128 0x1
 7766 188d 50       		.byte	0x50
 7767 188e 02       		.uleb128 0x2
 7768 188f 74       		.byte	0x74
 7769 1890 00       		.sleb128 0
 7770 1891 1A       		.uleb128 0x1a
 7771 1892 01       		.uleb128 0x1
 7772 1893 51       		.byte	0x51
 7773 1894 01       		.uleb128 0x1
 7774 1895 31       		.byte	0x31
 7775 1896 00       		.byte	0
 7776 1897 18       		.uleb128 0x18
 7777 1898 2C000000 		.4byte	.LVL364
 7778 189c 6B1E0000 		.4byte	0x1e6b
 7779 18a0 18       		.uleb128 0x18
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 238


 7780 18a1 30000000 		.4byte	.LVL365
 7781 18a5 601E0000 		.4byte	0x1e60
 7782 18a9 18       		.uleb128 0x18
 7783 18aa 34000000 		.4byte	.LVL366
 7784 18ae 491E0000 		.4byte	0x1e49
 7785 18b2 18       		.uleb128 0x18
 7786 18b3 62000000 		.4byte	.LVL368
 7787 18b7 601E0000 		.4byte	0x1e60
 7788 18bb 00       		.byte	0
 7789 18bc 20       		.uleb128 0x20
 7790 18bd A9060000 		.4byte	.LASF176
 7791 18c1 01       		.byte	0x1
 7792 18c2 8311     		.2byte	0x1183
 7793 18c4 1A010000 		.4byte	0x11a
 7794 18c8 00000000 		.4byte	.LFB80
 7795 18cc 80000000 		.4byte	.LFE80-.LFB80
 7796 18d0 01       		.uleb128 0x1
 7797 18d1 9C       		.byte	0x9c
 7798 18d2 6D190000 		.4byte	0x196d
 7799 18d6 15       		.uleb128 0x15
 7800 18d7 77030000 		.4byte	.LASF177
 7801 18db 01       		.byte	0x1
 7802 18dc 8311     		.2byte	0x1183
 7803 18de D5000000 		.4byte	0xd5
 7804 18e2 BF110000 		.4byte	.LLST114
 7805 18e6 15       		.uleb128 0x15
 7806 18e7 A8000000 		.4byte	.LASF178
 7807 18eb 01       		.byte	0x1
 7808 18ec 8311     		.2byte	0x1183
 7809 18ee D5000000 		.4byte	0xd5
 7810 18f2 EB110000 		.4byte	.LLST115
 7811 18f6 15       		.uleb128 0x15
 7812 18f7 1F0B0000 		.4byte	.LASF179
 7813 18fb 01       		.byte	0x1
 7814 18fc 8311     		.2byte	0x1183
 7815 18fe 6D190000 		.4byte	0x196d
 7816 1902 17120000 		.4byte	.LLST116
 7817 1906 15       		.uleb128 0x15
 7818 1907 F10C0000 		.4byte	.LASF92
 7819 190b 01       		.byte	0x1
 7820 190c 8311     		.2byte	0x1183
 7821 190e 30010000 		.4byte	0x130
 7822 1912 43120000 		.4byte	.LLST117
 7823 1916 16       		.uleb128 0x16
 7824 1917 340B0000 		.4byte	.LASF70
 7825 191b 01       		.byte	0x1
 7826 191c 8511     		.2byte	0x1185
 7827 191e 1A010000 		.4byte	0x11a
 7828 1922 88120000 		.4byte	.LLST118
 7829 1926 18       		.uleb128 0x18
 7830 1927 0E000000 		.4byte	.LVL372
 7831 192b 491E0000 		.4byte	0x1e49
 7832 192f 1D       		.uleb128 0x1d
 7833 1930 36000000 		.4byte	.LVL373
 7834 1934 A5070000 		.4byte	0x7a5
 7835 1938 48190000 		.4byte	0x1948
 7836 193c 1A       		.uleb128 0x1a
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 239


 7837 193d 01       		.uleb128 0x1
 7838 193e 50       		.byte	0x50
 7839 193f 02       		.uleb128 0x2
 7840 1940 74       		.byte	0x74
 7841 1941 00       		.sleb128 0
 7842 1942 1A       		.uleb128 0x1a
 7843 1943 01       		.uleb128 0x1
 7844 1944 51       		.byte	0x51
 7845 1945 01       		.uleb128 0x1
 7846 1946 31       		.byte	0x31
 7847 1947 00       		.byte	0
 7848 1948 18       		.uleb128 0x18
 7849 1949 3A000000 		.4byte	.LVL374
 7850 194d 6B1E0000 		.4byte	0x1e6b
 7851 1951 18       		.uleb128 0x18
 7852 1952 3E000000 		.4byte	.LVL375
 7853 1956 601E0000 		.4byte	0x1e60
 7854 195a 18       		.uleb128 0x18
 7855 195b 42000000 		.4byte	.LVL376
 7856 195f 491E0000 		.4byte	0x1e49
 7857 1963 18       		.uleb128 0x18
 7858 1964 78000000 		.4byte	.LVL381
 7859 1968 601E0000 		.4byte	0x1e60
 7860 196c 00       		.byte	0
 7861 196d 06       		.uleb128 0x6
 7862 196e 04       		.byte	0x4
 7863 196f D5000000 		.4byte	0xd5
 7864 1973 20       		.uleb128 0x20
 7865 1974 C6020000 		.4byte	.LASF180
 7866 1978 01       		.byte	0x1
 7867 1979 D311     		.2byte	0x11d3
 7868 197b 1A010000 		.4byte	0x11a
 7869 197f 00000000 		.4byte	.LFB81
 7870 1983 C0000000 		.4byte	.LFE81-.LFB81
 7871 1987 01       		.uleb128 0x1
 7872 1988 9C       		.byte	0x9c
 7873 1989 411A0000 		.4byte	0x1a41
 7874 198d 15       		.uleb128 0x15
 7875 198e 26090000 		.4byte	.LASF181
 7876 1992 01       		.byte	0x1
 7877 1993 D311     		.2byte	0x11d3
 7878 1995 2E020000 		.4byte	0x22e
 7879 1999 B2120000 		.4byte	.LLST119
 7880 199d 15       		.uleb128 0x15
 7881 199e B30A0000 		.4byte	.LASF182
 7882 19a2 01       		.byte	0x1
 7883 19a3 D311     		.2byte	0x11d3
 7884 19a5 D5000000 		.4byte	0xd5
 7885 19a9 DE120000 		.4byte	.LLST120
 7886 19ad 15       		.uleb128 0x15
 7887 19ae BA080000 		.4byte	.LASF183
 7888 19b2 01       		.byte	0x1
 7889 19b3 D311     		.2byte	0x11d3
 7890 19b5 64020000 		.4byte	0x264
 7891 19b9 85130000 		.4byte	.LLST121
 7892 19bd 15       		.uleb128 0x15
 7893 19be 1C080000 		.4byte	.LASF184
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 240


 7894 19c2 01       		.byte	0x1
 7895 19c3 D311     		.2byte	0x11d3
 7896 19c5 6D190000 		.4byte	0x196d
 7897 19c9 A6130000 		.4byte	.LLST122
 7898 19cd 16       		.uleb128 0x16
 7899 19ce 2D0E0000 		.4byte	.LASF71
 7900 19d2 01       		.byte	0x1
 7901 19d3 D511     		.2byte	0x11d5
 7902 19d5 88040000 		.4byte	0x488
 7903 19d9 D2130000 		.4byte	.LLST123
 7904 19dd 16       		.uleb128 0x16
 7905 19de 340B0000 		.4byte	.LASF70
 7906 19e2 01       		.byte	0x1
 7907 19e3 D611     		.2byte	0x11d6
 7908 19e5 1A010000 		.4byte	0x11a
 7909 19e9 FE130000 		.4byte	.LLST124
 7910 19ed 16       		.uleb128 0x16
 7911 19ee A2010000 		.4byte	.LASF185
 7912 19f2 01       		.byte	0x1
 7913 19f3 D711     		.2byte	0x11d7
 7914 19f5 BF000000 		.4byte	0xbf
 7915 19f9 28140000 		.4byte	.LLST125
 7916 19fd 18       		.uleb128 0x18
 7917 19fe 16000000 		.4byte	.LVL389
 7918 1a02 491E0000 		.4byte	0x1e49
 7919 1a06 1D       		.uleb128 0x1d
 7920 1a07 74000000 		.4byte	.LVL402
 7921 1a0b 761E0000 		.4byte	0x1e76
 7922 1a0f 1A1A0000 		.4byte	0x1a1a
 7923 1a13 1A       		.uleb128 0x1a
 7924 1a14 01       		.uleb128 0x1
 7925 1a15 50       		.byte	0x50
 7926 1a16 02       		.uleb128 0x2
 7927 1a17 75       		.byte	0x75
 7928 1a18 00       		.sleb128 0
 7929 1a19 00       		.byte	0
 7930 1a1a 1D       		.uleb128 0x1d
 7931 1a1b 94000000 		.4byte	.LVL403
 7932 1a1f 541E0000 		.4byte	0x1e54
 7933 1a23 2E1A0000 		.4byte	0x1a2e
 7934 1a27 1A       		.uleb128 0x1a
 7935 1a28 01       		.uleb128 0x1
 7936 1a29 51       		.byte	0x51
 7937 1a2a 02       		.uleb128 0x2
 7938 1a2b 75       		.byte	0x75
 7939 1a2c 00       		.sleb128 0
 7940 1a2d 00       		.byte	0
 7941 1a2e 18       		.uleb128 0x18
 7942 1a2f AE000000 		.4byte	.LVL404
 7943 1a33 6B1E0000 		.4byte	0x1e6b
 7944 1a37 18       		.uleb128 0x18
 7945 1a38 B2000000 		.4byte	.LVL405
 7946 1a3c 601E0000 		.4byte	0x1e60
 7947 1a40 00       		.byte	0
 7948 1a41 20       		.uleb128 0x20
 7949 1a42 CD010000 		.4byte	.LASF186
 7950 1a46 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 241


 7951 1a47 3D12     		.2byte	0x123d
 7952 1a49 1A010000 		.4byte	0x11a
 7953 1a4d 00000000 		.4byte	.LFB82
 7954 1a51 F0000000 		.4byte	.LFE82-.LFB82
 7955 1a55 01       		.uleb128 0x1
 7956 1a56 9C       		.byte	0x9c
 7957 1a57 4A1B0000 		.4byte	0x1b4a
 7958 1a5b 15       		.uleb128 0x15
 7959 1a5c 26090000 		.4byte	.LASF181
 7960 1a60 01       		.byte	0x1
 7961 1a61 3D12     		.2byte	0x123d
 7962 1a63 2E020000 		.4byte	0x22e
 7963 1a67 3B140000 		.4byte	.LLST126
 7964 1a6b 15       		.uleb128 0x15
 7965 1a6c B30A0000 		.4byte	.LASF182
 7966 1a70 01       		.byte	0x1
 7967 1a71 3D12     		.2byte	0x123d
 7968 1a73 D5000000 		.4byte	0xd5
 7969 1a77 67140000 		.4byte	.LLST127
 7970 1a7b 15       		.uleb128 0x15
 7971 1a7c BA080000 		.4byte	.LASF183
 7972 1a80 01       		.byte	0x1
 7973 1a81 3D12     		.2byte	0x123d
 7974 1a83 64020000 		.4byte	0x264
 7975 1a87 0E150000 		.4byte	.LLST128
 7976 1a8b 15       		.uleb128 0x15
 7977 1a8c 1C080000 		.4byte	.LASF184
 7978 1a90 01       		.byte	0x1
 7979 1a91 3D12     		.2byte	0x123d
 7980 1a93 6D190000 		.4byte	0x196d
 7981 1a97 2F150000 		.4byte	.LLST129
 7982 1a9b 1B       		.uleb128 0x1b
 7983 1a9c E8000000 		.4byte	.LASF187
 7984 1aa0 01       		.byte	0x1
 7985 1aa1 3D12     		.2byte	0x123d
 7986 1aa3 4A1B0000 		.4byte	0x1b4a
 7987 1aa7 02       		.uleb128 0x2
 7988 1aa8 91       		.byte	0x91
 7989 1aa9 00       		.sleb128 0
 7990 1aaa 16       		.uleb128 0x16
 7991 1aab 2D0E0000 		.4byte	.LASF71
 7992 1aaf 01       		.byte	0x1
 7993 1ab0 3F12     		.2byte	0x123f
 7994 1ab2 88040000 		.4byte	0x488
 7995 1ab6 5B150000 		.4byte	.LLST130
 7996 1aba 16       		.uleb128 0x16
 7997 1abb A2010000 		.4byte	.LASF185
 7998 1abf 01       		.byte	0x1
 7999 1ac0 4012     		.2byte	0x1240
 8000 1ac2 BF000000 		.4byte	0xbf
 8001 1ac6 87150000 		.4byte	.LLST131
 8002 1aca 16       		.uleb128 0x16
 8003 1acb 340B0000 		.4byte	.LASF70
 8004 1acf 01       		.byte	0x1
 8005 1ad0 4112     		.2byte	0x1241
 8006 1ad2 1A010000 		.4byte	0x11a
 8007 1ad6 9A150000 		.4byte	.LLST132
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 242


 8008 1ada 16       		.uleb128 0x16
 8009 1adb 7C020000 		.4byte	.LASF112
 8010 1adf 01       		.byte	0x1
 8011 1ae0 4212     		.2byte	0x1242
 8012 1ae2 25010000 		.4byte	0x125
 8013 1ae6 C4150000 		.4byte	.LLST133
 8014 1aea 18       		.uleb128 0x18
 8015 1aeb 18000000 		.4byte	.LVL412
 8016 1aef 991E0000 		.4byte	0x1e99
 8017 1af3 1D       		.uleb128 0x1d
 8018 1af4 8A000000 		.4byte	.LVL428
 8019 1af8 761E0000 		.4byte	0x1e76
 8020 1afc 071B0000 		.4byte	0x1b07
 8021 1b00 1A       		.uleb128 0x1a
 8022 1b01 01       		.uleb128 0x1
 8023 1b02 50       		.byte	0x50
 8024 1b03 02       		.uleb128 0x2
 8025 1b04 76       		.byte	0x76
 8026 1b05 00       		.sleb128 0
 8027 1b06 00       		.byte	0
 8028 1b07 1D       		.uleb128 0x1d
 8029 1b08 AA000000 		.4byte	.LVL429
 8030 1b0c 541E0000 		.4byte	0x1e54
 8031 1b10 1B1B0000 		.4byte	0x1b1b
 8032 1b14 1A       		.uleb128 0x1a
 8033 1b15 01       		.uleb128 0x1
 8034 1b16 51       		.byte	0x51
 8035 1b17 02       		.uleb128 0x2
 8036 1b18 76       		.byte	0x76
 8037 1b19 00       		.sleb128 0
 8038 1b1a 00       		.byte	0
 8039 1b1b 1D       		.uleb128 0x1d
 8040 1b1c B8000000 		.4byte	.LVL432
 8041 1b20 541E0000 		.4byte	0x1e54
 8042 1b24 381B0000 		.4byte	0x1b38
 8043 1b28 1A       		.uleb128 0x1a
 8044 1b29 01       		.uleb128 0x1
 8045 1b2a 50       		.byte	0x50
 8046 1b2b 05       		.uleb128 0x5
 8047 1b2c 03       		.byte	0x3
 8048 1b2d 14000000 		.4byte	.LANCHOR0+20
 8049 1b31 1A       		.uleb128 0x1a
 8050 1b32 01       		.uleb128 0x1
 8051 1b33 51       		.byte	0x51
 8052 1b34 02       		.uleb128 0x2
 8053 1b35 74       		.byte	0x74
 8054 1b36 18       		.sleb128 24
 8055 1b37 00       		.byte	0
 8056 1b38 19       		.uleb128 0x19
 8057 1b39 DE000000 		.4byte	.LVL433
 8058 1b3d A41E0000 		.4byte	0x1ea4
 8059 1b41 1A       		.uleb128 0x1a
 8060 1b42 01       		.uleb128 0x1
 8061 1b43 50       		.byte	0x50
 8062 1b44 03       		.uleb128 0x3
 8063 1b45 91       		.byte	0x91
 8064 1b46 64       		.sleb128 -28
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 243


 8065 1b47 06       		.byte	0x6
 8066 1b48 00       		.byte	0
 8067 1b49 00       		.byte	0
 8068 1b4a 06       		.uleb128 0x6
 8069 1b4b 04       		.byte	0x4
 8070 1b4c 1A010000 		.4byte	0x11a
 8071 1b50 22       		.uleb128 0x22
 8072 1b51 2D0A0000 		.4byte	.LASF188
 8073 1b55 01       		.byte	0x1
 8074 1b56 B912     		.2byte	0x12b9
 8075 1b58 00000000 		.4byte	.LFB83
 8076 1b5c A0000000 		.4byte	.LFE83-.LFB83
 8077 1b60 01       		.uleb128 0x1
 8078 1b61 9C       		.byte	0x9c
 8079 1b62 151C0000 		.4byte	0x1c15
 8080 1b66 15       		.uleb128 0x15
 8081 1b67 26090000 		.4byte	.LASF181
 8082 1b6b 01       		.byte	0x1
 8083 1b6c B912     		.2byte	0x12b9
 8084 1b6e 2E020000 		.4byte	0x22e
 8085 1b72 FA150000 		.4byte	.LLST134
 8086 1b76 15       		.uleb128 0x15
 8087 1b77 E8000000 		.4byte	.LASF187
 8088 1b7b 01       		.byte	0x1
 8089 1b7c B912     		.2byte	0x12b9
 8090 1b7e 4A1B0000 		.4byte	0x1b4a
 8091 1b82 26160000 		.4byte	.LLST135
 8092 1b86 16       		.uleb128 0x16
 8093 1b87 2D0E0000 		.4byte	.LASF71
 8094 1b8b 01       		.byte	0x1
 8095 1b8c BB12     		.2byte	0x12bb
 8096 1b8e 88040000 		.4byte	0x488
 8097 1b92 52160000 		.4byte	.LLST136
 8098 1b96 16       		.uleb128 0x16
 8099 1b97 A2010000 		.4byte	.LASF185
 8100 1b9b 01       		.byte	0x1
 8101 1b9c BC12     		.2byte	0x12bc
 8102 1b9e BF000000 		.4byte	0xbf
 8103 1ba2 7E160000 		.4byte	.LLST137
 8104 1ba6 16       		.uleb128 0x16
 8105 1ba7 7C020000 		.4byte	.LASF112
 8106 1bab 01       		.byte	0x1
 8107 1bac BD12     		.2byte	0x12bd
 8108 1bae 25010000 		.4byte	0x125
 8109 1bb2 9C160000 		.4byte	.LLST138
 8110 1bb6 18       		.uleb128 0x18
 8111 1bb7 12000000 		.4byte	.LVL439
 8112 1bbb 991E0000 		.4byte	0x1e99
 8113 1bbf 1D       		.uleb128 0x1d
 8114 1bc0 40000000 		.4byte	.LVL443
 8115 1bc4 761E0000 		.4byte	0x1e76
 8116 1bc8 D31B0000 		.4byte	0x1bd3
 8117 1bcc 1A       		.uleb128 0x1a
 8118 1bcd 01       		.uleb128 0x1
 8119 1bce 50       		.byte	0x50
 8120 1bcf 02       		.uleb128 0x2
 8121 1bd0 75       		.byte	0x75
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 244


 8122 1bd1 00       		.sleb128 0
 8123 1bd2 00       		.byte	0
 8124 1bd3 1D       		.uleb128 0x1d
 8125 1bd4 60000000 		.4byte	.LVL444
 8126 1bd8 541E0000 		.4byte	0x1e54
 8127 1bdc E71B0000 		.4byte	0x1be7
 8128 1be0 1A       		.uleb128 0x1a
 8129 1be1 01       		.uleb128 0x1
 8130 1be2 51       		.byte	0x51
 8131 1be3 02       		.uleb128 0x2
 8132 1be4 75       		.byte	0x75
 8133 1be5 00       		.sleb128 0
 8134 1be6 00       		.byte	0
 8135 1be7 1D       		.uleb128 0x1d
 8136 1be8 6E000000 		.4byte	.LVL447
 8137 1bec 541E0000 		.4byte	0x1e54
 8138 1bf0 041C0000 		.4byte	0x1c04
 8139 1bf4 1A       		.uleb128 0x1a
 8140 1bf5 01       		.uleb128 0x1
 8141 1bf6 50       		.byte	0x50
 8142 1bf7 05       		.uleb128 0x5
 8143 1bf8 03       		.byte	0x3
 8144 1bf9 14000000 		.4byte	.LANCHOR0+20
 8145 1bfd 1A       		.uleb128 0x1a
 8146 1bfe 01       		.uleb128 0x1
 8147 1bff 51       		.byte	0x51
 8148 1c00 02       		.uleb128 0x2
 8149 1c01 74       		.byte	0x74
 8150 1c02 18       		.sleb128 24
 8151 1c03 00       		.byte	0
 8152 1c04 19       		.uleb128 0x19
 8153 1c05 90000000 		.4byte	.LVL448
 8154 1c09 A41E0000 		.4byte	0x1ea4
 8155 1c0d 1A       		.uleb128 0x1a
 8156 1c0e 01       		.uleb128 0x1
 8157 1c0f 50       		.byte	0x50
 8158 1c10 02       		.uleb128 0x2
 8159 1c11 76       		.byte	0x76
 8160 1c12 00       		.sleb128 0
 8161 1c13 00       		.byte	0
 8162 1c14 00       		.byte	0
 8163 1c15 20       		.uleb128 0x20
 8164 1c16 590C0000 		.4byte	.LASF189
 8165 1c1a 01       		.byte	0x1
 8166 1c1b 1213     		.2byte	0x1312
 8167 1c1d 1A010000 		.4byte	0x11a
 8168 1c21 00000000 		.4byte	.LFB84
 8169 1c25 30000000 		.4byte	.LFE84-.LFB84
 8170 1c29 01       		.uleb128 0x1
 8171 1c2a 9C       		.byte	0x9c
 8172 1c2b 721C0000 		.4byte	0x1c72
 8173 1c2f 15       		.uleb128 0x15
 8174 1c30 34090000 		.4byte	.LASF74
 8175 1c34 01       		.byte	0x1
 8176 1c35 1213     		.2byte	0x1312
 8177 1c37 2E020000 		.4byte	0x22e
 8178 1c3b D0160000 		.4byte	.LLST139
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 245


 8179 1c3f 16       		.uleb128 0x16
 8180 1c40 2D0E0000 		.4byte	.LASF71
 8181 1c44 01       		.byte	0x1
 8182 1c45 1413     		.2byte	0x1314
 8183 1c47 88040000 		.4byte	0x488
 8184 1c4b E3160000 		.4byte	.LLST140
 8185 1c4f 16       		.uleb128 0x16
 8186 1c50 340B0000 		.4byte	.LASF70
 8187 1c54 01       		.byte	0x1
 8188 1c55 1513     		.2byte	0x1315
 8189 1c57 1A010000 		.4byte	0x11a
 8190 1c5b 01170000 		.4byte	.LLST141
 8191 1c5f 18       		.uleb128 0x18
 8192 1c60 0E000000 		.4byte	.LVL454
 8193 1c64 491E0000 		.4byte	0x1e49
 8194 1c68 18       		.uleb128 0x18
 8195 1c69 26000000 		.4byte	.LVL459
 8196 1c6d 601E0000 		.4byte	0x1e60
 8197 1c71 00       		.byte	0
 8198 1c72 0B       		.uleb128 0xb
 8199 1c73 23020000 		.4byte	0x223
 8200 1c77 821C0000 		.4byte	0x1c82
 8201 1c7b 0C       		.uleb128 0xc
 8202 1c7c 9E000000 		.4byte	0x9e
 8203 1c80 04       		.byte	0x4
 8204 1c81 00       		.byte	0
 8205 1c82 24       		.uleb128 0x24
 8206 1c83 90010000 		.4byte	.LASF190
 8207 1c87 01       		.byte	0x1
 8208 1c88 5F01     		.2byte	0x15f
 8209 1c8a 721C0000 		.4byte	0x1c72
 8210 1c8e 05       		.uleb128 0x5
 8211 1c8f 03       		.byte	0x3
 8212 1c90 30000000 		.4byte	pxReadyTasksLists
 8213 1c94 24       		.uleb128 0x24
 8214 1c95 F4010000 		.4byte	.LASF191
 8215 1c99 01       		.byte	0x1
 8216 1c9a 6001     		.2byte	0x160
 8217 1c9c 23020000 		.4byte	0x223
 8218 1ca0 05       		.uleb128 0x5
 8219 1ca1 03       		.byte	0x3
 8220 1ca2 94000000 		.4byte	xDelayedTaskList1
 8221 1ca6 24       		.uleb128 0x24
 8222 1ca7 06020000 		.4byte	.LASF192
 8223 1cab 01       		.byte	0x1
 8224 1cac 6101     		.2byte	0x161
 8225 1cae 23020000 		.4byte	0x223
 8226 1cb2 05       		.uleb128 0x5
 8227 1cb3 03       		.byte	0x3
 8228 1cb4 A8000000 		.4byte	xDelayedTaskList2
 8229 1cb8 24       		.uleb128 0x24
 8230 1cb9 440A0000 		.4byte	.LASF193
 8231 1cbd 01       		.byte	0x1
 8232 1cbe 6201     		.2byte	0x162
 8233 1cc0 CA1C0000 		.4byte	0x1cca
 8234 1cc4 05       		.uleb128 0x5
 8235 1cc5 03       		.byte	0x3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 246


 8236 1cc6 28000000 		.4byte	pxDelayedTaskList
 8237 1cca 08       		.uleb128 0x8
 8238 1ccb 250F0000 		.4byte	0xf25
 8239 1ccf 24       		.uleb128 0x24
 8240 1cd0 B5050000 		.4byte	.LASF194
 8241 1cd4 01       		.byte	0x1
 8242 1cd5 6301     		.2byte	0x163
 8243 1cd7 CA1C0000 		.4byte	0x1cca
 8244 1cdb 05       		.uleb128 0x5
 8245 1cdc 03       		.byte	0x3
 8246 1cdd D0000000 		.4byte	pxOverflowDelayedTaskList
 8247 1ce1 24       		.uleb128 0x24
 8248 1ce2 8C030000 		.4byte	.LASF195
 8249 1ce6 01       		.byte	0x1
 8250 1ce7 6401     		.2byte	0x164
 8251 1ce9 23020000 		.4byte	0x223
 8252 1ced 05       		.uleb128 0x5
 8253 1cee 03       		.byte	0x3
 8254 1cef 14000000 		.4byte	xPendingReadyList
 8255 1cf3 24       		.uleb128 0x24
 8256 1cf4 A9030000 		.4byte	.LASF196
 8257 1cf8 01       		.byte	0x1
 8258 1cf9 6801     		.2byte	0x168
 8259 1cfb 23020000 		.4byte	0x223
 8260 1cff 05       		.uleb128 0x5
 8261 1d00 03       		.byte	0x3
 8262 1d01 BC000000 		.4byte	xTasksWaitingTermination
 8263 1d05 24       		.uleb128 0x24
 8264 1d06 68010000 		.4byte	.LASF197
 8265 1d0a 01       		.byte	0x1
 8266 1d0b 6901     		.2byte	0x169
 8267 1d0d 18020000 		.4byte	0x218
 8268 1d11 05       		.uleb128 0x5
 8269 1d12 03       		.byte	0x3
 8270 1d13 E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8271 1d17 24       		.uleb128 0x24
 8272 1d18 90050000 		.4byte	.LASF198
 8273 1d1c 01       		.byte	0x1
 8274 1d1d 6F01     		.2byte	0x16f
 8275 1d1f 23020000 		.4byte	0x223
 8276 1d23 05       		.uleb128 0x5
 8277 1d24 03       		.byte	0x3
 8278 1d25 00000000 		.4byte	xSuspendedTaskList
 8279 1d29 24       		.uleb128 0x24
 8280 1d2a B50D0000 		.4byte	.LASF199
 8281 1d2e 01       		.byte	0x1
 8282 1d2f 7401     		.2byte	0x174
 8283 1d31 18020000 		.4byte	0x218
 8284 1d35 05       		.uleb128 0x5
 8285 1d36 03       		.byte	0x3
 8286 1d37 D4000000 		.4byte	uxCurrentNumberOfTasks
 8287 1d3b 24       		.uleb128 0x24
 8288 1d3c 8F070000 		.4byte	.LASF200
 8289 1d40 01       		.byte	0x1
 8290 1d41 7501     		.2byte	0x175
 8291 1d43 4D1D0000 		.4byte	0x1d4d
 8292 1d47 05       		.uleb128 0x5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 247


 8293 1d48 03       		.byte	0x3
 8294 1d49 EC000000 		.4byte	xTickCount
 8295 1d4d 08       		.uleb128 0x8
 8296 1d4e 30010000 		.4byte	0x130
 8297 1d52 24       		.uleb128 0x24
 8298 1d53 0C010000 		.4byte	.LASF201
 8299 1d57 01       		.byte	0x1
 8300 1d58 7601     		.2byte	0x176
 8301 1d5a 18020000 		.4byte	0x218
 8302 1d5e 05       		.uleb128 0x5
 8303 1d5f 03       		.byte	0x3
 8304 1d60 E4000000 		.4byte	uxTopReadyPriority
 8305 1d64 24       		.uleb128 0x24
 8306 1d65 38010000 		.4byte	.LASF202
 8307 1d69 01       		.byte	0x1
 8308 1d6a 7701     		.2byte	0x177
 8309 1d6c 761D0000 		.4byte	0x1d76
 8310 1d70 05       		.uleb128 0x5
 8311 1d71 03       		.byte	0x3
 8312 1d72 DC000000 		.4byte	xSchedulerRunning
 8313 1d76 08       		.uleb128 0x8
 8314 1d77 1A010000 		.4byte	0x11a
 8315 1d7b 24       		.uleb128 0x24
 8316 1d7c 560B0000 		.4byte	.LASF203
 8317 1d80 01       		.byte	0x1
 8318 1d81 7801     		.2byte	0x178
 8319 1d83 18020000 		.4byte	0x218
 8320 1d87 05       		.uleb128 0x5
 8321 1d88 03       		.byte	0x3
 8322 1d89 FC000000 		.4byte	uxPendedTicks
 8323 1d8d 24       		.uleb128 0x24
 8324 1d8e 0D0F0000 		.4byte	.LASF204
 8325 1d92 01       		.byte	0x1
 8326 1d93 7901     		.2byte	0x179
 8327 1d95 761D0000 		.4byte	0x1d76
 8328 1d99 05       		.uleb128 0x5
 8329 1d9a 03       		.byte	0x3
 8330 1d9b 00010000 		.4byte	xYieldPending
 8331 1d9f 24       		.uleb128 0x24
 8332 1da0 96090000 		.4byte	.LASF205
 8333 1da4 01       		.byte	0x1
 8334 1da5 7A01     		.2byte	0x17a
 8335 1da7 761D0000 		.4byte	0x1d76
 8336 1dab 05       		.uleb128 0x5
 8337 1dac 03       		.byte	0x3
 8338 1dad F8000000 		.4byte	xNumOfOverflows
 8339 1db1 24       		.uleb128 0x24
 8340 1db2 A0080000 		.4byte	.LASF206
 8341 1db6 01       		.byte	0x1
 8342 1db7 7B01     		.2byte	0x17b
 8343 1db9 25010000 		.4byte	0x125
 8344 1dbd 05       		.uleb128 0x5
 8345 1dbe 03       		.byte	0x3
 8346 1dbf E0000000 		.4byte	uxTaskNumber
 8347 1dc3 24       		.uleb128 0x24
 8348 1dc4 64070000 		.4byte	.LASF207
 8349 1dc8 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 248


 8350 1dc9 7C01     		.2byte	0x17c
 8351 1dcb 4D1D0000 		.4byte	0x1d4d
 8352 1dcf 05       		.uleb128 0x5
 8353 1dd0 03       		.byte	0x3
 8354 1dd1 2C000000 		.4byte	xNextTaskUnblockTime
 8355 1dd5 24       		.uleb128 0x24
 8356 1dd6 B2090000 		.4byte	.LASF208
 8357 1dda 01       		.byte	0x1
 8358 1ddb 7D01     		.2byte	0x17d
 8359 1ddd 2E020000 		.4byte	0x22e
 8360 1de1 05       		.uleb128 0x5
 8361 1de2 03       		.byte	0x3
 8362 1de3 F4000000 		.4byte	xIdleTaskHandle
 8363 1de7 24       		.uleb128 0x24
 8364 1de8 3A0E0000 		.4byte	.LASF209
 8365 1dec 01       		.byte	0x1
 8366 1ded 8701     		.2byte	0x187
 8367 1def 18020000 		.4byte	0x218
 8368 1df3 05       		.uleb128 0x5
 8369 1df4 03       		.byte	0x3
 8370 1df5 F0000000 		.4byte	uxSchedulerSuspended
 8371 1df9 29       		.uleb128 0x29
 8372 1dfa A80D0000 		.4byte	.LASF229
 8373 1dfe 01       		.byte	0x1
 8374 1dff 5C01     		.2byte	0x15c
 8375 1e01 0B1E0000 		.4byte	0x1e0b
 8376 1e05 05       		.uleb128 0x5
 8377 1e06 03       		.byte	0x3
 8378 1e07 00000000 		.4byte	pxCurrentTCB
 8379 1e0b 08       		.uleb128 0x8
 8380 1e0c 88040000 		.4byte	0x488
 8381 1e10 2A       		.uleb128 0x2a
 8382 1e11 F10A0000 		.4byte	.LASF210
 8383 1e15 F10A0000 		.4byte	.LASF210
 8384 1e19 09       		.byte	0x9
 8385 1e1a 82       		.byte	0x82
 8386 1e1b 2A       		.uleb128 0x2a
 8387 1e1c 39080000 		.4byte	.LASF211
 8388 1e20 39080000 		.4byte	.LASF211
 8389 1e24 0A       		.byte	0xa
 8390 1e25 19       		.byte	0x19
 8391 1e26 2B       		.uleb128 0x2b
 8392 1e27 E9090000 		.4byte	.LASF212
 8393 1e2b E9090000 		.4byte	.LASF212
 8394 1e2f 07       		.byte	0x7
 8395 1e30 6301     		.2byte	0x163
 8396 1e32 2A       		.uleb128 0x2a
 8397 1e33 79070000 		.4byte	.LASF213
 8398 1e37 79070000 		.4byte	.LASF213
 8399 1e3b 09       		.byte	0x9
 8400 1e3c 66       		.byte	0x66
 8401 1e3d 2B       		.uleb128 0x2b
 8402 1e3e 6F0C0000 		.4byte	.LASF214
 8403 1e42 6F0C0000 		.4byte	.LASF214
 8404 1e46 07       		.byte	0x7
 8405 1e47 5801     		.2byte	0x158
 8406 1e49 2A       		.uleb128 0x2a
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 249


 8407 1e4a 27020000 		.4byte	.LASF215
 8408 1e4e 27020000 		.4byte	.LASF215
 8409 1e52 06       		.byte	0x6
 8410 1e53 5A       		.byte	0x5a
 8411 1e54 2B       		.uleb128 0x2b
 8412 1e55 81050000 		.4byte	.LASF216
 8413 1e59 81050000 		.4byte	.LASF216
 8414 1e5d 07       		.byte	0x7
 8415 1e5e 8501     		.2byte	0x185
 8416 1e60 2A       		.uleb128 0x2a
 8417 1e61 1B000000 		.4byte	.LASF217
 8418 1e65 1B000000 		.4byte	.LASF217
 8419 1e69 06       		.byte	0x6
 8420 1e6a 5B       		.byte	0x5b
 8421 1e6b 2A       		.uleb128 0x2a
 8422 1e6c 58000000 		.4byte	.LASF218
 8423 1e70 58000000 		.4byte	.LASF218
 8424 1e74 06       		.byte	0x6
 8425 1e75 50       		.byte	0x50
 8426 1e76 2B       		.uleb128 0x2b
 8427 1e77 AA020000 		.4byte	.LASF219
 8428 1e7b AA020000 		.4byte	.LASF219
 8429 1e7f 07       		.byte	0x7
 8430 1e80 9401     		.2byte	0x194
 8431 1e82 2B       		.uleb128 0x2b
 8432 1e83 8D0C0000 		.4byte	.LASF220
 8433 1e87 8D0C0000 		.4byte	.LASF220
 8434 1e8b 07       		.byte	0x7
 8435 1e8c 7001     		.2byte	0x170
 8436 1e8e 2A       		.uleb128 0x2a
 8437 1e8f 0D040000 		.4byte	.LASF221
 8438 1e93 0D040000 		.4byte	.LASF221
 8439 1e97 09       		.byte	0x9
 8440 1e98 81       		.byte	0x81
 8441 1e99 2A       		.uleb128 0x2a
 8442 1e9a ED080000 		.4byte	.LASF222
 8443 1e9e ED080000 		.4byte	.LASF222
 8444 1ea2 06       		.byte	0x6
 8445 1ea3 5C       		.byte	0x5c
 8446 1ea4 2A       		.uleb128 0x2a
 8447 1ea5 200D0000 		.4byte	.LASF223
 8448 1ea9 200D0000 		.4byte	.LASF223
 8449 1ead 06       		.byte	0x6
 8450 1eae 5D       		.byte	0x5d
 8451 1eaf 2A       		.uleb128 0x2a
 8452 1eb0 2D000000 		.4byte	.LASF224
 8453 1eb4 2D000000 		.4byte	.LASF224
 8454 1eb8 09       		.byte	0x9
 8455 1eb9 8B       		.byte	0x8b
 8456 1eba 2A       		.uleb128 0x2a
 8457 1ebb DF0A0000 		.4byte	.LASF225
 8458 1ebf DF0A0000 		.4byte	.LASF225
 8459 1ec3 09       		.byte	0x9
 8460 1ec4 92       		.byte	0x92
 8461 1ec5 00       		.byte	0
 8462              		.section	.debug_abbrev,"",%progbits
 8463              	.Ldebug_abbrev0:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 250


 8464 0000 01       		.uleb128 0x1
 8465 0001 11       		.uleb128 0x11
 8466 0002 01       		.byte	0x1
 8467 0003 25       		.uleb128 0x25
 8468 0004 0E       		.uleb128 0xe
 8469 0005 13       		.uleb128 0x13
 8470 0006 0B       		.uleb128 0xb
 8471 0007 03       		.uleb128 0x3
 8472 0008 0E       		.uleb128 0xe
 8473 0009 1B       		.uleb128 0x1b
 8474 000a 0E       		.uleb128 0xe
 8475 000b 55       		.uleb128 0x55
 8476 000c 17       		.uleb128 0x17
 8477 000d 11       		.uleb128 0x11
 8478 000e 01       		.uleb128 0x1
 8479 000f 10       		.uleb128 0x10
 8480 0010 17       		.uleb128 0x17
 8481 0011 00       		.byte	0
 8482 0012 00       		.byte	0
 8483 0013 02       		.uleb128 0x2
 8484 0014 16       		.uleb128 0x16
 8485 0015 00       		.byte	0
 8486 0016 03       		.uleb128 0x3
 8487 0017 0E       		.uleb128 0xe
 8488 0018 3A       		.uleb128 0x3a
 8489 0019 0B       		.uleb128 0xb
 8490 001a 3B       		.uleb128 0x3b
 8491 001b 0B       		.uleb128 0xb
 8492 001c 49       		.uleb128 0x49
 8493 001d 13       		.uleb128 0x13
 8494 001e 00       		.byte	0
 8495 001f 00       		.byte	0
 8496 0020 03       		.uleb128 0x3
 8497 0021 24       		.uleb128 0x24
 8498 0022 00       		.byte	0
 8499 0023 0B       		.uleb128 0xb
 8500 0024 0B       		.uleb128 0xb
 8501 0025 3E       		.uleb128 0x3e
 8502 0026 0B       		.uleb128 0xb
 8503 0027 03       		.uleb128 0x3
 8504 0028 0E       		.uleb128 0xe
 8505 0029 00       		.byte	0
 8506 002a 00       		.byte	0
 8507 002b 04       		.uleb128 0x4
 8508 002c 24       		.uleb128 0x24
 8509 002d 00       		.byte	0
 8510 002e 0B       		.uleb128 0xb
 8511 002f 0B       		.uleb128 0xb
 8512 0030 3E       		.uleb128 0x3e
 8513 0031 0B       		.uleb128 0xb
 8514 0032 03       		.uleb128 0x3
 8515 0033 08       		.uleb128 0x8
 8516 0034 00       		.byte	0
 8517 0035 00       		.byte	0
 8518 0036 05       		.uleb128 0x5
 8519 0037 0F       		.uleb128 0xf
 8520 0038 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 251


 8521 0039 0B       		.uleb128 0xb
 8522 003a 0B       		.uleb128 0xb
 8523 003b 00       		.byte	0
 8524 003c 00       		.byte	0
 8525 003d 06       		.uleb128 0x6
 8526 003e 0F       		.uleb128 0xf
 8527 003f 00       		.byte	0
 8528 0040 0B       		.uleb128 0xb
 8529 0041 0B       		.uleb128 0xb
 8530 0042 49       		.uleb128 0x49
 8531 0043 13       		.uleb128 0x13
 8532 0044 00       		.byte	0
 8533 0045 00       		.byte	0
 8534 0046 07       		.uleb128 0x7
 8535 0047 26       		.uleb128 0x26
 8536 0048 00       		.byte	0
 8537 0049 49       		.uleb128 0x49
 8538 004a 13       		.uleb128 0x13
 8539 004b 00       		.byte	0
 8540 004c 00       		.byte	0
 8541 004d 08       		.uleb128 0x8
 8542 004e 35       		.uleb128 0x35
 8543 004f 00       		.byte	0
 8544 0050 49       		.uleb128 0x49
 8545 0051 13       		.uleb128 0x13
 8546 0052 00       		.byte	0
 8547 0053 00       		.byte	0
 8548 0054 09       		.uleb128 0x9
 8549 0055 15       		.uleb128 0x15
 8550 0056 01       		.byte	0x1
 8551 0057 27       		.uleb128 0x27
 8552 0058 19       		.uleb128 0x19
 8553 0059 01       		.uleb128 0x1
 8554 005a 13       		.uleb128 0x13
 8555 005b 00       		.byte	0
 8556 005c 00       		.byte	0
 8557 005d 0A       		.uleb128 0xa
 8558 005e 05       		.uleb128 0x5
 8559 005f 00       		.byte	0
 8560 0060 49       		.uleb128 0x49
 8561 0061 13       		.uleb128 0x13
 8562 0062 00       		.byte	0
 8563 0063 00       		.byte	0
 8564 0064 0B       		.uleb128 0xb
 8565 0065 01       		.uleb128 0x1
 8566 0066 01       		.byte	0x1
 8567 0067 49       		.uleb128 0x49
 8568 0068 13       		.uleb128 0x13
 8569 0069 01       		.uleb128 0x1
 8570 006a 13       		.uleb128 0x13
 8571 006b 00       		.byte	0
 8572 006c 00       		.byte	0
 8573 006d 0C       		.uleb128 0xc
 8574 006e 21       		.uleb128 0x21
 8575 006f 00       		.byte	0
 8576 0070 49       		.uleb128 0x49
 8577 0071 13       		.uleb128 0x13
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 252


 8578 0072 2F       		.uleb128 0x2f
 8579 0073 0B       		.uleb128 0xb
 8580 0074 00       		.byte	0
 8581 0075 00       		.byte	0
 8582 0076 0D       		.uleb128 0xd
 8583 0077 13       		.uleb128 0x13
 8584 0078 01       		.byte	0x1
 8585 0079 03       		.uleb128 0x3
 8586 007a 0E       		.uleb128 0xe
 8587 007b 0B       		.uleb128 0xb
 8588 007c 0B       		.uleb128 0xb
 8589 007d 3A       		.uleb128 0x3a
 8590 007e 0B       		.uleb128 0xb
 8591 007f 3B       		.uleb128 0x3b
 8592 0080 0B       		.uleb128 0xb
 8593 0081 01       		.uleb128 0x1
 8594 0082 13       		.uleb128 0x13
 8595 0083 00       		.byte	0
 8596 0084 00       		.byte	0
 8597 0085 0E       		.uleb128 0xe
 8598 0086 0D       		.uleb128 0xd
 8599 0087 00       		.byte	0
 8600 0088 03       		.uleb128 0x3
 8601 0089 0E       		.uleb128 0xe
 8602 008a 3A       		.uleb128 0x3a
 8603 008b 0B       		.uleb128 0xb
 8604 008c 3B       		.uleb128 0x3b
 8605 008d 0B       		.uleb128 0xb
 8606 008e 49       		.uleb128 0x49
 8607 008f 13       		.uleb128 0x13
 8608 0090 38       		.uleb128 0x38
 8609 0091 0B       		.uleb128 0xb
 8610 0092 00       		.byte	0
 8611 0093 00       		.byte	0
 8612 0094 0F       		.uleb128 0xf
 8613 0095 04       		.uleb128 0x4
 8614 0096 01       		.byte	0x1
 8615 0097 0B       		.uleb128 0xb
 8616 0098 0B       		.uleb128 0xb
 8617 0099 49       		.uleb128 0x49
 8618 009a 13       		.uleb128 0x13
 8619 009b 3A       		.uleb128 0x3a
 8620 009c 0B       		.uleb128 0xb
 8621 009d 3B       		.uleb128 0x3b
 8622 009e 0B       		.uleb128 0xb
 8623 009f 01       		.uleb128 0x1
 8624 00a0 13       		.uleb128 0x13
 8625 00a1 00       		.byte	0
 8626 00a2 00       		.byte	0
 8627 00a3 10       		.uleb128 0x10
 8628 00a4 28       		.uleb128 0x28
 8629 00a5 00       		.byte	0
 8630 00a6 03       		.uleb128 0x3
 8631 00a7 0E       		.uleb128 0xe
 8632 00a8 1C       		.uleb128 0x1c
 8633 00a9 0B       		.uleb128 0xb
 8634 00aa 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 253


 8635 00ab 00       		.byte	0
 8636 00ac 11       		.uleb128 0x11
 8637 00ad 13       		.uleb128 0x13
 8638 00ae 01       		.byte	0x1
 8639 00af 03       		.uleb128 0x3
 8640 00b0 0E       		.uleb128 0xe
 8641 00b1 0B       		.uleb128 0xb
 8642 00b2 0B       		.uleb128 0xb
 8643 00b3 3A       		.uleb128 0x3a
 8644 00b4 0B       		.uleb128 0xb
 8645 00b5 3B       		.uleb128 0x3b
 8646 00b6 05       		.uleb128 0x5
 8647 00b7 01       		.uleb128 0x1
 8648 00b8 13       		.uleb128 0x13
 8649 00b9 00       		.byte	0
 8650 00ba 00       		.byte	0
 8651 00bb 12       		.uleb128 0x12
 8652 00bc 0D       		.uleb128 0xd
 8653 00bd 00       		.byte	0
 8654 00be 03       		.uleb128 0x3
 8655 00bf 0E       		.uleb128 0xe
 8656 00c0 3A       		.uleb128 0x3a
 8657 00c1 0B       		.uleb128 0xb
 8658 00c2 3B       		.uleb128 0x3b
 8659 00c3 05       		.uleb128 0x5
 8660 00c4 49       		.uleb128 0x49
 8661 00c5 13       		.uleb128 0x13
 8662 00c6 38       		.uleb128 0x38
 8663 00c7 0B       		.uleb128 0xb
 8664 00c8 00       		.byte	0
 8665 00c9 00       		.byte	0
 8666 00ca 13       		.uleb128 0x13
 8667 00cb 16       		.uleb128 0x16
 8668 00cc 00       		.byte	0
 8669 00cd 03       		.uleb128 0x3
 8670 00ce 0E       		.uleb128 0xe
 8671 00cf 3A       		.uleb128 0x3a
 8672 00d0 0B       		.uleb128 0xb
 8673 00d1 3B       		.uleb128 0x3b
 8674 00d2 05       		.uleb128 0x5
 8675 00d3 49       		.uleb128 0x49
 8676 00d4 13       		.uleb128 0x13
 8677 00d5 00       		.byte	0
 8678 00d6 00       		.byte	0
 8679 00d7 14       		.uleb128 0x14
 8680 00d8 2E       		.uleb128 0x2e
 8681 00d9 01       		.byte	0x1
 8682 00da 03       		.uleb128 0x3
 8683 00db 0E       		.uleb128 0xe
 8684 00dc 3A       		.uleb128 0x3a
 8685 00dd 0B       		.uleb128 0xb
 8686 00de 3B       		.uleb128 0x3b
 8687 00df 05       		.uleb128 0x5
 8688 00e0 27       		.uleb128 0x27
 8689 00e1 19       		.uleb128 0x19
 8690 00e2 49       		.uleb128 0x49
 8691 00e3 13       		.uleb128 0x13
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 254


 8692 00e4 11       		.uleb128 0x11
 8693 00e5 01       		.uleb128 0x1
 8694 00e6 12       		.uleb128 0x12
 8695 00e7 06       		.uleb128 0x6
 8696 00e8 40       		.uleb128 0x40
 8697 00e9 18       		.uleb128 0x18
 8698 00ea 9742     		.uleb128 0x2117
 8699 00ec 19       		.uleb128 0x19
 8700 00ed 01       		.uleb128 0x1
 8701 00ee 13       		.uleb128 0x13
 8702 00ef 00       		.byte	0
 8703 00f0 00       		.byte	0
 8704 00f1 15       		.uleb128 0x15
 8705 00f2 05       		.uleb128 0x5
 8706 00f3 00       		.byte	0
 8707 00f4 03       		.uleb128 0x3
 8708 00f5 0E       		.uleb128 0xe
 8709 00f6 3A       		.uleb128 0x3a
 8710 00f7 0B       		.uleb128 0xb
 8711 00f8 3B       		.uleb128 0x3b
 8712 00f9 05       		.uleb128 0x5
 8713 00fa 49       		.uleb128 0x49
 8714 00fb 13       		.uleb128 0x13
 8715 00fc 02       		.uleb128 0x2
 8716 00fd 17       		.uleb128 0x17
 8717 00fe 00       		.byte	0
 8718 00ff 00       		.byte	0
 8719 0100 16       		.uleb128 0x16
 8720 0101 34       		.uleb128 0x34
 8721 0102 00       		.byte	0
 8722 0103 03       		.uleb128 0x3
 8723 0104 0E       		.uleb128 0xe
 8724 0105 3A       		.uleb128 0x3a
 8725 0106 0B       		.uleb128 0xb
 8726 0107 3B       		.uleb128 0x3b
 8727 0108 05       		.uleb128 0x5
 8728 0109 49       		.uleb128 0x49
 8729 010a 13       		.uleb128 0x13
 8730 010b 02       		.uleb128 0x2
 8731 010c 17       		.uleb128 0x17
 8732 010d 00       		.byte	0
 8733 010e 00       		.byte	0
 8734 010f 17       		.uleb128 0x17
 8735 0110 2E       		.uleb128 0x2e
 8736 0111 01       		.byte	0x1
 8737 0112 03       		.uleb128 0x3
 8738 0113 0E       		.uleb128 0xe
 8739 0114 3A       		.uleb128 0x3a
 8740 0115 0B       		.uleb128 0xb
 8741 0116 3B       		.uleb128 0x3b
 8742 0117 05       		.uleb128 0x5
 8743 0118 27       		.uleb128 0x27
 8744 0119 19       		.uleb128 0x19
 8745 011a 11       		.uleb128 0x11
 8746 011b 01       		.uleb128 0x1
 8747 011c 12       		.uleb128 0x12
 8748 011d 06       		.uleb128 0x6
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 255


 8749 011e 40       		.uleb128 0x40
 8750 011f 18       		.uleb128 0x18
 8751 0120 9742     		.uleb128 0x2117
 8752 0122 19       		.uleb128 0x19
 8753 0123 01       		.uleb128 0x1
 8754 0124 13       		.uleb128 0x13
 8755 0125 00       		.byte	0
 8756 0126 00       		.byte	0
 8757 0127 18       		.uleb128 0x18
 8758 0128 898201   		.uleb128 0x4109
 8759 012b 00       		.byte	0
 8760 012c 11       		.uleb128 0x11
 8761 012d 01       		.uleb128 0x1
 8762 012e 31       		.uleb128 0x31
 8763 012f 13       		.uleb128 0x13
 8764 0130 00       		.byte	0
 8765 0131 00       		.byte	0
 8766 0132 19       		.uleb128 0x19
 8767 0133 898201   		.uleb128 0x4109
 8768 0136 01       		.byte	0x1
 8769 0137 11       		.uleb128 0x11
 8770 0138 01       		.uleb128 0x1
 8771 0139 31       		.uleb128 0x31
 8772 013a 13       		.uleb128 0x13
 8773 013b 00       		.byte	0
 8774 013c 00       		.byte	0
 8775 013d 1A       		.uleb128 0x1a
 8776 013e 8A8201   		.uleb128 0x410a
 8777 0141 00       		.byte	0
 8778 0142 02       		.uleb128 0x2
 8779 0143 18       		.uleb128 0x18
 8780 0144 9142     		.uleb128 0x2111
 8781 0146 18       		.uleb128 0x18
 8782 0147 00       		.byte	0
 8783 0148 00       		.byte	0
 8784 0149 1B       		.uleb128 0x1b
 8785 014a 05       		.uleb128 0x5
 8786 014b 00       		.byte	0
 8787 014c 03       		.uleb128 0x3
 8788 014d 0E       		.uleb128 0xe
 8789 014e 3A       		.uleb128 0x3a
 8790 014f 0B       		.uleb128 0xb
 8791 0150 3B       		.uleb128 0x3b
 8792 0151 05       		.uleb128 0x5
 8793 0152 49       		.uleb128 0x49
 8794 0153 13       		.uleb128 0x13
 8795 0154 02       		.uleb128 0x2
 8796 0155 18       		.uleb128 0x18
 8797 0156 00       		.byte	0
 8798 0157 00       		.byte	0
 8799 0158 1C       		.uleb128 0x1c
 8800 0159 34       		.uleb128 0x34
 8801 015a 00       		.byte	0
 8802 015b 03       		.uleb128 0x3
 8803 015c 08       		.uleb128 0x8
 8804 015d 3A       		.uleb128 0x3a
 8805 015e 0B       		.uleb128 0xb
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 256


 8806 015f 3B       		.uleb128 0x3b
 8807 0160 05       		.uleb128 0x5
 8808 0161 49       		.uleb128 0x49
 8809 0162 13       		.uleb128 0x13
 8810 0163 02       		.uleb128 0x2
 8811 0164 17       		.uleb128 0x17
 8812 0165 00       		.byte	0
 8813 0166 00       		.byte	0
 8814 0167 1D       		.uleb128 0x1d
 8815 0168 898201   		.uleb128 0x4109
 8816 016b 01       		.byte	0x1
 8817 016c 11       		.uleb128 0x11
 8818 016d 01       		.uleb128 0x1
 8819 016e 31       		.uleb128 0x31
 8820 016f 13       		.uleb128 0x13
 8821 0170 01       		.uleb128 0x1
 8822 0171 13       		.uleb128 0x13
 8823 0172 00       		.byte	0
 8824 0173 00       		.byte	0
 8825 0174 1E       		.uleb128 0x1e
 8826 0175 0B       		.uleb128 0xb
 8827 0176 01       		.byte	0x1
 8828 0177 11       		.uleb128 0x11
 8829 0178 01       		.uleb128 0x1
 8830 0179 12       		.uleb128 0x12
 8831 017a 06       		.uleb128 0x6
 8832 017b 00       		.byte	0
 8833 017c 00       		.byte	0
 8834 017d 1F       		.uleb128 0x1f
 8835 017e 2E       		.uleb128 0x2e
 8836 017f 01       		.byte	0x1
 8837 0180 03       		.uleb128 0x3
 8838 0181 0E       		.uleb128 0xe
 8839 0182 3A       		.uleb128 0x3a
 8840 0183 0B       		.uleb128 0xb
 8841 0184 3B       		.uleb128 0x3b
 8842 0185 05       		.uleb128 0x5
 8843 0186 27       		.uleb128 0x27
 8844 0187 19       		.uleb128 0x19
 8845 0188 8701     		.uleb128 0x87
 8846 018a 19       		.uleb128 0x19
 8847 018b 11       		.uleb128 0x11
 8848 018c 01       		.uleb128 0x1
 8849 018d 12       		.uleb128 0x12
 8850 018e 06       		.uleb128 0x6
 8851 018f 40       		.uleb128 0x40
 8852 0190 18       		.uleb128 0x18
 8853 0191 9742     		.uleb128 0x2117
 8854 0193 19       		.uleb128 0x19
 8855 0194 01       		.uleb128 0x1
 8856 0195 13       		.uleb128 0x13
 8857 0196 00       		.byte	0
 8858 0197 00       		.byte	0
 8859 0198 20       		.uleb128 0x20
 8860 0199 2E       		.uleb128 0x2e
 8861 019a 01       		.byte	0x1
 8862 019b 3F       		.uleb128 0x3f
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 257


 8863 019c 19       		.uleb128 0x19
 8864 019d 03       		.uleb128 0x3
 8865 019e 0E       		.uleb128 0xe
 8866 019f 3A       		.uleb128 0x3a
 8867 01a0 0B       		.uleb128 0xb
 8868 01a1 3B       		.uleb128 0x3b
 8869 01a2 05       		.uleb128 0x5
 8870 01a3 27       		.uleb128 0x27
 8871 01a4 19       		.uleb128 0x19
 8872 01a5 49       		.uleb128 0x49
 8873 01a6 13       		.uleb128 0x13
 8874 01a7 11       		.uleb128 0x11
 8875 01a8 01       		.uleb128 0x1
 8876 01a9 12       		.uleb128 0x12
 8877 01aa 06       		.uleb128 0x6
 8878 01ab 40       		.uleb128 0x40
 8879 01ac 18       		.uleb128 0x18
 8880 01ad 9742     		.uleb128 0x2117
 8881 01af 19       		.uleb128 0x19
 8882 01b0 01       		.uleb128 0x1
 8883 01b1 13       		.uleb128 0x13
 8884 01b2 00       		.byte	0
 8885 01b3 00       		.byte	0
 8886 01b4 21       		.uleb128 0x21
 8887 01b5 0B       		.uleb128 0xb
 8888 01b6 01       		.byte	0x1
 8889 01b7 11       		.uleb128 0x11
 8890 01b8 01       		.uleb128 0x1
 8891 01b9 12       		.uleb128 0x12
 8892 01ba 06       		.uleb128 0x6
 8893 01bb 01       		.uleb128 0x1
 8894 01bc 13       		.uleb128 0x13
 8895 01bd 00       		.byte	0
 8896 01be 00       		.byte	0
 8897 01bf 22       		.uleb128 0x22
 8898 01c0 2E       		.uleb128 0x2e
 8899 01c1 01       		.byte	0x1
 8900 01c2 3F       		.uleb128 0x3f
 8901 01c3 19       		.uleb128 0x19
 8902 01c4 03       		.uleb128 0x3
 8903 01c5 0E       		.uleb128 0xe
 8904 01c6 3A       		.uleb128 0x3a
 8905 01c7 0B       		.uleb128 0xb
 8906 01c8 3B       		.uleb128 0x3b
 8907 01c9 05       		.uleb128 0x5
 8908 01ca 27       		.uleb128 0x27
 8909 01cb 19       		.uleb128 0x19
 8910 01cc 11       		.uleb128 0x11
 8911 01cd 01       		.uleb128 0x1
 8912 01ce 12       		.uleb128 0x12
 8913 01cf 06       		.uleb128 0x6
 8914 01d0 40       		.uleb128 0x40
 8915 01d1 18       		.uleb128 0x18
 8916 01d2 9742     		.uleb128 0x2117
 8917 01d4 19       		.uleb128 0x19
 8918 01d5 01       		.uleb128 0x1
 8919 01d6 13       		.uleb128 0x13
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 258


 8920 01d7 00       		.byte	0
 8921 01d8 00       		.byte	0
 8922 01d9 23       		.uleb128 0x23
 8923 01da 2E       		.uleb128 0x2e
 8924 01db 00       		.byte	0
 8925 01dc 3F       		.uleb128 0x3f
 8926 01dd 19       		.uleb128 0x19
 8927 01de 03       		.uleb128 0x3
 8928 01df 0E       		.uleb128 0xe
 8929 01e0 3A       		.uleb128 0x3a
 8930 01e1 0B       		.uleb128 0xb
 8931 01e2 3B       		.uleb128 0x3b
 8932 01e3 05       		.uleb128 0x5
 8933 01e4 27       		.uleb128 0x27
 8934 01e5 19       		.uleb128 0x19
 8935 01e6 11       		.uleb128 0x11
 8936 01e7 01       		.uleb128 0x1
 8937 01e8 12       		.uleb128 0x12
 8938 01e9 06       		.uleb128 0x6
 8939 01ea 40       		.uleb128 0x40
 8940 01eb 18       		.uleb128 0x18
 8941 01ec 9742     		.uleb128 0x2117
 8942 01ee 19       		.uleb128 0x19
 8943 01ef 00       		.byte	0
 8944 01f0 00       		.byte	0
 8945 01f1 24       		.uleb128 0x24
 8946 01f2 34       		.uleb128 0x34
 8947 01f3 00       		.byte	0
 8948 01f4 03       		.uleb128 0x3
 8949 01f5 0E       		.uleb128 0xe
 8950 01f6 3A       		.uleb128 0x3a
 8951 01f7 0B       		.uleb128 0xb
 8952 01f8 3B       		.uleb128 0x3b
 8953 01f9 05       		.uleb128 0x5
 8954 01fa 49       		.uleb128 0x49
 8955 01fb 13       		.uleb128 0x13
 8956 01fc 02       		.uleb128 0x2
 8957 01fd 18       		.uleb128 0x18
 8958 01fe 00       		.byte	0
 8959 01ff 00       		.byte	0
 8960 0200 25       		.uleb128 0x25
 8961 0201 34       		.uleb128 0x34
 8962 0202 00       		.byte	0
 8963 0203 03       		.uleb128 0x3
 8964 0204 0E       		.uleb128 0xe
 8965 0205 3A       		.uleb128 0x3a
 8966 0206 0B       		.uleb128 0xb
 8967 0207 3B       		.uleb128 0x3b
 8968 0208 05       		.uleb128 0x5
 8969 0209 49       		.uleb128 0x49
 8970 020a 13       		.uleb128 0x13
 8971 020b 1C       		.uleb128 0x1c
 8972 020c 0B       		.uleb128 0xb
 8973 020d 00       		.byte	0
 8974 020e 00       		.byte	0
 8975 020f 26       		.uleb128 0x26
 8976 0210 2E       		.uleb128 0x2e
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 259


 8977 0211 00       		.byte	0
 8978 0212 3F       		.uleb128 0x3f
 8979 0213 19       		.uleb128 0x19
 8980 0214 03       		.uleb128 0x3
 8981 0215 0E       		.uleb128 0xe
 8982 0216 3A       		.uleb128 0x3a
 8983 0217 0B       		.uleb128 0xb
 8984 0218 3B       		.uleb128 0x3b
 8985 0219 05       		.uleb128 0x5
 8986 021a 27       		.uleb128 0x27
 8987 021b 19       		.uleb128 0x19
 8988 021c 49       		.uleb128 0x49
 8989 021d 13       		.uleb128 0x13
 8990 021e 11       		.uleb128 0x11
 8991 021f 01       		.uleb128 0x1
 8992 0220 12       		.uleb128 0x12
 8993 0221 06       		.uleb128 0x6
 8994 0222 40       		.uleb128 0x40
 8995 0223 18       		.uleb128 0x18
 8996 0224 9742     		.uleb128 0x2117
 8997 0226 19       		.uleb128 0x19
 8998 0227 00       		.byte	0
 8999 0228 00       		.byte	0
 9000 0229 27       		.uleb128 0x27
 9001 022a 0B       		.uleb128 0xb
 9002 022b 01       		.byte	0x1
 9003 022c 55       		.uleb128 0x55
 9004 022d 17       		.uleb128 0x17
 9005 022e 00       		.byte	0
 9006 022f 00       		.byte	0
 9007 0230 28       		.uleb128 0x28
 9008 0231 0B       		.uleb128 0xb
 9009 0232 01       		.byte	0x1
 9010 0233 55       		.uleb128 0x55
 9011 0234 17       		.uleb128 0x17
 9012 0235 01       		.uleb128 0x1
 9013 0236 13       		.uleb128 0x13
 9014 0237 00       		.byte	0
 9015 0238 00       		.byte	0
 9016 0239 29       		.uleb128 0x29
 9017 023a 34       		.uleb128 0x34
 9018 023b 00       		.byte	0
 9019 023c 03       		.uleb128 0x3
 9020 023d 0E       		.uleb128 0xe
 9021 023e 3A       		.uleb128 0x3a
 9022 023f 0B       		.uleb128 0xb
 9023 0240 3B       		.uleb128 0x3b
 9024 0241 05       		.uleb128 0x5
 9025 0242 49       		.uleb128 0x49
 9026 0243 13       		.uleb128 0x13
 9027 0244 3F       		.uleb128 0x3f
 9028 0245 19       		.uleb128 0x19
 9029 0246 02       		.uleb128 0x2
 9030 0247 18       		.uleb128 0x18
 9031 0248 00       		.byte	0
 9032 0249 00       		.byte	0
 9033 024a 2A       		.uleb128 0x2a
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 260


 9034 024b 2E       		.uleb128 0x2e
 9035 024c 00       		.byte	0
 9036 024d 3F       		.uleb128 0x3f
 9037 024e 19       		.uleb128 0x19
 9038 024f 3C       		.uleb128 0x3c
 9039 0250 19       		.uleb128 0x19
 9040 0251 6E       		.uleb128 0x6e
 9041 0252 0E       		.uleb128 0xe
 9042 0253 03       		.uleb128 0x3
 9043 0254 0E       		.uleb128 0xe
 9044 0255 3A       		.uleb128 0x3a
 9045 0256 0B       		.uleb128 0xb
 9046 0257 3B       		.uleb128 0x3b
 9047 0258 0B       		.uleb128 0xb
 9048 0259 00       		.byte	0
 9049 025a 00       		.byte	0
 9050 025b 2B       		.uleb128 0x2b
 9051 025c 2E       		.uleb128 0x2e
 9052 025d 00       		.byte	0
 9053 025e 3F       		.uleb128 0x3f
 9054 025f 19       		.uleb128 0x19
 9055 0260 3C       		.uleb128 0x3c
 9056 0261 19       		.uleb128 0x19
 9057 0262 6E       		.uleb128 0x6e
 9058 0263 0E       		.uleb128 0xe
 9059 0264 03       		.uleb128 0x3
 9060 0265 0E       		.uleb128 0xe
 9061 0266 3A       		.uleb128 0x3a
 9062 0267 0B       		.uleb128 0xb
 9063 0268 3B       		.uleb128 0x3b
 9064 0269 05       		.uleb128 0x5
 9065 026a 00       		.byte	0
 9066 026b 00       		.byte	0
 9067 026c 00       		.byte	0
 9068              		.section	.debug_loc,"",%progbits
 9069              	.Ldebug_loc0:
 9070              	.LLST0:
 9071 0000 00000000 		.4byte	.LVL0
 9072 0004 30000000 		.4byte	.LVL1
 9073 0008 0100     		.2byte	0x1
 9074 000a 50       		.byte	0x50
 9075 000b 30000000 		.4byte	.LVL1
 9076 000f 32000000 		.4byte	.LVL2
 9077 0013 0400     		.2byte	0x4
 9078 0015 F3       		.byte	0xf3
 9079 0016 01       		.uleb128 0x1
 9080 0017 50       		.byte	0x50
 9081 0018 9F       		.byte	0x9f
 9082 0019 32000000 		.4byte	.LVL2
 9083 001d 34000000 		.4byte	.LVL3
 9084 0021 0100     		.2byte	0x1
 9085 0023 50       		.byte	0x50
 9086 0024 34000000 		.4byte	.LVL3
 9087 0028 36000000 		.4byte	.LVL4
 9088 002c 0400     		.2byte	0x4
 9089 002e F3       		.byte	0xf3
 9090 002f 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 261


 9091 0030 50       		.byte	0x50
 9092 0031 9F       		.byte	0x9f
 9093 0032 36000000 		.4byte	.LVL4
 9094 0036 38000000 		.4byte	.LVL5
 9095 003a 0100     		.2byte	0x1
 9096 003c 50       		.byte	0x50
 9097 003d 38000000 		.4byte	.LVL5
 9098 0041 3A000000 		.4byte	.LVL6
 9099 0045 0400     		.2byte	0x4
 9100 0047 F3       		.byte	0xf3
 9101 0048 01       		.uleb128 0x1
 9102 0049 50       		.byte	0x50
 9103 004a 9F       		.byte	0x9f
 9104 004b 3A000000 		.4byte	.LVL6
 9105 004f 3C000000 		.4byte	.LVL7
 9106 0053 0100     		.2byte	0x1
 9107 0055 50       		.byte	0x50
 9108 0056 3C000000 		.4byte	.LVL7
 9109 005a 44000000 		.4byte	.LFE42
 9110 005e 0400     		.2byte	0x4
 9111 0060 F3       		.byte	0xf3
 9112 0061 01       		.uleb128 0x1
 9113 0062 50       		.byte	0x50
 9114 0063 9F       		.byte	0x9f
 9115 0064 00000000 		.4byte	0
 9116 0068 00000000 		.4byte	0
 9117              	.LLST1:
 9118 006c 00000000 		.4byte	.LVL0
 9119 0070 3C000000 		.4byte	.LVL7
 9120 0074 0200     		.2byte	0x2
 9121 0076 30       		.byte	0x30
 9122 0077 9F       		.byte	0x9f
 9123 0078 3C000000 		.4byte	.LVL7
 9124 007c 44000000 		.4byte	.LFE42
 9125 0080 0100     		.2byte	0x1
 9126 0082 50       		.byte	0x50
 9127 0083 00000000 		.4byte	0
 9128 0087 00000000 		.4byte	0
 9129              	.LLST2:
 9130 008b 00000000 		.4byte	.LVL0
 9131 008f 30000000 		.4byte	.LVL1
 9132 0093 0100     		.2byte	0x1
 9133 0095 50       		.byte	0x50
 9134 0096 30000000 		.4byte	.LVL1
 9135 009a 32000000 		.4byte	.LVL2
 9136 009e 0400     		.2byte	0x4
 9137 00a0 F3       		.byte	0xf3
 9138 00a1 01       		.uleb128 0x1
 9139 00a2 50       		.byte	0x50
 9140 00a3 9F       		.byte	0x9f
 9141 00a4 32000000 		.4byte	.LVL2
 9142 00a8 34000000 		.4byte	.LVL3
 9143 00ac 0100     		.2byte	0x1
 9144 00ae 50       		.byte	0x50
 9145 00af 34000000 		.4byte	.LVL3
 9146 00b3 36000000 		.4byte	.LVL4
 9147 00b7 0400     		.2byte	0x4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 262


 9148 00b9 F3       		.byte	0xf3
 9149 00ba 01       		.uleb128 0x1
 9150 00bb 50       		.byte	0x50
 9151 00bc 9F       		.byte	0x9f
 9152 00bd 36000000 		.4byte	.LVL4
 9153 00c1 38000000 		.4byte	.LVL5
 9154 00c5 0100     		.2byte	0x1
 9155 00c7 50       		.byte	0x50
 9156 00c8 38000000 		.4byte	.LVL5
 9157 00cc 3A000000 		.4byte	.LVL6
 9158 00d0 0400     		.2byte	0x4
 9159 00d2 F3       		.byte	0xf3
 9160 00d3 01       		.uleb128 0x1
 9161 00d4 50       		.byte	0x50
 9162 00d5 9F       		.byte	0x9f
 9163 00d6 3A000000 		.4byte	.LVL6
 9164 00da 3C000000 		.4byte	.LVL7
 9165 00de 0100     		.2byte	0x1
 9166 00e0 50       		.byte	0x50
 9167 00e1 3C000000 		.4byte	.LVL7
 9168 00e5 44000000 		.4byte	.LFE42
 9169 00e9 0400     		.2byte	0x4
 9170 00eb F3       		.byte	0xf3
 9171 00ec 01       		.uleb128 0x1
 9172 00ed 50       		.byte	0x50
 9173 00ee 9F       		.byte	0x9f
 9174 00ef 00000000 		.4byte	0
 9175 00f3 00000000 		.4byte	0
 9176              	.LLST3:
 9177 00f7 00000000 		.4byte	.LVL8
 9178 00fb 06000000 		.4byte	.LVL10
 9179 00ff 0100     		.2byte	0x1
 9180 0101 50       		.byte	0x50
 9181 0102 06000000 		.4byte	.LVL10
 9182 0106 12000000 		.4byte	.LVL13
 9183 010a 0100     		.2byte	0x1
 9184 010c 50       		.byte	0x50
 9185 010d 00000000 		.4byte	0
 9186 0111 00000000 		.4byte	0
 9187              	.LLST4:
 9188 0115 00000000 		.4byte	.LVL8
 9189 0119 04000000 		.4byte	.LVL9
 9190 011d 0200     		.2byte	0x2
 9191 011f 30       		.byte	0x30
 9192 0120 9F       		.byte	0x9f
 9193 0121 04000000 		.4byte	.LVL9
 9194 0125 14000000 		.4byte	.LFE68
 9195 0129 0100     		.2byte	0x1
 9196 012b 53       		.byte	0x53
 9197 012c 00000000 		.4byte	0
 9198 0130 00000000 		.4byte	0
 9199              	.LLST5:
 9200 0134 26000000 		.4byte	.LVL14
 9201 0138 28000000 		.4byte	.LVL15
 9202 013c 0100     		.2byte	0x1
 9203 013e 52       		.byte	0x52
 9204 013f 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 263


 9205 0143 00000000 		.4byte	0
 9206              	.LLST6:
 9207 0147 00000000 		.4byte	.LVL16
 9208 014b 06000000 		.4byte	.LVL17
 9209 014f 0100     		.2byte	0x1
 9210 0151 50       		.byte	0x50
 9211 0152 06000000 		.4byte	.LVL17
 9212 0156 10000000 		.4byte	.LVL20
 9213 015a 0100     		.2byte	0x1
 9214 015c 54       		.byte	0x54
 9215 015d 10000000 		.4byte	.LVL20
 9216 0161 12000000 		.4byte	.LFE70
 9217 0165 0400     		.2byte	0x4
 9218 0167 F3       		.byte	0xf3
 9219 0168 01       		.uleb128 0x1
 9220 0169 50       		.byte	0x50
 9221 016a 9F       		.byte	0x9f
 9222 016b 00000000 		.4byte	0
 9223 016f 00000000 		.4byte	0
 9224              	.LLST7:
 9225 0173 00000000 		.4byte	.LVL21
 9226 0177 16000000 		.4byte	.LVL24
 9227 017b 0100     		.2byte	0x1
 9228 017d 50       		.byte	0x50
 9229 017e 16000000 		.4byte	.LVL24
 9230 0182 A6000000 		.4byte	.LVL42
 9231 0186 0200     		.2byte	0x2
 9232 0188 7D       		.byte	0x7d
 9233 0189 00       		.sleb128 0
 9234 018a A6000000 		.4byte	.LVL42
 9235 018e AC000000 		.4byte	.LFE33
 9236 0192 0200     		.2byte	0x2
 9237 0194 91       		.byte	0x91
 9238 0195 60       		.sleb128 -32
 9239 0196 00000000 		.4byte	0
 9240 019a 00000000 		.4byte	0
 9241              	.LLST8:
 9242 019e 00000000 		.4byte	.LVL21
 9243 01a2 14000000 		.4byte	.LVL23
 9244 01a6 0100     		.2byte	0x1
 9245 01a8 51       		.byte	0x51
 9246 01a9 14000000 		.4byte	.LVL23
 9247 01ad A6000000 		.4byte	.LVL43
 9248 01b1 0100     		.2byte	0x1
 9249 01b3 55       		.byte	0x55
 9250 01b4 A6000000 		.4byte	.LVL43
 9251 01b8 AC000000 		.4byte	.LFE33
 9252 01bc 0400     		.2byte	0x4
 9253 01be F3       		.byte	0xf3
 9254 01bf 01       		.uleb128 0x1
 9255 01c0 51       		.byte	0x51
 9256 01c1 9F       		.byte	0x9f
 9257 01c2 00000000 		.4byte	0
 9258 01c6 00000000 		.4byte	0
 9259              	.LLST9:
 9260 01ca 00000000 		.4byte	.LVL21
 9261 01ce 12000000 		.4byte	.LVL22
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 264


 9262 01d2 0100     		.2byte	0x1
 9263 01d4 52       		.byte	0x52
 9264 01d5 12000000 		.4byte	.LVL22
 9265 01d9 2C000000 		.4byte	.LVL28
 9266 01dd 0100     		.2byte	0x1
 9267 01df 57       		.byte	0x57
 9268 01e0 2C000000 		.4byte	.LVL28
 9269 01e4 AC000000 		.4byte	.LFE33
 9270 01e8 0400     		.2byte	0x4
 9271 01ea F3       		.byte	0xf3
 9272 01eb 01       		.uleb128 0x1
 9273 01ec 52       		.byte	0x52
 9274 01ed 9F       		.byte	0x9f
 9275 01ee 00000000 		.4byte	0
 9276 01f2 00000000 		.4byte	0
 9277              	.LLST10:
 9278 01f6 00000000 		.4byte	.LVL21
 9279 01fa 19000000 		.4byte	.LVL25-1
 9280 01fe 0100     		.2byte	0x1
 9281 0200 53       		.byte	0x53
 9282 0201 19000000 		.4byte	.LVL25-1
 9283 0205 AC000000 		.4byte	.LFE33
 9284 0209 0200     		.2byte	0x2
 9285 020b 91       		.byte	0x91
 9286 020c 64       		.sleb128 -28
 9287 020d 00000000 		.4byte	0
 9288 0211 00000000 		.4byte	0
 9289              	.LLST11:
 9290 0215 00000000 		.4byte	.LVL21
 9291 0219 52000000 		.4byte	.LVL33
 9292 021d 0200     		.2byte	0x2
 9293 021f 91       		.byte	0x91
 9294 0220 00       		.sleb128 0
 9295 0221 52000000 		.4byte	.LVL33
 9296 0225 6E000000 		.4byte	.LVL36
 9297 0229 0100     		.2byte	0x1
 9298 022b 54       		.byte	0x54
 9299 022c 00000000 		.4byte	0
 9300 0230 00000000 		.4byte	0
 9301              	.LLST12:
 9302 0234 26000000 		.4byte	.LVL26
 9303 0238 2A000000 		.4byte	.LVL27
 9304 023c 0100     		.2byte	0x1
 9305 023e 53       		.byte	0x53
 9306 023f 2A000000 		.4byte	.LVL27
 9307 0243 2C000000 		.4byte	.LVL28
 9308 0247 0C00     		.2byte	0xc
 9309 0249 77       		.byte	0x77
 9310 024a FFFFFFFF 		.sleb128 1073741823
 9310      03
 9311 024f 32       		.byte	0x32
 9312 0250 24       		.byte	0x24
 9313 0251 7C       		.byte	0x7c
 9314 0252 00       		.sleb128 0
 9315 0253 22       		.byte	0x22
 9316 0254 9F       		.byte	0x9f
 9317 0255 2C000000 		.4byte	.LVL28
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 265


 9318 0259 2E000000 		.4byte	.LVL29
 9319 025d 0100     		.2byte	0x1
 9320 025f 53       		.byte	0x53
 9321 0260 2E000000 		.4byte	.LVL29
 9322 0264 A6000000 		.4byte	.LVL44
 9323 0268 0100     		.2byte	0x1
 9324 026a 57       		.byte	0x57
 9325 026b 00000000 		.4byte	0
 9326 026f 00000000 		.4byte	0
 9327              	.LLST13:
 9328 0273 30000000 		.4byte	.LVL30
 9329 0277 4A000000 		.4byte	.LVL32
 9330 027b 0100     		.2byte	0x1
 9331 027d 53       		.byte	0x53
 9332 027e 72000000 		.4byte	.LVL37
 9333 0282 76000000 		.4byte	.LVL38
 9334 0286 0200     		.2byte	0x2
 9335 0288 30       		.byte	0x30
 9336 0289 9F       		.byte	0x9f
 9337 028a 76000000 		.4byte	.LVL38
 9338 028e 8E000000 		.4byte	.LVL40
 9339 0292 0100     		.2byte	0x1
 9340 0294 52       		.byte	0x52
 9341 0295 00000000 		.4byte	0
 9342 0299 00000000 		.4byte	0
 9343              	.LLST14:
 9344 029d 02000000 		.4byte	.LVL45
 9345 02a1 06000000 		.4byte	.LVL46
 9346 02a5 0200     		.2byte	0x2
 9347 02a7 30       		.byte	0x30
 9348 02a8 9F       		.byte	0x9f
 9349 02a9 06000000 		.4byte	.LVL46
 9350 02ad 1E000000 		.4byte	.LVL49
 9351 02b1 0100     		.2byte	0x1
 9352 02b3 54       		.byte	0x54
 9353 02b4 00000000 		.4byte	0
 9354 02b8 00000000 		.4byte	0
 9355              	.LLST15:
 9356 02bc 00000000 		.4byte	.LVL55
 9357 02c0 07000000 		.4byte	.LVL56-1
 9358 02c4 0100     		.2byte	0x1
 9359 02c6 50       		.byte	0x50
 9360 02c7 07000000 		.4byte	.LVL56-1
 9361 02cb 80000000 		.4byte	.LVL61
 9362 02cf 0100     		.2byte	0x1
 9363 02d1 54       		.byte	0x54
 9364 02d2 80000000 		.4byte	.LVL61
 9365 02d6 8C000000 		.4byte	.LFE34
 9366 02da 0400     		.2byte	0x4
 9367 02dc F3       		.byte	0xf3
 9368 02dd 01       		.uleb128 0x1
 9369 02de 50       		.byte	0x50
 9370 02df 9F       		.byte	0x9f
 9371 02e0 00000000 		.4byte	0
 9372 02e4 00000000 		.4byte	0
 9373              	.LLST16:
 9374 02e8 0E000000 		.4byte	.LVL63
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 266


 9375 02ec 2A000000 		.4byte	.LVL66
 9376 02f0 0100     		.2byte	0x1
 9377 02f2 55       		.byte	0x55
 9378 02f3 00000000 		.4byte	0
 9379 02f7 00000000 		.4byte	0
 9380              	.LLST17:
 9381 02fb 00000000 		.4byte	.LVL67
 9382 02ff 02000000 		.4byte	.LVL68
 9383 0303 0100     		.2byte	0x1
 9384 0305 50       		.byte	0x50
 9385 0306 02000000 		.4byte	.LVL68
 9386 030a 08000000 		.4byte	.LFE63
 9387 030e 0400     		.2byte	0x4
 9388 0310 F3       		.byte	0xf3
 9389 0311 01       		.uleb128 0x1
 9390 0312 50       		.byte	0x50
 9391 0313 9F       		.byte	0x9f
 9392 0314 00000000 		.4byte	0
 9393 0318 00000000 		.4byte	0
 9394              	.LLST18:
 9395 031c 00000000 		.4byte	.LVL70
 9396 0320 0C000000 		.4byte	.LVL72
 9397 0324 0100     		.2byte	0x1
 9398 0326 50       		.byte	0x50
 9399 0327 0C000000 		.4byte	.LVL72
 9400 032b 2A000000 		.4byte	.LVL75
 9401 032f 0100     		.2byte	0x1
 9402 0331 54       		.byte	0x54
 9403 0332 2A000000 		.4byte	.LVL75
 9404 0336 64000000 		.4byte	.LFE85
 9405 033a 0400     		.2byte	0x4
 9406 033c F3       		.byte	0xf3
 9407 033d 01       		.uleb128 0x1
 9408 033e 50       		.byte	0x50
 9409 033f 9F       		.byte	0x9f
 9410 0340 00000000 		.4byte	0
 9411 0344 00000000 		.4byte	0
 9412              	.LLST19:
 9413 0348 00000000 		.4byte	.LVL70
 9414 034c 11000000 		.4byte	.LVL73-1
 9415 0350 0100     		.2byte	0x1
 9416 0352 51       		.byte	0x51
 9417 0353 11000000 		.4byte	.LVL73-1
 9418 0357 44000000 		.4byte	.LVL77
 9419 035b 0100     		.2byte	0x1
 9420 035d 55       		.byte	0x55
 9421 035e 44000000 		.4byte	.LVL77
 9422 0362 64000000 		.4byte	.LFE85
 9423 0366 0400     		.2byte	0x4
 9424 0368 F3       		.byte	0xf3
 9425 0369 01       		.uleb128 0x1
 9426 036a 51       		.byte	0x51
 9427 036b 9F       		.byte	0x9f
 9428 036c 00000000 		.4byte	0
 9429 0370 00000000 		.4byte	0
 9430              	.LLST20:
 9431 0374 2A000000 		.4byte	.LVL75
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 267


 9432 0378 5A000000 		.4byte	.LVL79
 9433 037c 0100     		.2byte	0x1
 9434 037e 54       		.byte	0x54
 9435 037f 00000000 		.4byte	0
 9436 0383 00000000 		.4byte	0
 9437              	.LLST21:
 9438 0387 0A000000 		.4byte	.LVL71
 9439 038b 5A000000 		.4byte	.LVL80
 9440 038f 0100     		.2byte	0x1
 9441 0391 56       		.byte	0x56
 9442 0392 00000000 		.4byte	0
 9443 0396 00000000 		.4byte	0
 9444              	.LLST22:
 9445 039a 00000000 		.4byte	.LVL81
 9446 039e 0E000000 		.4byte	.LVL82
 9447 03a2 0100     		.2byte	0x1
 9448 03a4 50       		.byte	0x50
 9449 03a5 0E000000 		.4byte	.LVL82
 9450 03a9 5E000000 		.4byte	.LFE32
 9451 03ad 0200     		.2byte	0x2
 9452 03af 91       		.byte	0x91
 9453 03b0 60       		.sleb128 -32
 9454 03b1 00000000 		.4byte	0
 9455 03b5 00000000 		.4byte	0
 9456              	.LLST23:
 9457 03b9 00000000 		.4byte	.LVL81
 9458 03bd 11000000 		.4byte	.LVL83-1
 9459 03c1 0100     		.2byte	0x1
 9460 03c3 51       		.byte	0x51
 9461 03c4 11000000 		.4byte	.LVL83-1
 9462 03c8 5E000000 		.4byte	.LFE32
 9463 03cc 0200     		.2byte	0x2
 9464 03ce 91       		.byte	0x91
 9465 03cf 64       		.sleb128 -28
 9466 03d0 00000000 		.4byte	0
 9467 03d4 00000000 		.4byte	0
 9468              	.LLST24:
 9469 03d8 00000000 		.4byte	.LVL81
 9470 03dc 11000000 		.4byte	.LVL83-1
 9471 03e0 0100     		.2byte	0x1
 9472 03e2 52       		.byte	0x52
 9473 03e3 11000000 		.4byte	.LVL83-1
 9474 03e7 5E000000 		.4byte	.LFE32
 9475 03eb 0400     		.2byte	0x4
 9476 03ed F3       		.byte	0xf3
 9477 03ee 01       		.uleb128 0x1
 9478 03ef 52       		.byte	0x52
 9479 03f0 9F       		.byte	0x9f
 9480 03f1 00000000 		.4byte	0
 9481 03f5 00000000 		.4byte	0
 9482              	.LLST25:
 9483 03f9 00000000 		.4byte	.LVL81
 9484 03fd 11000000 		.4byte	.LVL83-1
 9485 0401 0100     		.2byte	0x1
 9486 0403 53       		.byte	0x53
 9487 0404 11000000 		.4byte	.LVL83-1
 9488 0408 5C000000 		.4byte	.LVL98
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 268


 9489 040c 0100     		.2byte	0x1
 9490 040e 57       		.byte	0x57
 9491 040f 5C000000 		.4byte	.LVL98
 9492 0413 5E000000 		.4byte	.LFE32
 9493 0417 0400     		.2byte	0x4
 9494 0419 F3       		.byte	0xf3
 9495 041a 01       		.uleb128 0x1
 9496 041b 53       		.byte	0x53
 9497 041c 9F       		.byte	0x9f
 9498 041d 00000000 		.4byte	0
 9499 0421 00000000 		.4byte	0
 9500              	.LLST26:
 9501 0425 1E000000 		.4byte	.LVL87
 9502 0429 26000000 		.4byte	.LVL88
 9503 042d 0100     		.2byte	0x1
 9504 042f 50       		.byte	0x50
 9505 0430 26000000 		.4byte	.LVL88
 9506 0434 2C000000 		.4byte	.LVL90
 9507 0438 0100     		.2byte	0x1
 9508 043a 55       		.byte	0x55
 9509 043b 2E000000 		.4byte	.LVL91
 9510 043f 5C000000 		.4byte	.LVL96
 9511 0443 0100     		.2byte	0x1
 9512 0445 55       		.byte	0x55
 9513 0446 00000000 		.4byte	0
 9514 044a 00000000 		.4byte	0
 9515              	.LLST27:
 9516 044e 52000000 		.4byte	.LVL93
 9517 0452 56000000 		.4byte	.LVL94
 9518 0456 0200     		.2byte	0x2
 9519 0458 31       		.byte	0x31
 9520 0459 9F       		.byte	0x9f
 9521 045a 5A000000 		.4byte	.LVL95
 9522 045e 5E000000 		.4byte	.LFE32
 9523 0462 0100     		.2byte	0x1
 9524 0464 50       		.byte	0x50
 9525 0465 00000000 		.4byte	0
 9526 0469 00000000 		.4byte	0
 9527              	.LLST28:
 9528 046d 14000000 		.4byte	.LVL84
 9529 0471 18000000 		.4byte	.LVL85
 9530 0475 0100     		.2byte	0x1
 9531 0477 50       		.byte	0x50
 9532 0478 18000000 		.4byte	.LVL85
 9533 047c 2C000000 		.4byte	.LVL90
 9534 0480 0100     		.2byte	0x1
 9535 0482 56       		.byte	0x56
 9536 0483 2C000000 		.4byte	.LVL90
 9537 0487 2E000000 		.4byte	.LVL91
 9538 048b 0100     		.2byte	0x1
 9539 048d 50       		.byte	0x50
 9540 048e 2E000000 		.4byte	.LVL91
 9541 0492 5C000000 		.4byte	.LVL97
 9542 0496 0100     		.2byte	0x1
 9543 0498 56       		.byte	0x56
 9544 0499 00000000 		.4byte	0
 9545 049d 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 269


 9546              	.LLST29:
 9547 04a1 00000000 		.4byte	.LVL99
 9548 04a5 07000000 		.4byte	.LVL100-1
 9549 04a9 0100     		.2byte	0x1
 9550 04ab 50       		.byte	0x50
 9551 04ac 07000000 		.4byte	.LVL100-1
 9552 04b0 10000000 		.4byte	.LVL101
 9553 04b4 0100     		.2byte	0x1
 9554 04b6 54       		.byte	0x54
 9555 04b7 00000000 		.4byte	0
 9556 04bb 00000000 		.4byte	0
 9557              	.LLST30:
 9558 04bf 10000000 		.4byte	.LVL101
 9559 04c3 7E000000 		.4byte	.LVL109
 9560 04c7 0100     		.2byte	0x1
 9561 04c9 54       		.byte	0x54
 9562 04ca 7E000000 		.4byte	.LVL109
 9563 04ce 7E000000 		.4byte	.LVL110
 9564 04d2 0300     		.2byte	0x3
 9565 04d4 76       		.byte	0x76
 9566 04d5 7C       		.sleb128 -4
 9567 04d6 9F       		.byte	0x9f
 9568 04d7 00000000 		.4byte	0
 9569 04db 00000000 		.4byte	0
 9570              	.LLST31:
 9571 04df 00000000 		.4byte	.LVL111
 9572 04e3 07000000 		.4byte	.LVL112-1
 9573 04e7 0100     		.2byte	0x1
 9574 04e9 50       		.byte	0x50
 9575 04ea 07000000 		.4byte	.LVL112-1
 9576 04ee 10000000 		.4byte	.LVL113
 9577 04f2 0100     		.2byte	0x1
 9578 04f4 54       		.byte	0x54
 9579 04f5 00000000 		.4byte	0
 9580 04f9 00000000 		.4byte	0
 9581              	.LLST32:
 9582 04fd 10000000 		.4byte	.LVL113
 9583 0501 12000000 		.4byte	.LVL114
 9584 0505 0100     		.2byte	0x1
 9585 0507 54       		.byte	0x54
 9586 0508 00000000 		.4byte	0
 9587 050c 00000000 		.4byte	0
 9588              	.LLST33:
 9589 0510 12000000 		.4byte	.LVL114
 9590 0514 18000000 		.4byte	.LVL116
 9591 0518 0100     		.2byte	0x1
 9592 051a 54       		.byte	0x54
 9593 051b 18000000 		.4byte	.LVL116
 9594 051f 20000000 		.4byte	.LFE38
 9595 0523 0100     		.2byte	0x1
 9596 0525 50       		.byte	0x50
 9597 0526 00000000 		.4byte	0
 9598 052a 00000000 		.4byte	0
 9599              	.LLST34:
 9600 052e 00000000 		.4byte	.LVL117
 9601 0532 07000000 		.4byte	.LVL118-1
 9602 0536 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 270


 9603 0538 50       		.byte	0x50
 9604 0539 07000000 		.4byte	.LVL118-1
 9605 053d 10000000 		.4byte	.LVL119
 9606 0541 0100     		.2byte	0x1
 9607 0543 54       		.byte	0x54
 9608 0544 00000000 		.4byte	0
 9609 0548 00000000 		.4byte	0
 9610              	.LLST35:
 9611 054c 10000000 		.4byte	.LVL119
 9612 0550 12000000 		.4byte	.LVL120
 9613 0554 0100     		.2byte	0x1
 9614 0556 54       		.byte	0x54
 9615 0557 00000000 		.4byte	0
 9616 055b 00000000 		.4byte	0
 9617              	.LLST36:
 9618 055f 12000000 		.4byte	.LVL120
 9619 0563 18000000 		.4byte	.LVL122
 9620 0567 0100     		.2byte	0x1
 9621 0569 54       		.byte	0x54
 9622 056a 18000000 		.4byte	.LVL122
 9623 056e 20000000 		.4byte	.LFE39
 9624 0572 0100     		.2byte	0x1
 9625 0574 50       		.byte	0x50
 9626 0575 00000000 		.4byte	0
 9627 0579 00000000 		.4byte	0
 9628              	.LLST37:
 9629 057d 08000000 		.4byte	.LVL118
 9630 0581 15000000 		.4byte	.LVL121-1
 9631 0585 0100     		.2byte	0x1
 9632 0587 50       		.byte	0x50
 9633 0588 00000000 		.4byte	0
 9634 058c 00000000 		.4byte	0
 9635              	.LLST38:
 9636 0590 00000000 		.4byte	.LVL123
 9637 0594 17000000 		.4byte	.LVL126-1
 9638 0598 0100     		.2byte	0x1
 9639 059a 50       		.byte	0x50
 9640 059b 17000000 		.4byte	.LVL126-1
 9641 059f 20000000 		.4byte	.LVL127
 9642 05a3 0100     		.2byte	0x1
 9643 05a5 54       		.byte	0x54
 9644 05a6 00000000 		.4byte	0
 9645 05aa 00000000 		.4byte	0
 9646              	.LLST39:
 9647 05ae 00000000 		.4byte	.LVL123
 9648 05b2 14000000 		.4byte	.LVL125
 9649 05b6 0100     		.2byte	0x1
 9650 05b8 51       		.byte	0x51
 9651 05b9 14000000 		.4byte	.LVL125
 9652 05bd 68000000 		.4byte	.LVL132
 9653 05c1 0100     		.2byte	0x1
 9654 05c3 55       		.byte	0x55
 9655 05c4 68000000 		.4byte	.LVL132
 9656 05c8 8D000000 		.4byte	.LVL134-1
 9657 05cc 0300     		.2byte	0x3
 9658 05ce 74       		.byte	0x74
 9659 05cf C400     		.sleb128 68
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 271


 9660 05d1 00000000 		.4byte	0
 9661 05d5 00000000 		.4byte	0
 9662              	.LLST40:
 9663 05d9 20000000 		.4byte	.LVL127
 9664 05dd BA000000 		.4byte	.LVL138
 9665 05e1 0100     		.2byte	0x1
 9666 05e3 54       		.byte	0x54
 9667 05e4 00000000 		.4byte	0
 9668 05e8 00000000 		.4byte	0
 9669              	.LLST41:
 9670 05ec 22000000 		.4byte	.LVL128
 9671 05f0 60000000 		.4byte	.LVL131
 9672 05f4 0100     		.2byte	0x1
 9673 05f6 52       		.byte	0x52
 9674 05f7 00000000 		.4byte	0
 9675 05fb 00000000 		.4byte	0
 9676              	.LLST42:
 9677 05ff 56000000 		.4byte	.LVL130
 9678 0603 6E000000 		.4byte	.LVL133
 9679 0607 0100     		.2byte	0x1
 9680 0609 53       		.byte	0x53
 9681 060a 00000000 		.4byte	0
 9682 060e 00000000 		.4byte	0
 9683              	.LLST43:
 9684 0612 06000000 		.4byte	.LVL124
 9685 0616 54000000 		.4byte	.LVL129
 9686 061a 0200     		.2byte	0x2
 9687 061c 30       		.byte	0x30
 9688 061d 9F       		.byte	0x9f
 9689 061e 54000000 		.4byte	.LVL129
 9690 0622 B6000000 		.4byte	.LVL136
 9691 0626 0100     		.2byte	0x1
 9692 0628 56       		.byte	0x56
 9693 0629 00000000 		.4byte	0
 9694 062d 00000000 		.4byte	0
 9695              	.LLST44:
 9696 0631 00000000 		.4byte	.LVL139
 9697 0635 19000000 		.4byte	.LVL141-1
 9698 0639 0100     		.2byte	0x1
 9699 063b 50       		.byte	0x50
 9700 063c 19000000 		.4byte	.LVL141-1
 9701 0640 60000000 		.4byte	.LVL147
 9702 0644 0100     		.2byte	0x1
 9703 0646 54       		.byte	0x54
 9704 0647 60000000 		.4byte	.LVL147
 9705 064b 6C000000 		.4byte	.LFE43
 9706 064f 0400     		.2byte	0x4
 9707 0651 F3       		.byte	0xf3
 9708 0652 01       		.uleb128 0x1
 9709 0653 50       		.byte	0x50
 9710 0654 9F       		.byte	0x9f
 9711 0655 00000000 		.4byte	0
 9712 0659 00000000 		.4byte	0
 9713              	.LLST45:
 9714 065d 04000000 		.4byte	.LVL140
 9715 0661 19000000 		.4byte	.LVL141-1
 9716 0665 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 272


 9717 0667 50       		.byte	0x50
 9718 0668 19000000 		.4byte	.LVL141-1
 9719 066c 60000000 		.4byte	.LVL147
 9720 0670 0100     		.2byte	0x1
 9721 0672 54       		.byte	0x54
 9722 0673 60000000 		.4byte	.LVL147
 9723 0677 6C000000 		.4byte	.LFE43
 9724 067b 0400     		.2byte	0x4
 9725 067d F3       		.byte	0xf3
 9726 067e 01       		.uleb128 0x1
 9727 067f 50       		.byte	0x50
 9728 0680 9F       		.byte	0x9f
 9729 0681 00000000 		.4byte	0
 9730 0685 00000000 		.4byte	0
 9731              	.LLST46:
 9732 0689 00000000 		.4byte	.LVL148
 9733 068d 0D000000 		.4byte	.LVL150-1
 9734 0691 0100     		.2byte	0x1
 9735 0693 50       		.byte	0x50
 9736 0694 0D000000 		.4byte	.LVL150-1
 9737 0698 78000000 		.4byte	.LVL161
 9738 069c 0100     		.2byte	0x1
 9739 069e 54       		.byte	0x54
 9740 069f 78000000 		.4byte	.LVL161
 9741 06a3 84000000 		.4byte	.LFE44
 9742 06a7 0400     		.2byte	0x4
 9743 06a9 F3       		.byte	0xf3
 9744 06aa 01       		.uleb128 0x1
 9745 06ab 50       		.byte	0x50
 9746 06ac 9F       		.byte	0x9f
 9747 06ad 00000000 		.4byte	0
 9748 06b1 00000000 		.4byte	0
 9749              	.LLST47:
 9750 06b5 04000000 		.4byte	.LVL149
 9751 06b9 34000000 		.4byte	.LVL154
 9752 06bd 0200     		.2byte	0x2
 9753 06bf 30       		.byte	0x30
 9754 06c0 9F       		.byte	0x9f
 9755 06c1 34000000 		.4byte	.LVL154
 9756 06c5 5E000000 		.4byte	.LVL157
 9757 06c9 0100     		.2byte	0x1
 9758 06cb 57       		.byte	0x57
 9759 06cc 5E000000 		.4byte	.LVL157
 9760 06d0 70000000 		.4byte	.LVL159
 9761 06d4 0200     		.2byte	0x2
 9762 06d6 30       		.byte	0x30
 9763 06d7 9F       		.byte	0x9f
 9764 06d8 70000000 		.4byte	.LVL159
 9765 06dc 78000000 		.4byte	.LVL163
 9766 06e0 0100     		.2byte	0x1
 9767 06e2 57       		.byte	0x57
 9768 06e3 78000000 		.4byte	.LVL163
 9769 06e7 84000000 		.4byte	.LFE44
 9770 06eb 0100     		.2byte	0x1
 9771 06ed 50       		.byte	0x50
 9772 06ee 00000000 		.4byte	0
 9773 06f2 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 273


 9774              	.LLST48:
 9775 06f6 04000000 		.4byte	.LVL149
 9776 06fa 0D000000 		.4byte	.LVL150-1
 9777 06fe 0100     		.2byte	0x1
 9778 0700 50       		.byte	0x50
 9779 0701 0D000000 		.4byte	.LVL150-1
 9780 0705 78000000 		.4byte	.LVL161
 9781 0709 0100     		.2byte	0x1
 9782 070b 54       		.byte	0x54
 9783 070c 78000000 		.4byte	.LVL161
 9784 0710 84000000 		.4byte	.LFE44
 9785 0714 0400     		.2byte	0x4
 9786 0716 F3       		.byte	0xf3
 9787 0717 01       		.uleb128 0x1
 9788 0718 50       		.byte	0x50
 9789 0719 9F       		.byte	0x9f
 9790 071a 00000000 		.4byte	0
 9791 071e 00000000 		.4byte	0
 9792              	.LLST49:
 9793 0722 10000000 		.4byte	.LVL151
 9794 0726 12000000 		.4byte	.LVL152
 9795 072a 0100     		.2byte	0x1
 9796 072c 50       		.byte	0x50
 9797 072d 12000000 		.4byte	.LVL152
 9798 0731 78000000 		.4byte	.LVL162
 9799 0735 0100     		.2byte	0x1
 9800 0737 55       		.byte	0x55
 9801 0738 00000000 		.4byte	0
 9802 073c 00000000 		.4byte	0
 9803              	.LLST50:
 9804 0740 18000000 		.4byte	.LVL164
 9805 0744 33000000 		.4byte	.LVL165-1
 9806 0748 0100     		.2byte	0x1
 9807 074a 50       		.byte	0x50
 9808 074b 36000000 		.4byte	.LVL166
 9809 074f 3E000000 		.4byte	.LVL167
 9810 0753 0100     		.2byte	0x1
 9811 0755 50       		.byte	0x50
 9812 0756 00000000 		.4byte	0
 9813 075a 00000000 		.4byte	0
 9814              	.LLST51:
 9815 075e 00000000 		.4byte	.LVL172
 9816 0762 08000000 		.4byte	.LVL173
 9817 0766 0100     		.2byte	0x1
 9818 0768 50       		.byte	0x50
 9819 0769 00000000 		.4byte	0
 9820 076d 00000000 		.4byte	0
 9821              	.LLST52:
 9822 0771 08000000 		.4byte	.LVL173
 9823 0775 12000000 		.4byte	.LVL174
 9824 0779 0100     		.2byte	0x1
 9825 077b 50       		.byte	0x50
 9826 077c 12000000 		.4byte	.LVL174
 9827 0780 18000000 		.4byte	.LFE52
 9828 0784 0300     		.2byte	0x3
 9829 0786 70       		.byte	0x70
 9830 0787 4C       		.sleb128 -52
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 274


 9831 0788 9F       		.byte	0x9f
 9832 0789 00000000 		.4byte	0
 9833 078d 00000000 		.4byte	0
 9834              	.LLST53:
 9835 0791 46000000 		.4byte	.LVL179
 9836 0795 4A000000 		.4byte	.LVL181
 9837 0799 0100     		.2byte	0x1
 9838 079b 56       		.byte	0x56
 9839 079c 72000000 		.4byte	.LVL183
 9840 07a0 C2000000 		.4byte	.LVL188
 9841 07a4 0100     		.2byte	0x1
 9842 07a6 56       		.byte	0x56
 9843 07a7 00000000 		.4byte	0
 9844 07ab 00000000 		.4byte	0
 9845              	.LLST54:
 9846 07af 74000000 		.4byte	.LVL184
 9847 07b3 85000000 		.4byte	.LVL185-1
 9848 07b7 0100     		.2byte	0x1
 9849 07b9 53       		.byte	0x53
 9850 07ba 00000000 		.4byte	0
 9851 07be 00000000 		.4byte	0
 9852              	.LLST55:
 9853 07c2 02000000 		.4byte	.LVL175
 9854 07c6 46000000 		.4byte	.LVL179
 9855 07ca 0200     		.2byte	0x2
 9856 07cc 30       		.byte	0x30
 9857 07cd 9F       		.byte	0x9f
 9858 07ce 46000000 		.4byte	.LVL179
 9859 07d2 48000000 		.4byte	.LVL180
 9860 07d6 0100     		.2byte	0x1
 9861 07d8 57       		.byte	0x57
 9862 07d9 4A000000 		.4byte	.LVL181
 9863 07dd 4C000000 		.4byte	.LVL182
 9864 07e1 0200     		.2byte	0x2
 9865 07e3 30       		.byte	0x30
 9866 07e4 9F       		.byte	0x9f
 9867 07e5 4C000000 		.4byte	.LVL182
 9868 07e9 C2000000 		.4byte	.LVL188
 9869 07ed 0100     		.2byte	0x1
 9870 07ef 57       		.byte	0x57
 9871 07f0 C2000000 		.4byte	.LVL188
 9872 07f4 CC000000 		.4byte	.LVL189
 9873 07f8 0200     		.2byte	0x2
 9874 07fa 30       		.byte	0x30
 9875 07fb 9F       		.byte	0x9f
 9876 07fc CC000000 		.4byte	.LVL189
 9877 0800 D8000000 		.4byte	.LVL191
 9878 0804 0100     		.2byte	0x1
 9879 0806 57       		.byte	0x57
 9880 0807 D8000000 		.4byte	.LVL191
 9881 080b E8000000 		.4byte	.LFE53
 9882 080f 0100     		.2byte	0x1
 9883 0811 50       		.byte	0x50
 9884 0812 00000000 		.4byte	0
 9885 0816 00000000 		.4byte	0
 9886              	.LLST56:
 9887 081a 10000000 		.4byte	.LVL176
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 275


 9888 081e C2000000 		.4byte	.LVL188
 9889 0822 0100     		.2byte	0x1
 9890 0824 54       		.byte	0x54
 9891 0825 00000000 		.4byte	0
 9892 0829 00000000 		.4byte	0
 9893              	.LLST57:
 9894 082d 28000000 		.4byte	.LVL177
 9895 0831 39000000 		.4byte	.LVL178-1
 9896 0835 0100     		.2byte	0x1
 9897 0837 51       		.byte	0x51
 9898 0838 00000000 		.4byte	0
 9899 083c 00000000 		.4byte	0
 9900              	.LLST58:
 9901 0840 02000000 		.4byte	.LVL192
 9902 0844 2C000000 		.4byte	.LVL194
 9903 0848 0200     		.2byte	0x2
 9904 084a 30       		.byte	0x30
 9905 084b 9F       		.byte	0x9f
 9906 084c 2C000000 		.4byte	.LVL194
 9907 0850 76000000 		.4byte	.LVL199
 9908 0854 0100     		.2byte	0x1
 9909 0856 54       		.byte	0x54
 9910 0857 76000000 		.4byte	.LVL199
 9911 085b 78000000 		.4byte	.LVL200
 9912 085f 0200     		.2byte	0x2
 9913 0861 30       		.byte	0x30
 9914 0862 9F       		.byte	0x9f
 9915 0863 78000000 		.4byte	.LVL200
 9916 0867 8C000000 		.4byte	.LVL202
 9917 086b 0100     		.2byte	0x1
 9918 086d 54       		.byte	0x54
 9919 086e BA000000 		.4byte	.LVL208
 9920 0872 BE000000 		.4byte	.LVL209
 9921 0876 0200     		.2byte	0x2
 9922 0878 30       		.byte	0x30
 9923 0879 9F       		.byte	0x9f
 9924 087a 00000000 		.4byte	0
 9925 087e 00000000 		.4byte	0
 9926              	.LLST59:
 9927 0882 02000000 		.4byte	.LVL192
 9928 0886 B2000000 		.4byte	.LVL205
 9929 088a 0200     		.2byte	0x2
 9930 088c 30       		.byte	0x30
 9931 088d 9F       		.byte	0x9f
 9932 088e B2000000 		.4byte	.LVL205
 9933 0892 BA000000 		.4byte	.LVL208
 9934 0896 0200     		.2byte	0x2
 9935 0898 31       		.byte	0x31
 9936 0899 9F       		.byte	0x9f
 9937 089a BA000000 		.4byte	.LVL208
 9938 089e C0000000 		.4byte	.LVL210
 9939 08a2 0200     		.2byte	0x2
 9940 08a4 30       		.byte	0x30
 9941 08a5 9F       		.byte	0x9f
 9942 08a6 C0000000 		.4byte	.LVL210
 9943 08aa C6000000 		.4byte	.LVL212
 9944 08ae 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 276


 9945 08b0 54       		.byte	0x54
 9946 08b1 C6000000 		.4byte	.LVL212
 9947 08b5 D4000000 		.4byte	.LFE48
 9948 08b9 0100     		.2byte	0x1
 9949 08bb 50       		.byte	0x50
 9950 08bc 00000000 		.4byte	0
 9951 08c0 00000000 		.4byte	0
 9952              	.LLST60:
 9953 08c4 8C000000 		.4byte	.LVL202
 9954 08c8 B8000000 		.4byte	.LVL207
 9955 08cc 0100     		.2byte	0x1
 9956 08ce 54       		.byte	0x54
 9957 08cf BE000000 		.4byte	.LVL209
 9958 08d3 C0000000 		.4byte	.LVL210
 9959 08d7 0100     		.2byte	0x1
 9960 08d9 54       		.byte	0x54
 9961 08da 00000000 		.4byte	0
 9962 08de 00000000 		.4byte	0
 9963              	.LLST61:
 9964 08e2 00000000 		.4byte	.LVL213
 9965 08e6 25000000 		.4byte	.LVL215-1
 9966 08ea 0100     		.2byte	0x1
 9967 08ec 50       		.byte	0x50
 9968 08ed 25000000 		.4byte	.LVL215-1
 9969 08f1 72000000 		.4byte	.LVL224
 9970 08f5 0100     		.2byte	0x1
 9971 08f7 55       		.byte	0x55
 9972 08f8 72000000 		.4byte	.LVL224
 9973 08fc 78000000 		.4byte	.LFE36
 9974 0900 0400     		.2byte	0x4
 9975 0902 F3       		.byte	0xf3
 9976 0903 01       		.uleb128 0x1
 9977 0904 50       		.byte	0x50
 9978 0905 9F       		.byte	0x9f
 9979 0906 00000000 		.4byte	0
 9980 090a 00000000 		.4byte	0
 9981              	.LLST62:
 9982 090e 00000000 		.4byte	.LVL213
 9983 0912 25000000 		.4byte	.LVL215-1
 9984 0916 0100     		.2byte	0x1
 9985 0918 51       		.byte	0x51
 9986 0919 25000000 		.4byte	.LVL215-1
 9987 091d 72000000 		.4byte	.LVL223
 9988 0921 0100     		.2byte	0x1
 9989 0923 54       		.byte	0x54
 9990 0924 72000000 		.4byte	.LVL223
 9991 0928 78000000 		.4byte	.LFE36
 9992 092c 0400     		.2byte	0x4
 9993 092e F3       		.byte	0xf3
 9994 092f 01       		.uleb128 0x1
 9995 0930 51       		.byte	0x51
 9996 0931 9F       		.byte	0x9f
 9997 0932 00000000 		.4byte	0
 9998 0936 00000000 		.4byte	0
 9999              	.LLST63:
 10000 093a 2E000000 		.4byte	.LVL217
 10001 093e 65000000 		.4byte	.LVL220-1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 277


 10002 0942 0100     		.2byte	0x1
 10003 0944 53       		.byte	0x53
 10004 0945 00000000 		.4byte	0
 10005 0949 00000000 		.4byte	0
 10006              	.LLST64:
 10007 094d 6A000000 		.4byte	.LVL221
 10008 0951 71000000 		.4byte	.LVL222-1
 10009 0955 0100     		.2byte	0x1
 10010 0957 50       		.byte	0x50
 10011 0958 00000000 		.4byte	0
 10012 095c 00000000 		.4byte	0
 10013              	.LLST65:
 10014 0960 06000000 		.4byte	.LVL214
 10015 0964 58000000 		.4byte	.LVL218
 10016 0968 0200     		.2byte	0x2
 10017 096a 30       		.byte	0x30
 10018 096b 9F       		.byte	0x9f
 10019 096c 58000000 		.4byte	.LVL218
 10020 0970 65000000 		.4byte	.LVL220-1
 10021 0974 0100     		.2byte	0x1
 10022 0976 52       		.byte	0x52
 10023 0977 00000000 		.4byte	0
 10024 097b 00000000 		.4byte	0
 10025              	.LLST66:
 10026 097f 2A000000 		.4byte	.LVL216
 10027 0983 60000000 		.4byte	.LVL219
 10028 0987 0100     		.2byte	0x1
 10029 0989 50       		.byte	0x50
 10030 098a 00000000 		.4byte	0
 10031 098e 00000000 		.4byte	0
 10032              	.LLST67:
 10033 0992 00000000 		.4byte	.LVL225
 10034 0996 15000000 		.4byte	.LVL227-1
 10035 099a 0100     		.2byte	0x1
 10036 099c 50       		.byte	0x50
 10037 099d 15000000 		.4byte	.LVL227-1
 10038 09a1 24000000 		.4byte	.LVL230
 10039 09a5 0100     		.2byte	0x1
 10040 09a7 54       		.byte	0x54
 10041 09a8 24000000 		.4byte	.LVL230
 10042 09ac 26000000 		.4byte	.LVL231
 10043 09b0 0100     		.2byte	0x1
 10044 09b2 50       		.byte	0x50
 10045 09b3 26000000 		.4byte	.LVL231
 10046 09b7 2E000000 		.4byte	.LVL233
 10047 09bb 0100     		.2byte	0x1
 10048 09bd 54       		.byte	0x54
 10049 09be 2E000000 		.4byte	.LVL233
 10050 09c2 34000000 		.4byte	.LFE37
 10051 09c6 0400     		.2byte	0x4
 10052 09c8 F3       		.byte	0xf3
 10053 09c9 01       		.uleb128 0x1
 10054 09ca 50       		.byte	0x50
 10055 09cb 9F       		.byte	0x9f
 10056 09cc 00000000 		.4byte	0
 10057 09d0 00000000 		.4byte	0
 10058              	.LLST68:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 278


 10059 09d4 04000000 		.4byte	.LVL226
 10060 09d8 22000000 		.4byte	.LVL229
 10061 09dc 0200     		.2byte	0x2
 10062 09de 30       		.byte	0x30
 10063 09df 9F       		.byte	0x9f
 10064 09e0 22000000 		.4byte	.LVL229
 10065 09e4 24000000 		.4byte	.LVL230
 10066 09e8 0100     		.2byte	0x1
 10067 09ea 50       		.byte	0x50
 10068 09eb 24000000 		.4byte	.LVL230
 10069 09ef 26000000 		.4byte	.LVL231
 10070 09f3 0200     		.2byte	0x2
 10071 09f5 30       		.byte	0x30
 10072 09f6 9F       		.byte	0x9f
 10073 09f7 26000000 		.4byte	.LVL231
 10074 09fb 2D000000 		.4byte	.LVL232-1
 10075 09ff 0100     		.2byte	0x1
 10076 0a01 50       		.byte	0x50
 10077 0a02 00000000 		.4byte	0
 10078 0a06 00000000 		.4byte	0
 10079              	.LLST69:
 10080 0a0a 1C000000 		.4byte	.LVL234
 10081 0a0e 7A000000 		.4byte	.LVL237
 10082 0a12 0100     		.2byte	0x1
 10083 0a14 53       		.byte	0x53
 10084 0a15 00000000 		.4byte	0
 10085 0a19 00000000 		.4byte	0
 10086              	.LLST70:
 10087 0a1d 38000000 		.4byte	.LVL236
 10088 0a21 7A000000 		.4byte	.LVL237
 10089 0a25 0B00     		.2byte	0xb
 10090 0a27 73       		.byte	0x73
 10091 0a28 00       		.sleb128 0
 10092 0a29 44       		.byte	0x44
 10093 0a2a 1E       		.byte	0x1e
 10094 0a2b 03       		.byte	0x3
 10095 0a2c 30000000 		.4byte	pxReadyTasksLists
 10096 0a30 22       		.byte	0x22
 10097 0a31 9F       		.byte	0x9f
 10098 0a32 00000000 		.4byte	0
 10099 0a36 00000000 		.4byte	0
 10100              	.LLST71:
 10101 0a3a 00000000 		.4byte	.LVL238
 10102 0a3e 07000000 		.4byte	.LVL239-1
 10103 0a42 0100     		.2byte	0x1
 10104 0a44 50       		.byte	0x50
 10105 0a45 07000000 		.4byte	.LVL239-1
 10106 0a49 10000000 		.4byte	.LVL240
 10107 0a4d 0100     		.2byte	0x1
 10108 0a4f 54       		.byte	0x54
 10109 0a50 00000000 		.4byte	0
 10110 0a54 00000000 		.4byte	0
 10111              	.LLST72:
 10112 0a58 10000000 		.4byte	.LVL240
 10113 0a5c 8E000000 		.4byte	.LVL250
 10114 0a60 0100     		.2byte	0x1
 10115 0a62 54       		.byte	0x54
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 279


 10116 0a63 8E000000 		.4byte	.LVL250
 10117 0a67 8E000000 		.4byte	.LVL251
 10118 0a6b 0300     		.2byte	0x3
 10119 0a6d 75       		.byte	0x75
 10120 0a6e 7C       		.sleb128 -4
 10121 0a6f 9F       		.byte	0x9f
 10122 0a70 00000000 		.4byte	0
 10123 0a74 00000000 		.4byte	0
 10124              	.LLST73:
 10125 0a78 00000000 		.4byte	.LVL252
 10126 0a7c 15000000 		.4byte	.LVL254-1
 10127 0a80 0100     		.2byte	0x1
 10128 0a82 50       		.byte	0x50
 10129 0a83 15000000 		.4byte	.LVL254-1
 10130 0a87 24000000 		.4byte	.LFE55
 10131 0a8b 0400     		.2byte	0x4
 10132 0a8d F3       		.byte	0xf3
 10133 0a8e 01       		.uleb128 0x1
 10134 0a8f 50       		.byte	0x50
 10135 0a90 9F       		.byte	0x9f
 10136 0a91 00000000 		.4byte	0
 10137 0a95 00000000 		.4byte	0
 10138              	.LLST74:
 10139 0a99 00000000 		.4byte	.LVL252
 10140 0a9d 10000000 		.4byte	.LVL253
 10141 0aa1 0100     		.2byte	0x1
 10142 0aa3 51       		.byte	0x51
 10143 0aa4 10000000 		.4byte	.LVL253
 10144 0aa8 1E000000 		.4byte	.LVL256
 10145 0aac 0100     		.2byte	0x1
 10146 0aae 54       		.byte	0x54
 10147 0aaf 1E000000 		.4byte	.LVL256
 10148 0ab3 24000000 		.4byte	.LFE55
 10149 0ab7 0400     		.2byte	0x4
 10150 0ab9 F3       		.byte	0xf3
 10151 0aba 01       		.uleb128 0x1
 10152 0abb 51       		.byte	0x51
 10153 0abc 9F       		.byte	0x9f
 10154 0abd 00000000 		.4byte	0
 10155 0ac1 00000000 		.4byte	0
 10156              	.LLST75:
 10157 0ac5 00000000 		.4byte	.LVL257
 10158 0ac9 2B000000 		.4byte	.LVL260-1
 10159 0acd 0100     		.2byte	0x1
 10160 0acf 50       		.byte	0x50
 10161 0ad0 2B000000 		.4byte	.LVL260-1
 10162 0ad4 3C000000 		.4byte	.LFE56
 10163 0ad8 0400     		.2byte	0x4
 10164 0ada F3       		.byte	0xf3
 10165 0adb 01       		.uleb128 0x1
 10166 0adc 50       		.byte	0x50
 10167 0add 9F       		.byte	0x9f
 10168 0ade 00000000 		.4byte	0
 10169 0ae2 00000000 		.4byte	0
 10170              	.LLST76:
 10171 0ae6 00000000 		.4byte	.LVL257
 10172 0aea 22000000 		.4byte	.LVL259
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 280


 10173 0aee 0100     		.2byte	0x1
 10174 0af0 51       		.byte	0x51
 10175 0af1 22000000 		.4byte	.LVL259
 10176 0af5 3C000000 		.4byte	.LFE56
 10177 0af9 0400     		.2byte	0x4
 10178 0afb F3       		.byte	0xf3
 10179 0afc 01       		.uleb128 0x1
 10180 0afd 51       		.byte	0x51
 10181 0afe 9F       		.byte	0x9f
 10182 0aff 00000000 		.4byte	0
 10183 0b03 00000000 		.4byte	0
 10184              	.LLST77:
 10185 0b07 00000000 		.4byte	.LVL257
 10186 0b0b 1C000000 		.4byte	.LVL258
 10187 0b0f 0100     		.2byte	0x1
 10188 0b11 52       		.byte	0x52
 10189 0b12 1C000000 		.4byte	.LVL258
 10190 0b16 34000000 		.4byte	.LVL262
 10191 0b1a 0100     		.2byte	0x1
 10192 0b1c 54       		.byte	0x54
 10193 0b1d 34000000 		.4byte	.LVL262
 10194 0b21 3C000000 		.4byte	.LFE56
 10195 0b25 0400     		.2byte	0x4
 10196 0b27 F3       		.byte	0xf3
 10197 0b28 01       		.uleb128 0x1
 10198 0b29 52       		.byte	0x52
 10199 0b2a 9F       		.byte	0x9f
 10200 0b2b 00000000 		.4byte	0
 10201 0b2f 00000000 		.4byte	0
 10202              	.LLST78:
 10203 0b33 00000000 		.4byte	.LVL263
 10204 0b37 14000000 		.4byte	.LVL265
 10205 0b3b 0100     		.2byte	0x1
 10206 0b3d 50       		.byte	0x50
 10207 0b3e 14000000 		.4byte	.LVL265
 10208 0b42 7C000000 		.4byte	.LFE57
 10209 0b46 0400     		.2byte	0x4
 10210 0b48 F3       		.byte	0xf3
 10211 0b49 01       		.uleb128 0x1
 10212 0b4a 50       		.byte	0x50
 10213 0b4b 9F       		.byte	0x9f
 10214 0b4c 00000000 		.4byte	0
 10215 0b50 00000000 		.4byte	0
 10216              	.LLST79:
 10217 0b54 06000000 		.4byte	.LVL264
 10218 0b58 6C000000 		.4byte	.LVL273
 10219 0b5c 0100     		.2byte	0x1
 10220 0b5e 54       		.byte	0x54
 10221 0b5f 00000000 		.4byte	0
 10222 0b63 00000000 		.4byte	0
 10223              	.LLST80:
 10224 0b67 60000000 		.4byte	.LVL270
 10225 0b6b 6A000000 		.4byte	.LVL271
 10226 0b6f 0200     		.2byte	0x2
 10227 0b71 31       		.byte	0x31
 10228 0b72 9F       		.byte	0x9f
 10229 0b73 6C000000 		.4byte	.LVL272
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 281


 10230 0b77 7C000000 		.4byte	.LFE57
 10231 0b7b 0100     		.2byte	0x1
 10232 0b7d 50       		.byte	0x50
 10233 0b7e 00000000 		.4byte	0
 10234 0b82 00000000 		.4byte	0
 10235              	.LLST81:
 10236 0b86 00000000 		.4byte	.LVL274
 10237 0b8a 23000000 		.4byte	.LVL277-1
 10238 0b8e 0100     		.2byte	0x1
 10239 0b90 50       		.byte	0x50
 10240 0b91 23000000 		.4byte	.LVL277-1
 10241 0b95 6C000000 		.4byte	.LFE58
 10242 0b99 0400     		.2byte	0x4
 10243 0b9b F3       		.byte	0xf3
 10244 0b9c 01       		.uleb128 0x1
 10245 0b9d 50       		.byte	0x50
 10246 0b9e 9F       		.byte	0x9f
 10247 0b9f 00000000 		.4byte	0
 10248 0ba3 00000000 		.4byte	0
 10249              	.LLST82:
 10250 0ba7 00000000 		.4byte	.LVL274
 10251 0bab 14000000 		.4byte	.LVL275
 10252 0baf 0100     		.2byte	0x1
 10253 0bb1 51       		.byte	0x51
 10254 0bb2 14000000 		.4byte	.LVL275
 10255 0bb6 6C000000 		.4byte	.LFE58
 10256 0bba 0400     		.2byte	0x4
 10257 0bbc F3       		.byte	0xf3
 10258 0bbd 01       		.uleb128 0x1
 10259 0bbe 51       		.byte	0x51
 10260 0bbf 9F       		.byte	0x9f
 10261 0bc0 00000000 		.4byte	0
 10262 0bc4 00000000 		.4byte	0
 10263              	.LLST83:
 10264 0bc8 18000000 		.4byte	.LVL276
 10265 0bcc 5E000000 		.4byte	.LVL280
 10266 0bd0 0100     		.2byte	0x1
 10267 0bd2 54       		.byte	0x54
 10268 0bd3 5E000000 		.4byte	.LVL280
 10269 0bd7 5E000000 		.4byte	.LVL281
 10270 0bdb 0300     		.2byte	0x3
 10271 0bdd 75       		.byte	0x75
 10272 0bde 7C       		.sleb128 -4
 10273 0bdf 9F       		.byte	0x9f
 10274 0be0 00000000 		.4byte	0
 10275 0be4 00000000 		.4byte	0
 10276              	.LLST84:
 10277 0be8 00000000 		.4byte	.LVL282
 10278 0bec 0D000000 		.4byte	.LVL283-1
 10279 0bf0 0100     		.2byte	0x1
 10280 0bf2 50       		.byte	0x50
 10281 0bf3 0D000000 		.4byte	.LVL283-1
 10282 0bf7 1C000000 		.4byte	.LVL285
 10283 0bfb 0100     		.2byte	0x1
 10284 0bfd 54       		.byte	0x54
 10285 0bfe 1C000000 		.4byte	.LVL285
 10286 0c02 24000000 		.4byte	.LFE59
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 282


 10287 0c06 0400     		.2byte	0x4
 10288 0c08 F3       		.byte	0xf3
 10289 0c09 01       		.uleb128 0x1
 10290 0c0a 50       		.byte	0x50
 10291 0c0b 9F       		.byte	0x9f
 10292 0c0c 00000000 		.4byte	0
 10293 0c10 00000000 		.4byte	0
 10294              	.LLST85:
 10295 0c14 00000000 		.4byte	.LVL287
 10296 0c18 19000000 		.4byte	.LVL288-1
 10297 0c1c 0100     		.2byte	0x1
 10298 0c1e 50       		.byte	0x50
 10299 0c1f 19000000 		.4byte	.LVL288-1
 10300 0c23 5C000000 		.4byte	.LVL303
 10301 0c27 0100     		.2byte	0x1
 10302 0c29 55       		.byte	0x55
 10303 0c2a 5C000000 		.4byte	.LVL303
 10304 0c2e 64000000 		.4byte	.LFE61
 10305 0c32 0400     		.2byte	0x4
 10306 0c34 F3       		.byte	0xf3
 10307 0c35 01       		.uleb128 0x1
 10308 0c36 50       		.byte	0x50
 10309 0c37 9F       		.byte	0x9f
 10310 0c38 00000000 		.4byte	0
 10311 0c3c 00000000 		.4byte	0
 10312              	.LLST86:
 10313 0c40 00000000 		.4byte	.LVL287
 10314 0c44 19000000 		.4byte	.LVL288-1
 10315 0c48 0100     		.2byte	0x1
 10316 0c4a 51       		.byte	0x51
 10317 0c4b 19000000 		.4byte	.LVL288-1
 10318 0c4f 46000000 		.4byte	.LVL293
 10319 0c53 0100     		.2byte	0x1
 10320 0c55 54       		.byte	0x54
 10321 0c56 46000000 		.4byte	.LVL293
 10322 0c5a 48000000 		.4byte	.LVL294
 10323 0c5e 0400     		.2byte	0x4
 10324 0c60 F3       		.byte	0xf3
 10325 0c61 01       		.uleb128 0x1
 10326 0c62 51       		.byte	0x51
 10327 0c63 9F       		.byte	0x9f
 10328 0c64 48000000 		.4byte	.LVL294
 10329 0c68 4E000000 		.4byte	.LVL296
 10330 0c6c 0100     		.2byte	0x1
 10331 0c6e 54       		.byte	0x54
 10332 0c6f 4E000000 		.4byte	.LVL296
 10333 0c73 50000000 		.4byte	.LVL297
 10334 0c77 0400     		.2byte	0x4
 10335 0c79 F3       		.byte	0xf3
 10336 0c7a 01       		.uleb128 0x1
 10337 0c7b 51       		.byte	0x51
 10338 0c7c 9F       		.byte	0x9f
 10339 0c7d 50000000 		.4byte	.LVL297
 10340 0c81 52000000 		.4byte	.LVL298
 10341 0c85 0100     		.2byte	0x1
 10342 0c87 54       		.byte	0x54
 10343 0c88 52000000 		.4byte	.LVL298
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 283


 10344 0c8c 54000000 		.4byte	.LVL299
 10345 0c90 0400     		.2byte	0x4
 10346 0c92 F3       		.byte	0xf3
 10347 0c93 01       		.uleb128 0x1
 10348 0c94 51       		.byte	0x51
 10349 0c95 9F       		.byte	0x9f
 10350 0c96 54000000 		.4byte	.LVL299
 10351 0c9a 56000000 		.4byte	.LVL300
 10352 0c9e 0100     		.2byte	0x1
 10353 0ca0 54       		.byte	0x54
 10354 0ca1 56000000 		.4byte	.LVL300
 10355 0ca5 64000000 		.4byte	.LFE61
 10356 0ca9 0400     		.2byte	0x4
 10357 0cab F3       		.byte	0xf3
 10358 0cac 01       		.uleb128 0x1
 10359 0cad 51       		.byte	0x51
 10360 0cae 9F       		.byte	0x9f
 10361 0caf 00000000 		.4byte	0
 10362 0cb3 00000000 		.4byte	0
 10363              	.LLST87:
 10364 0cb7 44000000 		.4byte	.LVL292
 10365 0cbb 48000000 		.4byte	.LVL294
 10366 0cbf 0200     		.2byte	0x2
 10367 0cc1 30       		.byte	0x30
 10368 0cc2 9F       		.byte	0x9f
 10369 0cc3 4C000000 		.4byte	.LVL295
 10370 0cc7 50000000 		.4byte	.LVL297
 10371 0ccb 0200     		.2byte	0x2
 10372 0ccd 31       		.byte	0x31
 10373 0cce 9F       		.byte	0x9f
 10374 0ccf 56000000 		.4byte	.LVL300
 10375 0cd3 5C000000 		.4byte	.LVL302
 10376 0cd7 0100     		.2byte	0x1
 10377 0cd9 54       		.byte	0x54
 10378 0cda 5C000000 		.4byte	.LVL302
 10379 0cde 64000000 		.4byte	.LFE61
 10380 0ce2 0100     		.2byte	0x1
 10381 0ce4 50       		.byte	0x50
 10382 0ce5 00000000 		.4byte	0
 10383 0ce9 00000000 		.4byte	0
 10384              	.LLST88:
 10385 0ced 1E000000 		.4byte	.LVL289
 10386 0cf1 40000000 		.4byte	.LVL291
 10387 0cf5 0100     		.2byte	0x1
 10388 0cf7 50       		.byte	0x50
 10389 0cf8 48000000 		.4byte	.LVL294
 10390 0cfc 56000000 		.4byte	.LVL300
 10391 0d00 0100     		.2byte	0x1
 10392 0d02 50       		.byte	0x50
 10393 0d03 00000000 		.4byte	0
 10394 0d07 00000000 		.4byte	0
 10395              	.LLST89:
 10396 0d0b 22000000 		.4byte	.LVL290
 10397 0d0f 43000000 		.4byte	.LVL292-1
 10398 0d13 0100     		.2byte	0x1
 10399 0d15 52       		.byte	0x52
 10400 0d16 48000000 		.4byte	.LVL294
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 284


 10401 0d1a 56000000 		.4byte	.LVL300
 10402 0d1e 0100     		.2byte	0x1
 10403 0d20 52       		.byte	0x52
 10404 0d21 00000000 		.4byte	0
 10405 0d25 00000000 		.4byte	0
 10406              	.LLST90:
 10407 0d29 00000000 		.4byte	.LVL304
 10408 0d2d 0C000000 		.4byte	.LVL305
 10409 0d31 0100     		.2byte	0x1
 10410 0d33 50       		.byte	0x50
 10411 0d34 00000000 		.4byte	0
 10412 0d38 00000000 		.4byte	0
 10413              	.LLST91:
 10414 0d3c 00000000 		.4byte	.LVL304
 10415 0d40 0E000000 		.4byte	.LVL306
 10416 0d44 0100     		.2byte	0x1
 10417 0d46 51       		.byte	0x51
 10418 0d47 0E000000 		.4byte	.LVL306
 10419 0d4b 10000000 		.4byte	.LVL307
 10420 0d4f 0300     		.2byte	0x3
 10421 0d51 71       		.byte	0x71
 10422 0d52 6E       		.sleb128 -18
 10423 0d53 9F       		.byte	0x9f
 10424 0d54 10000000 		.4byte	.LVL307
 10425 0d58 1C000000 		.4byte	.LFE64
 10426 0d5c 0400     		.2byte	0x4
 10427 0d5e F3       		.byte	0xf3
 10428 0d5f 01       		.uleb128 0x1
 10429 0d60 51       		.byte	0x51
 10430 0d61 9F       		.byte	0x9f
 10431 0d62 00000000 		.4byte	0
 10432 0d66 00000000 		.4byte	0
 10433              	.LLST92:
 10434 0d6a 0C000000 		.4byte	.LVL305
 10435 0d6e 12000000 		.4byte	.LVL308
 10436 0d72 0100     		.2byte	0x1
 10437 0d74 50       		.byte	0x50
 10438 0d75 00000000 		.4byte	0
 10439 0d79 00000000 		.4byte	0
 10440              	.LLST93:
 10441 0d7d 00000000 		.4byte	.LVL309
 10442 0d81 0C000000 		.4byte	.LVL310
 10443 0d85 0100     		.2byte	0x1
 10444 0d87 50       		.byte	0x50
 10445 0d88 16000000 		.4byte	.LVL315
 10446 0d8c 18000000 		.4byte	.LVL316
 10447 0d90 0100     		.2byte	0x1
 10448 0d92 50       		.byte	0x50
 10449 0d93 00000000 		.4byte	0
 10450 0d97 00000000 		.4byte	0
 10451              	.LLST94:
 10452 0d9b 00000000 		.4byte	.LVL309
 10453 0d9f 0E000000 		.4byte	.LVL311
 10454 0da3 0100     		.2byte	0x1
 10455 0da5 51       		.byte	0x51
 10456 0da6 0E000000 		.4byte	.LVL311
 10457 0daa 10000000 		.4byte	.LVL312
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 285


 10458 0dae 0300     		.2byte	0x3
 10459 0db0 71       		.byte	0x71
 10460 0db1 6E       		.sleb128 -18
 10461 0db2 9F       		.byte	0x9f
 10462 0db3 10000000 		.4byte	.LVL312
 10463 0db7 16000000 		.4byte	.LVL315
 10464 0dbb 0400     		.2byte	0x4
 10465 0dbd F3       		.byte	0xf3
 10466 0dbe 01       		.uleb128 0x1
 10467 0dbf 51       		.byte	0x51
 10468 0dc0 9F       		.byte	0x9f
 10469 0dc1 16000000 		.4byte	.LVL315
 10470 0dc5 18000000 		.4byte	.LVL316
 10471 0dc9 0100     		.2byte	0x1
 10472 0dcb 51       		.byte	0x51
 10473 0dcc 18000000 		.4byte	.LVL316
 10474 0dd0 20000000 		.4byte	.LFE65
 10475 0dd4 0400     		.2byte	0x4
 10476 0dd6 F3       		.byte	0xf3
 10477 0dd7 01       		.uleb128 0x1
 10478 0dd8 51       		.byte	0x51
 10479 0dd9 9F       		.byte	0x9f
 10480 0dda 00000000 		.4byte	0
 10481 0dde 00000000 		.4byte	0
 10482              	.LLST95:
 10483 0de2 00000000 		.4byte	.LVL309
 10484 0de6 14000000 		.4byte	.LVL314
 10485 0dea 0200     		.2byte	0x2
 10486 0dec 30       		.byte	0x30
 10487 0ded 9F       		.byte	0x9f
 10488 0dee 14000000 		.4byte	.LVL314
 10489 0df2 16000000 		.4byte	.LVL315
 10490 0df6 0100     		.2byte	0x1
 10491 0df8 50       		.byte	0x50
 10492 0df9 16000000 		.4byte	.LVL315
 10493 0dfd 18000000 		.4byte	.LVL316
 10494 0e01 0200     		.2byte	0x2
 10495 0e03 30       		.byte	0x30
 10496 0e04 9F       		.byte	0x9f
 10497 0e05 18000000 		.4byte	.LVL316
 10498 0e09 20000000 		.4byte	.LFE65
 10499 0e0d 0100     		.2byte	0x1
 10500 0e0f 50       		.byte	0x50
 10501 0e10 00000000 		.4byte	0
 10502 0e14 00000000 		.4byte	0
 10503              	.LLST96:
 10504 0e18 0C000000 		.4byte	.LVL310
 10505 0e1c 12000000 		.4byte	.LVL313
 10506 0e20 0100     		.2byte	0x1
 10507 0e22 50       		.byte	0x50
 10508 0e23 00000000 		.4byte	0
 10509 0e27 00000000 		.4byte	0
 10510              	.LLST97:
 10511 0e2b 00000000 		.4byte	.LVL317
 10512 0e2f 0A000000 		.4byte	.LVL318
 10513 0e33 0100     		.2byte	0x1
 10514 0e35 50       		.byte	0x50
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 286


 10515 0e36 00000000 		.4byte	0
 10516 0e3a 00000000 		.4byte	0
 10517              	.LLST98:
 10518 0e3e 0A000000 		.4byte	.LVL318
 10519 0e42 0C000000 		.4byte	.LVL319
 10520 0e46 0100     		.2byte	0x1
 10521 0e48 50       		.byte	0x50
 10522 0e49 00000000 		.4byte	0
 10523 0e4d 00000000 		.4byte	0
 10524              	.LLST99:
 10525 0e51 0C000000 		.4byte	.LVL319
 10526 0e55 0F000000 		.4byte	.LVL320-1
 10527 0e59 0100     		.2byte	0x1
 10528 0e5b 50       		.byte	0x50
 10529 0e5c 00000000 		.4byte	0
 10530 0e60 00000000 		.4byte	0
 10531              	.LLST100:
 10532 0e64 00000000 		.4byte	.LVL323
 10533 0e68 44000000 		.4byte	.LVL325
 10534 0e6c 0100     		.2byte	0x1
 10535 0e6e 50       		.byte	0x50
 10536 0e6f 44000000 		.4byte	.LVL325
 10537 0e73 70000000 		.4byte	.LVL328
 10538 0e77 0100     		.2byte	0x1
 10539 0e79 54       		.byte	0x54
 10540 0e7a 70000000 		.4byte	.LVL328
 10541 0e7e 7A000000 		.4byte	.LVL329
 10542 0e82 0100     		.2byte	0x1
 10543 0e84 50       		.byte	0x50
 10544 0e85 7A000000 		.4byte	.LVL329
 10545 0e89 7C000000 		.4byte	.LVL330
 10546 0e8d 0100     		.2byte	0x1
 10547 0e8f 54       		.byte	0x54
 10548 0e90 7C000000 		.4byte	.LVL330
 10549 0e94 8A000000 		.4byte	.LVL331
 10550 0e98 0100     		.2byte	0x1
 10551 0e9a 50       		.byte	0x50
 10552 0e9b 8A000000 		.4byte	.LVL331
 10553 0e9f 8C000000 		.4byte	.LVL332
 10554 0ea3 0100     		.2byte	0x1
 10555 0ea5 54       		.byte	0x54
 10556 0ea6 8C000000 		.4byte	.LVL332
 10557 0eaa 8E000000 		.4byte	.LVL333
 10558 0eae 0100     		.2byte	0x1
 10559 0eb0 50       		.byte	0x50
 10560 0eb1 8E000000 		.4byte	.LVL333
 10561 0eb5 90000000 		.4byte	.LVL334
 10562 0eb9 0100     		.2byte	0x1
 10563 0ebb 54       		.byte	0x54
 10564 0ebc 90000000 		.4byte	.LVL334
 10565 0ec0 92000000 		.4byte	.LVL335
 10566 0ec4 0100     		.2byte	0x1
 10567 0ec6 50       		.byte	0x50
 10568 0ec7 92000000 		.4byte	.LVL335
 10569 0ecb 92000000 		.4byte	.LVL336
 10570 0ecf 0100     		.2byte	0x1
 10571 0ed1 54       		.byte	0x54
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 287


 10572 0ed2 92000000 		.4byte	.LVL336
 10573 0ed6 9C000000 		.4byte	.LFE74
 10574 0eda 0400     		.2byte	0x4
 10575 0edc F3       		.byte	0xf3
 10576 0edd 01       		.uleb128 0x1
 10577 0ede 50       		.byte	0x50
 10578 0edf 9F       		.byte	0x9f
 10579 0ee0 00000000 		.4byte	0
 10580 0ee4 00000000 		.4byte	0
 10581              	.LLST101:
 10582 0ee8 04000000 		.4byte	.LVL324
 10583 0eec 44000000 		.4byte	.LVL325
 10584 0ef0 0100     		.2byte	0x1
 10585 0ef2 50       		.byte	0x50
 10586 0ef3 44000000 		.4byte	.LVL325
 10587 0ef7 70000000 		.4byte	.LVL328
 10588 0efb 0100     		.2byte	0x1
 10589 0efd 54       		.byte	0x54
 10590 0efe 70000000 		.4byte	.LVL328
 10591 0f02 7A000000 		.4byte	.LVL329
 10592 0f06 0100     		.2byte	0x1
 10593 0f08 50       		.byte	0x50
 10594 0f09 7A000000 		.4byte	.LVL329
 10595 0f0d 7C000000 		.4byte	.LVL330
 10596 0f11 0100     		.2byte	0x1
 10597 0f13 54       		.byte	0x54
 10598 0f14 7C000000 		.4byte	.LVL330
 10599 0f18 8A000000 		.4byte	.LVL331
 10600 0f1c 0100     		.2byte	0x1
 10601 0f1e 50       		.byte	0x50
 10602 0f1f 8A000000 		.4byte	.LVL331
 10603 0f23 8C000000 		.4byte	.LVL332
 10604 0f27 0100     		.2byte	0x1
 10605 0f29 54       		.byte	0x54
 10606 0f2a 8C000000 		.4byte	.LVL332
 10607 0f2e 8E000000 		.4byte	.LVL333
 10608 0f32 0100     		.2byte	0x1
 10609 0f34 50       		.byte	0x50
 10610 0f35 8E000000 		.4byte	.LVL333
 10611 0f39 90000000 		.4byte	.LVL334
 10612 0f3d 0100     		.2byte	0x1
 10613 0f3f 54       		.byte	0x54
 10614 0f40 90000000 		.4byte	.LVL334
 10615 0f44 92000000 		.4byte	.LVL335
 10616 0f48 0100     		.2byte	0x1
 10617 0f4a 50       		.byte	0x50
 10618 0f4b 92000000 		.4byte	.LVL335
 10619 0f4f 92000000 		.4byte	.LVL336
 10620 0f53 0100     		.2byte	0x1
 10621 0f55 54       		.byte	0x54
 10622 0f56 92000000 		.4byte	.LVL336
 10623 0f5a 9C000000 		.4byte	.LFE74
 10624 0f5e 0400     		.2byte	0x4
 10625 0f60 F3       		.byte	0xf3
 10626 0f61 01       		.uleb128 0x1
 10627 0f62 50       		.byte	0x50
 10628 0f63 9F       		.byte	0x9f
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 288


 10629 0f64 00000000 		.4byte	0
 10630 0f68 00000000 		.4byte	0
 10631              	.LLST102:
 10632 0f6c 04000000 		.4byte	.LVL324
 10633 0f70 92000000 		.4byte	.LVL335
 10634 0f74 0200     		.2byte	0x2
 10635 0f76 30       		.byte	0x30
 10636 0f77 9F       		.byte	0x9f
 10637 0f78 92000000 		.4byte	.LVL335
 10638 0f7c 9C000000 		.4byte	.LFE74
 10639 0f80 0100     		.2byte	0x1
 10640 0f82 50       		.byte	0x50
 10641 0f83 00000000 		.4byte	0
 10642 0f87 00000000 		.4byte	0
 10643              	.LLST103:
 10644 0f8b 00000000 		.4byte	.LVL337
 10645 0f8f 30000000 		.4byte	.LVL339
 10646 0f93 0100     		.2byte	0x1
 10647 0f95 50       		.byte	0x50
 10648 0f96 30000000 		.4byte	.LVL339
 10649 0f9a 60000000 		.4byte	.LVL342
 10650 0f9e 0100     		.2byte	0x1
 10651 0fa0 54       		.byte	0x54
 10652 0fa1 60000000 		.4byte	.LVL342
 10653 0fa5 62000000 		.4byte	.LVL343
 10654 0fa9 0100     		.2byte	0x1
 10655 0fab 50       		.byte	0x50
 10656 0fac 62000000 		.4byte	.LVL343
 10657 0fb0 64000000 		.4byte	.LVL344
 10658 0fb4 0100     		.2byte	0x1
 10659 0fb6 54       		.byte	0x54
 10660 0fb7 64000000 		.4byte	.LVL344
 10661 0fbb 66000000 		.4byte	.LVL345
 10662 0fbf 0100     		.2byte	0x1
 10663 0fc1 50       		.byte	0x50
 10664 0fc2 66000000 		.4byte	.LVL345
 10665 0fc6 68000000 		.4byte	.LVL346
 10666 0fca 0100     		.2byte	0x1
 10667 0fcc 54       		.byte	0x54
 10668 0fcd 68000000 		.4byte	.LVL346
 10669 0fd1 6A000000 		.4byte	.LVL347
 10670 0fd5 0100     		.2byte	0x1
 10671 0fd7 50       		.byte	0x50
 10672 0fd8 6A000000 		.4byte	.LVL347
 10673 0fdc 6A000000 		.4byte	.LVL348
 10674 0fe0 0100     		.2byte	0x1
 10675 0fe2 54       		.byte	0x54
 10676 0fe3 6A000000 		.4byte	.LVL348
 10677 0fe7 74000000 		.4byte	.LFE75
 10678 0feb 0400     		.2byte	0x4
 10679 0fed F3       		.byte	0xf3
 10680 0fee 01       		.uleb128 0x1
 10681 0fef 50       		.byte	0x50
 10682 0ff0 9F       		.byte	0x9f
 10683 0ff1 00000000 		.4byte	0
 10684 0ff5 00000000 		.4byte	0
 10685              	.LLST104:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 289


 10686 0ff9 04000000 		.4byte	.LVL338
 10687 0ffd 30000000 		.4byte	.LVL339
 10688 1001 0100     		.2byte	0x1
 10689 1003 50       		.byte	0x50
 10690 1004 30000000 		.4byte	.LVL339
 10691 1008 60000000 		.4byte	.LVL342
 10692 100c 0100     		.2byte	0x1
 10693 100e 54       		.byte	0x54
 10694 100f 60000000 		.4byte	.LVL342
 10695 1013 62000000 		.4byte	.LVL343
 10696 1017 0100     		.2byte	0x1
 10697 1019 50       		.byte	0x50
 10698 101a 62000000 		.4byte	.LVL343
 10699 101e 64000000 		.4byte	.LVL344
 10700 1022 0100     		.2byte	0x1
 10701 1024 54       		.byte	0x54
 10702 1025 64000000 		.4byte	.LVL344
 10703 1029 66000000 		.4byte	.LVL345
 10704 102d 0100     		.2byte	0x1
 10705 102f 50       		.byte	0x50
 10706 1030 66000000 		.4byte	.LVL345
 10707 1034 68000000 		.4byte	.LVL346
 10708 1038 0100     		.2byte	0x1
 10709 103a 54       		.byte	0x54
 10710 103b 68000000 		.4byte	.LVL346
 10711 103f 6A000000 		.4byte	.LVL347
 10712 1043 0100     		.2byte	0x1
 10713 1045 50       		.byte	0x50
 10714 1046 6A000000 		.4byte	.LVL347
 10715 104a 6A000000 		.4byte	.LVL348
 10716 104e 0100     		.2byte	0x1
 10717 1050 54       		.byte	0x54
 10718 1051 6A000000 		.4byte	.LVL348
 10719 1055 74000000 		.4byte	.LFE75
 10720 1059 0400     		.2byte	0x4
 10721 105b F3       		.byte	0xf3
 10722 105c 01       		.uleb128 0x1
 10723 105d 50       		.byte	0x50
 10724 105e 9F       		.byte	0x9f
 10725 105f 00000000 		.4byte	0
 10726 1063 00000000 		.4byte	0
 10727              	.LLST105:
 10728 1067 04000000 		.4byte	.LVL338
 10729 106b 5C000000 		.4byte	.LVL341
 10730 106f 0200     		.2byte	0x2
 10731 1071 30       		.byte	0x30
 10732 1072 9F       		.byte	0x9f
 10733 1073 5C000000 		.4byte	.LVL341
 10734 1077 60000000 		.4byte	.LVL342
 10735 107b 0200     		.2byte	0x2
 10736 107d 31       		.byte	0x31
 10737 107e 9F       		.byte	0x9f
 10738 107f 60000000 		.4byte	.LVL342
 10739 1083 6A000000 		.4byte	.LVL347
 10740 1087 0200     		.2byte	0x2
 10741 1089 30       		.byte	0x30
 10742 108a 9F       		.byte	0x9f
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 290


 10743 108b 6A000000 		.4byte	.LVL347
 10744 108f 74000000 		.4byte	.LFE75
 10745 1093 0100     		.2byte	0x1
 10746 1095 50       		.byte	0x50
 10747 1096 00000000 		.4byte	0
 10748 109a 00000000 		.4byte	0
 10749              	.LLST106:
 10750 109e 00000000 		.4byte	.LVL349
 10751 10a2 08000000 		.4byte	.LVL351
 10752 10a6 0100     		.2byte	0x1
 10753 10a8 50       		.byte	0x50
 10754 10a9 08000000 		.4byte	.LVL351
 10755 10ad 80000000 		.4byte	.LVL359
 10756 10b1 0100     		.2byte	0x1
 10757 10b3 54       		.byte	0x54
 10758 10b4 80000000 		.4byte	.LVL359
 10759 10b8 8C000000 		.4byte	.LFE76
 10760 10bc 0400     		.2byte	0x4
 10761 10be F3       		.byte	0xf3
 10762 10bf 01       		.uleb128 0x1
 10763 10c0 50       		.byte	0x50
 10764 10c1 9F       		.byte	0x9f
 10765 10c2 00000000 		.4byte	0
 10766 10c6 00000000 		.4byte	0
 10767              	.LLST107:
 10768 10ca 00000000 		.4byte	.LVL349
 10769 10ce 24000000 		.4byte	.LVL353
 10770 10d2 0100     		.2byte	0x1
 10771 10d4 51       		.byte	0x51
 10772 10d5 24000000 		.4byte	.LVL353
 10773 10d9 8C000000 		.4byte	.LFE76
 10774 10dd 0400     		.2byte	0x4
 10775 10df F3       		.byte	0xf3
 10776 10e0 01       		.uleb128 0x1
 10777 10e1 51       		.byte	0x51
 10778 10e2 9F       		.byte	0x9f
 10779 10e3 00000000 		.4byte	0
 10780 10e7 00000000 		.4byte	0
 10781              	.LLST108:
 10782 10eb 04000000 		.4byte	.LVL350
 10783 10ef 08000000 		.4byte	.LVL351
 10784 10f3 0100     		.2byte	0x1
 10785 10f5 50       		.byte	0x50
 10786 10f6 08000000 		.4byte	.LVL351
 10787 10fa 80000000 		.4byte	.LVL359
 10788 10fe 0100     		.2byte	0x1
 10789 1100 54       		.byte	0x54
 10790 1101 80000000 		.4byte	.LVL359
 10791 1105 8C000000 		.4byte	.LFE76
 10792 1109 0400     		.2byte	0x4
 10793 110b F3       		.byte	0xf3
 10794 110c 01       		.uleb128 0x1
 10795 110d 50       		.byte	0x50
 10796 110e 9F       		.byte	0x9f
 10797 110f 00000000 		.4byte	0
 10798 1113 00000000 		.4byte	0
 10799              	.LLST109:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 291


 10800 1117 2E000000 		.4byte	.LVL354
 10801 111b 40000000 		.4byte	.LVL356
 10802 111f 0100     		.2byte	0x1
 10803 1121 53       		.byte	0x53
 10804 1122 00000000 		.4byte	0
 10805 1126 00000000 		.4byte	0
 10806              	.LLST110:
 10807 112a 18000000 		.4byte	.LVL352
 10808 112e 3A000000 		.4byte	.LVL355
 10809 1132 0100     		.2byte	0x1
 10810 1134 52       		.byte	0x52
 10811 1135 3A000000 		.4byte	.LVL355
 10812 1139 5F000000 		.4byte	.LVL357-1
 10813 113d 0200     		.2byte	0x2
 10814 113f 74       		.byte	0x74
 10815 1140 2C       		.sleb128 44
 10816 1141 00000000 		.4byte	0
 10817 1145 00000000 		.4byte	0
 10818              	.LLST111:
 10819 1149 00000000 		.4byte	.LVL361
 10820 114d 09000000 		.4byte	.LVL362-1
 10821 1151 0100     		.2byte	0x1
 10822 1153 50       		.byte	0x50
 10823 1154 09000000 		.4byte	.LVL362-1
 10824 1158 64000000 		.4byte	.LVL370
 10825 115c 0100     		.2byte	0x1
 10826 115e 55       		.byte	0x55
 10827 115f 64000000 		.4byte	.LVL370
 10828 1163 6C000000 		.4byte	.LFE79
 10829 1167 0400     		.2byte	0x4
 10830 1169 F3       		.byte	0xf3
 10831 116a 01       		.uleb128 0x1
 10832 116b 50       		.byte	0x50
 10833 116c 9F       		.byte	0x9f
 10834 116d 00000000 		.4byte	0
 10835 1171 00000000 		.4byte	0
 10836              	.LLST112:
 10837 1175 00000000 		.4byte	.LVL361
 10838 1179 09000000 		.4byte	.LVL362-1
 10839 117d 0100     		.2byte	0x1
 10840 117f 51       		.byte	0x51
 10841 1180 09000000 		.4byte	.LVL362-1
 10842 1184 3A000000 		.4byte	.LVL367
 10843 1188 0100     		.2byte	0x1
 10844 118a 54       		.byte	0x54
 10845 118b 3A000000 		.4byte	.LVL367
 10846 118f 6C000000 		.4byte	.LFE79
 10847 1193 0400     		.2byte	0x4
 10848 1195 F3       		.byte	0xf3
 10849 1196 01       		.uleb128 0x1
 10850 1197 51       		.byte	0x51
 10851 1198 9F       		.byte	0x9f
 10852 1199 00000000 		.4byte	0
 10853 119d 00000000 		.4byte	0
 10854              	.LLST113:
 10855 11a1 3A000000 		.4byte	.LVL367
 10856 11a5 64000000 		.4byte	.LVL369
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 292


 10857 11a9 0100     		.2byte	0x1
 10858 11ab 54       		.byte	0x54
 10859 11ac 64000000 		.4byte	.LVL369
 10860 11b0 6C000000 		.4byte	.LFE79
 10861 11b4 0100     		.2byte	0x1
 10862 11b6 50       		.byte	0x50
 10863 11b7 00000000 		.4byte	0
 10864 11bb 00000000 		.4byte	0
 10865              	.LLST114:
 10866 11bf 00000000 		.4byte	.LVL371
 10867 11c3 0D000000 		.4byte	.LVL372-1
 10868 11c7 0100     		.2byte	0x1
 10869 11c9 50       		.byte	0x50
 10870 11ca 0D000000 		.4byte	.LVL372-1
 10871 11ce 7A000000 		.4byte	.LVL384
 10872 11d2 0100     		.2byte	0x1
 10873 11d4 56       		.byte	0x56
 10874 11d5 7A000000 		.4byte	.LVL384
 10875 11d9 80000000 		.4byte	.LFE80
 10876 11dd 0400     		.2byte	0x4
 10877 11df F3       		.byte	0xf3
 10878 11e0 01       		.uleb128 0x1
 10879 11e1 50       		.byte	0x50
 10880 11e2 9F       		.byte	0x9f
 10881 11e3 00000000 		.4byte	0
 10882 11e7 00000000 		.4byte	0
 10883              	.LLST115:
 10884 11eb 00000000 		.4byte	.LVL371
 10885 11ef 0D000000 		.4byte	.LVL372-1
 10886 11f3 0100     		.2byte	0x1
 10887 11f5 51       		.byte	0x51
 10888 11f6 0D000000 		.4byte	.LVL372-1
 10889 11fa 7A000000 		.4byte	.LVL383
 10890 11fe 0100     		.2byte	0x1
 10891 1200 55       		.byte	0x55
 10892 1201 7A000000 		.4byte	.LVL383
 10893 1205 80000000 		.4byte	.LFE80
 10894 1209 0400     		.2byte	0x4
 10895 120b F3       		.byte	0xf3
 10896 120c 01       		.uleb128 0x1
 10897 120d 51       		.byte	0x51
 10898 120e 9F       		.byte	0x9f
 10899 120f 00000000 		.4byte	0
 10900 1213 00000000 		.4byte	0
 10901              	.LLST116:
 10902 1217 00000000 		.4byte	.LVL371
 10903 121b 0D000000 		.4byte	.LVL372-1
 10904 121f 0100     		.2byte	0x1
 10905 1221 52       		.byte	0x52
 10906 1222 0D000000 		.4byte	.LVL372-1
 10907 1226 7A000000 		.4byte	.LVL385
 10908 122a 0100     		.2byte	0x1
 10909 122c 57       		.byte	0x57
 10910 122d 7A000000 		.4byte	.LVL385
 10911 1231 80000000 		.4byte	.LFE80
 10912 1235 0400     		.2byte	0x4
 10913 1237 F3       		.byte	0xf3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 293


 10914 1238 01       		.uleb128 0x1
 10915 1239 52       		.byte	0x52
 10916 123a 9F       		.byte	0x9f
 10917 123b 00000000 		.4byte	0
 10918 123f 00000000 		.4byte	0
 10919              	.LLST117:
 10920 1243 00000000 		.4byte	.LVL371
 10921 1247 0D000000 		.4byte	.LVL372-1
 10922 124b 0100     		.2byte	0x1
 10923 124d 53       		.byte	0x53
 10924 124e 0D000000 		.4byte	.LVL372-1
 10925 1252 66000000 		.4byte	.LVL378
 10926 1256 0100     		.2byte	0x1
 10927 1258 54       		.byte	0x54
 10928 1259 66000000 		.4byte	.LVL378
 10929 125d 68000000 		.4byte	.LVL379
 10930 1261 0400     		.2byte	0x4
 10931 1263 F3       		.byte	0xf3
 10932 1264 01       		.uleb128 0x1
 10933 1265 53       		.byte	0x53
 10934 1266 9F       		.byte	0x9f
 10935 1267 68000000 		.4byte	.LVL379
 10936 126b 6A000000 		.4byte	.LVL380
 10937 126f 0100     		.2byte	0x1
 10938 1271 54       		.byte	0x54
 10939 1272 6A000000 		.4byte	.LVL380
 10940 1276 80000000 		.4byte	.LFE80
 10941 127a 0400     		.2byte	0x4
 10942 127c F3       		.byte	0xf3
 10943 127d 01       		.uleb128 0x1
 10944 127e 53       		.byte	0x53
 10945 127f 9F       		.byte	0x9f
 10946 1280 00000000 		.4byte	0
 10947 1284 00000000 		.4byte	0
 10948              	.LLST118:
 10949 1288 64000000 		.4byte	.LVL377
 10950 128c 68000000 		.4byte	.LVL379
 10951 1290 0200     		.2byte	0x2
 10952 1292 31       		.byte	0x31
 10953 1293 9F       		.byte	0x9f
 10954 1294 6A000000 		.4byte	.LVL380
 10955 1298 7A000000 		.4byte	.LVL382
 10956 129c 0100     		.2byte	0x1
 10957 129e 54       		.byte	0x54
 10958 129f 7A000000 		.4byte	.LVL382
 10959 12a3 80000000 		.4byte	.LFE80
 10960 12a7 0100     		.2byte	0x1
 10961 12a9 50       		.byte	0x50
 10962 12aa 00000000 		.4byte	0
 10963 12ae 00000000 		.4byte	0
 10964              	.LLST119:
 10965 12b2 00000000 		.4byte	.LVL386
 10966 12b6 15000000 		.4byte	.LVL389-1
 10967 12ba 0100     		.2byte	0x1
 10968 12bc 50       		.byte	0x50
 10969 12bd 15000000 		.4byte	.LVL389-1
 10970 12c1 B4000000 		.4byte	.LVL406
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 294


 10971 12c5 0100     		.2byte	0x1
 10972 12c7 54       		.byte	0x54
 10973 12c8 B4000000 		.4byte	.LVL406
 10974 12cc C0000000 		.4byte	.LFE81
 10975 12d0 0400     		.2byte	0x4
 10976 12d2 F3       		.byte	0xf3
 10977 12d3 01       		.uleb128 0x1
 10978 12d4 50       		.byte	0x50
 10979 12d5 9F       		.byte	0x9f
 10980 12d6 00000000 		.4byte	0
 10981 12da 00000000 		.4byte	0
 10982              	.LLST120:
 10983 12de 00000000 		.4byte	.LVL386
 10984 12e2 15000000 		.4byte	.LVL389-1
 10985 12e6 0100     		.2byte	0x1
 10986 12e8 51       		.byte	0x51
 10987 12e9 15000000 		.4byte	.LVL389-1
 10988 12ed 42000000 		.4byte	.LVL391
 10989 12f1 0100     		.2byte	0x1
 10990 12f3 56       		.byte	0x56
 10991 12f4 42000000 		.4byte	.LVL391
 10992 12f8 48000000 		.4byte	.LVL392
 10993 12fc 0400     		.2byte	0x4
 10994 12fe F3       		.byte	0xf3
 10995 12ff 01       		.uleb128 0x1
 10996 1300 51       		.byte	0x51
 10997 1301 9F       		.byte	0x9f
 10998 1302 48000000 		.4byte	.LVL392
 10999 1306 50000000 		.4byte	.LVL393
 11000 130a 0100     		.2byte	0x1
 11001 130c 56       		.byte	0x56
 11002 130d 50000000 		.4byte	.LVL393
 11003 1311 52000000 		.4byte	.LVL394
 11004 1315 0400     		.2byte	0x4
 11005 1317 F3       		.byte	0xf3
 11006 1318 01       		.uleb128 0x1
 11007 1319 51       		.byte	0x51
 11008 131a 9F       		.byte	0x9f
 11009 131b 52000000 		.4byte	.LVL394
 11010 131f 56000000 		.4byte	.LVL395
 11011 1323 0100     		.2byte	0x1
 11012 1325 56       		.byte	0x56
 11013 1326 56000000 		.4byte	.LVL395
 11014 132a 58000000 		.4byte	.LVL396
 11015 132e 0300     		.2byte	0x3
 11016 1330 74       		.byte	0x74
 11017 1331 E000     		.sleb128 96
 11018 1333 58000000 		.4byte	.LVL396
 11019 1337 60000000 		.4byte	.LVL397
 11020 133b 0100     		.2byte	0x1
 11021 133d 56       		.byte	0x56
 11022 133e 60000000 		.4byte	.LVL397
 11023 1342 62000000 		.4byte	.LVL398
 11024 1346 0300     		.2byte	0x3
 11025 1348 74       		.byte	0x74
 11026 1349 E000     		.sleb128 96
 11027 134b 62000000 		.4byte	.LVL398
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 295


 11028 134f 64000000 		.4byte	.LVL399
 11029 1353 0100     		.2byte	0x1
 11030 1355 56       		.byte	0x56
 11031 1356 64000000 		.4byte	.LVL399
 11032 135a 66000000 		.4byte	.LVL400
 11033 135e 0400     		.2byte	0x4
 11034 1360 F3       		.byte	0xf3
 11035 1361 01       		.uleb128 0x1
 11036 1362 51       		.byte	0x51
 11037 1363 9F       		.byte	0x9f
 11038 1364 66000000 		.4byte	.LVL400
 11039 1368 68000000 		.4byte	.LVL401
 11040 136c 0100     		.2byte	0x1
 11041 136e 56       		.byte	0x56
 11042 136f 68000000 		.4byte	.LVL401
 11043 1373 C0000000 		.4byte	.LFE81
 11044 1377 0400     		.2byte	0x4
 11045 1379 F3       		.byte	0xf3
 11046 137a 01       		.uleb128 0x1
 11047 137b 51       		.byte	0x51
 11048 137c 9F       		.byte	0x9f
 11049 137d 00000000 		.4byte	0
 11050 1381 00000000 		.4byte	0
 11051              	.LLST121:
 11052 1385 00000000 		.4byte	.LVL386
 11053 1389 15000000 		.4byte	.LVL389-1
 11054 138d 0100     		.2byte	0x1
 11055 138f 52       		.byte	0x52
 11056 1390 15000000 		.4byte	.LVL389-1
 11057 1394 C0000000 		.4byte	.LFE81
 11058 1398 0400     		.2byte	0x4
 11059 139a F3       		.byte	0xf3
 11060 139b 01       		.uleb128 0x1
 11061 139c 52       		.byte	0x52
 11062 139d 9F       		.byte	0x9f
 11063 139e 00000000 		.4byte	0
 11064 13a2 00000000 		.4byte	0
 11065              	.LLST122:
 11066 13a6 00000000 		.4byte	.LVL386
 11067 13aa 15000000 		.4byte	.LVL389-1
 11068 13ae 0100     		.2byte	0x1
 11069 13b0 53       		.byte	0x53
 11070 13b1 15000000 		.4byte	.LVL389-1
 11071 13b5 B4000000 		.4byte	.LVL408
 11072 13b9 0100     		.2byte	0x1
 11073 13bb 57       		.byte	0x57
 11074 13bc B4000000 		.4byte	.LVL408
 11075 13c0 C0000000 		.4byte	.LFE81
 11076 13c4 0400     		.2byte	0x4
 11077 13c6 F3       		.byte	0xf3
 11078 13c7 01       		.uleb128 0x1
 11079 13c8 53       		.byte	0x53
 11080 13c9 9F       		.byte	0x9f
 11081 13ca 00000000 		.4byte	0
 11082 13ce 00000000 		.4byte	0
 11083              	.LLST123:
 11084 13d2 12000000 		.4byte	.LVL388
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 296


 11085 13d6 15000000 		.4byte	.LVL389-1
 11086 13da 0100     		.2byte	0x1
 11087 13dc 50       		.byte	0x50
 11088 13dd 15000000 		.4byte	.LVL389-1
 11089 13e1 B4000000 		.4byte	.LVL406
 11090 13e5 0100     		.2byte	0x1
 11091 13e7 54       		.byte	0x54
 11092 13e8 B4000000 		.4byte	.LVL406
 11093 13ec C0000000 		.4byte	.LFE81
 11094 13f0 0400     		.2byte	0x4
 11095 13f2 F3       		.byte	0xf3
 11096 13f3 01       		.uleb128 0x1
 11097 13f4 50       		.byte	0x50
 11098 13f5 9F       		.byte	0x9f
 11099 13f6 00000000 		.4byte	0
 11100 13fa 00000000 		.4byte	0
 11101              	.LLST124:
 11102 13fe 0A000000 		.4byte	.LVL387
 11103 1402 68000000 		.4byte	.LVL401
 11104 1406 0200     		.2byte	0x2
 11105 1408 31       		.byte	0x31
 11106 1409 9F       		.byte	0x9f
 11107 140a 68000000 		.4byte	.LVL401
 11108 140e B4000000 		.4byte	.LVL407
 11109 1412 0100     		.2byte	0x1
 11110 1414 56       		.byte	0x56
 11111 1415 B4000000 		.4byte	.LVL407
 11112 1419 C0000000 		.4byte	.LFE81
 11113 141d 0100     		.2byte	0x1
 11114 141f 50       		.byte	0x50
 11115 1420 00000000 		.4byte	0
 11116 1424 00000000 		.4byte	0
 11117              	.LLST125:
 11118 1428 24000000 		.4byte	.LVL390
 11119 142c 73000000 		.4byte	.LVL402-1
 11120 1430 0100     		.2byte	0x1
 11121 1432 53       		.byte	0x53
 11122 1433 00000000 		.4byte	0
 11123 1437 00000000 		.4byte	0
 11124              	.LLST126:
 11125 143b 00000000 		.4byte	.LVL409
 11126 143f 17000000 		.4byte	.LVL412-1
 11127 1443 0100     		.2byte	0x1
 11128 1445 50       		.byte	0x50
 11129 1446 17000000 		.4byte	.LVL412-1
 11130 144a E2000000 		.4byte	.LVL434
 11131 144e 0100     		.2byte	0x1
 11132 1450 54       		.byte	0x54
 11133 1451 E2000000 		.4byte	.LVL434
 11134 1455 F0000000 		.4byte	.LFE82
 11135 1459 0400     		.2byte	0x4
 11136 145b F3       		.byte	0xf3
 11137 145c 01       		.uleb128 0x1
 11138 145d 50       		.byte	0x50
 11139 145e 9F       		.byte	0x9f
 11140 145f 00000000 		.4byte	0
 11141 1463 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 297


 11142              	.LLST127:
 11143 1467 00000000 		.4byte	.LVL409
 11144 146b 17000000 		.4byte	.LVL412-1
 11145 146f 0100     		.2byte	0x1
 11146 1471 51       		.byte	0x51
 11147 1472 17000000 		.4byte	.LVL412-1
 11148 1476 4A000000 		.4byte	.LVL415
 11149 147a 0100     		.2byte	0x1
 11150 147c 57       		.byte	0x57
 11151 147d 4A000000 		.4byte	.LVL415
 11152 1481 4C000000 		.4byte	.LVL416
 11153 1485 0400     		.2byte	0x4
 11154 1487 F3       		.byte	0xf3
 11155 1488 01       		.uleb128 0x1
 11156 1489 51       		.byte	0x51
 11157 148a 9F       		.byte	0x9f
 11158 148b 4C000000 		.4byte	.LVL416
 11159 148f 54000000 		.4byte	.LVL417
 11160 1493 0100     		.2byte	0x1
 11161 1495 57       		.byte	0x57
 11162 1496 54000000 		.4byte	.LVL417
 11163 149a 56000000 		.4byte	.LVL418
 11164 149e 0400     		.2byte	0x4
 11165 14a0 F3       		.byte	0xf3
 11166 14a1 01       		.uleb128 0x1
 11167 14a2 51       		.byte	0x51
 11168 14a3 9F       		.byte	0x9f
 11169 14a4 56000000 		.4byte	.LVL418
 11170 14a8 5A000000 		.4byte	.LVL419
 11171 14ac 0100     		.2byte	0x1
 11172 14ae 57       		.byte	0x57
 11173 14af 5A000000 		.4byte	.LVL419
 11174 14b3 5C000000 		.4byte	.LVL420
 11175 14b7 0300     		.2byte	0x3
 11176 14b9 74       		.byte	0x74
 11177 14ba E000     		.sleb128 96
 11178 14bc 5C000000 		.4byte	.LVL420
 11179 14c0 64000000 		.4byte	.LVL421
 11180 14c4 0100     		.2byte	0x1
 11181 14c6 57       		.byte	0x57
 11182 14c7 64000000 		.4byte	.LVL421
 11183 14cb 66000000 		.4byte	.LVL422
 11184 14cf 0300     		.2byte	0x3
 11185 14d1 74       		.byte	0x74
 11186 14d2 E000     		.sleb128 96
 11187 14d4 66000000 		.4byte	.LVL422
 11188 14d8 68000000 		.4byte	.LVL423
 11189 14dc 0100     		.2byte	0x1
 11190 14de 57       		.byte	0x57
 11191 14df 68000000 		.4byte	.LVL423
 11192 14e3 6A000000 		.4byte	.LVL424
 11193 14e7 0400     		.2byte	0x4
 11194 14e9 F3       		.byte	0xf3
 11195 14ea 01       		.uleb128 0x1
 11196 14eb 51       		.byte	0x51
 11197 14ec 9F       		.byte	0x9f
 11198 14ed 6A000000 		.4byte	.LVL424
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 298


 11199 14f1 6C000000 		.4byte	.LVL425
 11200 14f5 0100     		.2byte	0x1
 11201 14f7 57       		.byte	0x57
 11202 14f8 6C000000 		.4byte	.LVL425
 11203 14fc F0000000 		.4byte	.LFE82
 11204 1500 0400     		.2byte	0x4
 11205 1502 F3       		.byte	0xf3
 11206 1503 01       		.uleb128 0x1
 11207 1504 51       		.byte	0x51
 11208 1505 9F       		.byte	0x9f
 11209 1506 00000000 		.4byte	0
 11210 150a 00000000 		.4byte	0
 11211              	.LLST128:
 11212 150e 00000000 		.4byte	.LVL409
 11213 1512 17000000 		.4byte	.LVL412-1
 11214 1516 0100     		.2byte	0x1
 11215 1518 52       		.byte	0x52
 11216 1519 17000000 		.4byte	.LVL412-1
 11217 151d F0000000 		.4byte	.LFE82
 11218 1521 0400     		.2byte	0x4
 11219 1523 F3       		.byte	0xf3
 11220 1524 01       		.uleb128 0x1
 11221 1525 52       		.byte	0x52
 11222 1526 9F       		.byte	0x9f
 11223 1527 00000000 		.4byte	0
 11224 152b 00000000 		.4byte	0
 11225              	.LLST129:
 11226 152f 00000000 		.4byte	.LVL409
 11227 1533 17000000 		.4byte	.LVL412-1
 11228 1537 0100     		.2byte	0x1
 11229 1539 53       		.byte	0x53
 11230 153a 17000000 		.4byte	.LVL412-1
 11231 153e E2000000 		.4byte	.LVL435
 11232 1542 0100     		.2byte	0x1
 11233 1544 55       		.byte	0x55
 11234 1545 E2000000 		.4byte	.LVL435
 11235 1549 F0000000 		.4byte	.LFE82
 11236 154d 0400     		.2byte	0x4
 11237 154f F3       		.byte	0xf3
 11238 1550 01       		.uleb128 0x1
 11239 1551 53       		.byte	0x53
 11240 1552 9F       		.byte	0x9f
 11241 1553 00000000 		.4byte	0
 11242 1557 00000000 		.4byte	0
 11243              	.LLST130:
 11244 155b 14000000 		.4byte	.LVL411
 11245 155f 17000000 		.4byte	.LVL412-1
 11246 1563 0100     		.2byte	0x1
 11247 1565 50       		.byte	0x50
 11248 1566 17000000 		.4byte	.LVL412-1
 11249 156a E2000000 		.4byte	.LVL434
 11250 156e 0100     		.2byte	0x1
 11251 1570 54       		.byte	0x54
 11252 1571 E2000000 		.4byte	.LVL434
 11253 1575 F0000000 		.4byte	.LFE82
 11254 1579 0400     		.2byte	0x4
 11255 157b F3       		.byte	0xf3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 299


 11256 157c 01       		.uleb128 0x1
 11257 157d 50       		.byte	0x50
 11258 157e 9F       		.byte	0x9f
 11259 157f 00000000 		.4byte	0
 11260 1583 00000000 		.4byte	0
 11261              	.LLST131:
 11262 1587 28000000 		.4byte	.LVL414
 11263 158b 72000000 		.4byte	.LVL426
 11264 158f 0100     		.2byte	0x1
 11265 1591 53       		.byte	0x53
 11266 1592 00000000 		.4byte	0
 11267 1596 00000000 		.4byte	0
 11268              	.LLST132:
 11269 159a 0C000000 		.4byte	.LVL410
 11270 159e 6C000000 		.4byte	.LVL425
 11271 15a2 0200     		.2byte	0x2
 11272 15a4 31       		.byte	0x31
 11273 15a5 9F       		.byte	0x9f
 11274 15a6 6C000000 		.4byte	.LVL425
 11275 15aa E2000000 		.4byte	.LVL436
 11276 15ae 0100     		.2byte	0x1
 11277 15b0 57       		.byte	0x57
 11278 15b1 E2000000 		.4byte	.LVL436
 11279 15b5 F0000000 		.4byte	.LFE82
 11280 15b9 0100     		.2byte	0x1
 11281 15bb 50       		.byte	0x50
 11282 15bc 00000000 		.4byte	0
 11283 15c0 00000000 		.4byte	0
 11284              	.LLST133:
 11285 15c4 1A000000 		.4byte	.LVL413
 11286 15c8 86000000 		.4byte	.LVL427
 11287 15cc 0100     		.2byte	0x1
 11288 15ce 50       		.byte	0x50
 11289 15cf 86000000 		.4byte	.LVL427
 11290 15d3 AC000000 		.4byte	.LVL430
 11291 15d7 0200     		.2byte	0x2
 11292 15d9 91       		.byte	0x91
 11293 15da 64       		.sleb128 -28
 11294 15db AC000000 		.4byte	.LVL430
 11295 15df B2000000 		.4byte	.LVL431
 11296 15e3 0100     		.2byte	0x1
 11297 15e5 50       		.byte	0x50
 11298 15e6 B2000000 		.4byte	.LVL431
 11299 15ea F0000000 		.4byte	.LFE82
 11300 15ee 0200     		.2byte	0x2
 11301 15f0 91       		.byte	0x91
 11302 15f1 64       		.sleb128 -28
 11303 15f2 00000000 		.4byte	0
 11304 15f6 00000000 		.4byte	0
 11305              	.LLST134:
 11306 15fa 00000000 		.4byte	.LVL437
 11307 15fe 11000000 		.4byte	.LVL439-1
 11308 1602 0100     		.2byte	0x1
 11309 1604 50       		.byte	0x50
 11310 1605 11000000 		.4byte	.LVL439-1
 11311 1609 90000000 		.4byte	.LVL449
 11312 160d 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 300


 11313 160f 54       		.byte	0x54
 11314 1610 90000000 		.4byte	.LVL449
 11315 1614 A0000000 		.4byte	.LFE83
 11316 1618 0400     		.2byte	0x4
 11317 161a F3       		.byte	0xf3
 11318 161b 01       		.uleb128 0x1
 11319 161c 50       		.byte	0x50
 11320 161d 9F       		.byte	0x9f
 11321 161e 00000000 		.4byte	0
 11322 1622 00000000 		.4byte	0
 11323              	.LLST135:
 11324 1626 00000000 		.4byte	.LVL437
 11325 162a 11000000 		.4byte	.LVL439-1
 11326 162e 0100     		.2byte	0x1
 11327 1630 51       		.byte	0x51
 11328 1631 11000000 		.4byte	.LVL439-1
 11329 1635 90000000 		.4byte	.LVL451
 11330 1639 0100     		.2byte	0x1
 11331 163b 57       		.byte	0x57
 11332 163c 90000000 		.4byte	.LVL451
 11333 1640 A0000000 		.4byte	.LFE83
 11334 1644 0400     		.2byte	0x4
 11335 1646 F3       		.byte	0xf3
 11336 1647 01       		.uleb128 0x1
 11337 1648 51       		.byte	0x51
 11338 1649 9F       		.byte	0x9f
 11339 164a 00000000 		.4byte	0
 11340 164e 00000000 		.4byte	0
 11341              	.LLST136:
 11342 1652 0E000000 		.4byte	.LVL438
 11343 1656 11000000 		.4byte	.LVL439-1
 11344 165a 0100     		.2byte	0x1
 11345 165c 50       		.byte	0x50
 11346 165d 11000000 		.4byte	.LVL439-1
 11347 1661 90000000 		.4byte	.LVL449
 11348 1665 0100     		.2byte	0x1
 11349 1667 54       		.byte	0x54
 11350 1668 90000000 		.4byte	.LVL449
 11351 166c A0000000 		.4byte	.LFE83
 11352 1670 0400     		.2byte	0x4
 11353 1672 F3       		.byte	0xf3
 11354 1673 01       		.uleb128 0x1
 11355 1674 50       		.byte	0x50
 11356 1675 9F       		.byte	0x9f
 11357 1676 00000000 		.4byte	0
 11358 167a 00000000 		.4byte	0
 11359              	.LLST137:
 11360 167e 18000000 		.4byte	.LVL441
 11361 1682 3F000000 		.4byte	.LVL443-1
 11362 1686 0100     		.2byte	0x1
 11363 1688 52       		.byte	0x52
 11364 1689 62000000 		.4byte	.LVL445
 11365 168d 6D000000 		.4byte	.LVL447-1
 11366 1691 0100     		.2byte	0x1
 11367 1693 52       		.byte	0x52
 11368 1694 00000000 		.4byte	0
 11369 1698 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 301


 11370              	.LLST138:
 11371 169c 14000000 		.4byte	.LVL440
 11372 16a0 3C000000 		.4byte	.LVL442
 11373 16a4 0100     		.2byte	0x1
 11374 16a6 50       		.byte	0x50
 11375 16a7 3C000000 		.4byte	.LVL442
 11376 16ab 62000000 		.4byte	.LVL445
 11377 16af 0100     		.2byte	0x1
 11378 16b1 56       		.byte	0x56
 11379 16b2 62000000 		.4byte	.LVL445
 11380 16b6 68000000 		.4byte	.LVL446
 11381 16ba 0100     		.2byte	0x1
 11382 16bc 50       		.byte	0x50
 11383 16bd 68000000 		.4byte	.LVL446
 11384 16c1 90000000 		.4byte	.LVL450
 11385 16c5 0100     		.2byte	0x1
 11386 16c7 56       		.byte	0x56
 11387 16c8 00000000 		.4byte	0
 11388 16cc 00000000 		.4byte	0
 11389              	.LLST139:
 11390 16d0 00000000 		.4byte	.LVL452
 11391 16d4 0A000000 		.4byte	.LVL453
 11392 16d8 0100     		.2byte	0x1
 11393 16da 50       		.byte	0x50
 11394 16db 00000000 		.4byte	0
 11395 16df 00000000 		.4byte	0
 11396              	.LLST140:
 11397 16e3 0A000000 		.4byte	.LVL453
 11398 16e7 1E000000 		.4byte	.LVL456
 11399 16eb 0100     		.2byte	0x1
 11400 16ed 54       		.byte	0x54
 11401 16ee 20000000 		.4byte	.LVL457
 11402 16f2 22000000 		.4byte	.LVL458
 11403 16f6 0100     		.2byte	0x1
 11404 16f8 54       		.byte	0x54
 11405 16f9 00000000 		.4byte	0
 11406 16fd 00000000 		.4byte	0
 11407              	.LLST141:
 11408 1701 1C000000 		.4byte	.LVL455
 11409 1705 20000000 		.4byte	.LVL457
 11410 1709 0200     		.2byte	0x2
 11411 170b 31       		.byte	0x31
 11412 170c 9F       		.byte	0x9f
 11413 170d 22000000 		.4byte	.LVL458
 11414 1711 28000000 		.4byte	.LVL460
 11415 1715 0100     		.2byte	0x1
 11416 1717 54       		.byte	0x54
 11417 1718 28000000 		.4byte	.LVL460
 11418 171c 30000000 		.4byte	.LFE84
 11419 1720 0100     		.2byte	0x1
 11420 1722 50       		.byte	0x50
 11421 1723 00000000 		.4byte	0
 11422 1727 00000000 		.4byte	0
 11423              		.section	.debug_aranges,"",%progbits
 11424 0000 C4010000 		.4byte	0x1c4
 11425 0004 0200     		.2byte	0x2
 11426 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 302


 11427 000a 04       		.byte	0x4
 11428 000b 00       		.byte	0
 11429 000c 0000     		.2byte	0
 11430 000e 0000     		.2byte	0
 11431 0010 00000000 		.4byte	.LFB42
 11432 0014 44000000 		.4byte	.LFE42-.LFB42
 11433 0018 00000000 		.4byte	.LFB68
 11434 001c 14000000 		.4byte	.LFE68-.LFB68
 11435 0020 00000000 		.4byte	.LFB71
 11436 0024 30000000 		.4byte	.LFE71-.LFB71
 11437 0028 00000000 		.4byte	.LFB70
 11438 002c 12000000 		.4byte	.LFE70-.LFB70
 11439 0030 00000000 		.4byte	.LFB33
 11440 0034 AC000000 		.4byte	.LFE33-.LFB33
 11441 0038 00000000 		.4byte	.LFB66
 11442 003c 58000000 		.4byte	.LFE66-.LFB66
 11443 0040 00000000 		.4byte	.LFB34
 11444 0044 8C000000 		.4byte	.LFE34-.LFB34
 11445 0048 00000000 		.4byte	.LFB67
 11446 004c 38000000 		.4byte	.LFE67-.LFB67
 11447 0050 00000000 		.4byte	.LFB63
 11448 0054 08000000 		.4byte	.LFE63-.LFB63
 11449 0058 00000000 		.4byte	.LFB85
 11450 005c 64000000 		.4byte	.LFE85-.LFB85
 11451 0060 00000000 		.4byte	.LFB32
 11452 0064 5E000000 		.4byte	.LFE32-.LFB32
 11453 0068 00000000 		.4byte	.LFB35
 11454 006c 84000000 		.4byte	.LFE35-.LFB35
 11455 0070 00000000 		.4byte	.LFB38
 11456 0074 20000000 		.4byte	.LFE38-.LFB38
 11457 0078 00000000 		.4byte	.LFB39
 11458 007c 20000000 		.4byte	.LFE39-.LFB39
 11459 0080 00000000 		.4byte	.LFB40
 11460 0084 C4000000 		.4byte	.LFE40-.LFB40
 11461 0088 00000000 		.4byte	.LFB43
 11462 008c 6C000000 		.4byte	.LFE43-.LFB43
 11463 0090 00000000 		.4byte	.LFB44
 11464 0094 84000000 		.4byte	.LFE44-.LFB44
 11465 0098 00000000 		.4byte	.LFB45
 11466 009c 54000000 		.4byte	.LFE45-.LFB45
 11467 00a0 00000000 		.4byte	.LFB46
 11468 00a4 14000000 		.4byte	.LFE46-.LFB46
 11469 00a8 00000000 		.4byte	.LFB47
 11470 00ac 10000000 		.4byte	.LFE47-.LFB47
 11471 00b0 00000000 		.4byte	.LFB49
 11472 00b4 0C000000 		.4byte	.LFE49-.LFB49
 11473 00b8 00000000 		.4byte	.LFB50
 11474 00bc 0C000000 		.4byte	.LFE50-.LFB50
 11475 00c0 00000000 		.4byte	.LFB51
 11476 00c4 0C000000 		.4byte	.LFE51-.LFB51
 11477 00c8 00000000 		.4byte	.LFB52
 11478 00cc 18000000 		.4byte	.LFE52-.LFB52
 11479 00d0 00000000 		.4byte	.LFB53
 11480 00d4 E8000000 		.4byte	.LFE53-.LFB53
 11481 00d8 00000000 		.4byte	.LFB48
 11482 00dc D4000000 		.4byte	.LFE48-.LFB48
 11483 00e0 00000000 		.4byte	.LFB36
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 303


 11484 00e4 78000000 		.4byte	.LFE36-.LFB36
 11485 00e8 00000000 		.4byte	.LFB37
 11486 00ec 34000000 		.4byte	.LFE37-.LFB37
 11487 00f0 00000000 		.4byte	.LFB54
 11488 00f4 88000000 		.4byte	.LFE54-.LFB54
 11489 00f8 00000000 		.4byte	.LFB41
 11490 00fc 98000000 		.4byte	.LFE41-.LFB41
 11491 0100 00000000 		.4byte	.LFB55
 11492 0104 24000000 		.4byte	.LFE55-.LFB55
 11493 0108 00000000 		.4byte	.LFB56
 11494 010c 3C000000 		.4byte	.LFE56-.LFB56
 11495 0110 00000000 		.4byte	.LFB57
 11496 0114 7C000000 		.4byte	.LFE57-.LFB57
 11497 0118 00000000 		.4byte	.LFB58
 11498 011c 6C000000 		.4byte	.LFE58-.LFB58
 11499 0120 00000000 		.4byte	.LFB59
 11500 0124 24000000 		.4byte	.LFE59-.LFB59
 11501 0128 00000000 		.4byte	.LFB60
 11502 012c 10000000 		.4byte	.LFE60-.LFB60
 11503 0130 00000000 		.4byte	.LFB61
 11504 0134 64000000 		.4byte	.LFE61-.LFB61
 11505 0138 00000000 		.4byte	.LFB62
 11506 013c 0C000000 		.4byte	.LFE62-.LFB62
 11507 0140 00000000 		.4byte	.LFB64
 11508 0144 1C000000 		.4byte	.LFE64-.LFB64
 11509 0148 00000000 		.4byte	.LFB65
 11510 014c 20000000 		.4byte	.LFE65-.LFB65
 11511 0150 00000000 		.4byte	.LFB69
 11512 0154 18000000 		.4byte	.LFE69-.LFB69
 11513 0158 00000000 		.4byte	.LFB72
 11514 015c 0C000000 		.4byte	.LFE72-.LFB72
 11515 0160 00000000 		.4byte	.LFB73
 11516 0164 20000000 		.4byte	.LFE73-.LFB73
 11517 0168 00000000 		.4byte	.LFB74
 11518 016c 9C000000 		.4byte	.LFE74-.LFB74
 11519 0170 00000000 		.4byte	.LFB75
 11520 0174 74000000 		.4byte	.LFE75-.LFB75
 11521 0178 00000000 		.4byte	.LFB76
 11522 017c 8C000000 		.4byte	.LFE76-.LFB76
 11523 0180 00000000 		.4byte	.LFB77
 11524 0184 18000000 		.4byte	.LFE77-.LFB77
 11525 0188 00000000 		.4byte	.LFB78
 11526 018c 1C000000 		.4byte	.LFE78-.LFB78
 11527 0190 00000000 		.4byte	.LFB79
 11528 0194 6C000000 		.4byte	.LFE79-.LFB79
 11529 0198 00000000 		.4byte	.LFB80
 11530 019c 80000000 		.4byte	.LFE80-.LFB80
 11531 01a0 00000000 		.4byte	.LFB81
 11532 01a4 C0000000 		.4byte	.LFE81-.LFB81
 11533 01a8 00000000 		.4byte	.LFB82
 11534 01ac F0000000 		.4byte	.LFE82-.LFB82
 11535 01b0 00000000 		.4byte	.LFB83
 11536 01b4 A0000000 		.4byte	.LFE83-.LFB83
 11537 01b8 00000000 		.4byte	.LFB84
 11538 01bc 30000000 		.4byte	.LFE84-.LFB84
 11539 01c0 00000000 		.4byte	0
 11540 01c4 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 304


 11541              		.section	.debug_ranges,"",%progbits
 11542              	.Ldebug_ranges0:
 11543 0000 0A000000 		.4byte	.LBB4
 11544 0004 42000000 		.4byte	.LBE4
 11545 0008 46000000 		.4byte	.LBB6
 11546 000c C2000000 		.4byte	.LBE6
 11547 0010 00000000 		.4byte	0
 11548 0014 00000000 		.4byte	0
 11549 0018 26000000 		.4byte	.LBB8
 11550 001c 3A000000 		.4byte	.LBE8
 11551 0020 3E000000 		.4byte	.LBB9
 11552 0024 46000000 		.4byte	.LBE9
 11553 0028 4E000000 		.4byte	.LBB10
 11554 002c 66000000 		.4byte	.LBE10
 11555 0030 00000000 		.4byte	0
 11556 0034 00000000 		.4byte	0
 11557 0038 00000000 		.4byte	.LFB42
 11558 003c 44000000 		.4byte	.LFE42
 11559 0040 00000000 		.4byte	.LFB68
 11560 0044 14000000 		.4byte	.LFE68
 11561 0048 00000000 		.4byte	.LFB71
 11562 004c 30000000 		.4byte	.LFE71
 11563 0050 00000000 		.4byte	.LFB70
 11564 0054 12000000 		.4byte	.LFE70
 11565 0058 00000000 		.4byte	.LFB33
 11566 005c AC000000 		.4byte	.LFE33
 11567 0060 00000000 		.4byte	.LFB66
 11568 0064 58000000 		.4byte	.LFE66
 11569 0068 00000000 		.4byte	.LFB34
 11570 006c 8C000000 		.4byte	.LFE34
 11571 0070 00000000 		.4byte	.LFB67
 11572 0074 38000000 		.4byte	.LFE67
 11573 0078 00000000 		.4byte	.LFB63
 11574 007c 08000000 		.4byte	.LFE63
 11575 0080 00000000 		.4byte	.LFB85
 11576 0084 64000000 		.4byte	.LFE85
 11577 0088 00000000 		.4byte	.LFB32
 11578 008c 5E000000 		.4byte	.LFE32
 11579 0090 00000000 		.4byte	.LFB35
 11580 0094 84000000 		.4byte	.LFE35
 11581 0098 00000000 		.4byte	.LFB38
 11582 009c 20000000 		.4byte	.LFE38
 11583 00a0 00000000 		.4byte	.LFB39
 11584 00a4 20000000 		.4byte	.LFE39
 11585 00a8 00000000 		.4byte	.LFB40
 11586 00ac C4000000 		.4byte	.LFE40
 11587 00b0 00000000 		.4byte	.LFB43
 11588 00b4 6C000000 		.4byte	.LFE43
 11589 00b8 00000000 		.4byte	.LFB44
 11590 00bc 84000000 		.4byte	.LFE44
 11591 00c0 00000000 		.4byte	.LFB45
 11592 00c4 54000000 		.4byte	.LFE45
 11593 00c8 00000000 		.4byte	.LFB46
 11594 00cc 14000000 		.4byte	.LFE46
 11595 00d0 00000000 		.4byte	.LFB47
 11596 00d4 10000000 		.4byte	.LFE47
 11597 00d8 00000000 		.4byte	.LFB49
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 305


 11598 00dc 0C000000 		.4byte	.LFE49
 11599 00e0 00000000 		.4byte	.LFB50
 11600 00e4 0C000000 		.4byte	.LFE50
 11601 00e8 00000000 		.4byte	.LFB51
 11602 00ec 0C000000 		.4byte	.LFE51
 11603 00f0 00000000 		.4byte	.LFB52
 11604 00f4 18000000 		.4byte	.LFE52
 11605 00f8 00000000 		.4byte	.LFB53
 11606 00fc E8000000 		.4byte	.LFE53
 11607 0100 00000000 		.4byte	.LFB48
 11608 0104 D4000000 		.4byte	.LFE48
 11609 0108 00000000 		.4byte	.LFB36
 11610 010c 78000000 		.4byte	.LFE36
 11611 0110 00000000 		.4byte	.LFB37
 11612 0114 34000000 		.4byte	.LFE37
 11613 0118 00000000 		.4byte	.LFB54
 11614 011c 88000000 		.4byte	.LFE54
 11615 0120 00000000 		.4byte	.LFB41
 11616 0124 98000000 		.4byte	.LFE41
 11617 0128 00000000 		.4byte	.LFB55
 11618 012c 24000000 		.4byte	.LFE55
 11619 0130 00000000 		.4byte	.LFB56
 11620 0134 3C000000 		.4byte	.LFE56
 11621 0138 00000000 		.4byte	.LFB57
 11622 013c 7C000000 		.4byte	.LFE57
 11623 0140 00000000 		.4byte	.LFB58
 11624 0144 6C000000 		.4byte	.LFE58
 11625 0148 00000000 		.4byte	.LFB59
 11626 014c 24000000 		.4byte	.LFE59
 11627 0150 00000000 		.4byte	.LFB60
 11628 0154 10000000 		.4byte	.LFE60
 11629 0158 00000000 		.4byte	.LFB61
 11630 015c 64000000 		.4byte	.LFE61
 11631 0160 00000000 		.4byte	.LFB62
 11632 0164 0C000000 		.4byte	.LFE62
 11633 0168 00000000 		.4byte	.LFB64
 11634 016c 1C000000 		.4byte	.LFE64
 11635 0170 00000000 		.4byte	.LFB65
 11636 0174 20000000 		.4byte	.LFE65
 11637 0178 00000000 		.4byte	.LFB69
 11638 017c 18000000 		.4byte	.LFE69
 11639 0180 00000000 		.4byte	.LFB72
 11640 0184 0C000000 		.4byte	.LFE72
 11641 0188 00000000 		.4byte	.LFB73
 11642 018c 20000000 		.4byte	.LFE73
 11643 0190 00000000 		.4byte	.LFB74
 11644 0194 9C000000 		.4byte	.LFE74
 11645 0198 00000000 		.4byte	.LFB75
 11646 019c 74000000 		.4byte	.LFE75
 11647 01a0 00000000 		.4byte	.LFB76
 11648 01a4 8C000000 		.4byte	.LFE76
 11649 01a8 00000000 		.4byte	.LFB77
 11650 01ac 18000000 		.4byte	.LFE77
 11651 01b0 00000000 		.4byte	.LFB78
 11652 01b4 1C000000 		.4byte	.LFE78
 11653 01b8 00000000 		.4byte	.LFB79
 11654 01bc 6C000000 		.4byte	.LFE79
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 306


 11655 01c0 00000000 		.4byte	.LFB80
 11656 01c4 80000000 		.4byte	.LFE80
 11657 01c8 00000000 		.4byte	.LFB81
 11658 01cc C0000000 		.4byte	.LFE81
 11659 01d0 00000000 		.4byte	.LFB82
 11660 01d4 F0000000 		.4byte	.LFE82
 11661 01d8 00000000 		.4byte	.LFB83
 11662 01dc A0000000 		.4byte	.LFE83
 11663 01e0 00000000 		.4byte	.LFB84
 11664 01e4 30000000 		.4byte	.LFE84
 11665 01e8 00000000 		.4byte	0
 11666 01ec 00000000 		.4byte	0
 11667              		.section	.debug_line,"",%progbits
 11668              	.Ldebug_line0:
 11669 0000 1C0C0000 		.section	.debug_str,"MS",%progbits,1
 11669      02006B02 
 11669      00000201 
 11669      FB0E0D00 
 11669      01010101 
 11670              	.LASF62:
 11671 0000 70635461 		.ascii	"pcTaskName\000"
 11671      736B4E61 
 11671      6D6500
 11672              	.LASF36:
 11673 000b 75784E75 		.ascii	"uxNumberOfItems\000"
 11673      6D626572 
 11673      4F664974 
 11673      656D7300 
 11674              	.LASF217:
 11675 001b 76506F72 		.ascii	"vPortExitCritical\000"
 11675      74457869 
 11675      74437269 
 11675      74696361 
 11675      6C00
 11676              	.LASF224:
 11677 002d 78506F72 		.ascii	"xPortStartScheduler\000"
 11677      74537461 
 11677      72745363 
 11677      68656475 
 11677      6C657200 
 11678              	.LASF60:
 11679 0041 75785072 		.ascii	"uxPriority\000"
 11679      696F7269 
 11679      747900
 11680              	.LASF134:
 11681 004c 7078436F 		.ascii	"pxConstList\000"
 11681      6E73744C 
 11681      69737400 
 11682              	.LASF218:
 11683 0058 76506F72 		.ascii	"vPortYield\000"
 11683      74596965 
 11683      6C6400
 11684              	.LASF56:
 11685 0063 74736B54 		.ascii	"tskTaskControlBlock\000"
 11685      61736B43 
 11685      6F6E7472 
 11685      6F6C426C 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 307


 11685      6F636B00 
 11686              	.LASF125:
 11687 0077 75785065 		.ascii	"uxPendedCounts\000"
 11687      6E646564 
 11687      436F756E 
 11687      747300
 11688              	.LASF152:
 11689 0086 76546173 		.ascii	"vTaskSetThreadLocalStoragePointer\000"
 11689      6B536574 
 11689      54687265 
 11689      61644C6F 
 11689      63616C53 
 11690              	.LASF178:
 11691 00a8 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 11691      7473546F 
 11691      436C6561 
 11691      724F6E45 
 11691      78697400 
 11692              	.LASF79:
 11693 00bc 70727649 		.ascii	"prvInitialiseNewTask\000"
 11693      6E697469 
 11693      616C6973 
 11693      654E6577 
 11693      5461736B 
 11694              	.LASF161:
 11695 00d1 78546173 		.ascii	"xTaskGetSchedulerState\000"
 11695      6B476574 
 11695      53636865 
 11695      64756C65 
 11695      72537461 
 11696              	.LASF187:
 11697 00e8 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 11697      67686572 
 11697      5072696F 
 11697      72697479 
 11697      5461736B 
 11698              	.LASF41:
 11699 0102 654E6F41 		.ascii	"eNoAction\000"
 11699      6374696F 
 11699      6E00
 11700              	.LASF201:
 11701 010c 7578546F 		.ascii	"uxTopReadyPriority\000"
 11701      70526561 
 11701      64795072 
 11701      696F7269 
 11701      747900
 11702              	.LASF0:
 11703 011f 756E7369 		.ascii	"unsigned int\000"
 11703      676E6564 
 11703      20696E74 
 11703      00
 11704              	.LASF138:
 11705 012c 70784576 		.ascii	"pxEventList\000"
 11705      656E744C 
 11705      69737400 
 11706              	.LASF202:
 11707 0138 78536368 		.ascii	"xSchedulerRunning\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 308


 11707      6564756C 
 11707      65725275 
 11707      6E6E696E 
 11707      6700
 11708              	.LASF37:
 11709 014a 7078496E 		.ascii	"pxIndex\000"
 11709      64657800 
 11710              	.LASF22:
 11711 0152 53746163 		.ascii	"StackType_t\000"
 11711      6B547970 
 11711      655F7400 
 11712              	.LASF47:
 11713 015e 7854494D 		.ascii	"xTIME_OUT\000"
 11713      455F4F55 
 11713      5400
 11714              	.LASF197:
 11715 0168 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 11715      6C657465 
 11715      64546173 
 11715      6B735761 
 11715      6974696E 
 11716              	.LASF32:
 11717 0185 784C4953 		.ascii	"xLIST_ITEM\000"
 11717      545F4954 
 11717      454D00
 11718              	.LASF190:
 11719 0190 70785265 		.ascii	"pxReadyTasksLists\000"
 11719      61647954 
 11719      61736B73 
 11719      4C697374 
 11719      7300
 11720              	.LASF185:
 11721 01a2 75634F72 		.ascii	"ucOriginalNotifyState\000"
 11721      6967696E 
 11721      616C4E6F 
 11721      74696679 
 11721      53746174 
 11722              	.LASF144:
 11723 01b8 76546173 		.ascii	"vTaskSetTimeOutState\000"
 11723      6B536574 
 11723      54696D65 
 11723      4F757453 
 11723      74617465 
 11724              	.LASF186:
 11725 01cd 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 11725      6B47656E 
 11725      65726963 
 11725      4E6F7469 
 11725      66794672 
 11726              	.LASF75:
 11727 01e7 70756353 		.ascii	"pucStackByte\000"
 11727      7461636B 
 11727      42797465 
 11727      00
 11728              	.LASF191:
 11729 01f4 7844656C 		.ascii	"xDelayedTaskList1\000"
 11729      61796564 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 309


 11729      5461736B 
 11729      4C697374 
 11729      3100
 11730              	.LASF192:
 11731 0206 7844656C 		.ascii	"xDelayedTaskList2\000"
 11731      61796564 
 11731      5461736B 
 11731      4C697374 
 11731      3200
 11732              	.LASF48:
 11733 0218 784F7665 		.ascii	"xOverflowCount\000"
 11733      72666C6F 
 11733      77436F75 
 11733      6E7400
 11734              	.LASF215:
 11735 0227 76506F72 		.ascii	"vPortEnterCritical\000"
 11735      74456E74 
 11735      65724372 
 11735      69746963 
 11735      616C00
 11736              	.LASF54:
 11737 023a 756C5061 		.ascii	"ulParameters\000"
 11737      72616D65 
 11737      74657273 
 11737      00
 11738              	.LASF110:
 11739 0247 78546173 		.ascii	"xTaskToResume\000"
 11739      6B546F52 
 11739      6573756D 
 11739      6500
 11740              	.LASF100:
 11741 0255 75785265 		.ascii	"uxReturn\000"
 11741      7475726E 
 11741      00
 11742              	.LASF171:
 11743 025e 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11743      736B4765 
 11743      744E756D 
 11743      6265724F 
 11743      66546173 
 11744              	.LASF68:
 11745 0275 74736B54 		.ascii	"tskTCB\000"
 11745      434200
 11746              	.LASF112:
 11747 027c 75785361 		.ascii	"uxSavedInterruptStatus\000"
 11747      76656449 
 11747      6E746572 
 11747      72757074 
 11747      53746174 
 11748              	.LASF18:
 11749 0293 75696E74 		.ascii	"uint32_t\000"
 11749      33325F74 
 11749      00
 11750              	.LASF67:
 11751 029c 75634E6F 		.ascii	"ucNotifyState\000"
 11751      74696679 
 11751      53746174 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 310


 11751      6500
 11752              	.LASF219:
 11753 02aa 75784C69 		.ascii	"uxListRemove\000"
 11753      73745265 
 11753      6D6F7665 
 11753      00
 11754              	.LASF108:
 11755 02b7 78596965 		.ascii	"xYieldRequired\000"
 11755      6C645265 
 11755      71756972 
 11755      656400
 11756              	.LASF180:
 11757 02c6 78546173 		.ascii	"xTaskGenericNotify\000"
 11757      6B47656E 
 11757      65726963 
 11757      4E6F7469 
 11757      667900
 11758              	.LASF19:
 11759 02d9 666C6F61 		.ascii	"float\000"
 11759      7400
 11760              	.LASF141:
 11761 02df 7078556E 		.ascii	"pxUnblockedTCB\000"
 11761      626C6F63 
 11761      6B656454 
 11761      434200
 11762              	.LASF96:
 11763 02ee 75735374 		.ascii	"usStackDepth\000"
 11763      61636B44 
 11763      65707468 
 11763      00
 11764              	.LASF174:
 11765 02fb 78436C65 		.ascii	"xClearCountOnExit\000"
 11765      6172436F 
 11765      756E744F 
 11765      6E457869 
 11765      7400
 11766              	.LASF149:
 11767 030d 78456C61 		.ascii	"xElapsedTime\000"
 11767      70736564 
 11767      54696D65 
 11767      00
 11768              	.LASF44:
 11769 031a 65536574 		.ascii	"eSetValueWithOverwrite\000"
 11769      56616C75 
 11769      65576974 
 11769      684F7665 
 11769      72777269 
 11770              	.LASF13:
 11771 0331 6C6F6E67 		.ascii	"long long unsigned int\000"
 11771      206C6F6E 
 11771      6720756E 
 11771      7369676E 
 11771      65642069 
 11772              	.LASF117:
 11773 0348 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11773      6B476574 
 11773      5469636B 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 311


 11773      436F756E 
 11773      7446726F 
 11774              	.LASF102:
 11775 0361 75785361 		.ascii	"uxSavedInterruptState\000"
 11775      76656449 
 11775      6E746572 
 11775      72757074 
 11775      53746174 
 11776              	.LASF177:
 11777 0377 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 11777      7473546F 
 11777      436C6561 
 11777      724F6E45 
 11777      6E747279 
 11778              	.LASF195:
 11779 038c 7850656E 		.ascii	"xPendingReadyList\000"
 11779      64696E67 
 11779      52656164 
 11779      794C6973 
 11779      7400
 11780              	.LASF28:
 11781 039e 70785072 		.ascii	"pxPrevious\000"
 11781      6576696F 
 11781      757300
 11782              	.LASF196:
 11783 03a9 78546173 		.ascii	"xTasksWaitingTermination\000"
 11783      6B735761 
 11783      6974696E 
 11783      67546572 
 11783      6D696E61 
 11784              	.LASF8:
 11785 03c2 5F5F7569 		.ascii	"__uint16_t\000"
 11785      6E743136 
 11785      5F7400
 11786              	.LASF166:
 11787 03cd 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 11787      6B507269 
 11787      6F726974 
 11787      79446973 
 11787      696E6865 
 11788              	.LASF157:
 11789 03f1 70765265 		.ascii	"pvReturn\000"
 11789      7475726E 
 11789      00
 11790              	.LASF111:
 11791 03fa 78546173 		.ascii	"xTaskResumeFromISR\000"
 11791      6B526573 
 11791      756D6546 
 11791      726F6D49 
 11791      535200
 11792              	.LASF221:
 11793 040d 7076506F 		.ascii	"pvPortMalloc\000"
 11793      72744D61 
 11793      6C6C6F63 
 11793      00
 11794              	.LASF150:
 11795 041a 76546173 		.ascii	"vTaskSuspendAll\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 312


 11795      6B537573 
 11795      70656E64 
 11795      416C6C00 
 11796              	.LASF158:
 11797 042a 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 11797      736B4765 
 11797      74537461 
 11797      636B4869 
 11797      67685761 
 11798              	.LASF120:
 11799 0446 78546173 		.ascii	"xTaskIncrementTick\000"
 11799      6B496E63 
 11799      72656D65 
 11799      6E745469 
 11799      636B00
 11800              	.LASF65:
 11801 0459 70765468 		.ascii	"pvThreadLocalStoragePointers\000"
 11801      72656164 
 11801      4C6F6361 
 11801      6C53746F 
 11801      72616765 
 11802              	.LASF226:
 11803 0476 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11803      43313120 
 11803      352E342E 
 11803      31203230 
 11803      31363036 
 11804 04a9 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 11804      20726576 
 11804      6973696F 
 11804      6E203233 
 11804      37373135 
 11805 04dc 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 11805      66756E63 
 11805      74696F6E 
 11805      2D736563 
 11805      74696F6E 
 11806              	.LASF46:
 11807 0504 654E6F74 		.ascii	"eNotifyAction\000"
 11807      69667941 
 11807      6374696F 
 11807      6E00
 11808              	.LASF4:
 11809 0512 73697A65 		.ascii	"size_t\000"
 11809      5F7400
 11810              	.LASF43:
 11811 0519 65496E63 		.ascii	"eIncrement\000"
 11811      72656D65 
 11811      6E7400
 11812              	.LASF33:
 11813 0524 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11813      495F4C49 
 11813      53545F49 
 11813      54454D00 
 11814              	.LASF169:
 11815 0534 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 11815      6C794F6E 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 313


 11815      654D7574 
 11815      65784865 
 11815      6C6400
 11816              	.LASF35:
 11817 0547 784C4953 		.ascii	"xLIST\000"
 11817      5400
 11818              	.LASF114:
 11819 054d 76546173 		.ascii	"vTaskEndScheduler\000"
 11819      6B456E64 
 11819      53636865 
 11819      64756C65 
 11819      7200
 11820              	.LASF99:
 11821 055f 75785461 		.ascii	"uxTaskPriorityGet\000"
 11821      736B5072 
 11821      696F7269 
 11821      74794765 
 11821      7400
 11822              	.LASF95:
 11823 0571 78436F6E 		.ascii	"xConstTickCount\000"
 11823      73745469 
 11823      636B436F 
 11823      756E7400 
 11824              	.LASF216:
 11825 0581 764C6973 		.ascii	"vListInsertEnd\000"
 11825      74496E73 
 11825      65727445 
 11825      6E6400
 11826              	.LASF198:
 11827 0590 78537573 		.ascii	"xSuspendedTaskList\000"
 11827      70656E64 
 11827      65645461 
 11827      736B4C69 
 11827      737400
 11828              	.LASF81:
 11829 05a3 70634E61 		.ascii	"pcName\000"
 11829      6D6500
 11830              	.LASF153:
 11831 05aa 78546173 		.ascii	"xTaskToSet\000"
 11831      6B546F53 
 11831      657400
 11832              	.LASF194:
 11833 05b5 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11833      6572666C 
 11833      6F774465 
 11833      6C617965 
 11833      64546173 
 11834              	.LASF137:
 11835 05cf 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11835      6B506C61 
 11835      63654F6E 
 11835      4576656E 
 11835      744C6973 
 11836              	.LASF130:
 11837 05e5 76546173 		.ascii	"vTaskDelay\000"
 11837      6B44656C 
 11837      617900
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 314


 11838              	.LASF172:
 11839 05f0 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11839      736B496E 
 11839      6372656D 
 11839      656E744D 
 11839      75746578 
 11840              	.LASF66:
 11841 060e 756C4E6F 		.ascii	"ulNotifiedValue\000"
 11841      74696669 
 11841      65645661 
 11841      6C756500 
 11842              	.LASF142:
 11843 061e 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 11843      6B52656D 
 11843      6F766546 
 11843      726F6D55 
 11843      6E6F7264 
 11844              	.LASF64:
 11845 0640 75784D75 		.ascii	"uxMutexesHeld\000"
 11845      74657865 
 11845      7348656C 
 11845      6400
 11846              	.LASF165:
 11847 064e 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11847      6B507269 
 11847      6F726974 
 11847      79446973 
 11847      696E6865 
 11848              	.LASF140:
 11849 0666 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11849      6B52656D 
 11849      6F766546 
 11849      726F6D45 
 11849      76656E74 
 11850              	.LASF15:
 11851 067f 63686172 		.ascii	"char\000"
 11851      00
 11852              	.LASF31:
 11853 0684 4C697374 		.ascii	"ListItem_t\000"
 11853      4974656D 
 11853      5F7400
 11854              	.LASF45:
 11855 068f 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 11855      56616C75 
 11855      65576974 
 11855      686F7574 
 11855      4F766572 
 11856              	.LASF176:
 11857 06a9 78546173 		.ascii	"xTaskNotifyWait\000"
 11857      6B4E6F74 
 11857      69667957 
 11857      61697400 
 11858              	.LASF24:
 11859 06b9 55426173 		.ascii	"UBaseType_t\000"
 11859      65547970 
 11859      655F7400 
 11860              	.LASF82:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 315


 11861 06c5 756C5374 		.ascii	"ulStackDepth\000"
 11861      61636B44 
 11861      65707468 
 11861      00
 11862              	.LASF129:
 11863 06d2 7853686F 		.ascii	"xShouldDelay\000"
 11863      756C6444 
 11863      656C6179 
 11863      00
 11864              	.LASF90:
 11865 06df 70727649 		.ascii	"prvIdleTask\000"
 11865      646C6554 
 11865      61736B00 
 11866              	.LASF38:
 11867 06eb 784C6973 		.ascii	"xListEnd\000"
 11867      74456E64 
 11867      00
 11868              	.LASF173:
 11869 06f4 756C5461 		.ascii	"ulTaskNotifyTake\000"
 11869      736B4E6F 
 11869      74696679 
 11869      54616B65 
 11869      00
 11870              	.LASF34:
 11871 0705 4D696E69 		.ascii	"MiniListItem_t\000"
 11871      4C697374 
 11871      4974656D 
 11871      5F7400
 11872              	.LASF98:
 11873 0714 78546173 		.ascii	"xTaskCreate\000"
 11873      6B437265 
 11873      61746500 
 11874              	.LASF88:
 11875 0720 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 11875      64644E65 
 11875      77546173 
 11875      6B546F52 
 11875      65616479 
 11876              	.LASF16:
 11877 0739 75696E74 		.ascii	"uint8_t\000"
 11877      385F7400 
 11878              	.LASF85:
 11879 0741 70784E65 		.ascii	"pxNewTCB\000"
 11879      77544342 
 11879      00
 11880              	.LASF80:
 11881 074a 70785461 		.ascii	"pxTaskCode\000"
 11881      736B436F 
 11881      646500
 11882              	.LASF55:
 11883 0755 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11883      72795265 
 11883      67696F6E 
 11883      5F7400
 11884              	.LASF207:
 11885 0764 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 11885      74546173 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 316


 11885      6B556E62 
 11885      6C6F636B 
 11885      54696D65 
 11886              	.LASF213:
 11887 0779 7078506F 		.ascii	"pxPortInitialiseStack\000"
 11887      7274496E 
 11887      69746961 
 11887      6C697365 
 11887      53746163 
 11888              	.LASF200:
 11889 078f 78546963 		.ascii	"xTickCount\000"
 11889      6B436F75 
 11889      6E7400
 11890              	.LASF1:
 11891 079a 6C6F6E67 		.ascii	"long long int\000"
 11891      206C6F6E 
 11891      6720696E 
 11891      7400
 11892              	.LASF175:
 11893 07a8 756C5265 		.ascii	"ulReturn\000"
 11893      7475726E 
 11893      00
 11894              	.LASF53:
 11895 07b1 756C4C65 		.ascii	"ulLengthInBytes\000"
 11895      6E677468 
 11895      496E4279 
 11895      74657300 
 11896              	.LASF23:
 11897 07c1 42617365 		.ascii	"BaseType_t\000"
 11897      54797065 
 11897      5F7400
 11898              	.LASF77:
 11899 07cc 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 11899      65736574 
 11899      4E657874 
 11899      5461736B 
 11899      556E626C 
 11900              	.LASF49:
 11901 07e8 7854696D 		.ascii	"xTimeOnEntering\000"
 11901      654F6E45 
 11901      6E746572 
 11901      696E6700 
 11902              	.LASF105:
 11903 07f8 75784E65 		.ascii	"uxNewPriority\000"
 11903      77507269 
 11903      6F726974 
 11903      7900
 11904              	.LASF21:
 11905 0806 5461736B 		.ascii	"TaskFunction_t\000"
 11905      46756E63 
 11905      74696F6E 
 11905      5F7400
 11906              	.LASF27:
 11907 0815 70784E65 		.ascii	"pxNext\000"
 11907      787400
 11908              	.LASF184:
 11909 081c 70756C50 		.ascii	"pulPreviousNotificationValue\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 317


 11909      72657669 
 11909      6F75734E 
 11909      6F746966 
 11909      69636174 
 11910              	.LASF211:
 11911 0839 6D656D73 		.ascii	"memset\000"
 11911      657400
 11912              	.LASF145:
 11913 0840 70785469 		.ascii	"pxTimeOut\000"
 11913      6D654F75 
 11913      7400
 11914              	.LASF131:
 11915 084a 78546963 		.ascii	"xTicksToDelay\000"
 11915      6B73546F 
 11915      44656C61 
 11915      7900
 11916              	.LASF101:
 11917 0858 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 11917      736B5072 
 11917      696F7269 
 11917      74794765 
 11917      7446726F 
 11918              	.LASF76:
 11919 0871 756C436F 		.ascii	"ulCount\000"
 11919      756E7400 
 11920              	.LASF50:
 11921 0879 54696D65 		.ascii	"TimeOut_t\000"
 11921      4F75745F 
 11921      7400
 11922              	.LASF146:
 11923 0883 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 11923      6B496E74 
 11923      65726E61 
 11923      6C536574 
 11923      54696D65 
 11924              	.LASF206:
 11925 08a0 75785461 		.ascii	"uxTaskNumber\000"
 11925      736B4E75 
 11925      6D626572 
 11925      00
 11926              	.LASF40:
 11927 08ad 5461736B 		.ascii	"TaskHandle_t\000"
 11927      48616E64 
 11927      6C655F74 
 11927      00
 11928              	.LASF183:
 11929 08ba 65416374 		.ascii	"eAction\000"
 11929      696F6E00 
 11930              	.LASF170:
 11931 08c2 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 11931      736B5265 
 11931      73657445 
 11931      76656E74 
 11931      4974656D 
 11932              	.LASF104:
 11933 08dc 76546173 		.ascii	"vTaskPrioritySet\000"
 11933      6B507269 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 318


 11933      6F726974 
 11933      79536574 
 11933      00
 11934              	.LASF222:
 11935 08ed 756C5365 		.ascii	"ulSetInterruptMaskFromISR\000"
 11935      74496E74 
 11935      65727275 
 11935      70744D61 
 11935      736B4672 
 11936              	.LASF39:
 11937 0907 4C697374 		.ascii	"List_t\000"
 11937      5F7400
 11938              	.LASF119:
 11939 090e 78546173 		.ascii	"xTaskToQuery\000"
 11939      6B546F51 
 11939      75657279 
 11939      00
 11940              	.LASF25:
 11941 091b 5469636B 		.ascii	"TickType_t\000"
 11941      54797065 
 11941      5F7400
 11942              	.LASF181:
 11943 0926 78546173 		.ascii	"xTaskToNotify\000"
 11943      6B546F4E 
 11943      6F746966 
 11943      7900
 11944              	.LASF74:
 11945 0934 78546173 		.ascii	"xTask\000"
 11945      6B00
 11946              	.LASF42:
 11947 093a 65536574 		.ascii	"eSetBits\000"
 11947      42697473 
 11947      00
 11948              	.LASF2:
 11949 0943 6C6F6E67 		.ascii	"long double\000"
 11949      20646F75 
 11949      626C6500 
 11950              	.LASF51:
 11951 094f 784D454D 		.ascii	"xMEMORY_REGION\000"
 11951      4F52595F 
 11951      52454749 
 11951      4F4E00
 11952              	.LASF17:
 11953 095e 75696E74 		.ascii	"uint16_t\000"
 11953      31365F74 
 11953      00
 11954              	.LASF103:
 11955 0967 76546173 		.ascii	"vTaskDelete\000"
 11955      6B44656C 
 11955      65746500 
 11956              	.LASF168:
 11957 0973 75785072 		.ascii	"uxPriorityToUse\000"
 11957      696F7269 
 11957      7479546F 
 11957      55736500 
 11958              	.LASF132:
 11959 0983 76546173 		.ascii	"vTaskSwitchContext\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 319


 11959      6B537769 
 11959      74636843 
 11959      6F6E7465 
 11959      787400
 11960              	.LASF205:
 11961 0996 784E756D 		.ascii	"xNumOfOverflows\000"
 11961      4F664F76 
 11961      6572666C 
 11961      6F777300 
 11962              	.LASF30:
 11963 09a6 7076436F 		.ascii	"pvContainer\000"
 11963      6E746169 
 11963      6E657200 
 11964              	.LASF208:
 11965 09b2 7849646C 		.ascii	"xIdleTaskHandle\000"
 11965      65546173 
 11965      6B48616E 
 11965      646C6500 
 11966              	.LASF167:
 11967 09c2 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 11967      67686573 
 11967      74507269 
 11967      6F726974 
 11967      79576169 
 11968              	.LASF7:
 11969 09df 73686F72 		.ascii	"short int\000"
 11969      7420696E 
 11969      7400
 11970              	.LASF212:
 11971 09e9 764C6973 		.ascii	"vListInitialiseItem\000"
 11971      74496E69 
 11971      7469616C 
 11971      69736549 
 11971      74656D00 
 11972              	.LASF83:
 11973 09fd 70765061 		.ascii	"pvParameters\000"
 11973      72616D65 
 11973      74657273 
 11973      00
 11974              	.LASF26:
 11975 0a0a 78497465 		.ascii	"xItemValue\000"
 11975      6D56616C 
 11975      756500
 11976              	.LASF10:
 11977 0a15 6C6F6E67 		.ascii	"long int\000"
 11977      20696E74 
 11977      00
 11978              	.LASF123:
 11979 0a1e 78546173 		.ascii	"xTaskResumeAll\000"
 11979      6B526573 
 11979      756D6541 
 11979      6C6C00
 11980              	.LASF188:
 11981 0a2d 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 11981      6B4E6F74 
 11981      69667947 
 11981      69766546 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 320


 11981      726F6D49 
 11982              	.LASF193:
 11983 0a44 70784465 		.ascii	"pxDelayedTaskList\000"
 11983      6C617965 
 11983      64546173 
 11983      6B4C6973 
 11983      7400
 11984              	.LASF115:
 11985 0a56 78546173 		.ascii	"xTaskGetTickCount\000"
 11985      6B476574 
 11985      5469636B 
 11985      436F756E 
 11985      7400
 11986              	.LASF72:
 11987 0a68 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 11987      61736B49 
 11987      73546173 
 11987      6B537573 
 11987      70656E64 
 11988              	.LASF121:
 11989 0a7f 78537769 		.ascii	"xSwitchRequired\000"
 11989      74636852 
 11989      65717569 
 11989      72656400 
 11990              	.LASF163:
 11991 0a8f 70784D75 		.ascii	"pxMutexHolder\000"
 11991      74657848 
 11991      6F6C6465 
 11991      7200
 11992              	.LASF61:
 11993 0a9d 70785374 		.ascii	"pxStack\000"
 11993      61636B00 
 11994              	.LASF97:
 11995 0aa5 78546173 		.ascii	"xTaskToDelete\000"
 11995      6B546F44 
 11995      656C6574 
 11995      6500
 11996              	.LASF182:
 11997 0ab3 756C5661 		.ascii	"ulValue\000"
 11997      6C756500 
 11998              	.LASF136:
 11999 0abb 78546173 		.ascii	"xTaskToSuspend\000"
 11999      6B546F53 
 11999      75737065 
 11999      6E6400
 12000              	.LASF147:
 12001 0aca 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 12001      6B436865 
 12001      636B466F 
 12001      7254696D 
 12001      654F7574 
 12002              	.LASF225:
 12003 0adf 76506F72 		.ascii	"vPortEndScheduler\000"
 12003      74456E64 
 12003      53636865 
 12003      64756C65 
 12003      7200
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 321


 12004              	.LASF210:
 12005 0af1 76506F72 		.ascii	"vPortFree\000"
 12005      74467265 
 12005      6500
 12006              	.LASF127:
 12007 0afb 70785072 		.ascii	"pxPreviousWakeTime\000"
 12007      6576696F 
 12007      75735761 
 12007      6B655469 
 12007      6D6500
 12008              	.LASF5:
 12009 0b0e 5F5F7569 		.ascii	"__uint8_t\000"
 12009      6E74385F 
 12009      7400
 12010              	.LASF154:
 12011 0b18 78496E64 		.ascii	"xIndex\000"
 12011      657800
 12012              	.LASF179:
 12013 0b1f 70756C4E 		.ascii	"pulNotificationValue\000"
 12013      6F746966 
 12013      69636174 
 12013      696F6E56 
 12013      616C7565 
 12014              	.LASF70:
 12015 0b34 78526574 		.ascii	"xReturn\000"
 12015      75726E00 
 12016              	.LASF14:
 12017 0b3c 73697A65 		.ascii	"sizetype\000"
 12017      74797065 
 12017      00
 12018              	.LASF151:
 12019 0b45 76546173 		.ascii	"vTaskMissedYield\000"
 12019      6B4D6973 
 12019      73656459 
 12019      69656C64 
 12019      00
 12020              	.LASF203:
 12021 0b56 75785065 		.ascii	"uxPendedTicks\000"
 12021      6E646564 
 12021      5469636B 
 12021      7300
 12022              	.LASF12:
 12023 0b64 6C6F6E67 		.ascii	"long unsigned int\000"
 12023      20756E73 
 12023      69676E65 
 12023      6420696E 
 12023      7400
 12024              	.LASF162:
 12025 0b76 78546173 		.ascii	"xTaskPriorityInherit\000"
 12025      6B507269 
 12025      6F726974 
 12025      79496E68 
 12025      65726974 
 12026              	.LASF159:
 12027 0b8b 70756345 		.ascii	"pucEndOfStack\000"
 12027      6E644F66 
 12027      53746163 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 322


 12027      6B00
 12028              	.LASF164:
 12029 0b99 70784D75 		.ascii	"pxMutexHolderTCB\000"
 12029      74657848 
 12029      6F6C6465 
 12029      72544342 
 12029      00
 12030              	.LASF118:
 12031 0baa 70635461 		.ascii	"pcTaskGetName\000"
 12031      736B4765 
 12031      744E616D 
 12031      6500
 12032              	.LASF116:
 12033 0bb8 78546963 		.ascii	"xTicks\000"
 12033      6B7300
 12034              	.LASF113:
 12035 0bbf 76546173 		.ascii	"vTaskStartScheduler\000"
 12035      6B537461 
 12035      72745363 
 12035      68656475 
 12035      6C657200 
 12036              	.LASF93:
 12037 0bd3 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 12037      426C6F63 
 12037      6B496E64 
 12037      6566696E 
 12037      6974656C 
 12038              	.LASF156:
 12039 0be9 70765461 		.ascii	"pvTaskGetThreadLocalStoragePointer\000"
 12039      736B4765 
 12039      74546872 
 12039      6561644C 
 12039      6F63616C 
 12040              	.LASF52:
 12041 0c0c 70764261 		.ascii	"pvBaseAddress\000"
 12041      73654164 
 12041      64726573 
 12041      7300
 12042              	.LASF122:
 12043 0c1a 70785465 		.ascii	"pxTemp\000"
 12043      6D7000
 12044              	.LASF6:
 12045 0c21 756E7369 		.ascii	"unsigned char\000"
 12045      676E6564 
 12045      20636861 
 12045      7200
 12046              	.LASF139:
 12047 0c2f 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 12047      6B506C61 
 12047      63654F6E 
 12047      556E6F72 
 12047      64657265 
 12048              	.LASF11:
 12049 0c4e 5F5F7569 		.ascii	"__uint32_t\000"
 12049      6E743332 
 12049      5F7400
 12050              	.LASF189:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 323


 12051 0c59 78546173 		.ascii	"xTaskNotifyStateClear\000"
 12051      6B4E6F74 
 12051      69667953 
 12051      74617465 
 12051      436C6561 
 12052              	.LASF214:
 12053 0c6f 764C6973 		.ascii	"vListInitialise\000"
 12053      74496E69 
 12053      7469616C 
 12053      69736500 
 12054              	.LASF148:
 12055 0c7f 70785469 		.ascii	"pxTicksToWait\000"
 12055      636B7354 
 12055      6F576169 
 12055      7400
 12056              	.LASF220:
 12057 0c8d 764C6973 		.ascii	"vListInsert\000"
 12057      74496E73 
 12057      65727400 
 12058              	.LASF133:
 12059 0c99 7578546F 		.ascii	"uxTopPriority\000"
 12059      70507269 
 12059      6F726974 
 12059      7900
 12060              	.LASF63:
 12061 0ca7 75784261 		.ascii	"uxBasePriority\000"
 12061      73655072 
 12061      696F7269 
 12061      747900
 12062              	.LASF126:
 12063 0cb6 76546173 		.ascii	"vTaskDelayUntil\000"
 12063      6B44656C 
 12063      6179556E 
 12063      74696C00 
 12064              	.LASF59:
 12065 0cc6 78457665 		.ascii	"xEventListItem\000"
 12065      6E744C69 
 12065      73744974 
 12065      656D00
 12066              	.LASF107:
 12067 0cd5 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 12067      696F7269 
 12067      74795573 
 12067      65644F6E 
 12067      456E7472 
 12068              	.LASF69:
 12069 0ceb 5443425F 		.ascii	"TCB_t\000"
 12069      7400
 12070              	.LASF92:
 12071 0cf1 78546963 		.ascii	"xTicksToWait\000"
 12071      6B73546F 
 12071      57616974 
 12071      00
 12072              	.LASF29:
 12073 0cfe 70764F77 		.ascii	"pvOwner\000"
 12073      6E657200 
 12074              	.LASF78:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 324


 12075 0d06 70727644 		.ascii	"prvDeleteTCB\000"
 12075      656C6574 
 12075      65544342 
 12075      00
 12076              	.LASF135:
 12077 0d13 76546173 		.ascii	"vTaskSuspend\000"
 12077      6B537573 
 12077      70656E64 
 12077      00
 12078              	.LASF223:
 12079 0d20 76436C65 		.ascii	"vClearInterruptMaskFromISR\000"
 12079      6172496E 
 12079      74657272 
 12079      7570744D 
 12079      61736B46 
 12080              	.LASF124:
 12081 0d3b 78416C72 		.ascii	"xAlreadyYielded\000"
 12081      65616479 
 12081      5969656C 
 12081      64656400 
 12082              	.LASF160:
 12083 0d4b 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 12083      6B476574 
 12083      43757272 
 12083      656E7454 
 12083      61736B48 
 12084              	.LASF73:
 12085 0d65 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 12085      61736B43 
 12085      6865636B 
 12085      46726565 
 12085      53746163 
 12086              	.LASF86:
 12087 0d80 78526567 		.ascii	"xRegions\000"
 12087      696F6E73 
 12087      00
 12088              	.LASF91:
 12089 0d89 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 12089      64644375 
 12089      7272656E 
 12089      74546173 
 12089      6B546F44 
 12090              	.LASF229:
 12091 0da8 70784375 		.ascii	"pxCurrentTCB\000"
 12091      7272656E 
 12091      74544342 
 12091      00
 12092              	.LASF199:
 12093 0db5 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 12093      7272656E 
 12093      744E756D 
 12093      6265724F 
 12093      66546173 
 12094              	.LASF128:
 12095 0dcc 7854696D 		.ascii	"xTimeIncrement\000"
 12095      65496E63 
 12095      72656D65 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 325


 12095      6E7400
 12096              	.LASF3:
 12097 0ddb 7369676E 		.ascii	"signed char\000"
 12097      65642063 
 12097      68617200 
 12098              	.LASF227:
 12099 0de7 46726565 		.ascii	"FreeRTOS\\source\\tasks.c\000"
 12099      52544F53 
 12099      5C736F75 
 12099      7263655C 
 12099      7461736B 
 12100              	.LASF9:
 12101 0dff 73686F72 		.ascii	"short unsigned int\000"
 12101      7420756E 
 12101      7369676E 
 12101      65642069 
 12101      6E7400
 12102              	.LASF94:
 12103 0e12 7854696D 		.ascii	"xTimeToWake\000"
 12103      65546F57 
 12103      616B6500 
 12104              	.LASF58:
 12105 0e1e 78537461 		.ascii	"xStateListItem\000"
 12105      74654C69 
 12105      73744974 
 12105      656D00
 12106              	.LASF71:
 12107 0e2d 70785443 		.ascii	"pxTCB\000"
 12107      4200
 12108              	.LASF20:
 12109 0e33 646F7562 		.ascii	"double\000"
 12109      6C6500
 12110              	.LASF209:
 12111 0e3a 75785363 		.ascii	"uxSchedulerSuspended\000"
 12111      68656475 
 12111      6C657253 
 12111      75737065 
 12111      6E646564 
 12112              	.LASF57:
 12113 0e4f 7078546F 		.ascii	"pxTopOfStack\000"
 12113      704F6653 
 12113      7461636B 
 12113      00
 12114              	.LASF109:
 12115 0e5c 76546173 		.ascii	"vTaskResume\000"
 12115      6B526573 
 12115      756D6500 
 12116              	.LASF87:
 12117 0e68 70727649 		.ascii	"prvInitialiseTaskLists\000"
 12117      6E697469 
 12117      616C6973 
 12117      65546173 
 12117      6B4C6973 
 12118              	.LASF143:
 12119 0e7f 70784576 		.ascii	"pxEventListItem\000"
 12119      656E744C 
 12119      69737449 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccKepDyP.s 			page 326


 12119      74656D00 
 12120              	.LASF155:
 12121 0e8f 70765661 		.ascii	"pvValue\000"
 12121      6C756500 
 12122              	.LASF84:
 12123 0e97 70784372 		.ascii	"pxCreatedTask\000"
 12123      65617465 
 12123      64546173 
 12123      6B00
 12124              	.LASF89:
 12125 0ea5 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 12125      6865636B 
 12125      5461736B 
 12125      73576169 
 12125      74696E67 
 12126              	.LASF228:
 12127 0ec5 433A5C70 		.ascii	"C:\\proj\\acsnb-motor-cypress\\QuadEncoderRTOS.cyds"
 12127      726F6A5C 
 12127      6163736E 
 12127      622D6D6F 
 12127      746F722D 
 12128 0ef5 6E00     		.ascii	"n\000"
 12129              	.LASF106:
 12130 0ef7 75784375 		.ascii	"uxCurrentBasePriority\000"
 12130      7272656E 
 12130      74426173 
 12130      65507269 
 12130      6F726974 
 12131              	.LASF204:
 12132 0f0d 78596965 		.ascii	"xYieldPending\000"
 12132      6C645065 
 12132      6E64696E 
 12132      6700
 12133              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
