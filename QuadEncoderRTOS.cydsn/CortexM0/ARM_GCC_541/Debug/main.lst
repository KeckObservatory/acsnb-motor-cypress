ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RSTIsrHandler,"ax",%progbits
  20              		.align	2
  21              		.global	RSTIsrHandler
  22              		.code	16
  23              		.thumb_func
  24              		.type	RSTIsrHandler, %function
  25              	RSTIsrHandler:
  26              	.LFB43:
  27              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** * Author: Paul Richards, W.M. Keck Observatory
   4:main.c        **** *   (Adapted from original version from Kona Scientific, JP Fumo)
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *  This file provides a SPI interface for the Quadrature Encoder for the ACS project.
   8:main.c        **** *  The I2C device provides readback of motor current consumption.
   9:main.c        **** *
  10:main.c        **** * History:
  11:main.c        **** * 04/07/23 PMR  Rev: 0-2-1 add move timer to messaging, fix jog function
  12:main.c        **** * 02/08/23 PMR  Rev: 0-2-0 rework PID algorithm based on Galil findings
  13:main.c        **** * 07/27/22 PMR  Rev: 0-1-0 convert FreeRTOS to binary-rate-monotonic-scheduler (BRMS)
  14:main.c        **** * 07/09/20 PMR  Rev: 0-0-7 implement zeroing the encoder value
  15:main.c        **** * 07/09/19 PMR  Rev: 0-0-6 fix tuning of INA219 and inhibit encoder report during homing
  16:main.c        **** * 05/09/19 PMR  Rev: 0-0-5 multiple shaper and PID fixes; let encoder go negative
  17:main.c        **** * 03/22/19 PMR  Rev: 0-0-3 add PID separate I limit and simplify limiting code
  18:main.c        **** * 02/07/19 PMR  Rev: 0-0-2 implement revision numbering in protocol
  19:main.c        **** * 12/18/18 PMR  Rev: B  Implement checksummed messaging and max PWM limiting
  20:main.c        **** * 10/11/18 PMR  Rev: A  Implement PWM functions for PDI control
  21:main.c        **** * 07/31/18 PMR  Rev: NC Initial Release after port from Kona Scientific code
  22:main.c        **** *******************************************************************************/
  23:main.c        **** #include <I2C_I2C.h>
  24:main.c        **** #include <stdbool.h>
  25:main.c        **** #include <stdlib.h>
  26:main.c        **** #include <math.h>
  27:main.c        **** #include "pid.h"
  28:main.c        **** #include "INA219.h"
  29:main.c        **** 
  30:main.c        **** /* Firmware revision as of 2023-09-08 */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 2


  31:main.c        **** #define FIRMWARE_REV_0 0
  32:main.c        **** #define FIRMWARE_REV_1 2
  33:main.c        **** #define FIRMWARE_REV_2 2
  34:main.c        **** 
  35:main.c        **** /* Debugging - undefine this for a production system that needs to watchdog */
  36:main.c        **** #define DEBUG_PROBE_ATTACHED 1
  37:main.c        **** 
  38:main.c        **** /* For the ACS test set, the drives are wired backwards!  Use a polarity of -1 in that case. */
  39:main.c        **** //#define DRIVE_POLARITY -1
  40:main.c        **** #define DRIVE_POLARITY 1
  41:main.c        **** 
  42:main.c        **** /* --------------------------------------------------------------------- 
  43:main.c        ****  * CONSTANTS
  44:main.c        ****  * --------------------------------------------------------------------- */
  45:main.c        **** 
  46:main.c        **** /* Interrupt priorities */
  47:main.c        **** #define NESTED_ISR                             (1u)
  48:main.c        **** #define HIGHER_PRIORITY                        (2u)
  49:main.c        **** #define DEFAULT_PRIORITY                       (3u)
  50:main.c        **** 
  51:main.c        **** /* Interrupt prototypes */
  52:main.c        **** CY_ISR_PROTO(HomeIsrHandler);
  53:main.c        **** CY_ISR_PROTO(RSTIsrHandler);
  54:main.c        **** CY_ISR_PROTO(SPI_IsrHandler);
  55:main.c        **** CY_ISR_PROTO(SPI_SS_IsrHandler);
  56:main.c        **** CY_ISR_PROTO(BRMS_Interrupt);
  57:main.c        **** 
  58:main.c        **** /* --------------------------------------------------------------------- 
  59:main.c        ****  * WDT Defines
  60:main.c        ****  *
  61:main.c        ****  * ILO clock is 32KHz (approx. 31ms/count)
  62:main.c        ****  * We will allow the CPU to stall for 2 full seconds before forcibly
  63:main.c        ****  * resetting.  That comes to 64,000 counts for that 2 seconds.
  64:main.c        ****  * --------------------------------------------------------------------- */
  65:main.c        **** #define WDT_COUNT1_REFRESH()                   CySysWdtResetCounters(CY_SYS_WDT_COUNTER1_RESET)
  66:main.c        **** #define WDT_COUNT1_MATCH_RESET                 (0xFA00u)
  67:main.c        **** 
  68:main.c        **** /* --------------------------------------------------------------------- 
  69:main.c        ****  * PWM Defines
  70:main.c        ****  * --------------------------------------------------------------------- */
  71:main.c        **** #define PWM_15KHZ_PERIOD                       (1600)
  72:main.c        **** #define PWM_NEUTRAL_OLD                        (PWM_15KHZ_PERIOD/2)
  73:main.c        **** #define PWM_SET_NEUTRAL                        (0)
  74:main.c        **** 
  75:main.c        **** /* TI INA219 Zero-Drift, Bidirectional Current/Power Monitor With I2C Interface */
  76:main.c        **** #define INA219_I2C_ADDR                        (0x40)
  77:main.c        **** #define INA219_CAL_VALUE                       (8192)
  78:main.c        **** 
  79:main.c        **** /* PWM maximum current value clipped to +/- X% duty cycle around the center (50 by default, full po
  80:main.c        **** #define PWM_MAX_MAGNITUDE                      (50) 
  81:main.c        **** 
  82:main.c        **** /* --------------------------------------------------------------------- 
  83:main.c        ****  * PID Defines
  84:main.c        ****  * --------------------------------------------------------------------- */
  85:main.c        **** #define PID_MANUAL                             (0)
  86:main.c        **** #define PID_AUTOMATIC                          (1)
  87:main.c        **** #define PID_EFFECTIVE_SETPOINT_DELTA_DEFAULT   (250)
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 3


  88:main.c        **** #define OVERRIDE_PID_CONSTANTS                 1
  89:main.c        **** #define ITERM_90PCT_FIT_CONSTANT               (13)
  90:main.c        **** 
  91:main.c        **** bool inAuto = false;
  92:main.c        **** 
  93:main.c        **** volatile int8_t Jog;
  94:main.c        **** bool PID_Enabled, PID_Was_Enabled;
  95:main.c        **** int32_t PID_Setpoint, PID_EffectiveSetpoint;
  96:main.c        **** uint8_t PID_EffSetDelta;
  97:main.c        **** uint32_t lastTime;
  98:main.c        **** 
  99:main.c        **** volatile int32_t Position, LastPosition;
 100:main.c        **** volatile int32_t Output;
 101:main.c        **** volatile uint16_t limitOutput;
 102:main.c        **** volatile uint16_t limitIterm;
 103:main.c        **** 
 104:main.c        **** bool homingDone = true;
 105:main.c        **** 
 106:main.c        **** /* --------------------------------------------------------------------- 
 107:main.c        ****  * Move timer defines
 108:main.c        ****  * 
 109:main.c        ****  * Wait for 30 samples of position to be the same before declaring a move
 110:main.c        ****  * done.
 111:main.c        ****  * --------------------------------------------------------------------- */
 112:main.c        **** #define LAST_MOVE_TIME_SAMPLE_COUNT 30
 113:main.c        **** 
 114:main.c        **** /* Use UptimeMicroseconds to calculate how long a move elapsed */
 115:main.c        **** uint32_t LastMoveStartTimeUsec = 0;
 116:main.c        **** uint32_t LastMoveEndTimeUsec = 0;
 117:main.c        **** 
 118:main.c        **** /* Counter for how many samples elapsed since the move was complete */
 119:main.c        **** uint16_t LastMoveStableCount = 0;
 120:main.c        **** 
 121:main.c        **** /* Time value in microseconds for how long the last move took */
 122:main.c        **** uint32_t LastMoveTimeUsec = 0;
 123:main.c        **** 
 124:main.c        **** /* Set this flag when a new move comes down from the ACS */
 125:main.c        **** bool NewCommandedMove = false;
 126:main.c        **** 
 127:main.c        **** /* --------------------------------------------------------------------- 
 128:main.c        ****  * Timekeeping defines
 129:main.c        ****  * --------------------------------------------------------------------- */
 130:main.c        **** volatile uint64_t UptimeMicroseconds = 0;
 131:main.c        **** volatile uint64_t UptimeMicrosecondsAccumulator = 0;
 132:main.c        **** volatile uint64_t UptimeMilliseconds = 0;
 133:main.c        **** volatile uint64_t UptimeMillisecondsAccumulator = 0;
 134:main.c        **** volatile uint64_t UptimeSeconds = 0;
 135:main.c        **** 
 136:main.c        **** /* --------------------------------------------------------------------- 
 137:main.c        ****  * ENCODER PROPERTIES
 138:main.c        ****  *
 139:main.c        ****  * The encoder counts up and down in Counter_1, which is unsigned 24 bit
 140:main.c        ****  *
 141:main.c        ****  * Note: the negative boundary is defined as 1,048,576 counts of underflow
 142:main.c        ****  * in the Counter_1 value.  This allows us to start at max travel, reset 
 143:main.c        ****  * encoder to 0 and count negative the full travel before hitting the home
 144:main.c        ****  * flag and resetting the counter to 0 again.
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 4


 145:main.c        ****  *
 146:main.c        ****  * (0x100000 or 1.048M is >3x the entire actuator travel)
 147:main.c        ****  * --------------------------------------------------------------------- */
 148:main.c        **** #define ENCODER_MAX                            (0xFFFFFF)             
 149:main.c        **** #define ENCODER_NEGATIVE_BOUNDARY              (0xFFFFFF - 0x100000)  
 150:main.c        **** #define ENCODER_COUNTS_PER_INDEX               (10000)
 151:main.c        **** 
 152:main.c        **** /* --------------------------------------------------------------------- 
 153:main.c        ****  * GLOBALS
 154:main.c        ****  * --------------------------------------------------------------------- */
 155:main.c        **** /* Coarse reporting of state back to the node box software */
 156:main.c        **** typedef enum {    
 157:main.c        ****     csUNDEFINED   = 0,  /* Invalid state */
 158:main.c        ****     csUnconfig    = 1,  /* Unconfigured, freshly rebooted */
 159:main.c        ****     csReady       = 2,  /* Configuration complete and ready for commands */
 160:main.c        ****     csMAX    
 161:main.c        **** } ConfigStates_t;
 162:main.c        **** 
 163:main.c        **** #define configStateValid(s) ( ((ConfigStates_t) s > csUNDEFINED) && ((ConfigStates_t) s < csMAX) )
 164:main.c        **** 
 165:main.c        **** /* Fault codes, these are bit encoded into a uint8_t */
 166:main.c        **** typedef enum {
 167:main.c        ****     fsNONE         = 0b00000000,    /* No faults detected */
 168:main.c        ****     fsUnconfigured = 0b00000001,    /* Attempt to move an unconfigured system */
 169:main.c        ****     fsEncoder      = 0b00000010,    /* One or more encoder phases not changing during a move */
 170:main.c        ****     fsIndex        = 0b00000100,    /* Index marks not seen during a move */
 171:main.c        ****     fsCurrentRead  = 0b00001000,    /* Unable to read current from INA219 device */
 172:main.c        ****     fsChecksum     = 0b00010000,    /* Too many checksum faults */
 173:main.c        ****     fsX2           = 0b00100000,    /* */
 174:main.c        ****     fsX3           = 0b01000000,    /* */
 175:main.c        ****     fsX4           = 0b10000000     /* */
 176:main.c        **** } FaultStates_t;
 177:main.c        **** 
 178:main.c        **** volatile ConfigStates_t ConfigState;
 179:main.c        **** volatile uint8_t FaultState;
 180:main.c        **** volatile uint8_t ConfigSequence;
 181:main.c        **** volatile uint16_t ChecksumErrors;
 182:main.c        **** volatile int16_t MotorCurrent;
 183:main.c        **** uint8_t CurrentI2Cinbuf[20];
 184:main.c        **** 
 185:main.c        **** /* --------------------------------------------------------------------- 
 186:main.c        ****  * SPI MESSAGING
 187:main.c        ****  * --------------------------------------------------------------------- */
 188:main.c        **** /* V2 protocol 
 189:main.c        **** 
 190:main.c        ****    1) Messages have opcodes (configuration, position, get status)
 191:main.c        ****    2) Messages are validated by a checksum instead of an arbitrary signature pattern.
 192:main.c        ****    3) Transfer the max message size every time, regardless of all bytes used or not.
 193:main.c        **** */
 194:main.c        ****     
 195:main.c        **** /* Set this to be at least the size of the status response message */
 196:main.c        **** #define MAX_MESSAGE_SIZE 31
 197:main.c        ****     
 198:main.c        **** /* Remember the last time a message came in so we can timeout moves if the node box stops 
 199:main.c        ****    talking.  Nominally 1 second max of not talking. */
 200:main.c        **** #define MAX_LAST_MESSAGE_TIME_SECONDS 1
 201:main.c        **** uint32_t LastMessageTimeSeconds;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 5


 202:main.c        **** 
 203:main.c        **** /* Opcodes that can come from the node box software */
 204:main.c        **** typedef enum {
 205:main.c        ****     opUNDEFINED = 0,
 206:main.c        ****     opConfig    = 1,
 207:main.c        ****     opStatus    = 2,
 208:main.c        ****     opSetEnc    = 3,
 209:main.c        ****     opMAX       
 210:main.c        **** } rxMessage_opcodes_t;    
 211:main.c        **** 
 212:main.c        **** /* Sanity check for opcodes */
 213:main.c        **** #define rxMessageOpcodeValid(op) ( ((rxMessage_opcodes_t) op > opUNDEFINED) && ((rxMessage_opcodes_
 214:main.c        **** 
 215:main.c        **** typedef struct { 
 216:main.c        ****     uint8_t checksum;        
 217:main.c        ****     uint8_t size;       /* Size of the message bytes, including opcode and size and checksum */
 218:main.c        ****     uint8_t opcode;     /* Operation (generic overlay for previewing opcode value) */
 219:main.c        **** } __attribute__ ((__packed__)) rxMessage_overlay_t;
 220:main.c        **** 
 221:main.c        **** /* Configuration message, 22 bytes */
 222:main.c        **** typedef struct {
 223:main.c        ****     uint8_t checksum;        
 224:main.c        ****     uint8_t size;        /* Size of the message bytes, including opcode and size and checksum */
 225:main.c        ****     uint8_t opcode;      /* Operation: 01 == config */        
 226:main.c        ****     uint8_t sequence;    /* Configuration message sequence number */
 227:main.c        ****     
 228:main.c        ****     uint32_t overrideKp; /* If nonzero, override the PID P term */
 229:main.c        ****     uint32_t overrideKi; /* If nonzero, override the PID I term */
 230:main.c        ****     uint32_t overrideKd; /* If nonzero, override the PID D term */
 231:main.c        ****     
 232:main.c        ****     uint16_t limitOutput;/* Drive output limit, ranges from 0 to 800 */
 233:main.c        ****     uint16_t limitIterm; /* PID I term output limit, ranges from 0 to 800 */
 234:main.c        ****     uint16_t effsetdelta;/* PID effective setpoint increment delta, nominally 250 steps */
 235:main.c        **** } __attribute__ ((__packed__)) rxMessage_config_t;
 236:main.c        **** 
 237:main.c        **** /* Status message, contains desired position and such values, 10 bytes */
 238:main.c        **** typedef struct {
 239:main.c        ****     uint8_t  checksum;        
 240:main.c        ****     uint8_t  size;       /* Size of the message bytes, including opcode and size and checksum */
 241:main.c        ****     uint8_t  opcode;     /* Operation: 02 == status */
 242:main.c        ****     uint8_t  enable;     /* Enable/disable PID algorithm */
 243:main.c        ****     int32_t  setpoint;   /* Setpoint (desired actuator position) */
 244:main.c        ****     int8_t   jog;        /* Jog value, to manually move the motor; valid range -100 to 100 */ 
 245:main.c        ****     uint8_t  clearfaults;/* Set to nonzero to clear all the current faults */
 246:main.c        **** } __attribute__ ((__packed__)) rxMessage_status_t;
 247:main.c        ****    
 248:main.c        **** /* Clear message, contains new encoder position, 7 bytes */
 249:main.c        **** typedef struct {
 250:main.c        ****     uint8_t  checksum;        
 251:main.c        ****     uint8_t  size;       /* Size of the message bytes, including opcode and size and checksum */
 252:main.c        ****     uint8_t  opcode;     /* Operation: 03 == set encoders */
 253:main.c        ****     int32_t  setpoint;   /* Setpoint (force an actuator logical position) */
 254:main.c        **** } __attribute__ ((__packed__)) rxMessage_setenc_t;
 255:main.c        **** 
 256:main.c        **** 
 257:main.c        **** /* Wrap the message with an array of bytes */
 258:main.c        **** union {
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 6


 259:main.c        ****     uint8_t             buf[MAX_MESSAGE_SIZE];
 260:main.c        ****     rxMessage_overlay_t overlay;
 261:main.c        ****     rxMessage_config_t  config;
 262:main.c        ****     rxMessage_status_t  status;  
 263:main.c        ****     rxMessage_setenc_t  setenc;
 264:main.c        **** } rxMessage;
 265:main.c        **** 
 266:main.c        **** /* Message back to the BBB, watch out for alignment here by packing the structure (31 bytes) */
 267:main.c        **** typedef struct  {  
 268:main.c        ****     uint8_t  checksum;        /* Message checksum */    
 269:main.c        ****     uint8_t  version0;        /* Version byte 0 */ 
 270:main.c        ****     uint8_t  version1;        /* Version byte 1 */
 271:main.c        ****     uint8_t  version2;        /* Version byte 2 */
 272:main.c        ****     uint8_t  size;            /* Size of the message bytes, including opcode and size and checksum 
 273:main.c        ****     uint8_t  opcode;          /* Echo back of the opcode this response is for, operation: 02 == sta
 274:main.c        ****     uint8_t  state;           /* Enum value for current device configuration state */ 
 275:main.c        ****     uint8_t  fault;           /* Bit encoded fields for current fault status */
 276:main.c        ****     uint8_t  sequence;        /* Echo back the config sequence number currently set */
 277:main.c        ****     uint16_t checksum_errors; /* Count of checksum errors */
 278:main.c        ****     int16_t  motor_current;   /* Motor current consumption (mA) */
 279:main.c        ****     int32_t  position;        /* Actual actuator position, signed value */ 
 280:main.c        ****     int16_t  pwm;             /* PWM value the motor is moving at */     
 281:main.c        ****     int32_t  iterm;           /* Instantaneous PID iterm value */
 282:main.c        ****     uint32_t last_move_time;  /* Amount of time for the last move, in us */
 283:main.c        ****     int32_t  iterm_delay;     /* Hold-off time remaining before iterm kicks in */
 284:main.c        **** } __attribute__ ((__packed__)) txMessage_t;
 285:main.c        **** 
 286:main.c        **** /* Wrap the message with an array of bytes */
 287:main.c        **** union {    
 288:main.c        ****     uint8_t     buf[MAX_MESSAGE_SIZE];
 289:main.c        ****     txMessage_t msg;
 290:main.c        **** } txMessage;
 291:main.c        **** 
 292:main.c        **** /* State machine definition for transmit side of messaging */
 293:main.c        **** typedef enum {
 294:main.c        ****     txmsClear,    /* Transmit message buffer is empty and needs loading */
 295:main.c        ****     txmsLoaded    /* Transmit message buffer has been loaded by the message thread for sending */
 296:main.c        **** } txMessageStates_t;
 297:main.c        **** 
 298:main.c        **** txMessageStates_t txMessageState;
 299:main.c        **** 
 300:main.c        **** 
 301:main.c        **** 
 302:main.c        **** /* --------------------------------------------------------------------- 
 303:main.c        ****  * Function prototypes
 304:main.c        ****  * --------------------------------------------------------------------- */
 305:main.c        **** int32_t GetPosition(void);
 306:main.c        **** void runRateGroup1_PID(void);
 307:main.c        **** void runRateGroup3_SPI(void);
 308:main.c        **** void MotorCurrentRead(void);
 309:main.c        **** 
 310:main.c        **** 
 311:main.c        **** /*******************************************************************************
 312:main.c        **** * Function Name: AssertFault
 313:main.c        **** ********************************************************************************
 314:main.c        **** * Summary:
 315:main.c        **** *  Sets a flag that a particular fault has been detected.  Assert fsNONE to clear
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 7


 316:main.c        **** *  all faults.
 317:main.c        **** *
 318:main.c        **** * Parameters: FaultStates_t of the fault detected.
 319:main.c        **** * Return: None
 320:main.c        **** *******************************************************************************/
 321:main.c        **** void AssertFault(FaultStates_t fault) {
 322:main.c        ****  
 323:main.c        ****     switch (fault) {
 324:main.c        ****      
 325:main.c        ****         /* Clears all asserted faults */
 326:main.c        ****         case fsNONE:
 327:main.c        ****             FaultState = fsNONE;
 328:main.c        ****             break;        
 329:main.c        ****         
 330:main.c        ****         /* Any other fault has its bit turned on in the fault status */
 331:main.c        ****         default:
 332:main.c        ****             FaultState |= fault;
 333:main.c        ****             break;        
 334:main.c        ****     }    
 335:main.c        **** }
 336:main.c        **** 
 337:main.c        **** 
 338:main.c        **** /*******************************************************************************
 339:main.c        **** * Function Name: ClearFault
 340:main.c        **** ********************************************************************************
 341:main.c        **** * Summary:
 342:main.c        **** *  Clears a flag that a particular fault has been detected.  Assert fsNONE to clear
 343:main.c        **** *  all faults.
 344:main.c        **** *
 345:main.c        **** * Parameters: FaultStates_t of the fault to be cleared.
 346:main.c        **** * Return: None
 347:main.c        **** *******************************************************************************/
 348:main.c        **** void ClearFault(FaultStates_t fault) {
 349:main.c        ****  
 350:main.c        ****     switch (fault) {
 351:main.c        ****      
 352:main.c        ****         /* Clears all asserted faults */
 353:main.c        ****         case fsNONE:
 354:main.c        ****             FaultState = fsNONE;
 355:main.c        ****             break;        
 356:main.c        ****         
 357:main.c        ****         /* Any other fault has its bit turned off in the fault status */
 358:main.c        ****         default:
 359:main.c        ****             FaultState &= ~fault;
 360:main.c        ****             break;        
 361:main.c        ****     }    
 362:main.c        **** }
 363:main.c        **** 
 364:main.c        **** 
 365:main.c        **** /*******************************************************************************
 366:main.c        **** * Function Name: MotorCurrentRead
 367:main.c        **** ********************************************************************************
 368:main.c        **** * Summary:
 369:main.c        **** *  Read the motor current consumption.
 370:main.c        **** *
 371:main.c        **** * Parameters: None
 372:main.c        **** * Return: None
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 8


 373:main.c        **** *******************************************************************************/
 374:main.c        **** void MotorCurrentRead(void) {
 375:main.c        ****     
 376:main.c        ****     //TODO: Convert this to integer math
 377:main.c        ****     float c;
 378:main.c        ****     
 379:main.c        ****     c = getCurrent_mA(INA219_I2C_ADDR);
 380:main.c        ****     
 381:main.c        ****     /* Assign the global MotorCurrent value */
 382:main.c        ****     MotorCurrent = (int16_t) c;       
 383:main.c        **** }
 384:main.c        **** 
 385:main.c        **** 
 386:main.c        **** /*******************************************************************************
 387:main.c        **** * Function Name: Comm_Task
 388:main.c        **** ********************************************************************************
 389:main.c        **** * Summary:
 390:main.c        **** *  Task to perform the SPI communications.
 391:main.c        **** *
 392:main.c        **** * Parameters: None
 393:main.c        **** * Return: None
 394:main.c        **** *******************************************************************************/
 395:main.c        **** void runRateGroup3_SPI(void) {
 396:main.c        ****  
 397:main.c        ****     rxMessage_opcodes_t opcode;
 398:main.c        ****     uint8_t size;
 399:main.c        ****     uint8_t i;
 400:main.c        ****     uint8_t checksum;
 401:main.c        ****     int32_t distance;
 402:main.c        ****     
 403:main.c        ****     /* If the SPI is moving data out right now, do not touch the message buffer, we will
 404:main.c        ****        get to it next cycle! */
 405:main.c        ****     if (SPI_1_SpiIsBusBusy()) 
 406:main.c        ****         return;
 407:main.c        ****     
 408:main.c        ****     /* In certain states, this thread is responsible for loading the outbound messaging */
 409:main.c        ****     switch (txMessageState) {
 410:main.c        ****      
 411:main.c        ****         /* Output buffer is clear and ready for loading, rxMessage is (probably) good and needs pro
 412:main.c        ****         case txmsClear:
 413:main.c        ****                 
 414:main.c        ****             /* Get a few items out of the message before checking the sum */
 415:main.c        ****             size     = rxMessage.overlay.size;
 416:main.c        ****             opcode   = (rxMessage_opcodes_t) rxMessage.overlay.opcode;
 417:main.c        ****             
 418:main.c        ****             /* Make sure the size makes sense.  If we have to reset the size it's probably a corrup
 419:main.c        ****             if (size > sizeof(txMessage.buf))
 420:main.c        ****                 size = sizeof(txMessage.buf);                            
 421:main.c        ****         
 422:main.c        ****             /* Calculate the checksum by summing the bytes of the entire message, it should resolve
 423:main.c        ****             for (i = 0, checksum = 0; i < size; i++)
 424:main.c        ****                 checksum += rxMessage.buf[i]; 
 425:main.c        **** 
 426:main.c        ****             /* Checksum fault, don't try to process the messgage */
 427:main.c        ****             if ((checksum & 0xFF) != 0) {
 428:main.c        ****                 
 429:main.c        ****                 txMessage.msg.opcode = opcode;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 9


 430:main.c        ****                 txMessage.msg.size = sizeof(txMessage_t);
 431:main.c        ****                 ChecksumErrors++;
 432:main.c        ****                 
 433:main.c        ****             /* Message looks fine, process it */
 434:main.c        ****             } else {
 435:main.c        **** 
 436:main.c        ****                 /* Message opcode must be valid before trying to process the message contents */
 437:main.c        ****                 if ( rxMessageOpcodeValid(opcode) ) {                            
 438:main.c        ****                 
 439:main.c        ****                     switch (opcode) {
 440:main.c        ****                     
 441:main.c        ****                         case opConfig:
 442:main.c        ****                             /* Special message to establish settings on the device such as PID gain
 443:main.c        ****                         
 444:main.c        ****                             /* Remember where we were when the init was sent */
 445:main.c        ****                             LastPosition = GetPosition();
 446:main.c        ****                            
 447:main.c        ****                             /* Initialize the setpoints to be equal to where we are right now.*/
 448:main.c        ****                             PID_Setpoint = LastPosition;
 449:main.c        ****                             PID_EffectiveSetpoint = LastPosition;                                  
 450:main.c        ****                             
 451:main.c        ****                             /* Disable PID if it's on */
 452:main.c        ****                             PID_Was_Enabled = false;
 453:main.c        ****                             PID_Enabled = false;
 454:main.c        **** 
 455:main.c        ****                             /* Stop a jog if one was in progress */
 456:main.c        ****                             Jog = 0;
 457:main.c        ****                             
 458:main.c        ****                             /* Output and Iterm limits */
 459:main.c        ****                             limitOutput = rxMessage.config.limitOutput;
 460:main.c        ****                             limitIterm = rxMessage.config.limitIterm;
 461:main.c        ****                                 
 462:main.c        ****                                 
 463:main.c        ****                             /* Update the PID values passed down from the server */
 464:main.c        ****                         
 465:main.c        **** #ifndef OVERRIDE_PID_CONSTANTS
 466:main.c        ****                             kp = rxMessage.config.Kp;
 467:main.c        ****                             ki = rxMessage.config.Ki;
 468:main.c        ****                             kd = rxMessage.config.Kd;      
 469:main.c        ****                         
 470:main.c        ****                             /* PID effective setpoint increment delta value */                     
 471:main.c        ****                             PID_EffSetDelta = rxMessage.config.effsetdelta;
 472:main.c        **** #endif
 473:main.c        ****                         
 474:main.c        ****                             /* We have received a config message, so signal to the PID thread that 
 475:main.c        ****                             ConfigState = csReady;  
 476:main.c        ****                             ConfigSequence = rxMessage.config.sequence;
 477:main.c        ****                         
 478:main.c        ****                             /* Clear all the faults when reconfigured */
 479:main.c        ****                             ClearFault(fsNONE);
 480:main.c        ****                             break;
 481:main.c        **** 
 482:main.c        ****                         case opStatus:
 483:main.c        ****                             /* The normal message telling us where to go, how much to jog, enable o
 484:main.c        ****                             PID_Enabled = (bool) rxMessage.status.enable;
 485:main.c        ****                             
 486:main.c        ****                             /* If we are commanded to move somewhere else, remember where we starte
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 10


 487:main.c        ****                             if (PID_Setpoint != rxMessage.status.setpoint) {
 488:main.c        ****                                 
 489:main.c        ****                                 /* This is a new move, start timing! */
 490:main.c        ****                                 NewCommandedMove = true;
 491:main.c        ****                                 LastMoveStartTimeUsec = UptimeMicroseconds;
 492:main.c        ****                                 
 493:main.c        ****                                 /* Remember where we started */
 494:main.c        ****                                 LastPosition = GetPosition();
 495:main.c        ****                                 
 496:main.c        ****                                 /* Update destination */
 497:main.c        ****                                 PID_Setpoint = rxMessage.status.setpoint;
 498:main.c        ****                                 
 499:main.c        ****                                 /* Initialize the effective setpoint to be equal to where we are ri
 500:main.c        ****                                 it will be incremented/decremented when the PID algorithm runs next
 501:main.c        ****                                 PID_EffectiveSetpoint = LastPosition;                              
 502:main.c        ****                                 
 503:main.c        ****                                 /* Reset counting of index marks */
 504:main.c        ****                                 Index_Counter_1_WriteCounter(0);
 505:main.c        ****                                 
 506:main.c        ****                                 
 507:main.c        ****                                 /* The demand has changed.  Hold off the integrator for a certain a
 508:main.c        ****                                 dictated by the size of the move (if it's more than 50 counts) */
 509:main.c        ****                                 distance = PID_Setpoint - LastPosition;                            
 510:main.c        ****                                 if (distance < 0) {
 511:main.c        ****                                     distance = -distance;
 512:main.c        ****                                 }
 513:main.c        ****                                 
 514:main.c        ****                                 if (distance > 50) {                                
 515:main.c        ****                                     iterm_delay = ((distance / 16) + ITERM_90PCT_FIT_CONSTANT) * 10
 516:main.c        ****                                     //iterm_delay = distance >> 4;  // Shift by 4 is equal to div b
 517:main.c        ****                                 } else {
 518:main.c        ****                                     iterm_delay = 0;
 519:main.c        ****                                 }
 520:main.c        ****                                 
 521:main.c        ****                                 /* The demand has changed, reset the iterm to discharge any build u
 522:main.c        ****                                 iterm = 0;
 523:main.c        ****                             }                                        
 524:main.c        ****                         
 525:main.c        ****                             /* PWM jog value ranges from -100 to 100, where -100 is max-reverse cur
 526:main.c        ****                             100 is max-forward, 0 is neutral/no movement */
 527:main.c        ****                             Jog = rxMessage.status.jog;                                            
 528:main.c        ****                             break;
 529:main.c        ****                         
 530:main.c        ****                         case opSetEnc:
 531:main.c        ****                             /* The message is telling us what to arbitrarily set the encoder values
 532:main.c        ****                             Counter_1_WriteCounter(rxMessage.status.setpoint);
 533:main.c        ****                             LastPosition = rxMessage.status.setpoint;
 534:main.c        ****                             break;                                        
 535:main.c        ****                             
 536:main.c        ****                         /* No other opcodes are valid */
 537:main.c        ****                         default:
 538:main.c        ****                             break;
 539:main.c        ****                     }                           
 540:main.c        ****                 }                            
 541:main.c        ****             }
 542:main.c        ****             
 543:main.c        ****             /* Get a fresh copy of the position information */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 11


 544:main.c        ****             Position = GetPosition();
 545:main.c        ****             
 546:main.c        ****             /* Fill out the common reponse the same way every time, as a status response */
 547:main.c        ****             txMessage.msg.checksum        = 0;
 548:main.c        ****             txMessage.msg.version0        = FIRMWARE_REV_0;
 549:main.c        ****             txMessage.msg.version1        = FIRMWARE_REV_1;
 550:main.c        ****             txMessage.msg.version2        = FIRMWARE_REV_2;
 551:main.c        ****             txMessage.msg.size            = sizeof(txMessage_t);
 552:main.c        ****             txMessage.msg.opcode          = opStatus;
 553:main.c        ****             txMessage.msg.state           = (uint8_t) ConfigState;
 554:main.c        ****             txMessage.msg.fault           = (uint8_t) FaultState;
 555:main.c        ****             txMessage.msg.checksum_errors = ChecksumErrors;
 556:main.c        ****             txMessage.msg.sequence        = ConfigSequence;
 557:main.c        ****             txMessage.msg.position        = Position;
 558:main.c        ****             txMessage.msg.pwm             = Output;
 559:main.c        ****             txMessage.msg.iterm           = iterm;
 560:main.c        ****             txMessage.msg.motor_current   = MotorCurrent;                  
 561:main.c        ****             txMessage.msg.last_move_time  = LastMoveTimeUsec;
 562:main.c        ****             txMessage.msg.iterm_delay     = iterm_delay;
 563:main.c        ****             
 564:main.c        ****             /* Set the checksum in the response */
 565:main.c        ****             for (i = 0, checksum = 0; i < sizeof(txMessage_t); i++)
 566:main.c        ****                 checksum += txMessage.buf[i]; 
 567:main.c        ****                 
 568:main.c        ****             /* Take the 2's complement of the sum and put it back in the message */
 569:main.c        ****             txMessage.msg.checksum = ~checksum + 1;
 570:main.c        ****                 
 571:main.c        ****             /* Copy the readied buffer out to the FIFO */
 572:main.c        ****             //TODO: should we clear this here, or at the end of the transmit complete interrupt?   
 573:main.c        ****             SPI_1_SpiUartPutArray(txMessage.buf, sizeof(txMessage.buf)); 
 574:main.c        **** 
 575:main.c        ****             /* Indicate it's loaded for use */
 576:main.c        ****             txMessageState = txmsLoaded;
 577:main.c        ****             
 578:main.c        ****             /* Clear all the faults if told to */
 579:main.c        ****             if ((bool) rxMessage.status.clearfaults)
 580:main.c        ****                 ClearFault(fsNONE);
 581:main.c        ****         
 582:main.c        ****             break;
 583:main.c        ****     
 584:main.c        ****         /* A message was already readied for transmission, nothing to do here */
 585:main.c        ****         case txmsLoaded:                
 586:main.c        ****             break;
 587:main.c        ****                 
 588:main.c        ****     } // End of message state case statement
 589:main.c        **** 
 590:main.c        **** }
 591:main.c        ****     
 592:main.c        **** 
 593:main.c        **** /*******************************************************************************
 594:main.c        **** * Function Name: PWM_Set
 595:main.c        **** ********************************************************************************
 596:main.c        **** * Summary:
 597:main.c        **** *  Sets the duty cycle of the PWM at the output pin.
 598:main.c        **** *
 599:main.c        **** * Parameters: Duty cycle, from -800 to 800 where 0 is neutral (no movement).
 600:main.c        **** * 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 12


 601:main.c        **** * Return: None
 602:main.c        **** *******************************************************************************/
 603:main.c        **** void PWM_Set(int32_t output) {    
 604:main.c        ****         
 605:main.c        ****     /* output varies from -800 to 800, which needs to be expressed as 0 to 1600 
 606:main.c        ****        for the PWM */
 607:main.c        ****     PWM_1_WriteCompare((PWM_15KHZ_PERIOD/2) + (DRIVE_POLARITY * output));    
 608:main.c        **** }
 609:main.c        **** 
 610:main.c        **** 
 611:main.c        **** /*******************************************************************************
 612:main.c        **** * Function Name: GetPosition
 613:main.c        **** ********************************************************************************
 614:main.c        **** * Summary:
 615:main.c        **** *  Get the physical position value and compensate for negative locations.
 616:main.c        **** *
 617:main.c        **** * Parameters: None
 618:main.c        **** * Return: int32_t (signed!) position value
 619:main.c        **** *******************************************************************************/
 620:main.c        **** int32_t GetPosition(void) {
 621:main.c        ****     
 622:main.c        ****     static volatile uint32_t RawPosition;
 623:main.c        ****     static volatile int32_t result;
 624:main.c        ****     
 625:main.c        ****     /* Get up-to-date position from the 24 bit unsigned counter*/
 626:main.c        ****     RawPosition = Counter_1_ReadCounter();   
 627:main.c        ****     
 628:main.c        ****     /* If the raw position is higher than some extremely high number, treat it as 
 629:main.c        ****        underflow and make that into a negative value */
 630:main.c        ****     if (RawPosition > ENCODER_NEGATIVE_BOUNDARY) {
 631:main.c        ****         
 632:main.c        ****         result = (-1) * ((int32_t) ENCODER_MAX - (int32_t) RawPosition);
 633:main.c        ****         
 634:main.c        ****     } else {
 635:main.c        ****      
 636:main.c        ****         /* Value is "positive", treat it normally */
 637:main.c        ****         result = (int32_t) RawPosition;
 638:main.c        ****     }
 639:main.c        ****     
 640:main.c        ****     /* Update the master copy of position information */
 641:main.c        ****     Position = result;
 642:main.c        ****     return result;
 643:main.c        **** }
 644:main.c        **** 
 645:main.c        **** 
 646:main.c        **** /*******************************************************************************
 647:main.c        **** * Function Name: PID_Initialize
 648:main.c        **** ********************************************************************************
 649:main.c        **** * Summary:
 650:main.c        **** *  Setup and reset the PID terms.
 651:main.c        **** *
 652:main.c        **** * Parameters: None
 653:main.c        **** * Return: None
 654:main.c        **** *******************************************************************************/
 655:main.c        **** void PID_Initialize(void) {
 656:main.c        ****     
 657:main.c        ****     /* Get up-to-date position */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 13


 658:main.c        ****     Position = GetPosition();
 659:main.c        ****     LastPosition = Position;
 660:main.c        ****     
 661:main.c        ****     /* Initialize the effective setpoint to be equal to where we are right now,
 662:main.c        ****     it will be incremented/decremented when the PID algorithm runs next time */
 663:main.c        ****     PID_EffectiveSetpoint = LastPosition;
 664:main.c        ****     
 665:main.c        ****     /* 2019-03-13 PMR: Init to zero instead of the output value, since we are not
 666:main.c        ****        switching from manual to auto frequently */
 667:main.c        ****     iterm = 0;
 668:main.c        **** }    
 669:main.c        **** 
 670:main.c        **** 
 671:main.c        **** /*******************************************************************************
 672:main.c        **** * Function Name: PID_SetMode
 673:main.c        **** ********************************************************************************
 674:main.c        **** * Summary:
 675:main.c        **** *  Sets the PID into automatic or manual mode.
 676:main.c        **** *
 677:main.c        **** * Parameters: Mode, either PID_AUTOMATIC or PID_MANUAL.
 678:main.c        **** * Return: None
 679:main.c        **** *******************************************************************************/
 680:main.c        **** void PID_SetMode(uint32_t Mode) {
 681:main.c        ****     
 682:main.c        ****     bool newAuto = (Mode == PID_AUTOMATIC);
 683:main.c        ****     
 684:main.c        ****     if (newAuto && !inAuto) {  
 685:main.c        ****         /*we just went from manual to auto*/
 686:main.c        ****         PID_Initialize();
 687:main.c        ****     }
 688:main.c        ****     
 689:main.c        ****     inAuto = newAuto;
 690:main.c        **** } 
 691:main.c        **** 
 692:main.c        **** 
 693:main.c        **** /*******************************************************************************
 694:main.c        **** * Function Name: runRateGroup1_PID
 695:main.c        **** ********************************************************************************
 696:main.c        **** * Summary:
 697:main.c        **** *  Task to perform the PID calculations.
 698:main.c        **** *
 699:main.c        **** * Parameters: None
 700:main.c        **** * Return: None
 701:main.c        **** *******************************************************************************/
 702:main.c        **** void runRateGroup1_PID(void) {
 703:main.c        ****      
 704:main.c        ****     /////////////////////////////////////////////////////
 705:main.c        ****     // TESTING ONLY
 706:main.c        ****     //ConfigState = csReady;
 707:main.c        ****     //PID_Enabled = true;
 708:main.c        ****     /////////////////////////////////////////////////////
 709:main.c        **** 
 710:main.c        ****     /* If the server hasn't talked to us in a while (no messages on the SPI), 
 711:main.c        ****        take preventative action and abandon any moves in progress. */
 712:main.c        ****     if (UptimeSeconds > (LastMessageTimeSeconds + MAX_LAST_MESSAGE_TIME_SECONDS)) {
 713:main.c        ****         
 714:main.c        ****         /* Stop all motion */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 14


 715:main.c        ****         PWM_Set(PWM_SET_NEUTRAL);
 716:main.c        ****         PID_Enabled = false;
 717:main.c        ****         
 718:main.c        ****         /* Clear the values that would drive motion on the next message arrival.  Assume the 
 719:main.c        ****         next message might be a config, in which case we want to be neutral. */
 720:main.c        ****         Jog = 0;
 721:main.c        **** 
 722:main.c        ****     /* Only run the PID algorithm if we have been configured by the nodebox software */
 723:main.c        ****     } else if (ConfigState == csReady) {
 724:main.c        ****         
 725:main.c        ****         /* Enable the drive outputs for the home and index once configured, otherwise they
 726:main.c        ****            can screw up the boot pins on the BeagleBoneBlack */
 727:main.c        ****         HOME_OUT_SetDriveMode(HOME_OUT_DM_STRONG); 
 728:main.c        ****         INDEX_OUT_SetDriveMode(INDEX_OUT_DM_STRONG); 
 729:main.c        **** 
 730:main.c        ****         /* Handle mode switching */
 731:main.c        ****         if (!PID_Was_Enabled && PID_Enabled) {
 732:main.c        ****             PID_SetMode(PID_AUTOMATIC);
 733:main.c        ****         } else if (!PID_Enabled && PID_Was_Enabled) {
 734:main.c        ****             PID_SetMode(PID_MANUAL);                
 735:main.c        ****         } else {
 736:main.c        ****             // No mode change happened   
 737:main.c        ****         }
 738:main.c        ****         
 739:main.c        ****         /* Save value for next cycle */
 740:main.c        ****         PID_Was_Enabled = PID_Enabled;
 741:main.c        ****         
 742:main.c        ****         /* Calculate the effective setpoint, which is defined as N (nominally 25) counts closer to 
 743:main.c        ****         actual setpoint, incremented once per cycle of this algorithm.  
 744:main.c        ****     
 745:main.c        ****         Consider a move of +2000 counts from position 0 to 2000: 
 746:main.c        ****         
 747:main.c        ****         1) The setpoint will change to 2000.
 748:main.c        ****         2) The effective setpoint is initialized to the current position, plus 25 counts = 25.
 749:main.c        ****         3) Calculate the PID and return.
 750:main.c        ****         4) The next time PID_Compute is called, increment the effective setpoint by 25 counts = 50.
 751:main.c        ****         5) Calculate the PID and return.
 752:main.c        ****         6) Repeat steps 4 and 5 until the effective setpoint equals the actual setpoint.           
 753:main.c        ****         */
 754:main.c        ****         
 755:main.c        ****         if (PID_Enabled) {
 756:main.c        ****             
 757:main.c        ****             if (PID_EffSetDelta == 0) {
 758:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;
 759:main.c        ****             } else if ( labs(PID_EffectiveSetpoint - PID_Setpoint) <= (2 * PID_EffSetDelta) ) {
 760:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;                                              
 761:main.c        ****             } else if (PID_Setpoint > PID_EffectiveSetpoint) {
 762:main.c        ****                 PID_EffectiveSetpoint = (PID_EffectiveSetpoint + PID_EffSetDelta);
 763:main.c        ****             } else {
 764:main.c        ****                 PID_EffectiveSetpoint = (PID_EffectiveSetpoint - PID_EffSetDelta);
 765:main.c        ****             }
 766:main.c        ****             
 767:main.c        ****             /* Get most up-to-date current position */
 768:main.c        ****             Position = GetPosition();
 769:main.c        ****             
 770:main.c        ****             /* Run the PID algorithm once */
 771:main.c        ****             Output = PID_UpdateValues(PID_EffectiveSetpoint, Position);
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 15


 772:main.c        ****             
 773:main.c        ****             /* Put the PID output value out on the wire */
 774:main.c        ****             PWM_Set(Output);
 775:main.c        ****             
 776:main.c        ****             /* Calculate how long the last commanded move has taken */
 777:main.c        ****             if (NewCommandedMove) {
 778:main.c        ****                 
 779:main.c        ****                 if (Position == PID_Setpoint) {
 780:main.c        ****                     
 781:main.c        ****                     /* We are at the set point, but it's not known if the motion is stable yet, we 
 782:main.c        ****                     Therefore, count how many times we have held at this location.  When it exceeds
 783:main.c        ****                     use the time we first reached this position as the move's end time. */
 784:main.c        ****                     if (LastMoveStableCount == LAST_MOVE_TIME_SAMPLE_COUNT) {
 785:main.c        ****                         
 786:main.c        ****                         /* We have arrived at the set point and have been here for 6ms (30 counts o
 787:main.c        ****                         good and calculate how long this move took */
 788:main.c        ****                         LastMoveTimeUsec = LastMoveEndTimeUsec - LastMoveStartTimeUsec;
 789:main.c        ****                         
 790:main.c        ****                         /* Clear the flag for this particular move */ 
 791:main.c        ****                         NewCommandedMove = false;
 792:main.c        ****                         
 793:main.c        ****                     } else {
 794:main.c        ****                         
 795:main.c        ****                         /* We have reached the destination but it is not yet proven stable. Increme
 796:main.c        ****                         It will be reset to zero if we deviate from this position. */              
 797:main.c        ****                         LastMoveStableCount += 1;
 798:main.c        **** 
 799:main.c        ****                         /* If the stable count is exactly 1, then this might be the start of a new 
 800:main.c        ****                         note the time.  This is potentially the END TIME of a move.  The start time
 801:main.c        ****                         when the node box sent a new set point. */
 802:main.c        ****                         if (LastMoveStableCount == 1) {
 803:main.c        ****                             LastMoveEndTimeUsec = UptimeMicroseconds;
 804:main.c        ****                         }                    
 805:main.c        ****                     }                
 806:main.c        ****                     
 807:main.c        ****                 } else {
 808:main.c        ****                     
 809:main.c        ****                     /* Reset the stable counter, because we are not at the commanded location */
 810:main.c        ****                     LastMoveStableCount = 0;                
 811:main.c        ****                 }
 812:main.c        ****             }
 813:main.c        **** 
 814:main.c        ****         } else {
 815:main.c        ****             
 816:main.c        ****             /* If the server is asking us to jog, do that instead of PID.  Drive in the direction 
 817:main.c        ****             and speed the server told us.  Translate the jog percentage, from -100 to +100, into 
 818:main.c        ****             PWM_Set values from -800 to 800 */
 819:main.c        ****             Output = (Jog * 8);
 820:main.c        ****             
 821:main.c        ****             /* Put the new jog value on the wire, instead of a PID value */
 822:main.c        ****             PWM_Set(Output);            
 823:main.c        ****         }        
 824:main.c        ****         
 825:main.c        ****     } else {
 826:main.c        ****         
 827:main.c        ****         /* Config state is not ready (configured), inhibit all motion */
 828:main.c        ****         PWM_Set(PWM_SET_NEUTRAL);        
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 16


 829:main.c        ****     }
 830:main.c        **** }
 831:main.c        **** 
 832:main.c        **** 
 833:main.c        **** /*******************************************************************************
 834:main.c        **** * Function Name: main
 835:main.c        **** ********************************************************************************
 836:main.c        **** * Summary:
 837:main.c        **** *  Setup tasks, interrupts, and perform the background task functions.
 838:main.c        **** *
 839:main.c        **** * Parameters: None
 840:main.c        **** * Return: NEVER!
 841:main.c        **** *******************************************************************************/
 842:main.c        **** int main(void) {
 843:main.c        ****     
 844:main.c        ****     /* DISABLE the drive outputs for the home and index immediately upon booting the 
 845:main.c        ****        microprocessor.  There is a race condition here: unless the actuator is on a home
 846:main.c        ****        flag or index mark, a 1 will be written to each output.  Depending on which 
 847:main.c        ****        Cypress device this is, it could end up going to one of the boot pins of the Beagle
 848:main.c        ****        Bone Black device.  Undesirable results can result: corrupt serial output on the
 849:main.c        ****        console, inabulity to boot from eMMC, or even a complete failure to power on. */
 850:main.c        ****     HOME_OUT_SetDriveMode(HOME_OUT_DM_DIG_HIZ); 
 851:main.c        ****     INDEX_OUT_SetDriveMode(INDEX_OUT_DM_DIG_HIZ); 
 852:main.c        **** 
 853:main.c        ****     
 854:main.c        ****     /********************************************************************** 
 855:main.c        ****     * Interrupts
 856:main.c        ****     **********************************************************************/
 857:main.c        ****     
 858:main.c        ****     /* BRMS timer interrupt */
 859:main.c        ****     Timer_BRMS_Start();
 860:main.c        ****     isr_brms_StartEx(BRMS_Interrupt);
 861:main.c        ****     isr_brms_SetPriority(HIGHER_PRIORITY);
 862:main.c        **** 
 863:main.c        ****     /* Sets up the Index and Reset interrupt and enables them */
 864:main.c        ****     isr_home_StartEx(HomeIsrHandler);
 865:main.c        ****     isr_home_SetPriority(DEFAULT_PRIORITY);
 866:main.c        **** 
 867:main.c        ****     /* Encoder interrupt */
 868:main.c        ****     isr_rst_encoder_StartEx(RSTIsrHandler);
 869:main.c        ****     isr_rst_encoder_SetPriority(DEFAULT_PRIORITY);
 870:main.c        ****     
 871:main.c        ****     /* Setup the SPI slave select interrupt ISR */
 872:main.c        ****     isr_spi_ss_StartEx(SPI_SS_IsrHandler);
 873:main.c        ****     isr_spi_ss_SetPriority(DEFAULT_PRIORITY);   
 874:main.c        **** 
 875:main.c        ****     /* Enable the global interrupt */
 876:main.c        ****     CyGlobalIntEnable;
 877:main.c        ****     
 878:main.c        ****     /********************************************************************** 
 879:main.c        ****     * Watchdog timer.  Implements the WDT1 automatic CPU reset.
 880:main.c        ****     **********************************************************************/
 881:main.c        **** 
 882:main.c        ****     /* If you are using the JTAG debugging probe, turn off the watchdog by
 883:main.c        ****        defining DEBUG_PROBE_ATTACHED to something, or it will reset the CPU
 884:main.c        ****        when you hit a breakpoint. */
 885:main.c        **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 17


 886:main.c        **** #ifndef DEBUG_PROBE_ATTACHED
 887:main.c        **** 	/* Set WDT counter 1 to generate reset on match */
 888:main.c        **** 	CySysWdtWriteMatch(CY_SYS_WDT_COUNTER1, WDT_COUNT1_MATCH_RESET);
 889:main.c        **** 	CySysWdtWriteMode(CY_SYS_WDT_COUNTER1, CY_SYS_WDT_MODE_RESET);
 890:main.c        ****     CySysWdtWriteClearOnMatch(CY_SYS_WDT_COUNTER1, 1u);
 891:main.c        **** 	
 892:main.c        **** 	/* Enable WDT counter 1 */
 893:main.c        **** 	CySysWdtEnable(CY_SYS_WDT_COUNTER1_MASK);
 894:main.c        **** 	
 895:main.c        **** 	/* Lock WDT registers and try to disable WDT 1 */
 896:main.c        **** 	CySysWdtLock();
 897:main.c        **** 	CySysWdtDisable(CY_SYS_WDT_COUNTER1_MASK);
 898:main.c        **** 	CySysWdtUnlock();        
 899:main.c        **** #endif    
 900:main.c        **** 
 901:main.c        ****     
 902:main.c        ****     /*********************************************************************** 
 903:main.c        ****     * Start the various subsystems.
 904:main.c        ****     ***********************************************************************/
 905:main.c        ****     I2C_Start();
 906:main.c        ****     
 907:main.c        ****     /* Start I2C for the Motor Current monitor */
 908:main.c        ****     //Init_INA(INA219_I2C_ADDR);
 909:main.c        ****     
 910:main.c        ****     CyDelay(100u);
 911:main.c        ****     SPI_1_Start();
 912:main.c        ****     
 913:main.c        ****     /* Setup the PWM at a base frequency of 15KHz, 50% duty cycle.  Clock_1 is set to
 914:main.c        ****        12MHz, so the desired period to get 15KHz is a count of 800. */
 915:main.c        ****     PWM_1_Start();
 916:main.c        ****     PWM_1_WritePeriod(PWM_15KHZ_PERIOD);
 917:main.c        ****     PWM_Set(PWM_SET_NEUTRAL);   
 918:main.c        ****     
 919:main.c        ****     /* Default the jog value to neutral (no movement) */
 920:main.c        ****     Jog = 0;
 921:main.c        ****     
 922:main.c        ****     /* Set a flag that homing is not done yet, since we just booted */
 923:main.c        ****     homingDone = false;
 924:main.c        ****    
 925:main.c        ****     /* Start counting the quadrature encoding */
 926:main.c        ****     Counter_1_Start();    
 927:main.c        ****     Counter_1_WriteCounter(ENCODER_MAX);  // Set the encoder initially to mid range
 928:main.c        ****     LastPosition = ENCODER_MAX;
 929:main.c        ****     
 930:main.c        ****     /* Clear and start the index mark counter */
 931:main.c        ****     Index_Counter_1_Start();
 932:main.c        ****     Index_Counter_1_WriteCounter(0);
 933:main.c        ****      
 934:main.c        ****     /* Start off unconfigured */
 935:main.c        ****     ConfigState = csUnconfig;  
 936:main.c        ****     ConfigSequence = 0;
 937:main.c        ****     ChecksumErrors = 0;
 938:main.c        ****     
 939:main.c        ****     /***************************/
 940:main.c        ****     /* Setup the PID subsystem */
 941:main.c        ****     PID_Initialize();
 942:main.c        ****     PID_SetMode(PID_MANUAL);
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 18


 943:main.c        ****     
 944:main.c        ****     /* Initially default to full output max until config tells us otherwise */
 945:main.c        ****     limitOutput = 800;
 946:main.c        ****     limitIterm = 800;
 947:main.c        ****     
 948:main.c        ****     /* Start off disabled */
 949:main.c        ****     PID_Setpoint          = 0;  
 950:main.c        ****     PID_EffectiveSetpoint = 0;
 951:main.c        ****     PID_EffSetDelta       = 250; //PID_EFFECTIVE_SETPOINT_DELTA_DEFAULT;
 952:main.c        ****     PID_Was_Enabled       = false;
 953:main.c        ****     PID_Enabled           = false;
 954:main.c        ****     PWM_Set(PWM_SET_NEUTRAL);
 955:main.c        ****   
 956:main.c        ****     /* Set the encoder direction sense based on the drive polarity */
 957:main.c        ****     if (DRIVE_POLARITY == 1) {
 958:main.c        ****         EncoderDirection_Write(1);
 959:main.c        ****     } else {
 960:main.c        ****         EncoderDirection_Write(0);
 961:main.c        ****     }
 962:main.c        ****     
 963:main.c        ****     /***********************************************************************
 964:main.c        ****     * Run the background tasks.  Assume anything executed in here will be
 965:main.c        ****     * constantly interrupted by the task scheduler.
 966:main.c        ****     ***********************************************************************/
 967:main.c        ****     while (1) {
 968:main.c        **** 
 969:main.c        ****         /* Read the current */
 970:main.c        ****         MotorCurrentRead();
 971:main.c        ****         
 972:main.c        ****         /* Use the LED as a heartbeat */
 973:main.c        ****         if (UptimeSeconds % 2) {
 974:main.c        ****             LED_Write(1);
 975:main.c        ****         } else {
 976:main.c        ****             LED_Write(0);
 977:main.c        ****         } 
 978:main.c        ****         
 979:main.c        ****         /* Delay 10ms before next loop iteration.  Tune this value to regulate
 980:main.c        ****         how often we read the motor current */ 
 981:main.c        ****         CyDelay(10);         
 982:main.c        ****         
 983:main.c        ****         
 984:main.c        ****    
 985:main.c        ****     /* ------------------------------------------------------------------------------------ */
 986:main.c        ****     /* Every loop, refresh the counter of the watchdog to indicate the system is still alive
 987:main.c        ****        and not stalled out in some interrupt somewhre.  Were the BRMS to stop working or the 
 988:main.c        ****        motion thread to die, the CPU will be reset after 2 seconds. */
 989:main.c        **** #ifndef DEBUG_PROBE_ATTACHED    
 990:main.c        ****         WDT_COUNT1_REFRESH();        
 991:main.c        **** #endif
 992:main.c        ****     /* ------------------------------------------------------------------------------------ */
 993:main.c        ****         
 994:main.c        ****     }
 995:main.c        ****       
 996:main.c        ****     
 997:main.c        ****     /***********************************************************************
 998:main.c        ****     *  We should never reach this, if we do, we'll crash (reset).
 999:main.c        ****     ***********************************************************************/
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 19


1000:main.c        ****     return 1;       
1001:main.c        **** }
1002:main.c        **** 
1003:main.c        **** 
1004:main.c        **** /*******************************************************************************
1005:main.c        **** * Function Name: BRMS_Interrupt
1006:main.c        **** ********************************************************************************
1007:main.c        **** * Summary:
1008:main.c        **** *  Hooks the 200us tick for the BRMS scheduler.
1009:main.c        **** *
1010:main.c        **** * Parameters: None
1011:main.c        **** * Return: None
1012:main.c        **** *******************************************************************************/
1013:main.c        **** CY_ISR(BRMS_Interrupt) {
1014:main.c        ****     
1015:main.c        ****     static uint32_t brmsTask;                 // The BRMS schedule counter
1016:main.c        **** 
1017:main.c        ****     static uint32_t brmsRG1Mask = 0b00000001; // Rate group 1 mask
1018:main.c        ****     static uint32_t brmsRG2Mask = 0b00000010; // Rate group 2 mask
1019:main.c        ****     static uint32_t brmsRG3Mask = 0b00000100; // Rate group 3 mask
1020:main.c        ****     static uint32_t brmsRG4Mask = 0b00001000; // Rate group 4 mask
1021:main.c        ****     static uint32_t brmsRG5Mask = 0b00010000; // Rate group 5 mask
1022:main.c        ****     
1023:main.c        ****     /* Clears the timer interrupt */
1024:main.c        ****     Timer_BRMS_ClearInterrupt(Timer_BRMS_INTR_MASK_CC_MATCH);
1025:main.c        **** 
1026:main.c        ****     PROBE_Write(1);
1027:main.c        ****     
1028:main.c        ****     /* Use this 200us interrupt as a clock mechanism */
1029:main.c        ****     UptimeMicroseconds += 200;
1030:main.c        ****     UptimeMicrosecondsAccumulator += 200;
1031:main.c        ****     
1032:main.c        ****     /* Count milliseconds */
1033:main.c        ****     if (UptimeMicrosecondsAccumulator > 1000) {
1034:main.c        ****         UptimeMicrosecondsAccumulator = 0;
1035:main.c        ****         UptimeMilliseconds += 1;
1036:main.c        ****         UptimeMillisecondsAccumulator += 1;
1037:main.c        ****     }
1038:main.c        ****     
1039:main.c        ****     /* Count seconds */
1040:main.c        ****     if (UptimeMillisecondsAccumulator > 1000) {
1041:main.c        ****         UptimeMillisecondsAccumulator = 0;
1042:main.c        ****         UptimeSeconds += 1;
1043:main.c        ****     }
1044:main.c        ****     
1045:main.c        ****     /* Increment the BRMS task counter infinitely */
1046:main.c        ****     brmsTask++;
1047:main.c        **** 
1048:main.c        ****     /* Determine which rate group to run.  Do this by applying the rate group masks
1049:main.c        ****        sequentially until one results in a "true" value.  
1050:main.c        ****     
1051:main.c        ****        For example: the 1st rate group is invoked every time the brmsTask value ends 
1052:main.c        ****        in 0bxxx1, and ignored when it's 0bxxx0.  
1053:main.c        ****     
1054:main.c        ****        The second rate group is invoked half as often as the first: when the brmsTask
1055:main.c        ****        value ends in 0bxx10. 
1056:main.c        ****     
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 20


1057:main.c        ****        The third rate group is invoked half as often as the second: when brmsTask
1058:main.c        ****        ends in 0bx100.  
1059:main.c        ****     
1060:main.c        ****        In this way, we have decreasing tiers of tasks that are run for at most 200us.
1061:main.c        ****     
1062:main.c        ****        The "background" task does not run at interrupt level.  The main() of the program
1063:main.c        ****        represents everything non time critical, using whatever CPU is left over when the
1064:main.c        ****        interrupt returns.
1065:main.c        ****     */
1066:main.c        ****     if (brmsTask & brmsRG1Mask) {
1067:main.c        ****         
1068:main.c        ****         /* The PID task has the highest priority for this system.  Run it every time rate 
1069:main.c        ****            group 1 comes around, which results in an invocation of PID every 400us.  Equal
1070:main.c        ****            to a 2.5KHz update rate. */
1071:main.c        ****         runRateGroup1_PID();
1072:main.c        ****         
1073:main.c        ****     } else if (brmsTask & brmsRG2Mask) {
1074:main.c        ****         
1075:main.c        ****         /* Rate group 2 is run every 0.8ms, or 1.25KHz*/
1076:main.c        ****         //runRateGroup2_TBD();           
1077:main.c        ****         
1078:main.c        ****     } else if (brmsTask & brmsRG3Mask) {
1079:main.c        ****         
1080:main.c        ****         /* Rate group 3 is run every 1.6ms, or 625Hz*/
1081:main.c        ****         runRateGroup3_SPI();
1082:main.c        ****         
1083:main.c        ****     } else if (brmsTask & brmsRG4Mask) {
1084:main.c        ****      
1085:main.c        ****         /* Rate group 4 is run every 3.2ms, or 312Hz*/
1086:main.c        ****         //runRateGroup4_TBD();
1087:main.c        **** 
1088:main.c        ****     } else if (brmsTask & brmsRG5Mask) {
1089:main.c        ****      
1090:main.c        ****         /* Rate group 5 is run every 6.4ms, or 156Hz*/
1091:main.c        ****         //runRateGroup5_TBD();
1092:main.c        ****     }
1093:main.c        ****     
1094:main.c        ****     PROBE_Write(0);
1095:main.c        ****    
1096:main.c        **** }
1097:main.c        **** 
1098:main.c        **** 
1099:main.c        **** /*******************************************************************************
1100:main.c        **** * Function Name: RSTIsrHandler
1101:main.c        **** ********************************************************************************
1102:main.c        **** * Summary:
1103:main.c        **** *  The interrupt handler for resetting the encoder count interrupts.
1104:main.c        **** *  Clears a pending Interrupt.
1105:main.c        **** *  Clears a pin Interrupt.
1106:main.c        **** *
1107:main.c        **** * Parameters: None
1108:main.c        **** * Return: None
1109:main.c        **** *******************************************************************************/
1110:main.c        **** CY_ISR(RSTIsrHandler) {
  28              		.loc 1 1110 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 21


  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
1111:main.c        ****     
1112:main.c        ****     /* Clear pending Interrupt */
1113:main.c        ****     isr_rst_encoder_ClearPending(); 
  36              		.loc 1 1113 0
  37 0002 FFF7FEFF 		bl	isr_rst_encoder_ClearPending
  38              	.LVL0:
1114:main.c        ****     
1115:main.c        ****     /* Clear pin Interrupt */
1116:main.c        ****     Reset_Encoder_ClearInterrupt();
  39              		.loc 1 1116 0
  40 0006 FFF7FEFF 		bl	Reset_Encoder_ClearInterrupt
  41              	.LVL1:
1117:main.c        ****     
1118:main.c        ****     /* Clear the 24b Encoder (Absolute Position Counter) */
1119:main.c        ****     Counter_1_WriteCounter(0);
  42              		.loc 1 1119 0
  43 000a 0020     		movs	r0, #0
  44 000c FFF7FEFF 		bl	Counter_1_WriteCounter
  45              	.LVL2:
1120:main.c        ****     
1121:main.c        ****     /* Clear the index counter */
1122:main.c        ****     Index_Counter_1_WriteCounter(0);  
  46              		.loc 1 1122 0
  47 0010 0020     		movs	r0, #0
  48 0012 FFF7FEFF 		bl	Index_Counter_1_WriteCounter
  49              	.LVL3:
1123:main.c        ****     
1124:main.c        ****     /* When we hit the index mark, homing is complete */
1125:main.c        ****     homingDone = true;    
  50              		.loc 1 1125 0
  51 0016 0122     		movs	r2, #1
  52 0018 014B     		ldr	r3, .L2
  53 001a 1A70     		strb	r2, [r3]
1126:main.c        **** }
  54              		.loc 1 1126 0
  55              		@ sp needed
  56 001c 10BD     		pop	{r4, pc}
  57              	.L3:
  58 001e C046     		.align	2
  59              	.L2:
  60 0020 00000000 		.word	.LANCHOR0
  61              		.cfi_endproc
  62              	.LFE43:
  63              		.size	RSTIsrHandler, .-RSTIsrHandler
  64              		.section	.text.HomeIsrHandler,"ax",%progbits
  65              		.align	2
  66              		.global	HomeIsrHandler
  67              		.code	16
  68              		.thumb_func
  69              		.type	HomeIsrHandler, %function
  70              	HomeIsrHandler:
  71              	.LFB44:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 22


1127:main.c        **** 
1128:main.c        **** 
1129:main.c        **** /*******************************************************************************
1130:main.c        **** * Function Name: HomeIsrHandler
1131:main.c        **** ********************************************************************************
1132:main.c        **** * Summary:
1133:main.c        **** *  The interrupt handler for resetting the encoder count interrupts.
1134:main.c        **** *  Clears a pending Interrupt.
1135:main.c        **** *  Clears a pin Interrupt.
1136:main.c        **** *
1137:main.c        **** * Parameters: None
1138:main.c        **** * Return: None
1139:main.c        **** *******************************************************************************/
1140:main.c        **** CY_ISR(HomeIsrHandler) {
  72              		.loc 1 1140 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76 0000 10B5     		push	{r4, lr}
  77              		.cfi_def_cfa_offset 8
  78              		.cfi_offset 4, -8
  79              		.cfi_offset 14, -4
1141:main.c        ****     
1142:main.c        ****     /* Clear pending Interrupt */
1143:main.c        ****     isr_home_ClearPending(); 
  80              		.loc 1 1143 0
  81 0002 FFF7FEFF 		bl	isr_home_ClearPending
  82              	.LVL4:
1144:main.c        ****     
1145:main.c        ****     /* Clear pin Interrupt */
1146:main.c        ****     HOME_IN_ClearInterrupt();
  83              		.loc 1 1146 0
  84 0006 FFF7FEFF 		bl	HOME_IN_ClearInterrupt
  85              	.LVL5:
1147:main.c        **** 
1148:main.c        ****     /* Clear the 24b Encoder (Absolute Position Counter) */
1149:main.c        ****     Counter_1_WriteCounter(0);
  86              		.loc 1 1149 0
  87 000a 0020     		movs	r0, #0
  88 000c FFF7FEFF 		bl	Counter_1_WriteCounter
  89              	.LVL6:
1150:main.c        ****     
1151:main.c        ****     /* Set a flag that homing is not done yet until the next index position */
1152:main.c        ****     homingDone = false;
  90              		.loc 1 1152 0
  91 0010 0022     		movs	r2, #0
  92 0012 014B     		ldr	r3, .L5
  93 0014 1A70     		strb	r2, [r3]
1153:main.c        **** }
  94              		.loc 1 1153 0
  95              		@ sp needed
  96 0016 10BD     		pop	{r4, pc}
  97              	.L6:
  98              		.align	2
  99              	.L5:
 100 0018 00000000 		.word	.LANCHOR0
 101              		.cfi_endproc
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 23


 102              	.LFE44:
 103              		.size	HomeIsrHandler, .-HomeIsrHandler
 104              		.section	.text.SPI_SS_IsrHandler,"ax",%progbits
 105              		.align	2
 106              		.global	SPI_SS_IsrHandler
 107              		.code	16
 108              		.thumb_func
 109              		.type	SPI_SS_IsrHandler, %function
 110              	SPI_SS_IsrHandler:
 111              	.LFB45:
1154:main.c        **** 
1155:main.c        **** 
1156:main.c        **** /*******************************************************************************
1157:main.c        **** * Function Name: SPI_SS_IsrHandler
1158:main.c        **** ********************************************************************************
1159:main.c        **** * Summary:
1160:main.c        **** *  The interrupt handler for knowing when the SPI master deasserts the slave select.
1161:main.c        **** *  Clears a pin Interrupt.
1162:main.c        **** *
1163:main.c        **** * Parameters: None
1164:main.c        **** * Return: None
1165:main.c        **** *******************************************************************************/
1166:main.c        **** CY_ISR(SPI_SS_IsrHandler) {
 112              		.loc 1 1166 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116 0000 10B5     		push	{r4, lr}
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 4, -8
 119              		.cfi_offset 14, -4
1167:main.c        ****     
1168:main.c        ****     uint32_t i;
1169:main.c        ****     
1170:main.c        ****     /* Clear SPI slave select pin Interrupt */
1171:main.c        ****     spi_ss_ClearInterrupt();
 120              		.loc 1 1171 0
 121 0002 FFF7FEFF 		bl	spi_ss_ClearInterrupt
 122              	.LVL7:
1172:main.c        ****     
1173:main.c        ****     /* Make sure the slave select is actually de-asserted before proceeding */
1174:main.c        ****     if (!spi_ss_Read()) 
 123              		.loc 1 1174 0
 124 0006 FFF7FEFF 		bl	spi_ss_Read
 125              	.LVL8:
 126 000a 0028     		cmp	r0, #0
 127 000c 1DD0     		beq	.L7
1175:main.c        ****         return;
1176:main.c        ****    
1177:main.c        ****     /* Update the last message tick timer */
1178:main.c        ****     LastMessageTimeSeconds = UptimeSeconds;
 128              		.loc 1 1178 0
 129 000e 0F4B     		ldr	r3, .L12
 130 0010 1A68     		ldr	r2, [r3]
 131 0012 5B68     		ldr	r3, [r3, #4]
 132 0014 0E4B     		ldr	r3, .L12+4
 133 0016 1A60     		str	r2, [r3]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 24


1179:main.c        **** 
1180:main.c        ****     /* It's possible the slave select has fired and returned without transmitting any data (glitche
1181:main.c        ****        check the messaging state before resetting the buffers */
1182:main.c        ****     switch (txMessageState) {
 134              		.loc 1 1182 0
 135 0018 0E4B     		ldr	r3, .L12+8
 136 001a 1B78     		ldrb	r3, [r3]
 137 001c 012B     		cmp	r3, #1
 138 001e 14D1     		bne	.L7
1183:main.c        ****      
1184:main.c        ****         /* FIFO is not yet loaded and slave select deasserted, this is a glitch */ 
1185:main.c        ****         case txmsClear:
1186:main.c        ****             break;
1187:main.c        ****      
1188:main.c        ****         /* A message was readied for transmission */
1189:main.c        ****         case txmsLoaded:
1190:main.c        ****          
1191:main.c        ****             /* FIFO is clear and slave select deasserted, it's time to reset */ 
1192:main.c        ****             
1193:main.c        ****             /* Clear the transmit message buffer, the comm thread will fill it in again to make sur
1194:main.c        ****             bzero(txMessage.buf, sizeof(txMessage.buf)); 
 139              		.loc 1 1194 0
 140 0020 1F22     		movs	r2, #31
 141 0022 0021     		movs	r1, #0
 142 0024 0C48     		ldr	r0, .L12+12
 143 0026 FFF7FEFF 		bl	memset
 144              	.LVL9:
1195:main.c        **** 
1196:main.c        ****             /* Message from the master is completely clocked in by now */     
1197:main.c        ****             for (i = 0; i < sizeof(rxMessage.buf); i++) {
 145              		.loc 1 1197 0
 146 002a 0024     		movs	r4, #0
 147 002c 04E0     		b	.L10
 148              	.LVL10:
 149              	.L11:
1198:main.c        ****                 rxMessage.buf[i] = (uint8_t) SPI_1_SpiUartReadRxData();            
 150              		.loc 1 1198 0 discriminator 3
 151 002e FFF7FEFF 		bl	SPI_1_SpiUartReadRxData
 152              	.LVL11:
 153 0032 0A4B     		ldr	r3, .L12+16
 154 0034 1855     		strb	r0, [r3, r4]
1197:main.c        ****                 rxMessage.buf[i] = (uint8_t) SPI_1_SpiUartReadRxData();            
 155              		.loc 1 1197 0 discriminator 3
 156 0036 0134     		adds	r4, r4, #1
 157              	.LVL12:
 158              	.L10:
1197:main.c        ****                 rxMessage.buf[i] = (uint8_t) SPI_1_SpiUartReadRxData();            
 159              		.loc 1 1197 0 is_stmt 0 discriminator 1
 160 0038 1E2C     		cmp	r4, #30
 161 003a F8D9     		bls	.L11
1199:main.c        ****             }
1200:main.c        ****             
1201:main.c        ****             /* Clear out all the bytes in the receive side so they can be filled in again */
1202:main.c        ****             SPI_1_SpiUartClearRxBuffer();  
 162              		.loc 1 1202 0 is_stmt 1
 163 003c FFF7FEFF 		bl	SPI_1_SpiUartClearRxBuffer
 164              	.LVL13:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 25


1203:main.c        ****             
1204:main.c        ****             /* Clear out any remaining bytes in the transmit buffer, in case the message transfer w
1205:main.c        ****             SPI_1_SpiUartClearTxBuffer();
 165              		.loc 1 1205 0
 166 0040 FFF7FEFF 		bl	SPI_1_SpiUartClearTxBuffer
 167              	.LVL14:
1206:main.c        ****             
1207:main.c        ****             /* Set the state to indicate to the messaging thread that it's time to load the TX buff
1208:main.c        ****             txMessageState = txmsClear;        
 168              		.loc 1 1208 0
 169 0044 0022     		movs	r2, #0
 170 0046 034B     		ldr	r3, .L12+8
 171 0048 1A70     		strb	r2, [r3]
 172              	.LVL15:
 173              	.L7:
1209:main.c        ****             break;
1210:main.c        ****             
1211:main.c        ****     } 
1212:main.c        ****         
1213:main.c        **** }
 174              		.loc 1 1213 0
 175              		@ sp needed
 176 004a 10BD     		pop	{r4, pc}
 177              	.L13:
 178              		.align	2
 179              	.L12:
 180 004c 00000000 		.word	.LANCHOR1
 181 0050 00000000 		.word	LastMessageTimeSeconds
 182 0054 00000000 		.word	txMessageState
 183 0058 00000000 		.word	txMessage
 184 005c 00000000 		.word	rxMessage
 185              		.cfi_endproc
 186              	.LFE45:
 187              		.size	SPI_SS_IsrHandler, .-SPI_SS_IsrHandler
 188              		.section	.text.AssertFault,"ax",%progbits
 189              		.align	2
 190              		.global	AssertFault
 191              		.code	16
 192              		.thumb_func
 193              		.type	AssertFault, %function
 194              	AssertFault:
 195              	.LFB32:
 321:main.c        ****  
 196              		.loc 1 321 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 200              		@ link register save eliminated.
 201              	.LVL16:
 323:main.c        ****      
 202              		.loc 1 323 0
 203 0000 0028     		cmp	r0, #0
 204 0002 03D1     		bne	.L18
 327:main.c        ****             break;        
 205              		.loc 1 327 0
 206 0004 0022     		movs	r2, #0
 207 0006 044B     		ldr	r3, .L19
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 26


 208 0008 1A70     		strb	r2, [r3]
 328:main.c        ****         
 209              		.loc 1 328 0
 210 000a 03E0     		b	.L14
 211              	.L18:
 332:main.c        ****             break;        
 212              		.loc 1 332 0
 213 000c 024B     		ldr	r3, .L19
 214 000e 1A78     		ldrb	r2, [r3]
 215 0010 1043     		orrs	r0, r2
 216              	.LVL17:
 217 0012 1870     		strb	r0, [r3]
 218              	.L14:
 335:main.c        **** 
 219              		.loc 1 335 0
 220              		@ sp needed
 221 0014 7047     		bx	lr
 222              	.L20:
 223 0016 C046     		.align	2
 224              	.L19:
 225 0018 00000000 		.word	FaultState
 226              		.cfi_endproc
 227              	.LFE32:
 228              		.size	AssertFault, .-AssertFault
 229              		.section	.text.ClearFault,"ax",%progbits
 230              		.align	2
 231              		.global	ClearFault
 232              		.code	16
 233              		.thumb_func
 234              		.type	ClearFault, %function
 235              	ClearFault:
 236              	.LFB33:
 348:main.c        ****  
 237              		.loc 1 348 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242              	.LVL18:
 350:main.c        ****      
 243              		.loc 1 350 0
 244 0000 0028     		cmp	r0, #0
 245 0002 03D1     		bne	.L25
 354:main.c        ****             break;        
 246              		.loc 1 354 0
 247 0004 0022     		movs	r2, #0
 248 0006 044B     		ldr	r3, .L26
 249 0008 1A70     		strb	r2, [r3]
 355:main.c        ****         
 250              		.loc 1 355 0
 251 000a 03E0     		b	.L21
 252              	.L25:
 359:main.c        ****             break;        
 253              		.loc 1 359 0
 254 000c 024A     		ldr	r2, .L26
 255 000e 1378     		ldrb	r3, [r2]
 256 0010 8343     		bics	r3, r0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 27


 257 0012 1370     		strb	r3, [r2]
 258              	.L21:
 362:main.c        **** 
 259              		.loc 1 362 0
 260              		@ sp needed
 261 0014 7047     		bx	lr
 262              	.L27:
 263 0016 C046     		.align	2
 264              	.L26:
 265 0018 00000000 		.word	FaultState
 266              		.cfi_endproc
 267              	.LFE33:
 268              		.size	ClearFault, .-ClearFault
 269              		.global	__aeabi_f2iz
 270              		.section	.text.MotorCurrentRead,"ax",%progbits
 271              		.align	2
 272              		.global	MotorCurrentRead
 273              		.code	16
 274              		.thumb_func
 275              		.type	MotorCurrentRead, %function
 276              	MotorCurrentRead:
 277              	.LFB34:
 374:main.c        ****     
 278              		.loc 1 374 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282 0000 10B5     		push	{r4, lr}
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 4, -8
 285              		.cfi_offset 14, -4
 379:main.c        ****     
 286              		.loc 1 379 0
 287 0002 4020     		movs	r0, #64
 288 0004 FFF7FEFF 		bl	getCurrent_mA
 289              	.LVL19:
 382:main.c        **** }
 290              		.loc 1 382 0
 291 0008 FFF7FEFF 		bl	__aeabi_f2iz
 292              	.LVL20:
 293 000c 00B2     		sxth	r0, r0
 294 000e 014B     		ldr	r3, .L29
 295 0010 1880     		strh	r0, [r3]
 383:main.c        **** 
 296              		.loc 1 383 0
 297              		@ sp needed
 298 0012 10BD     		pop	{r4, pc}
 299              	.L30:
 300              		.align	2
 301              	.L29:
 302 0014 00000000 		.word	MotorCurrent
 303              		.cfi_endproc
 304              	.LFE34:
 305              		.size	MotorCurrentRead, .-MotorCurrentRead
 306              		.section	.text.PWM_Set,"ax",%progbits
 307              		.align	2
 308              		.global	PWM_Set
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 28


 309              		.code	16
 310              		.thumb_func
 311              		.type	PWM_Set, %function
 312              	PWM_Set:
 313              	.LFB36:
 603:main.c        ****         
 314              		.loc 1 603 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              	.LVL21:
 319 0000 10B5     		push	{r4, lr}
 320              		.cfi_def_cfa_offset 8
 321              		.cfi_offset 4, -8
 322              		.cfi_offset 14, -4
 607:main.c        **** }
 323              		.loc 1 607 0
 324 0002 C823     		movs	r3, #200
 325 0004 9B00     		lsls	r3, r3, #2
 326 0006 9C46     		mov	ip, r3
 327 0008 6044     		add	r0, r0, ip
 328              	.LVL22:
 329 000a FFF7FEFF 		bl	PWM_1_WriteCompare
 330              	.LVL23:
 608:main.c        **** 
 331              		.loc 1 608 0
 332              		@ sp needed
 333 000e 10BD     		pop	{r4, pc}
 334              		.cfi_endproc
 335              	.LFE36:
 336              		.size	PWM_Set, .-PWM_Set
 337              		.section	.text.GetPosition,"ax",%progbits
 338              		.align	2
 339              		.global	GetPosition
 340              		.code	16
 341              		.thumb_func
 342              		.type	GetPosition, %function
 343              	GetPosition:
 344              	.LFB37:
 620:main.c        ****     
 345              		.loc 1 620 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349 0000 10B5     		push	{r4, lr}
 350              		.cfi_def_cfa_offset 8
 351              		.cfi_offset 4, -8
 352              		.cfi_offset 14, -4
 626:main.c        ****     
 353              		.loc 1 626 0
 354 0002 FFF7FEFF 		bl	Counter_1_ReadCounter
 355              	.LVL24:
 356 0006 0B4B     		ldr	r3, .L35
 357 0008 9860     		str	r0, [r3, #8]
 630:main.c        ****         
 358              		.loc 1 630 0
 359 000a 9A68     		ldr	r2, [r3, #8]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 29


 360 000c 0A4B     		ldr	r3, .L35+4
 361 000e 9A42     		cmp	r2, r3
 362 0010 06D9     		bls	.L33
 632:main.c        ****         
 363              		.loc 1 632 0
 364 0012 084A     		ldr	r2, .L35
 365 0014 9368     		ldr	r3, [r2, #8]
 366 0016 0949     		ldr	r1, .L35+8
 367 0018 8C46     		mov	ip, r1
 368 001a 6344     		add	r3, r3, ip
 369 001c D360     		str	r3, [r2, #12]
 370 001e 02E0     		b	.L34
 371              	.L33:
 637:main.c        ****     }
 372              		.loc 1 637 0
 373 0020 044B     		ldr	r3, .L35
 374 0022 9A68     		ldr	r2, [r3, #8]
 375 0024 DA60     		str	r2, [r3, #12]
 376              	.L34:
 641:main.c        ****     return result;
 377              		.loc 1 641 0
 378 0026 034B     		ldr	r3, .L35
 379 0028 D968     		ldr	r1, [r3, #12]
 380 002a 054A     		ldr	r2, .L35+12
 381 002c 1160     		str	r1, [r2]
 642:main.c        **** }
 382              		.loc 1 642 0
 383 002e D868     		ldr	r0, [r3, #12]
 643:main.c        **** 
 384              		.loc 1 643 0
 385              		@ sp needed
 386 0030 10BD     		pop	{r4, pc}
 387              	.L36:
 388 0032 C046     		.align	2
 389              	.L35:
 390 0034 00000000 		.word	.LANCHOR1
 391 0038 FFFFEF00 		.word	15728639
 392 003c 010000FF 		.word	-16777215
 393 0040 00000000 		.word	Position
 394              		.cfi_endproc
 395              	.LFE37:
 396              		.size	GetPosition, .-GetPosition
 397              		.section	.text.runRateGroup3_SPI,"ax",%progbits
 398              		.align	2
 399              		.global	runRateGroup3_SPI
 400              		.code	16
 401              		.thumb_func
 402              		.type	runRateGroup3_SPI, %function
 403              	runRateGroup3_SPI:
 404              	.LFB35:
 395:main.c        ****  
 405              		.loc 1 395 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409 0000 70B5     		push	{r4, r5, r6, lr}
 410              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 30


 411              		.cfi_offset 4, -16
 412              		.cfi_offset 5, -12
 413              		.cfi_offset 6, -8
 414              		.cfi_offset 14, -4
 405:main.c        ****         return;
 415              		.loc 1 405 0
 416 0002 9A4B     		ldr	r3, .L55
 417 0004 1B68     		ldr	r3, [r3]
 418 0006 DB07     		lsls	r3, r3, #31
 419 0008 00D5     		bpl	.LCB323
 420 000a 2EE1     		b	.L37	@long jump
 421              	.LCB323:
 409:main.c        ****      
 422              		.loc 1 409 0
 423 000c 984B     		ldr	r3, .L55+4
 424 000e 1B78     		ldrb	r3, [r3]
 425 0010 002B     		cmp	r3, #0
 426 0012 00D0     		beq	.LCB328
 427 0014 29E1     		b	.L37	@long jump
 428              	.LCB328:
 415:main.c        ****             opcode   = (rxMessage_opcodes_t) rxMessage.overlay.opcode;
 429              		.loc 1 415 0
 430 0016 974B     		ldr	r3, .L55+8
 431 0018 5878     		ldrb	r0, [r3, #1]
 432              	.LVL25:
 416:main.c        ****             
 433              		.loc 1 416 0
 434 001a 9C78     		ldrb	r4, [r3, #2]
 435              	.LVL26:
 419:main.c        ****                 size = sizeof(txMessage.buf);                            
 436              		.loc 1 419 0
 437 001c 1F28     		cmp	r0, #31
 438 001e 00D9     		bls	.L40
 420:main.c        ****         
 439              		.loc 1 420 0
 440 0020 1F20     		movs	r0, #31
 441              	.LVL27:
 442              	.L40:
 423:main.c        ****                 checksum += rxMessage.buf[i]; 
 443              		.loc 1 423 0
 444 0022 0022     		movs	r2, #0
 445 0024 0023     		movs	r3, #0
 446 0026 05E0     		b	.L41
 447              	.LVL28:
 448              	.L42:
 424:main.c        **** 
 449              		.loc 1 424 0 discriminator 3
 450 0028 9249     		ldr	r1, .L55+8
 451 002a C95C     		ldrb	r1, [r1, r3]
 452 002c 5218     		adds	r2, r2, r1
 453              	.LVL29:
 454 002e D2B2     		uxtb	r2, r2
 455              	.LVL30:
 423:main.c        ****                 checksum += rxMessage.buf[i]; 
 456              		.loc 1 423 0 discriminator 3
 457 0030 0133     		adds	r3, r3, #1
 458              	.LVL31:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 31


 459 0032 DBB2     		uxtb	r3, r3
 460              	.LVL32:
 461              	.L41:
 423:main.c        ****                 checksum += rxMessage.buf[i]; 
 462              		.loc 1 423 0 is_stmt 0 discriminator 1
 463 0034 9842     		cmp	r0, r3
 464 0036 F7D8     		bhi	.L42
 427:main.c        ****                 
 465              		.loc 1 427 0 is_stmt 1
 466 0038 002A     		cmp	r2, #0
 467 003a 09D0     		beq	.L43
 429:main.c        ****                 txMessage.msg.size = sizeof(txMessage_t);
 468              		.loc 1 429 0
 469 003c 8E4B     		ldr	r3, .L55+12
 470              	.LVL33:
 471 003e 5C71     		strb	r4, [r3, #5]
 430:main.c        ****                 ChecksumErrors++;
 472              		.loc 1 430 0
 473 0040 1F22     		movs	r2, #31
 474              	.LVL34:
 475 0042 1A71     		strb	r2, [r3, #4]
 431:main.c        ****                 
 476              		.loc 1 431 0
 477 0044 8D4A     		ldr	r2, .L55+16
 478 0046 1388     		ldrh	r3, [r2]
 479 0048 0133     		adds	r3, r3, #1
 480 004a 9BB2     		uxth	r3, r3
 481 004c 1380     		strh	r3, [r2]
 482 004e A1E0     		b	.L44
 483              	.LVL35:
 484              	.L43:
 437:main.c        ****                 
 485              		.loc 1 437 0
 486 0050 631E     		subs	r3, r4, #1
 487              	.LVL36:
 488 0052 DBB2     		uxtb	r3, r3
 489 0054 022B     		cmp	r3, #2
 490 0056 00D9     		bls	.LCB394
 491 0058 9CE0     		b	.L44	@long jump
 492              	.LCB394:
 439:main.c        ****                     
 493              		.loc 1 439 0
 494 005a 022C     		cmp	r4, #2
 495 005c 2CD0     		beq	.L45
 496 005e 032C     		cmp	r4, #3
 497 0060 7CD0     		beq	.L46
 498 0062 012C     		cmp	r4, #1
 499 0064 00D0     		beq	.LCB400
 500 0066 95E0     		b	.L44	@long jump
 501              	.LCB400:
 445:main.c        ****                            
 502              		.loc 1 445 0
 503 0068 FFF7FEFF 		bl	GetPosition
 504              	.LVL37:
 505 006c 844B     		ldr	r3, .L55+20
 506 006e 1860     		str	r0, [r3]
 448:main.c        ****                             PID_EffectiveSetpoint = LastPosition;                                  
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 32


 507              		.loc 1 448 0
 508 0070 1968     		ldr	r1, [r3]
 509 0072 844A     		ldr	r2, .L55+24
 510 0074 1160     		str	r1, [r2]
 449:main.c        ****                             
 511              		.loc 1 449 0
 512 0076 1A68     		ldr	r2, [r3]
 513 0078 834B     		ldr	r3, .L55+28
 514 007a 1A60     		str	r2, [r3]
 452:main.c        ****                             PID_Enabled = false;
 515              		.loc 1 452 0
 516 007c 0023     		movs	r3, #0
 517 007e 834A     		ldr	r2, .L55+32
 518 0080 1370     		strb	r3, [r2]
 453:main.c        **** 
 519              		.loc 1 453 0
 520 0082 834A     		ldr	r2, .L55+36
 521 0084 1370     		strb	r3, [r2]
 456:main.c        ****                             
 522              		.loc 1 456 0
 523 0086 834A     		ldr	r2, .L55+40
 524 0088 1370     		strb	r3, [r2]
 459:main.c        ****                             limitIterm = rxMessage.config.limitIterm;
 525              		.loc 1 459 0
 526 008a 7A4B     		ldr	r3, .L55+8
 527 008c 197C     		ldrb	r1, [r3, #16]
 528 008e 5A7C     		ldrb	r2, [r3, #17]
 529 0090 1202     		lsls	r2, r2, #8
 530 0092 0A43     		orrs	r2, r1
 531 0094 8049     		ldr	r1, .L55+44
 532 0096 0A80     		strh	r2, [r1]
 460:main.c        ****                                 
 533              		.loc 1 460 0
 534 0098 997C     		ldrb	r1, [r3, #18]
 535 009a DA7C     		ldrb	r2, [r3, #19]
 536 009c 1202     		lsls	r2, r2, #8
 537 009e 0A43     		orrs	r2, r1
 538 00a0 7E49     		ldr	r1, .L55+48
 539 00a2 0A80     		strh	r2, [r1]
 475:main.c        ****                             ConfigSequence = rxMessage.config.sequence;
 540              		.loc 1 475 0
 541 00a4 0221     		movs	r1, #2
 542 00a6 7E4A     		ldr	r2, .L55+52
 543 00a8 1170     		strb	r1, [r2]
 476:main.c        ****                         
 544              		.loc 1 476 0
 545 00aa DA78     		ldrb	r2, [r3, #3]
 546 00ac 7D4B     		ldr	r3, .L55+56
 547 00ae 1A70     		strb	r2, [r3]
 479:main.c        ****                             break;
 548              		.loc 1 479 0
 549 00b0 0020     		movs	r0, #0
 550 00b2 FFF7FEFF 		bl	ClearFault
 551              	.LVL38:
 480:main.c        **** 
 552              		.loc 1 480 0
 553 00b6 6DE0     		b	.L44
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 33


 554              	.LVL39:
 555              	.L45:
 484:main.c        ****                             
 556              		.loc 1 484 0
 557 00b8 6E48     		ldr	r0, .L55+8
 558              	.LVL40:
 559 00ba C378     		ldrb	r3, [r0, #3]
 560 00bc 5A1E     		subs	r2, r3, #1
 561 00be 9341     		sbcs	r3, r3, r2
 562              	.LVL41:
 563 00c0 734A     		ldr	r2, .L55+36
 564 00c2 1370     		strb	r3, [r2]
 487:main.c        ****                                 
 565              		.loc 1 487 0
 566 00c4 0379     		ldrb	r3, [r0, #4]
 567 00c6 4279     		ldrb	r2, [r0, #5]
 568 00c8 1202     		lsls	r2, r2, #8
 569 00ca 1A43     		orrs	r2, r3
 570 00cc 8379     		ldrb	r3, [r0, #6]
 571 00ce 1B04     		lsls	r3, r3, #16
 572 00d0 1343     		orrs	r3, r2
 573 00d2 1A00     		movs	r2, r3
 574 00d4 C379     		ldrb	r3, [r0, #7]
 575 00d6 1B06     		lsls	r3, r3, #24
 576 00d8 1343     		orrs	r3, r2
 577 00da 6A4A     		ldr	r2, .L55+24
 578 00dc 1268     		ldr	r2, [r2]
 579 00de 9342     		cmp	r3, r2
 580 00e0 36D0     		beq	.L48
 490:main.c        ****                                 LastMoveStartTimeUsec = UptimeMicroseconds;
 581              		.loc 1 490 0
 582 00e2 714B     		ldr	r3, .L55+60
 583 00e4 0122     		movs	r2, #1
 584 00e6 1A74     		strb	r2, [r3, #16]
 491:main.c        ****                                 
 585              		.loc 1 491 0
 586 00e8 9869     		ldr	r0, [r3, #24]
 587 00ea D969     		ldr	r1, [r3, #28]
 588 00ec 1862     		str	r0, [r3, #32]
 494:main.c        ****                                 
 589              		.loc 1 494 0
 590 00ee FFF7FEFF 		bl	GetPosition
 591              	.LVL42:
 592 00f2 634C     		ldr	r4, .L55+20
 593              	.LVL43:
 594 00f4 2060     		str	r0, [r4]
 497:main.c        ****                                 
 595              		.loc 1 497 0
 596 00f6 5F48     		ldr	r0, .L55+8
 597 00f8 0379     		ldrb	r3, [r0, #4]
 598 00fa 4279     		ldrb	r2, [r0, #5]
 599 00fc 1202     		lsls	r2, r2, #8
 600 00fe 1A43     		orrs	r2, r3
 601 0100 8379     		ldrb	r3, [r0, #6]
 602 0102 1B04     		lsls	r3, r3, #16
 603 0104 1343     		orrs	r3, r2
 604 0106 1A00     		movs	r2, r3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 34


 605 0108 C379     		ldrb	r3, [r0, #7]
 606 010a 1B06     		lsls	r3, r3, #24
 607 010c 1343     		orrs	r3, r2
 608 010e 5D4D     		ldr	r5, .L55+24
 609 0110 2B60     		str	r3, [r5]
 501:main.c        ****                                 
 610              		.loc 1 501 0
 611 0112 2268     		ldr	r2, [r4]
 612 0114 5C4B     		ldr	r3, .L55+28
 613 0116 1A60     		str	r2, [r3]
 504:main.c        ****                                 
 614              		.loc 1 504 0
 615 0118 0020     		movs	r0, #0
 616 011a FFF7FEFF 		bl	Index_Counter_1_WriteCounter
 617              	.LVL44:
 509:main.c        ****                                 if (distance < 0) {
 618              		.loc 1 509 0
 619 011e 2B68     		ldr	r3, [r5]
 620 0120 2268     		ldr	r2, [r4]
 621 0122 9B1A     		subs	r3, r3, r2
 622              	.LVL45:
 510:main.c        ****                                     distance = -distance;
 623              		.loc 1 510 0
 624 0124 00D5     		bpl	.L49
 511:main.c        ****                                 }
 625              		.loc 1 511 0
 626 0126 5B42     		rsbs	r3, r3, #0
 627              	.LVL46:
 628              	.L49:
 514:main.c        ****                                     iterm_delay = ((distance / 16) + ITERM_90PCT_FIT_CONSTANT) * 10
 629              		.loc 1 514 0
 630 0128 322B     		cmp	r3, #50
 631 012a 0BDD     		ble	.L50
 515:main.c        ****                                     //iterm_delay = distance >> 4;  // Shift by 4 is equal to div b
 632              		.loc 1 515 0
 633 012c DA17     		asrs	r2, r3, #31
 634 012e 0F21     		movs	r1, #15
 635 0130 0A40     		ands	r2, r1
 636 0132 D318     		adds	r3, r2, r3
 637              	.LVL47:
 638 0134 1B11     		asrs	r3, r3, #4
 639 0136 0D33     		adds	r3, r3, #13
 640 0138 FA22     		movs	r2, #250
 641 013a 9200     		lsls	r2, r2, #2
 642 013c 5343     		muls	r3, r2
 643 013e 5B4A     		ldr	r2, .L55+64
 644 0140 1360     		str	r3, [r2]
 645 0142 02E0     		b	.L51
 646              	.LVL48:
 647              	.L50:
 518:main.c        ****                                 }
 648              		.loc 1 518 0
 649 0144 0022     		movs	r2, #0
 650 0146 594B     		ldr	r3, .L55+64
 651              	.LVL49:
 652 0148 1A60     		str	r2, [r3]
 653              	.L51:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 35


 522:main.c        ****                             }                                        
 654              		.loc 1 522 0
 655 014a 0022     		movs	r2, #0
 656 014c 584B     		ldr	r3, .L55+68
 657 014e 1A60     		str	r2, [r3]
 658              	.L48:
 527:main.c        ****                             break;
 659              		.loc 1 527 0
 660 0150 484B     		ldr	r3, .L55+8
 661 0152 0822     		movs	r2, #8
 662 0154 9A56     		ldrsb	r2, [r3, r2]
 663 0156 4F4B     		ldr	r3, .L55+40
 664 0158 1A70     		strb	r2, [r3]
 528:main.c        ****                         
 665              		.loc 1 528 0
 666 015a 1BE0     		b	.L44
 667              	.LVL50:
 668              	.L46:
 532:main.c        ****                             LastPosition = rxMessage.status.setpoint;
 669              		.loc 1 532 0
 670 015c 454C     		ldr	r4, .L55+8
 671              	.LVL51:
 672 015e 2179     		ldrb	r1, [r4, #4]
 673 0160 6379     		ldrb	r3, [r4, #5]
 674 0162 1B02     		lsls	r3, r3, #8
 675 0164 0B43     		orrs	r3, r1
 676 0166 1A00     		movs	r2, r3
 677              	.LVL52:
 678 0168 A079     		ldrb	r0, [r4, #6]
 679              	.LVL53:
 680 016a 0004     		lsls	r0, r0, #16
 681 016c 0300     		movs	r3, r0
 682 016e 1343     		orrs	r3, r2
 683 0170 E079     		ldrb	r0, [r4, #7]
 684 0172 0006     		lsls	r0, r0, #24
 685 0174 1843     		orrs	r0, r3
 686 0176 FFF7FEFF 		bl	Counter_1_WriteCounter
 687              	.LVL54:
 533:main.c        ****                             break;                                        
 688              		.loc 1 533 0
 689 017a 2379     		ldrb	r3, [r4, #4]
 690 017c 6279     		ldrb	r2, [r4, #5]
 691 017e 1202     		lsls	r2, r2, #8
 692 0180 1A43     		orrs	r2, r3
 693 0182 A379     		ldrb	r3, [r4, #6]
 694 0184 1B04     		lsls	r3, r3, #16
 695 0186 1343     		orrs	r3, r2
 696 0188 1A00     		movs	r2, r3
 697 018a E379     		ldrb	r3, [r4, #7]
 698 018c 1B06     		lsls	r3, r3, #24
 699 018e 1343     		orrs	r3, r2
 700 0190 3B4A     		ldr	r2, .L55+20
 701 0192 1360     		str	r3, [r2]
 702              	.L44:
 544:main.c        ****             
 703              		.loc 1 544 0
 704 0194 FFF7FEFF 		bl	GetPosition
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 36


 705              	.LVL55:
 706 0198 4649     		ldr	r1, .L55+72
 707 019a 0860     		str	r0, [r1]
 547:main.c        ****             txMessage.msg.version0        = FIRMWARE_REV_0;
 708              		.loc 1 547 0
 709 019c 364B     		ldr	r3, .L55+12
 710 019e 0022     		movs	r2, #0
 711 01a0 1A70     		strb	r2, [r3]
 548:main.c        ****             txMessage.msg.version1        = FIRMWARE_REV_1;
 712              		.loc 1 548 0
 713 01a2 5A70     		strb	r2, [r3, #1]
 549:main.c        ****             txMessage.msg.version2        = FIRMWARE_REV_2;
 714              		.loc 1 549 0
 715 01a4 0232     		adds	r2, r2, #2
 716 01a6 9A70     		strb	r2, [r3, #2]
 550:main.c        ****             txMessage.msg.size            = sizeof(txMessage_t);
 717              		.loc 1 550 0
 718 01a8 DA70     		strb	r2, [r3, #3]
 551:main.c        ****             txMessage.msg.opcode          = opStatus;
 719              		.loc 1 551 0
 720 01aa 1F20     		movs	r0, #31
 721 01ac 1871     		strb	r0, [r3, #4]
 552:main.c        ****             txMessage.msg.state           = (uint8_t) ConfigState;
 722              		.loc 1 552 0
 723 01ae 5A71     		strb	r2, [r3, #5]
 553:main.c        ****             txMessage.msg.fault           = (uint8_t) FaultState;
 724              		.loc 1 553 0
 725 01b0 3B4A     		ldr	r2, .L55+52
 726 01b2 1278     		ldrb	r2, [r2]
 727 01b4 9A71     		strb	r2, [r3, #6]
 554:main.c        ****             txMessage.msg.checksum_errors = ChecksumErrors;
 728              		.loc 1 554 0
 729 01b6 404A     		ldr	r2, .L55+76
 730 01b8 1278     		ldrb	r2, [r2]
 731 01ba DA71     		strb	r2, [r3, #7]
 555:main.c        ****             txMessage.msg.sequence        = ConfigSequence;
 732              		.loc 1 555 0
 733 01bc 2F4A     		ldr	r2, .L55+16
 734 01be 1288     		ldrh	r2, [r2]
 735 01c0 92B2     		uxth	r2, r2
 736 01c2 5A72     		strb	r2, [r3, #9]
 737 01c4 120A     		lsrs	r2, r2, #8
 738 01c6 9A72     		strb	r2, [r3, #10]
 556:main.c        ****             txMessage.msg.position        = Position;
 739              		.loc 1 556 0
 740 01c8 364A     		ldr	r2, .L55+56
 741 01ca 1278     		ldrb	r2, [r2]
 742 01cc 1A72     		strb	r2, [r3, #8]
 557:main.c        ****             txMessage.msg.pwm             = Output;
 743              		.loc 1 557 0
 744 01ce 0A68     		ldr	r2, [r1]
 745 01d0 5A73     		strb	r2, [r3, #13]
 746 01d2 100A     		lsrs	r0, r2, #8
 747 01d4 9873     		strb	r0, [r3, #14]
 748 01d6 100C     		lsrs	r0, r2, #16
 749 01d8 D873     		strb	r0, [r3, #15]
 750 01da 120E     		lsrs	r2, r2, #24
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 37


 751 01dc 1A74     		strb	r2, [r3, #16]
 558:main.c        ****             txMessage.msg.iterm           = iterm;
 752              		.loc 1 558 0
 753 01de 374A     		ldr	r2, .L55+80
 754 01e0 1268     		ldr	r2, [r2]
 755 01e2 92B2     		uxth	r2, r2
 756 01e4 5A74     		strb	r2, [r3, #17]
 757 01e6 120A     		lsrs	r2, r2, #8
 758 01e8 9A74     		strb	r2, [r3, #18]
 559:main.c        ****             txMessage.msg.motor_current   = MotorCurrent;                  
 759              		.loc 1 559 0
 760 01ea 314A     		ldr	r2, .L55+68
 761 01ec 1078     		ldrb	r0, [r2]
 762 01ee D874     		strb	r0, [r3, #19]
 763 01f0 5078     		ldrb	r0, [r2, #1]
 764 01f2 1875     		strb	r0, [r3, #20]
 765 01f4 9078     		ldrb	r0, [r2, #2]
 766 01f6 5875     		strb	r0, [r3, #21]
 767 01f8 D278     		ldrb	r2, [r2, #3]
 768 01fa 9A75     		strb	r2, [r3, #22]
 560:main.c        ****             txMessage.msg.last_move_time  = LastMoveTimeUsec;
 769              		.loc 1 560 0
 770 01fc 304A     		ldr	r2, .L55+84
 771 01fe 1288     		ldrh	r2, [r2]
 772 0200 DA72     		strb	r2, [r3, #11]
 773 0202 120A     		lsrs	r2, r2, #8
 774 0204 1A73     		strb	r2, [r3, #12]
 561:main.c        ****             txMessage.msg.iterm_delay     = iterm_delay;
 775              		.loc 1 561 0
 776 0206 284A     		ldr	r2, .L55+60
 777 0208 2420     		movs	r0, #36
 778 020a 105C     		ldrb	r0, [r2, r0]
 779 020c D875     		strb	r0, [r3, #23]
 780 020e 2520     		movs	r0, #37
 781 0210 105C     		ldrb	r0, [r2, r0]
 782 0212 1876     		strb	r0, [r3, #24]
 783 0214 2620     		movs	r0, #38
 784 0216 105C     		ldrb	r0, [r2, r0]
 785 0218 5876     		strb	r0, [r3, #25]
 786 021a 2720     		movs	r0, #39
 787 021c 125C     		ldrb	r2, [r2, r0]
 788 021e 9A76     		strb	r2, [r3, #26]
 562:main.c        ****             
 789              		.loc 1 562 0
 790 0220 224A     		ldr	r2, .L55+64
 791 0222 1900     		movs	r1, r3
 792 0224 1078     		ldrb	r0, [r2]
 793 0226 D876     		strb	r0, [r3, #27]
 794 0228 5378     		ldrb	r3, [r2, #1]
 795 022a 0B77     		strb	r3, [r1, #28]
 796 022c 9378     		ldrb	r3, [r2, #2]
 797 022e 4B77     		strb	r3, [r1, #29]
 798 0230 D378     		ldrb	r3, [r2, #3]
 799 0232 8B77     		strb	r3, [r1, #30]
 800              	.LVL56:
 565:main.c        ****                 checksum += txMessage.buf[i]; 
 801              		.loc 1 565 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 38


 802 0234 0022     		movs	r2, #0
 803 0236 0023     		movs	r3, #0
 804 0238 05E0     		b	.L52
 805              	.LVL57:
 806              	.L53:
 566:main.c        ****                 
 807              		.loc 1 566 0 discriminator 3
 808 023a 0F49     		ldr	r1, .L55+12
 809 023c C95C     		ldrb	r1, [r1, r3]
 810 023e 5218     		adds	r2, r2, r1
 811              	.LVL58:
 812 0240 D2B2     		uxtb	r2, r2
 813              	.LVL59:
 565:main.c        ****                 checksum += txMessage.buf[i]; 
 814              		.loc 1 565 0 discriminator 3
 815 0242 0133     		adds	r3, r3, #1
 816              	.LVL60:
 817 0244 DBB2     		uxtb	r3, r3
 818              	.LVL61:
 819              	.L52:
 565:main.c        ****                 checksum += txMessage.buf[i]; 
 820              		.loc 1 565 0 is_stmt 0 discriminator 1
 821 0246 1E2B     		cmp	r3, #30
 822 0248 F7D9     		bls	.L53
 569:main.c        ****                 
 823              		.loc 1 569 0 is_stmt 1
 824 024a 0B48     		ldr	r0, .L55+12
 825 024c 5242     		rsbs	r2, r2, #0
 826              	.LVL62:
 827 024e 0270     		strb	r2, [r0]
 573:main.c        **** 
 828              		.loc 1 573 0
 829 0250 1F21     		movs	r1, #31
 830 0252 FFF7FEFF 		bl	SPI_1_SpiUartPutArray
 831              	.LVL63:
 576:main.c        ****             
 832              		.loc 1 576 0
 833 0256 0122     		movs	r2, #1
 834 0258 054B     		ldr	r3, .L55+4
 835 025a 1A70     		strb	r2, [r3]
 579:main.c        ****                 ClearFault(fsNONE);
 836              		.loc 1 579 0
 837 025c 054B     		ldr	r3, .L55+8
 838 025e 5B7A     		ldrb	r3, [r3, #9]
 839 0260 002B     		cmp	r3, #0
 840 0262 02D0     		beq	.L37
 580:main.c        ****         
 841              		.loc 1 580 0
 842 0264 0020     		movs	r0, #0
 843 0266 FFF7FEFF 		bl	ClearFault
 844              	.LVL64:
 845              	.L37:
 590:main.c        ****     
 846              		.loc 1 590 0
 847              		@ sp needed
 848 026a 70BD     		pop	{r4, r5, r6, pc}
 849              	.L56:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 39


 850              		.align	2
 851              	.L55:
 852 026c 24000740 		.word	1074200612
 853 0270 00000000 		.word	txMessageState
 854 0274 00000000 		.word	rxMessage
 855 0278 00000000 		.word	txMessage
 856 027c 00000000 		.word	ChecksumErrors
 857 0280 00000000 		.word	LastPosition
 858 0284 00000000 		.word	PID_Setpoint
 859 0288 00000000 		.word	PID_EffectiveSetpoint
 860 028c 00000000 		.word	PID_Was_Enabled
 861 0290 00000000 		.word	PID_Enabled
 862 0294 00000000 		.word	Jog
 863 0298 00000000 		.word	limitOutput
 864 029c 00000000 		.word	limitIterm
 865 02a0 00000000 		.word	ConfigState
 866 02a4 00000000 		.word	ConfigSequence
 867 02a8 00000000 		.word	.LANCHOR1
 868 02ac 00000000 		.word	iterm_delay
 869 02b0 00000000 		.word	iterm
 870 02b4 00000000 		.word	Position
 871 02b8 00000000 		.word	FaultState
 872 02bc 00000000 		.word	Output
 873 02c0 00000000 		.word	MotorCurrent
 874              		.cfi_endproc
 875              	.LFE35:
 876              		.size	runRateGroup3_SPI, .-runRateGroup3_SPI
 877              		.section	.text.PID_Initialize,"ax",%progbits
 878              		.align	2
 879              		.global	PID_Initialize
 880              		.code	16
 881              		.thumb_func
 882              		.type	PID_Initialize, %function
 883              	PID_Initialize:
 884              	.LFB38:
 655:main.c        ****     
 885              		.loc 1 655 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 0
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889 0000 10B5     		push	{r4, lr}
 890              		.cfi_def_cfa_offset 8
 891              		.cfi_offset 4, -8
 892              		.cfi_offset 14, -4
 658:main.c        ****     LastPosition = Position;
 893              		.loc 1 658 0
 894 0002 FFF7FEFF 		bl	GetPosition
 895              	.LVL65:
 896 0006 064B     		ldr	r3, .L58
 897 0008 1860     		str	r0, [r3]
 659:main.c        ****     
 898              		.loc 1 659 0
 899 000a 1A68     		ldr	r2, [r3]
 900 000c 054B     		ldr	r3, .L58+4
 901 000e 1A60     		str	r2, [r3]
 663:main.c        ****     
 902              		.loc 1 663 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 40


 903 0010 1A68     		ldr	r2, [r3]
 904 0012 054B     		ldr	r3, .L58+8
 905 0014 1A60     		str	r2, [r3]
 667:main.c        **** }    
 906              		.loc 1 667 0
 907 0016 0022     		movs	r2, #0
 908 0018 044B     		ldr	r3, .L58+12
 909 001a 1A60     		str	r2, [r3]
 668:main.c        **** 
 910              		.loc 1 668 0
 911              		@ sp needed
 912 001c 10BD     		pop	{r4, pc}
 913              	.L59:
 914 001e C046     		.align	2
 915              	.L58:
 916 0020 00000000 		.word	Position
 917 0024 00000000 		.word	LastPosition
 918 0028 00000000 		.word	PID_EffectiveSetpoint
 919 002c 00000000 		.word	iterm
 920              		.cfi_endproc
 921              	.LFE38:
 922              		.size	PID_Initialize, .-PID_Initialize
 923              		.section	.text.PID_SetMode,"ax",%progbits
 924              		.align	2
 925              		.global	PID_SetMode
 926              		.code	16
 927              		.thumb_func
 928              		.type	PID_SetMode, %function
 929              	PID_SetMode:
 930              	.LFB39:
 680:main.c        ****     
 931              		.loc 1 680 0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 0
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 935              	.LVL66:
 936 0000 10B5     		push	{r4, lr}
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 4, -8
 939              		.cfi_offset 14, -4
 682:main.c        ****     
 940              		.loc 1 682 0
 941 0002 441E     		subs	r4, r0, #1
 942 0004 6342     		rsbs	r3, r4, #0
 943 0006 5C41     		adcs	r4, r4, r3
 944 0008 E4B2     		uxtb	r4, r4
 945              	.LVL67:
 684:main.c        ****         /*we just went from manual to auto*/
 946              		.loc 1 684 0
 947 000a 0128     		cmp	r0, #1
 948 000c 06D1     		bne	.L61
 684:main.c        ****         /*we just went from manual to auto*/
 949              		.loc 1 684 0 is_stmt 0 discriminator 1
 950 000e 2823     		movs	r3, #40
 951 0010 044A     		ldr	r2, .L62
 952 0012 D35C     		ldrb	r3, [r2, r3]
 953 0014 002B     		cmp	r3, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 41


 954 0016 01D1     		bne	.L61
 686:main.c        ****     }
 955              		.loc 1 686 0 is_stmt 1
 956 0018 FFF7FEFF 		bl	PID_Initialize
 957              	.LVL68:
 958              	.L61:
 689:main.c        **** } 
 959              		.loc 1 689 0
 960 001c 2823     		movs	r3, #40
 961 001e 014A     		ldr	r2, .L62
 962 0020 D454     		strb	r4, [r2, r3]
 690:main.c        **** 
 963              		.loc 1 690 0
 964              		@ sp needed
 965              	.LVL69:
 966 0022 10BD     		pop	{r4, pc}
 967              	.L63:
 968              		.align	2
 969              	.L62:
 970 0024 00000000 		.word	.LANCHOR1
 971              		.cfi_endproc
 972              	.LFE39:
 973              		.size	PID_SetMode, .-PID_SetMode
 974              		.section	.text.runRateGroup1_PID,"ax",%progbits
 975              		.align	2
 976              		.global	runRateGroup1_PID
 977              		.code	16
 978              		.thumb_func
 979              		.type	runRateGroup1_PID, %function
 980              	runRateGroup1_PID:
 981              	.LFB40:
 702:main.c        ****      
 982              		.loc 1 702 0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 0
 985              		@ frame_needed = 0, uses_anonymous_args = 0
 986 0000 10B5     		push	{r4, lr}
 987              		.cfi_def_cfa_offset 8
 988              		.cfi_offset 4, -8
 989              		.cfi_offset 14, -4
 712:main.c        ****         
 990              		.loc 1 712 0
 991 0002 4D4B     		ldr	r3, .L79
 992 0004 1B68     		ldr	r3, [r3]
 993 0006 0133     		adds	r3, r3, #1
 994 0008 0024     		movs	r4, #0
 995 000a 4C4A     		ldr	r2, .L79+4
 996 000c 1068     		ldr	r0, [r2]
 997 000e 5168     		ldr	r1, [r2, #4]
 998 0010 0029     		cmp	r1, #0
 999 0012 03D1     		bne	.L78
 1000 0014 A142     		cmp	r1, r4
 1001 0016 0AD1     		bne	.L65
 1002 0018 9842     		cmp	r0, r3
 1003 001a 08D9     		bls	.L65
 1004              	.L78:
 715:main.c        ****         PID_Enabled = false;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 42


 1005              		.loc 1 715 0
 1006 001c 0020     		movs	r0, #0
 1007 001e FFF7FEFF 		bl	PWM_Set
 1008              	.LVL70:
 716:main.c        ****         
 1009              		.loc 1 716 0
 1010 0022 0023     		movs	r3, #0
 1011 0024 464A     		ldr	r2, .L79+8
 1012 0026 1370     		strb	r3, [r2]
 720:main.c        **** 
 1013              		.loc 1 720 0
 1014 0028 464A     		ldr	r2, .L79+12
 1015 002a 1370     		strb	r3, [r2]
 1016 002c 83E0     		b	.L64
 1017              	.L65:
 723:main.c        ****         
 1018              		.loc 1 723 0
 1019 002e 464B     		ldr	r3, .L79+16
 1020 0030 1B78     		ldrb	r3, [r3]
 1021 0032 022B     		cmp	r3, #2
 1022 0034 7CD1     		bne	.L68
 727:main.c        ****         INDEX_OUT_SetDriveMode(INDEX_OUT_DM_STRONG); 
 1023              		.loc 1 727 0
 1024 0036 0620     		movs	r0, #6
 1025 0038 FFF7FEFF 		bl	HOME_OUT_SetDriveMode
 1026              	.LVL71:
 728:main.c        **** 
 1027              		.loc 1 728 0
 1028 003c 0620     		movs	r0, #6
 1029 003e FFF7FEFF 		bl	INDEX_OUT_SetDriveMode
 1030              	.LVL72:
 731:main.c        ****             PID_SetMode(PID_AUTOMATIC);
 1031              		.loc 1 731 0
 1032 0042 424B     		ldr	r3, .L79+20
 1033 0044 1B78     		ldrb	r3, [r3]
 1034 0046 002B     		cmp	r3, #0
 1035 0048 07D1     		bne	.L69
 731:main.c        ****             PID_SetMode(PID_AUTOMATIC);
 1036              		.loc 1 731 0 is_stmt 0 discriminator 1
 1037 004a 3D4A     		ldr	r2, .L79+8
 1038 004c 1278     		ldrb	r2, [r2]
 1039 004e 002A     		cmp	r2, #0
 1040 0050 03D0     		beq	.L69
 732:main.c        ****         } else if (!PID_Enabled && PID_Was_Enabled) {
 1041              		.loc 1 732 0 is_stmt 1
 1042 0052 0120     		movs	r0, #1
 1043 0054 FFF7FEFF 		bl	PID_SetMode
 1044              	.LVL73:
 1045 0058 08E0     		b	.L70
 1046              	.L69:
 733:main.c        ****             PID_SetMode(PID_MANUAL);                
 1047              		.loc 1 733 0
 1048 005a 394A     		ldr	r2, .L79+8
 1049 005c 1278     		ldrb	r2, [r2]
 1050 005e 002A     		cmp	r2, #0
 1051 0060 04D1     		bne	.L70
 733:main.c        ****             PID_SetMode(PID_MANUAL);                
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 43


 1052              		.loc 1 733 0 is_stmt 0 discriminator 1
 1053 0062 002B     		cmp	r3, #0
 1054 0064 02D0     		beq	.L70
 734:main.c        ****         } else {
 1055              		.loc 1 734 0 is_stmt 1
 1056 0066 0020     		movs	r0, #0
 1057 0068 FFF7FEFF 		bl	PID_SetMode
 1058              	.LVL74:
 1059              	.L70:
 740:main.c        ****         
 1060              		.loc 1 740 0
 1061 006c 344B     		ldr	r3, .L79+8
 1062 006e 1B78     		ldrb	r3, [r3]
 1063 0070 364A     		ldr	r2, .L79+20
 1064 0072 1370     		strb	r3, [r2]
 755:main.c        ****             
 1065              		.loc 1 755 0
 1066 0074 002B     		cmp	r3, #0
 1067 0076 51D0     		beq	.L71
 757:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;
 1068              		.loc 1 757 0
 1069 0078 354B     		ldr	r3, .L79+24
 1070 007a 1B78     		ldrb	r3, [r3]
 1071 007c 002B     		cmp	r3, #0
 1072 007e 04D1     		bne	.L72
 758:main.c        ****             } else if ( labs(PID_EffectiveSetpoint - PID_Setpoint) <= (2 * PID_EffSetDelta) ) {
 1073              		.loc 1 758 0
 1074 0080 344B     		ldr	r3, .L79+28
 1075 0082 1A68     		ldr	r2, [r3]
 1076 0084 344B     		ldr	r3, .L79+32
 1077 0086 1A60     		str	r2, [r3]
 1078 0088 16E0     		b	.L73
 1079              	.L72:
 759:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;                                              
 1080              		.loc 1 759 0
 1081 008a 334A     		ldr	r2, .L79+32
 1082 008c 1168     		ldr	r1, [r2]
 1083 008e 314A     		ldr	r2, .L79+28
 1084 0090 1068     		ldr	r0, [r2]
 1085 0092 0A1A     		subs	r2, r1, r0
 1086 0094 D417     		asrs	r4, r2, #31
 1087 0096 1219     		adds	r2, r2, r4
 1088 0098 6240     		eors	r2, r4
 1089 009a 5C00     		lsls	r4, r3, #1
 1090 009c A242     		cmp	r2, r4
 1091 009e 02DC     		bgt	.L74
 760:main.c        ****             } else if (PID_Setpoint > PID_EffectiveSetpoint) {
 1092              		.loc 1 760 0
 1093 00a0 2D4B     		ldr	r3, .L79+32
 1094 00a2 1860     		str	r0, [r3]
 1095 00a4 08E0     		b	.L73
 1096              	.L74:
 761:main.c        ****                 PID_EffectiveSetpoint = (PID_EffectiveSetpoint + PID_EffSetDelta);
 1097              		.loc 1 761 0
 1098 00a6 8142     		cmp	r1, r0
 1099 00a8 03DA     		bge	.L75
 762:main.c        ****             } else {
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 44


 1100              		.loc 1 762 0
 1101 00aa CB18     		adds	r3, r1, r3
 1102 00ac 2A4A     		ldr	r2, .L79+32
 1103 00ae 1360     		str	r3, [r2]
 1104 00b0 02E0     		b	.L73
 1105              	.L75:
 764:main.c        ****             }
 1106              		.loc 1 764 0
 1107 00b2 CB1A     		subs	r3, r1, r3
 1108 00b4 284A     		ldr	r2, .L79+32
 1109 00b6 1360     		str	r3, [r2]
 1110              	.L73:
 768:main.c        ****             
 1111              		.loc 1 768 0
 1112 00b8 FFF7FEFF 		bl	GetPosition
 1113              	.LVL75:
 1114 00bc 274B     		ldr	r3, .L79+36
 1115 00be 1860     		str	r0, [r3]
 771:main.c        ****             
 1116              		.loc 1 771 0
 1117 00c0 1968     		ldr	r1, [r3]
 1118 00c2 254B     		ldr	r3, .L79+32
 1119 00c4 1868     		ldr	r0, [r3]
 1120 00c6 FFF7FEFF 		bl	PID_UpdateValues
 1121              	.LVL76:
 1122 00ca 254B     		ldr	r3, .L79+40
 1123 00cc 1860     		str	r0, [r3]
 774:main.c        ****             
 1124              		.loc 1 774 0
 1125 00ce 1868     		ldr	r0, [r3]
 1126 00d0 FFF7FEFF 		bl	PWM_Set
 1127              	.LVL77:
 777:main.c        ****                 
 1128              		.loc 1 777 0
 1129 00d4 194B     		ldr	r3, .L79+4
 1130 00d6 1B7C     		ldrb	r3, [r3, #16]
 1131 00d8 002B     		cmp	r3, #0
 1132 00da 2CD0     		beq	.L64
 779:main.c        ****                     
 1133              		.loc 1 779 0
 1134 00dc 1F4B     		ldr	r3, .L79+36
 1135 00de 1A68     		ldr	r2, [r3]
 1136 00e0 1C4B     		ldr	r3, .L79+28
 1137 00e2 1B68     		ldr	r3, [r3]
 1138 00e4 9A42     		cmp	r2, r3
 1139 00e6 15D1     		bne	.L76
 784:main.c        ****                         
 1140              		.loc 1 784 0
 1141 00e8 144B     		ldr	r3, .L79+4
 1142 00ea 5B8D     		ldrh	r3, [r3, #42]
 1143 00ec 1E2B     		cmp	r3, #30
 1144 00ee 07D1     		bne	.L77
 788:main.c        ****                         
 1145              		.loc 1 788 0
 1146 00f0 124B     		ldr	r3, .L79+4
 1147 00f2 DA6A     		ldr	r2, [r3, #44]
 1148 00f4 196A     		ldr	r1, [r3, #32]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 45


 1149 00f6 521A     		subs	r2, r2, r1
 1150 00f8 5A62     		str	r2, [r3, #36]
 791:main.c        ****                         
 1151              		.loc 1 791 0
 1152 00fa 0022     		movs	r2, #0
 1153 00fc 1A74     		strb	r2, [r3, #16]
 1154 00fe 1AE0     		b	.L64
 1155              	.L77:
 797:main.c        **** 
 1156              		.loc 1 797 0
 1157 0100 0133     		adds	r3, r3, #1
 1158 0102 9BB2     		uxth	r3, r3
 1159 0104 0D4A     		ldr	r2, .L79+4
 1160 0106 5385     		strh	r3, [r2, #42]
 802:main.c        ****                             LastMoveEndTimeUsec = UptimeMicroseconds;
 1161              		.loc 1 802 0
 1162 0108 012B     		cmp	r3, #1
 1163 010a 14D1     		bne	.L64
 803:main.c        ****                         }                    
 1164              		.loc 1 803 0
 1165 010c 9069     		ldr	r0, [r2, #24]
 1166 010e D169     		ldr	r1, [r2, #28]
 1167 0110 D062     		str	r0, [r2, #44]
 1168 0112 10E0     		b	.L64
 1169              	.L76:
 810:main.c        ****                 }
 1170              		.loc 1 810 0
 1171 0114 0022     		movs	r2, #0
 1172 0116 094B     		ldr	r3, .L79+4
 1173 0118 5A85     		strh	r2, [r3, #42]
 1174 011a 0CE0     		b	.L64
 1175              	.L71:
 819:main.c        ****             
 1176              		.loc 1 819 0
 1177 011c 094B     		ldr	r3, .L79+12
 1178 011e 1B78     		ldrb	r3, [r3]
 1179 0120 5BB2     		sxtb	r3, r3
 1180 0122 DB00     		lsls	r3, r3, #3
 1181 0124 0E4A     		ldr	r2, .L79+40
 1182 0126 1360     		str	r3, [r2]
 822:main.c        ****         }        
 1183              		.loc 1 822 0
 1184 0128 1068     		ldr	r0, [r2]
 1185 012a FFF7FEFF 		bl	PWM_Set
 1186              	.LVL78:
 1187 012e 02E0     		b	.L64
 1188              	.L68:
 828:main.c        ****     }
 1189              		.loc 1 828 0
 1190 0130 0020     		movs	r0, #0
 1191 0132 FFF7FEFF 		bl	PWM_Set
 1192              	.LVL79:
 1193              	.L64:
 830:main.c        **** 
 1194              		.loc 1 830 0
 1195              		@ sp needed
 1196 0136 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 46


 1197              	.L80:
 1198              		.align	2
 1199              	.L79:
 1200 0138 00000000 		.word	LastMessageTimeSeconds
 1201 013c 00000000 		.word	.LANCHOR1
 1202 0140 00000000 		.word	PID_Enabled
 1203 0144 00000000 		.word	Jog
 1204 0148 00000000 		.word	ConfigState
 1205 014c 00000000 		.word	PID_Was_Enabled
 1206 0150 00000000 		.word	PID_EffSetDelta
 1207 0154 00000000 		.word	PID_Setpoint
 1208 0158 00000000 		.word	PID_EffectiveSetpoint
 1209 015c 00000000 		.word	Position
 1210 0160 00000000 		.word	Output
 1211              		.cfi_endproc
 1212              	.LFE40:
 1213              		.size	runRateGroup1_PID, .-runRateGroup1_PID
 1214              		.section	.text.BRMS_Interrupt,"ax",%progbits
 1215              		.align	2
 1216              		.global	BRMS_Interrupt
 1217              		.code	16
 1218              		.thumb_func
 1219              		.type	BRMS_Interrupt, %function
 1220              	BRMS_Interrupt:
 1221              	.LFB42:
1013:main.c        ****     
 1222              		.loc 1 1013 0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 0
 1225              		@ frame_needed = 0, uses_anonymous_args = 0
 1226 0000 70B5     		push	{r4, r5, r6, lr}
 1227              		.cfi_def_cfa_offset 16
 1228              		.cfi_offset 4, -16
 1229              		.cfi_offset 5, -12
 1230              		.cfi_offset 6, -8
 1231              		.cfi_offset 14, -4
1024:main.c        **** 
 1232              		.loc 1 1024 0
 1233 0002 0220     		movs	r0, #2
 1234 0004 FFF7FEFF 		bl	Timer_BRMS_ClearInterrupt
 1235              	.LVL80:
1026:main.c        ****     
 1236              		.loc 1 1026 0
 1237 0008 0120     		movs	r0, #1
 1238 000a FFF7FEFF 		bl	PROBE_Write
 1239              	.LVL81:
1029:main.c        ****     UptimeMicrosecondsAccumulator += 200;
 1240              		.loc 1 1029 0
 1241 000e 2A4B     		ldr	r3, .L90
 1242 0010 9C69     		ldr	r4, [r3, #24]
 1243 0012 DD69     		ldr	r5, [r3, #28]
 1244 0014 C820     		movs	r0, #200
 1245 0016 0021     		movs	r1, #0
 1246 0018 2418     		adds	r4, r4, r0
 1247 001a 4D41     		adcs	r5, r5, r1
 1248 001c 9C61     		str	r4, [r3, #24]
 1249 001e DD61     		str	r5, [r3, #28]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 47


1030:main.c        ****     
 1250              		.loc 1 1030 0
 1251 0020 1C6B     		ldr	r4, [r3, #48]
 1252 0022 5D6B     		ldr	r5, [r3, #52]
 1253 0024 0019     		adds	r0, r0, r4
 1254 0026 6941     		adcs	r1, r1, r5
 1255 0028 1863     		str	r0, [r3, #48]
 1256 002a 5963     		str	r1, [r3, #52]
1033:main.c        ****         UptimeMicrosecondsAccumulator = 0;
 1257              		.loc 1 1033 0
 1258 002c 196B     		ldr	r1, [r3, #48]
 1259 002e 5A6B     		ldr	r2, [r3, #52]
 1260 0030 002A     		cmp	r2, #0
 1261 0032 04D1     		bne	.L88
 1262 0034 16D1     		bne	.L82
 1263 0036 FA23     		movs	r3, #250
 1264 0038 9B00     		lsls	r3, r3, #2
 1265 003a 9942     		cmp	r1, r3
 1266 003c 12D9     		bls	.L82
 1267              	.L88:
1034:main.c        ****         UptimeMilliseconds += 1;
 1268              		.loc 1 1034 0
 1269 003e 1E4B     		ldr	r3, .L90
 1270 0040 0020     		movs	r0, #0
 1271 0042 0021     		movs	r1, #0
 1272 0044 1863     		str	r0, [r3, #48]
 1273 0046 5963     		str	r1, [r3, #52]
1035:main.c        ****         UptimeMillisecondsAccumulator += 1;
 1274              		.loc 1 1035 0
 1275 0048 9C6B     		ldr	r4, [r3, #56]
 1276 004a DD6B     		ldr	r5, [r3, #60]
 1277 004c 0120     		movs	r0, #1
 1278 004e 0021     		movs	r1, #0
 1279 0050 2418     		adds	r4, r4, r0
 1280 0052 4D41     		adcs	r5, r5, r1
 1281 0054 9C63     		str	r4, [r3, #56]
 1282 0056 DD63     		str	r5, [r3, #60]
1036:main.c        ****     }
 1283              		.loc 1 1036 0
 1284 0058 1C6C     		ldr	r4, [r3, #64]
 1285 005a 5D6C     		ldr	r5, [r3, #68]
 1286 005c 0019     		adds	r0, r0, r4
 1287 005e 6941     		adcs	r1, r1, r5
 1288 0060 1864     		str	r0, [r3, #64]
 1289 0062 5964     		str	r1, [r3, #68]
 1290              	.L82:
1040:main.c        ****         UptimeMillisecondsAccumulator = 0;
 1291              		.loc 1 1040 0
 1292 0064 144B     		ldr	r3, .L90
 1293 0066 196C     		ldr	r1, [r3, #64]
 1294 0068 5A6C     		ldr	r2, [r3, #68]
 1295 006a 002A     		cmp	r2, #0
 1296 006c 04D1     		bne	.L89
 1297 006e 10D1     		bne	.L84
 1298 0070 FA23     		movs	r3, #250
 1299 0072 9B00     		lsls	r3, r3, #2
 1300 0074 9942     		cmp	r1, r3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 48


 1301 0076 0CD9     		bls	.L84
 1302              	.L89:
1041:main.c        ****         UptimeSeconds += 1;
 1303              		.loc 1 1041 0
 1304 0078 0F4B     		ldr	r3, .L90
 1305 007a 0020     		movs	r0, #0
 1306 007c 0021     		movs	r1, #0
 1307 007e 1864     		str	r0, [r3, #64]
 1308 0080 5964     		str	r1, [r3, #68]
1042:main.c        ****     }
 1309              		.loc 1 1042 0
 1310 0082 1C68     		ldr	r4, [r3]
 1311 0084 5D68     		ldr	r5, [r3, #4]
 1312 0086 0120     		movs	r0, #1
 1313 0088 0021     		movs	r1, #0
 1314 008a 0019     		adds	r0, r0, r4
 1315 008c 6941     		adcs	r1, r1, r5
 1316 008e 1860     		str	r0, [r3]
 1317 0090 5960     		str	r1, [r3, #4]
 1318              	.L84:
1046:main.c        **** 
 1319              		.loc 1 1046 0
 1320 0092 094A     		ldr	r2, .L90
 1321 0094 936C     		ldr	r3, [r2, #72]
 1322 0096 0133     		adds	r3, r3, #1
 1323 0098 9364     		str	r3, [r2, #72]
1066:main.c        ****         
 1324              		.loc 1 1066 0
 1325 009a DA07     		lsls	r2, r3, #31
 1326 009c 02D5     		bpl	.L86
1071:main.c        ****         
 1327              		.loc 1 1071 0
 1328 009e FFF7FEFF 		bl	runRateGroup1_PID
 1329              	.LVL82:
 1330 00a2 05E0     		b	.L87
 1331              	.L86:
1073:main.c        ****         
 1332              		.loc 1 1073 0
 1333 00a4 9A07     		lsls	r2, r3, #30
 1334 00a6 03D4     		bmi	.L87
1078:main.c        ****         
 1335              		.loc 1 1078 0
 1336 00a8 5B07     		lsls	r3, r3, #29
 1337 00aa 01D5     		bpl	.L87
1081:main.c        ****         
 1338              		.loc 1 1081 0
 1339 00ac FFF7FEFF 		bl	runRateGroup3_SPI
 1340              	.LVL83:
 1341              	.L87:
1094:main.c        ****    
 1342              		.loc 1 1094 0
 1343 00b0 0020     		movs	r0, #0
 1344 00b2 FFF7FEFF 		bl	PROBE_Write
 1345              	.LVL84:
1096:main.c        **** 
 1346              		.loc 1 1096 0
 1347              		@ sp needed
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 49


 1348 00b6 70BD     		pop	{r4, r5, r6, pc}
 1349              	.L91:
 1350              		.align	2
 1351              	.L90:
 1352 00b8 00000000 		.word	.LANCHOR1
 1353              		.cfi_endproc
 1354              	.LFE42:
 1355              		.size	BRMS_Interrupt, .-BRMS_Interrupt
 1356              		.section	.text.main,"ax",%progbits
 1357              		.align	2
 1358              		.global	main
 1359              		.code	16
 1360              		.thumb_func
 1361              		.type	main, %function
 1362              	main:
 1363              	.LFB41:
 842:main.c        ****     
 1364              		.loc 1 842 0
 1365              		.cfi_startproc
 1366              		@ Volatile: function does not return.
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 1369 0000 70B5     		push	{r4, r5, r6, lr}
 1370              		.cfi_def_cfa_offset 16
 1371              		.cfi_offset 4, -16
 1372              		.cfi_offset 5, -12
 1373              		.cfi_offset 6, -8
 1374              		.cfi_offset 14, -4
 850:main.c        ****     INDEX_OUT_SetDriveMode(INDEX_OUT_DM_DIG_HIZ); 
 1375              		.loc 1 850 0
 1376 0002 0120     		movs	r0, #1
 1377 0004 FFF7FEFF 		bl	HOME_OUT_SetDriveMode
 1378              	.LVL85:
 851:main.c        **** 
 1379              		.loc 1 851 0
 1380 0008 0120     		movs	r0, #1
 1381 000a FFF7FEFF 		bl	INDEX_OUT_SetDriveMode
 1382              	.LVL86:
 859:main.c        ****     isr_brms_StartEx(BRMS_Interrupt);
 1383              		.loc 1 859 0
 1384 000e FFF7FEFF 		bl	Timer_BRMS_Start
 1385              	.LVL87:
 860:main.c        ****     isr_brms_SetPriority(HIGHER_PRIORITY);
 1386              		.loc 1 860 0
 1387 0012 3948     		ldr	r0, .L97
 1388 0014 FFF7FEFF 		bl	isr_brms_StartEx
 1389              	.LVL88:
 861:main.c        **** 
 1390              		.loc 1 861 0
 1391 0018 0220     		movs	r0, #2
 1392 001a FFF7FEFF 		bl	isr_brms_SetPriority
 1393              	.LVL89:
 864:main.c        ****     isr_home_SetPriority(DEFAULT_PRIORITY);
 1394              		.loc 1 864 0
 1395 001e 3748     		ldr	r0, .L97+4
 1396 0020 FFF7FEFF 		bl	isr_home_StartEx
 1397              	.LVL90:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 50


 865:main.c        **** 
 1398              		.loc 1 865 0
 1399 0024 0320     		movs	r0, #3
 1400 0026 FFF7FEFF 		bl	isr_home_SetPriority
 1401              	.LVL91:
 868:main.c        ****     isr_rst_encoder_SetPriority(DEFAULT_PRIORITY);
 1402              		.loc 1 868 0
 1403 002a 3548     		ldr	r0, .L97+8
 1404 002c FFF7FEFF 		bl	isr_rst_encoder_StartEx
 1405              	.LVL92:
 869:main.c        ****     
 1406              		.loc 1 869 0
 1407 0030 0320     		movs	r0, #3
 1408 0032 FFF7FEFF 		bl	isr_rst_encoder_SetPriority
 1409              	.LVL93:
 872:main.c        ****     isr_spi_ss_SetPriority(DEFAULT_PRIORITY);   
 1410              		.loc 1 872 0
 1411 0036 3348     		ldr	r0, .L97+12
 1412 0038 FFF7FEFF 		bl	isr_spi_ss_StartEx
 1413              	.LVL94:
 873:main.c        **** 
 1414              		.loc 1 873 0
 1415 003c 0320     		movs	r0, #3
 1416 003e FFF7FEFF 		bl	isr_spi_ss_SetPriority
 1417              	.LVL95:
 876:main.c        ****     
 1418              		.loc 1 876 0
 1419              		.syntax divided
 1420              	@ 876 "main.c" 1
 1421 0042 62B6     		CPSIE   i
 1422              	@ 0 "" 2
 905:main.c        ****     
 1423              		.loc 1 905 0
 1424              		.thumb
 1425              		.syntax unified
 1426 0044 FFF7FEFF 		bl	I2C_Start
 1427              	.LVL96:
 910:main.c        ****     SPI_1_Start();
 1428              		.loc 1 910 0
 1429 0048 6420     		movs	r0, #100
 1430 004a FFF7FEFF 		bl	CyDelay
 1431              	.LVL97:
 911:main.c        ****     
 1432              		.loc 1 911 0
 1433 004e FFF7FEFF 		bl	SPI_1_Start
 1434              	.LVL98:
 915:main.c        ****     PWM_1_WritePeriod(PWM_15KHZ_PERIOD);
 1435              		.loc 1 915 0
 1436 0052 FFF7FEFF 		bl	PWM_1_Start
 1437              	.LVL99:
 916:main.c        ****     PWM_Set(PWM_SET_NEUTRAL);   
 1438              		.loc 1 916 0
 1439 0056 C820     		movs	r0, #200
 1440 0058 C000     		lsls	r0, r0, #3
 1441 005a FFF7FEFF 		bl	PWM_1_WritePeriod
 1442              	.LVL100:
 917:main.c        ****     
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 51


 1443              		.loc 1 917 0
 1444 005e 0020     		movs	r0, #0
 1445 0060 FFF7FEFF 		bl	PWM_Set
 1446              	.LVL101:
 920:main.c        ****     
 1447              		.loc 1 920 0
 1448 0064 0024     		movs	r4, #0
 1449 0066 284B     		ldr	r3, .L97+16
 1450 0068 1C70     		strb	r4, [r3]
 923:main.c        ****    
 1451              		.loc 1 923 0
 1452 006a 284B     		ldr	r3, .L97+20
 1453 006c 1C70     		strb	r4, [r3]
 926:main.c        ****     Counter_1_WriteCounter(ENCODER_MAX);  // Set the encoder initially to mid range
 1454              		.loc 1 926 0
 1455 006e FFF7FEFF 		bl	Counter_1_Start
 1456              	.LVL102:
 927:main.c        ****     LastPosition = ENCODER_MAX;
 1457              		.loc 1 927 0
 1458 0072 274D     		ldr	r5, .L97+24
 1459 0074 2800     		movs	r0, r5
 1460 0076 FFF7FEFF 		bl	Counter_1_WriteCounter
 1461              	.LVL103:
 928:main.c        ****     
 1462              		.loc 1 928 0
 1463 007a 264B     		ldr	r3, .L97+28
 1464 007c 1D60     		str	r5, [r3]
 931:main.c        ****     Index_Counter_1_WriteCounter(0);
 1465              		.loc 1 931 0
 1466 007e FFF7FEFF 		bl	Index_Counter_1_Start
 1467              	.LVL104:
 932:main.c        ****      
 1468              		.loc 1 932 0
 1469 0082 0020     		movs	r0, #0
 1470 0084 FFF7FEFF 		bl	Index_Counter_1_WriteCounter
 1471              	.LVL105:
 935:main.c        ****     ConfigSequence = 0;
 1472              		.loc 1 935 0
 1473 0088 0122     		movs	r2, #1
 1474 008a 234B     		ldr	r3, .L97+32
 1475 008c 1A70     		strb	r2, [r3]
 936:main.c        ****     ChecksumErrors = 0;
 1476              		.loc 1 936 0
 1477 008e 234B     		ldr	r3, .L97+36
 1478 0090 1C70     		strb	r4, [r3]
 937:main.c        ****     
 1479              		.loc 1 937 0
 1480 0092 234B     		ldr	r3, .L97+40
 1481 0094 1C80     		strh	r4, [r3]
 941:main.c        ****     PID_SetMode(PID_MANUAL);
 1482              		.loc 1 941 0
 1483 0096 FFF7FEFF 		bl	PID_Initialize
 1484              	.LVL106:
 942:main.c        ****     
 1485              		.loc 1 942 0
 1486 009a 0020     		movs	r0, #0
 1487 009c FFF7FEFF 		bl	PID_SetMode
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 52


 1488              	.LVL107:
 945:main.c        ****     limitIterm = 800;
 1489              		.loc 1 945 0
 1490 00a0 C823     		movs	r3, #200
 1491 00a2 9B00     		lsls	r3, r3, #2
 1492 00a4 1F4A     		ldr	r2, .L97+44
 1493 00a6 1380     		strh	r3, [r2]
 946:main.c        ****     
 1494              		.loc 1 946 0
 1495 00a8 1F4A     		ldr	r2, .L97+48
 1496 00aa 1380     		strh	r3, [r2]
 949:main.c        ****     PID_EffectiveSetpoint = 0;
 1497              		.loc 1 949 0
 1498 00ac 1F4B     		ldr	r3, .L97+52
 1499 00ae 1C60     		str	r4, [r3]
 950:main.c        ****     PID_EffSetDelta       = 250; //PID_EFFECTIVE_SETPOINT_DELTA_DEFAULT;
 1500              		.loc 1 950 0
 1501 00b0 1F4B     		ldr	r3, .L97+56
 1502 00b2 1C60     		str	r4, [r3]
 951:main.c        ****     PID_Was_Enabled       = false;
 1503              		.loc 1 951 0
 1504 00b4 FA22     		movs	r2, #250
 1505 00b6 1F4B     		ldr	r3, .L97+60
 1506 00b8 1A70     		strb	r2, [r3]
 952:main.c        ****     PID_Enabled           = false;
 1507              		.loc 1 952 0
 1508 00ba 1F4B     		ldr	r3, .L97+64
 1509 00bc 0022     		movs	r2, #0
 1510 00be 1A70     		strb	r2, [r3]
 953:main.c        ****     PWM_Set(PWM_SET_NEUTRAL);
 1511              		.loc 1 953 0
 1512 00c0 1E4B     		ldr	r3, .L97+68
 1513 00c2 1A70     		strb	r2, [r3]
 954:main.c        ****   
 1514              		.loc 1 954 0
 1515 00c4 0020     		movs	r0, #0
 1516 00c6 FFF7FEFF 		bl	PWM_Set
 1517              	.LVL108:
 958:main.c        ****     } else {
 1518              		.loc 1 958 0
 1519 00ca 0120     		movs	r0, #1
 1520 00cc FFF7FEFF 		bl	EncoderDirection_Write
 1521              	.LVL109:
 1522              	.L96:
 970:main.c        ****         
 1523              		.loc 1 970 0
 1524 00d0 FFF7FEFF 		bl	MotorCurrentRead
 1525              	.LVL110:
 973:main.c        ****             LED_Write(1);
 1526              		.loc 1 973 0
 1527 00d4 1A4B     		ldr	r3, .L97+72
 1528 00d6 1A68     		ldr	r2, [r3]
 1529 00d8 5B68     		ldr	r3, [r3, #4]
 1530 00da 0123     		movs	r3, #1
 1531 00dc 1342     		tst	r3, r2
 1532 00de 03D0     		beq	.L93
 974:main.c        ****         } else {
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 53


 1533              		.loc 1 974 0
 1534 00e0 0120     		movs	r0, #1
 1535 00e2 FFF7FEFF 		bl	LED_Write
 1536              	.LVL111:
 1537 00e6 02E0     		b	.L95
 1538              	.L93:
 976:main.c        ****         } 
 1539              		.loc 1 976 0
 1540 00e8 0020     		movs	r0, #0
 1541 00ea FFF7FEFF 		bl	LED_Write
 1542              	.LVL112:
 1543              	.L95:
 981:main.c        ****         
 1544              		.loc 1 981 0
 1545 00ee 0A20     		movs	r0, #10
 1546 00f0 FFF7FEFF 		bl	CyDelay
 1547              	.LVL113:
 994:main.c        ****       
 1548              		.loc 1 994 0
 1549 00f4 ECE7     		b	.L96
 1550              	.L98:
 1551 00f6 C046     		.align	2
 1552              	.L97:
 1553 00f8 00000000 		.word	BRMS_Interrupt
 1554 00fc 00000000 		.word	HomeIsrHandler
 1555 0100 00000000 		.word	RSTIsrHandler
 1556 0104 00000000 		.word	SPI_SS_IsrHandler
 1557 0108 00000000 		.word	Jog
 1558 010c 00000000 		.word	.LANCHOR0
 1559 0110 FFFFFF00 		.word	16777215
 1560 0114 00000000 		.word	LastPosition
 1561 0118 00000000 		.word	ConfigState
 1562 011c 00000000 		.word	ConfigSequence
 1563 0120 00000000 		.word	ChecksumErrors
 1564 0124 00000000 		.word	limitOutput
 1565 0128 00000000 		.word	limitIterm
 1566 012c 00000000 		.word	PID_Setpoint
 1567 0130 00000000 		.word	PID_EffectiveSetpoint
 1568 0134 00000000 		.word	PID_EffSetDelta
 1569 0138 00000000 		.word	PID_Was_Enabled
 1570 013c 00000000 		.word	PID_Enabled
 1571 0140 00000000 		.word	.LANCHOR1
 1572              		.cfi_endproc
 1573              	.LFE41:
 1574              		.size	main, .-main
 1575              		.comm	txMessageState,1,1
 1576              		.comm	txMessage,31,4
 1577              		.comm	rxMessage,31,4
 1578              		.comm	LastMessageTimeSeconds,4,4
 1579              		.comm	CurrentI2Cinbuf,20,4
 1580              		.comm	MotorCurrent,2,2
 1581              		.comm	ChecksumErrors,2,2
 1582              		.comm	ConfigSequence,1,1
 1583              		.comm	FaultState,1,1
 1584              		.comm	ConfigState,1,1
 1585              		.global	UptimeSeconds
 1586              		.global	UptimeMillisecondsAccumulator
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 54


 1587              		.global	UptimeMilliseconds
 1588              		.global	UptimeMicrosecondsAccumulator
 1589              		.global	UptimeMicroseconds
 1590              		.global	NewCommandedMove
 1591              		.global	LastMoveTimeUsec
 1592              		.global	LastMoveStableCount
 1593              		.global	LastMoveEndTimeUsec
 1594              		.global	LastMoveStartTimeUsec
 1595              		.global	homingDone
 1596              		.comm	limitIterm,2,2
 1597              		.comm	limitOutput,2,2
 1598              		.comm	Output,4,4
 1599              		.comm	LastPosition,4,4
 1600              		.comm	Position,4,4
 1601              		.comm	lastTime,4,4
 1602              		.comm	PID_EffSetDelta,1,1
 1603              		.comm	PID_EffectiveSetpoint,4,4
 1604              		.comm	PID_Setpoint,4,4
 1605              		.comm	PID_Was_Enabled,1,1
 1606              		.comm	PID_Enabled,1,1
 1607              		.comm	Jog,1,1
 1608              		.global	inAuto
 1609              		.data
 1610              		.set	.LANCHOR0,. + 0
 1611              		.type	homingDone, %object
 1612              		.size	homingDone, 1
 1613              	homingDone:
 1614 0000 01       		.byte	1
 1615              		.bss
 1616              		.align	3
 1617              		.set	.LANCHOR1,. + 0
 1618              		.type	UptimeSeconds, %object
 1619              		.size	UptimeSeconds, 8
 1620              	UptimeSeconds:
 1621 0000 00000000 		.space	8
 1621      00000000 
 1622              		.type	RawPosition.7291, %object
 1623              		.size	RawPosition.7291, 4
 1624              	RawPosition.7291:
 1625 0008 00000000 		.space	4
 1626              		.type	result.7292, %object
 1627              		.size	result.7292, 4
 1628              	result.7292:
 1629 000c 00000000 		.space	4
 1630              		.type	NewCommandedMove, %object
 1631              		.size	NewCommandedMove, 1
 1632              	NewCommandedMove:
 1633 0010 00       		.space	1
 1634 0011 00000000 		.space	7
 1634      000000
 1635              		.type	UptimeMicroseconds, %object
 1636              		.size	UptimeMicroseconds, 8
 1637              	UptimeMicroseconds:
 1638 0018 00000000 		.space	8
 1638      00000000 
 1639              		.type	LastMoveStartTimeUsec, %object
 1640              		.size	LastMoveStartTimeUsec, 4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 55


 1641              	LastMoveStartTimeUsec:
 1642 0020 00000000 		.space	4
 1643              		.type	LastMoveTimeUsec, %object
 1644              		.size	LastMoveTimeUsec, 4
 1645              	LastMoveTimeUsec:
 1646 0024 00000000 		.space	4
 1647              		.type	inAuto, %object
 1648              		.size	inAuto, 1
 1649              	inAuto:
 1650 0028 00       		.space	1
 1651 0029 00       		.space	1
 1652              		.type	LastMoveStableCount, %object
 1653              		.size	LastMoveStableCount, 2
 1654              	LastMoveStableCount:
 1655 002a 0000     		.space	2
 1656              		.type	LastMoveEndTimeUsec, %object
 1657              		.size	LastMoveEndTimeUsec, 4
 1658              	LastMoveEndTimeUsec:
 1659 002c 00000000 		.space	4
 1660              		.type	UptimeMicrosecondsAccumulator, %object
 1661              		.size	UptimeMicrosecondsAccumulator, 8
 1662              	UptimeMicrosecondsAccumulator:
 1663 0030 00000000 		.space	8
 1663      00000000 
 1664              		.type	UptimeMilliseconds, %object
 1665              		.size	UptimeMilliseconds, 8
 1666              	UptimeMilliseconds:
 1667 0038 00000000 		.space	8
 1667      00000000 
 1668              		.type	UptimeMillisecondsAccumulator, %object
 1669              		.size	UptimeMillisecondsAccumulator, 8
 1670              	UptimeMillisecondsAccumulator:
 1671 0040 00000000 		.space	8
 1671      00000000 
 1672              		.type	brmsTask.7310, %object
 1673              		.size	brmsTask.7310, 4
 1674              	brmsTask.7310:
 1675 0048 00000000 		.space	4
 1676              		.text
 1677              	.Letext0:
 1678              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1679              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1680              		.file 4 "Generated_Source\\PSoC4/cytypes.h"
 1681              		.file 5 "pid.h"
 1682              		.file 6 "Generated_Source\\PSoC4/isr_rst_encoder.h"
 1683              		.file 7 "Generated_Source\\PSoC4/Reset_Encoder.h"
 1684              		.file 8 "Generated_Source\\PSoC4/Counter_1.h"
 1685              		.file 9 "Generated_Source\\PSoC4/Index_Counter_1.h"
 1686              		.file 10 "Generated_Source\\PSoC4/isr_home.h"
 1687              		.file 11 "Generated_Source\\PSoC4/HOME_IN.h"
 1688              		.file 12 "Generated_Source\\PSoC4/spi_ss.h"
 1689              		.file 13 "Generated_Source\\PSoC4/SPI_1_SPI_UART.h"
 1690              		.file 14 "INA219.h"
 1691              		.file 15 "Generated_Source\\PSoC4/PWM_1.h"
 1692              		.file 16 "Generated_Source\\PSoC4/HOME_OUT.h"
 1693              		.file 17 "Generated_Source\\PSoC4/INDEX_OUT.h"
 1694              		.file 18 "Generated_Source\\PSoC4/Timer_BRMS.h"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 56


 1695              		.file 19 "Generated_Source\\PSoC4/PROBE.h"
 1696              		.file 20 "Generated_Source\\PSoC4/isr_brms.h"
 1697              		.file 21 "Generated_Source\\PSoC4/isr_spi_ss.h"
 1698              		.file 22 "Generated_Source\\PSoC4/I2C.h"
 1699              		.file 23 "Generated_Source\\PSoC4/CyLib.h"
 1700              		.file 24 "Generated_Source\\PSoC4/SPI_1.h"
 1701              		.file 25 "Generated_Source\\PSoC4/EncoderDirection.h"
 1702              		.file 26 "Generated_Source\\PSoC4/LED.h"
 1703              		.section	.debug_info,"",%progbits
 1704              	.Ldebug_info0:
 1705 0000 E30F0000 		.4byte	0xfe3
 1706 0004 0400     		.2byte	0x4
 1707 0006 00000000 		.4byte	.Ldebug_abbrev0
 1708 000a 04       		.byte	0x4
 1709 000b 01       		.uleb128 0x1
 1710 000c 5A020000 		.4byte	.LASF181
 1711 0010 0C       		.byte	0xc
 1712 0011 12000000 		.4byte	.LASF182
 1713 0015 81050000 		.4byte	.LASF183
 1714 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1715 001d 00000000 		.4byte	0
 1716 0021 00000000 		.4byte	.Ldebug_line0
 1717 0025 02       		.uleb128 0x2
 1718 0026 4E060000 		.4byte	.LASF0
 1719 002a 02       		.byte	0x2
 1720 002b 1B       		.byte	0x1b
 1721 002c 30000000 		.4byte	0x30
 1722 0030 03       		.uleb128 0x3
 1723 0031 01       		.byte	0x1
 1724 0032 06       		.byte	0x6
 1725 0033 90090000 		.4byte	.LASF2
 1726 0037 02       		.uleb128 0x2
 1727 0038 25080000 		.4byte	.LASF1
 1728 003c 02       		.byte	0x2
 1729 003d 1D       		.byte	0x1d
 1730 003e 42000000 		.4byte	0x42
 1731 0042 03       		.uleb128 0x3
 1732 0043 01       		.byte	0x1
 1733 0044 08       		.byte	0x8
 1734 0045 B6080000 		.4byte	.LASF3
 1735 0049 02       		.uleb128 0x2
 1736 004a 26050000 		.4byte	.LASF4
 1737 004e 02       		.byte	0x2
 1738 004f 29       		.byte	0x29
 1739 0050 54000000 		.4byte	0x54
 1740 0054 03       		.uleb128 0x3
 1741 0055 02       		.byte	0x2
 1742 0056 05       		.byte	0x5
 1743 0057 E7060000 		.4byte	.LASF5
 1744 005b 02       		.uleb128 0x2
 1745 005c 1E020000 		.4byte	.LASF6
 1746 0060 02       		.byte	0x2
 1747 0061 2B       		.byte	0x2b
 1748 0062 66000000 		.4byte	0x66
 1749 0066 03       		.uleb128 0x3
 1750 0067 02       		.byte	0x2
 1751 0068 07       		.byte	0x7
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 57


 1752 0069 9C090000 		.4byte	.LASF7
 1753 006d 02       		.uleb128 0x2
 1754 006e CE000000 		.4byte	.LASF8
 1755 0072 02       		.byte	0x2
 1756 0073 3F       		.byte	0x3f
 1757 0074 78000000 		.4byte	0x78
 1758 0078 03       		.uleb128 0x3
 1759 0079 04       		.byte	0x4
 1760 007a 05       		.byte	0x5
 1761 007b 31070000 		.4byte	.LASF9
 1762 007f 02       		.uleb128 0x2
 1763 0080 C4080000 		.4byte	.LASF10
 1764 0084 02       		.byte	0x2
 1765 0085 41       		.byte	0x41
 1766 0086 8A000000 		.4byte	0x8a
 1767 008a 03       		.uleb128 0x3
 1768 008b 04       		.byte	0x4
 1769 008c 07       		.byte	0x7
 1770 008d 56080000 		.4byte	.LASF11
 1771 0091 03       		.uleb128 0x3
 1772 0092 08       		.byte	0x8
 1773 0093 05       		.byte	0x5
 1774 0094 DB040000 		.4byte	.LASF12
 1775 0098 02       		.uleb128 0x2
 1776 0099 3B030000 		.4byte	.LASF13
 1777 009d 02       		.byte	0x2
 1778 009e 5B       		.byte	0x5b
 1779 009f A3000000 		.4byte	0xa3
 1780 00a3 03       		.uleb128 0x3
 1781 00a4 08       		.byte	0x8
 1782 00a5 07       		.byte	0x7
 1783 00a6 E1010000 		.4byte	.LASF14
 1784 00aa 04       		.uleb128 0x4
 1785 00ab 04       		.byte	0x4
 1786 00ac 05       		.byte	0x5
 1787 00ad 696E7400 		.ascii	"int\000"
 1788 00b1 03       		.uleb128 0x3
 1789 00b2 04       		.byte	0x4
 1790 00b3 07       		.byte	0x7
 1791 00b4 87000000 		.4byte	.LASF15
 1792 00b8 02       		.uleb128 0x2
 1793 00b9 6F010000 		.4byte	.LASF16
 1794 00bd 03       		.byte	0x3
 1795 00be 14       		.byte	0x14
 1796 00bf 25000000 		.4byte	0x25
 1797 00c3 02       		.uleb128 0x2
 1798 00c4 48040000 		.4byte	.LASF17
 1799 00c8 03       		.byte	0x3
 1800 00c9 18       		.byte	0x18
 1801 00ca 37000000 		.4byte	0x37
 1802 00ce 02       		.uleb128 0x2
 1803 00cf D2010000 		.4byte	.LASF18
 1804 00d3 03       		.byte	0x3
 1805 00d4 20       		.byte	0x20
 1806 00d5 49000000 		.4byte	0x49
 1807 00d9 02       		.uleb128 0x2
 1808 00da A7060000 		.4byte	.LASF19
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 58


 1809 00de 03       		.byte	0x3
 1810 00df 24       		.byte	0x24
 1811 00e0 5B000000 		.4byte	0x5b
 1812 00e4 02       		.uleb128 0x2
 1813 00e5 68080000 		.4byte	.LASF20
 1814 00e9 03       		.byte	0x3
 1815 00ea 2C       		.byte	0x2c
 1816 00eb 6D000000 		.4byte	0x6d
 1817 00ef 02       		.uleb128 0x2
 1818 00f0 66010000 		.4byte	.LASF21
 1819 00f4 03       		.byte	0x3
 1820 00f5 30       		.byte	0x30
 1821 00f6 7F000000 		.4byte	0x7f
 1822 00fa 02       		.uleb128 0x2
 1823 00fb C4070000 		.4byte	.LASF22
 1824 00ff 03       		.byte	0x3
 1825 0100 3C       		.byte	0x3c
 1826 0101 98000000 		.4byte	0x98
 1827 0105 05       		.uleb128 0x5
 1828 0106 C3050000 		.4byte	.LASF23
 1829 010a 04       		.byte	0x4
 1830 010b FE01     		.2byte	0x1fe
 1831 010d 8A000000 		.4byte	0x8a
 1832 0111 03       		.uleb128 0x3
 1833 0112 04       		.byte	0x4
 1834 0113 04       		.byte	0x4
 1835 0114 A9010000 		.4byte	.LASF24
 1836 0118 03       		.uleb128 0x3
 1837 0119 08       		.byte	0x8
 1838 011a 04       		.byte	0x4
 1839 011b C9090000 		.4byte	.LASF25
 1840 011f 03       		.uleb128 0x3
 1841 0120 01       		.byte	0x1
 1842 0121 08       		.byte	0x8
 1843 0122 D3030000 		.4byte	.LASF26
 1844 0126 05       		.uleb128 0x5
 1845 0127 B0060000 		.4byte	.LASF27
 1846 012b 04       		.byte	0x4
 1847 012c A802     		.2byte	0x2a8
 1848 012e 32010000 		.4byte	0x132
 1849 0132 06       		.uleb128 0x6
 1850 0133 05010000 		.4byte	0x105
 1851 0137 03       		.uleb128 0x3
 1852 0138 08       		.byte	0x8
 1853 0139 04       		.byte	0x4
 1854 013a 8D060000 		.4byte	.LASF28
 1855 013e 03       		.uleb128 0x3
 1856 013f 04       		.byte	0x4
 1857 0140 07       		.byte	0x7
 1858 0141 4D080000 		.4byte	.LASF29
 1859 0145 06       		.uleb128 0x6
 1860 0146 EF000000 		.4byte	0xef
 1861 014a 07       		.uleb128 0x7
 1862 014b 01       		.byte	0x1
 1863 014c 42000000 		.4byte	0x42
 1864 0150 01       		.byte	0x1
 1865 0151 9C       		.byte	0x9c
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 59


 1866 0152 6F010000 		.4byte	0x16f
 1867 0156 08       		.uleb128 0x8
 1868 0157 B6060000 		.4byte	.LASF30
 1869 015b 00       		.byte	0
 1870 015c 08       		.uleb128 0x8
 1871 015d 74000000 		.4byte	.LASF31
 1872 0161 01       		.byte	0x1
 1873 0162 08       		.uleb128 0x8
 1874 0163 43010000 		.4byte	.LASF32
 1875 0167 02       		.byte	0x2
 1876 0168 08       		.uleb128 0x8
 1877 0169 3A070000 		.4byte	.LASF33
 1878 016d 03       		.byte	0x3
 1879 016e 00       		.byte	0
 1880 016f 02       		.uleb128 0x2
 1881 0170 57060000 		.4byte	.LASF34
 1882 0174 01       		.byte	0x1
 1883 0175 A1       		.byte	0xa1
 1884 0176 4A010000 		.4byte	0x14a
 1885 017a 07       		.uleb128 0x7
 1886 017b 01       		.byte	0x1
 1887 017c 42000000 		.4byte	0x42
 1888 0180 01       		.byte	0x1
 1889 0181 A6       		.byte	0xa6
 1890 0182 BD010000 		.4byte	0x1bd
 1891 0186 08       		.uleb128 0x8
 1892 0187 8F040000 		.4byte	.LASF35
 1893 018b 00       		.byte	0
 1894 018c 08       		.uleb128 0x8
 1895 018d 25030000 		.4byte	.LASF36
 1896 0191 01       		.byte	0x1
 1897 0192 08       		.uleb128 0x8
 1898 0193 6A000000 		.4byte	.LASF37
 1899 0197 02       		.byte	0x2
 1900 0198 08       		.uleb128 0x8
 1901 0199 57040000 		.4byte	.LASF38
 1902 019d 04       		.byte	0x4
 1903 019e 08       		.uleb128 0x8
 1904 019f D9060000 		.4byte	.LASF39
 1905 01a3 08       		.byte	0x8
 1906 01a4 08       		.uleb128 0x8
 1907 01a5 03050000 		.4byte	.LASF40
 1908 01a9 10       		.byte	0x10
 1909 01aa 08       		.uleb128 0x8
 1910 01ab 06090000 		.4byte	.LASF41
 1911 01af 20       		.byte	0x20
 1912 01b0 08       		.uleb128 0x8
 1913 01b1 0B090000 		.4byte	.LASF42
 1914 01b5 40       		.byte	0x40
 1915 01b6 08       		.uleb128 0x8
 1916 01b7 10090000 		.4byte	.LASF43
 1917 01bb 80       		.byte	0x80
 1918 01bc 00       		.byte	0
 1919 01bd 02       		.uleb128 0x2
 1920 01be 580A0000 		.4byte	.LASF44
 1921 01c2 01       		.byte	0x1
 1922 01c3 B0       		.byte	0xb0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 60


 1923 01c4 7A010000 		.4byte	0x17a
 1924 01c8 07       		.uleb128 0x7
 1925 01c9 01       		.byte	0x1
 1926 01ca 42000000 		.4byte	0x42
 1927 01ce 01       		.byte	0x1
 1928 01cf CC       		.byte	0xcc
 1929 01d0 F3010000 		.4byte	0x1f3
 1930 01d4 08       		.uleb128 0x8
 1931 01d5 CF080000 		.4byte	.LASF45
 1932 01d9 00       		.byte	0
 1933 01da 08       		.uleb128 0x8
 1934 01db 040A0000 		.4byte	.LASF46
 1935 01df 01       		.byte	0x1
 1936 01e0 08       		.uleb128 0x8
 1937 01e1 2F080000 		.4byte	.LASF47
 1938 01e5 02       		.byte	0x2
 1939 01e6 08       		.uleb128 0x8
 1940 01e7 DB080000 		.4byte	.LASF48
 1941 01eb 03       		.byte	0x3
 1942 01ec 08       		.uleb128 0x8
 1943 01ed 38080000 		.4byte	.LASF49
 1944 01f1 04       		.byte	0x4
 1945 01f2 00       		.byte	0
 1946 01f3 02       		.uleb128 0x2
 1947 01f4 76010000 		.4byte	.LASF50
 1948 01f8 01       		.byte	0x1
 1949 01f9 D2       		.byte	0xd2
 1950 01fa C8010000 		.4byte	0x1c8
 1951 01fe 09       		.uleb128 0x9
 1952 01ff 03       		.byte	0x3
 1953 0200 01       		.byte	0x1
 1954 0201 D7       		.byte	0xd7
 1955 0202 2B020000 		.4byte	0x22b
 1956 0206 0A       		.uleb128 0xa
 1957 0207 C2010000 		.4byte	.LASF51
 1958 020b 01       		.byte	0x1
 1959 020c D8       		.byte	0xd8
 1960 020d C3000000 		.4byte	0xc3
 1961 0211 00       		.byte	0
 1962 0212 0A       		.uleb128 0xa
 1963 0213 7C050000 		.4byte	.LASF52
 1964 0217 01       		.byte	0x1
 1965 0218 D9       		.byte	0xd9
 1966 0219 C3000000 		.4byte	0xc3
 1967 021d 01       		.byte	0x1
 1968 021e 0A       		.uleb128 0xa
 1969 021f 36040000 		.4byte	.LASF53
 1970 0223 01       		.byte	0x1
 1971 0224 DA       		.byte	0xda
 1972 0225 C3000000 		.4byte	0xc3
 1973 0229 02       		.byte	0x2
 1974 022a 00       		.byte	0
 1975 022b 02       		.uleb128 0x2
 1976 022c B6030000 		.4byte	.LASF54
 1977 0230 01       		.byte	0x1
 1978 0231 DB       		.byte	0xdb
 1979 0232 FE010000 		.4byte	0x1fe
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 61


 1980 0236 09       		.uleb128 0x9
 1981 0237 16       		.byte	0x16
 1982 0238 01       		.byte	0x1
 1983 0239 DE       		.byte	0xde
 1984 023a B7020000 		.4byte	0x2b7
 1985 023e 0A       		.uleb128 0xa
 1986 023f C2010000 		.4byte	.LASF51
 1987 0243 01       		.byte	0x1
 1988 0244 DF       		.byte	0xdf
 1989 0245 C3000000 		.4byte	0xc3
 1990 0249 00       		.byte	0
 1991 024a 0A       		.uleb128 0xa
 1992 024b 7C050000 		.4byte	.LASF52
 1993 024f 01       		.byte	0x1
 1994 0250 E0       		.byte	0xe0
 1995 0251 C3000000 		.4byte	0xc3
 1996 0255 01       		.byte	0x1
 1997 0256 0A       		.uleb128 0xa
 1998 0257 36040000 		.4byte	.LASF53
 1999 025b 01       		.byte	0x1
 2000 025c E1       		.byte	0xe1
 2001 025d C3000000 		.4byte	0xc3
 2002 0261 02       		.byte	0x2
 2003 0262 0A       		.uleb128 0xa
 2004 0263 C2060000 		.4byte	.LASF55
 2005 0267 01       		.byte	0x1
 2006 0268 E2       		.byte	0xe2
 2007 0269 C3000000 		.4byte	0xc3
 2008 026d 03       		.byte	0x3
 2009 026e 0A       		.uleb128 0xa
 2010 026f 9F080000 		.4byte	.LASF56
 2011 0273 01       		.byte	0x1
 2012 0274 E4       		.byte	0xe4
 2013 0275 EF000000 		.4byte	0xef
 2014 0279 04       		.byte	0x4
 2015 027a 0A       		.uleb128 0xa
 2016 027b 94080000 		.4byte	.LASF57
 2017 027f 01       		.byte	0x1
 2018 0280 E5       		.byte	0xe5
 2019 0281 EF000000 		.4byte	0xef
 2020 0285 08       		.byte	0x8
 2021 0286 0A       		.uleb128 0xa
 2022 0287 83080000 		.4byte	.LASF58
 2023 028b 01       		.byte	0x1
 2024 028c E6       		.byte	0xe6
 2025 028d EF000000 		.4byte	0xef
 2026 0291 0C       		.byte	0xc
 2027 0292 0A       		.uleb128 0xa
 2028 0293 4E020000 		.4byte	.LASF59
 2029 0297 01       		.byte	0x1
 2030 0298 E8       		.byte	0xe8
 2031 0299 D9000000 		.4byte	0xd9
 2032 029d 10       		.byte	0x10
 2033 029e 0A       		.uleb128 0xa
 2034 029f 3D040000 		.4byte	.LASF60
 2035 02a3 01       		.byte	0x1
 2036 02a4 E9       		.byte	0xe9
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 62


 2037 02a5 D9000000 		.4byte	0xd9
 2038 02a9 12       		.byte	0x12
 2039 02aa 0A       		.uleb128 0xa
 2040 02ab 5E000000 		.4byte	.LASF61
 2041 02af 01       		.byte	0x1
 2042 02b0 EA       		.byte	0xea
 2043 02b1 D9000000 		.4byte	0xd9
 2044 02b5 14       		.byte	0x14
 2045 02b6 00       		.byte	0
 2046 02b7 02       		.uleb128 0x2
 2047 02b8 F1060000 		.4byte	.LASF62
 2048 02bc 01       		.byte	0x1
 2049 02bd EB       		.byte	0xeb
 2050 02be 36020000 		.4byte	0x236
 2051 02c2 09       		.uleb128 0x9
 2052 02c3 0A       		.byte	0xa
 2053 02c4 01       		.byte	0x1
 2054 02c5 EE       		.byte	0xee
 2055 02c6 1F030000 		.4byte	0x31f
 2056 02ca 0A       		.uleb128 0xa
 2057 02cb C2010000 		.4byte	.LASF51
 2058 02cf 01       		.byte	0x1
 2059 02d0 EF       		.byte	0xef
 2060 02d1 C3000000 		.4byte	0xc3
 2061 02d5 00       		.byte	0
 2062 02d6 0A       		.uleb128 0xa
 2063 02d7 7C050000 		.4byte	.LASF52
 2064 02db 01       		.byte	0x1
 2065 02dc F0       		.byte	0xf0
 2066 02dd C3000000 		.4byte	0xc3
 2067 02e1 01       		.byte	0x1
 2068 02e2 0A       		.uleb128 0xa
 2069 02e3 36040000 		.4byte	.LASF53
 2070 02e7 01       		.byte	0x1
 2071 02e8 F1       		.byte	0xf1
 2072 02e9 C3000000 		.4byte	0xc3
 2073 02ed 02       		.byte	0x2
 2074 02ee 0A       		.uleb128 0xa
 2075 02ef 29020000 		.4byte	.LASF63
 2076 02f3 01       		.byte	0x1
 2077 02f4 F2       		.byte	0xf2
 2078 02f5 C3000000 		.4byte	0xc3
 2079 02f9 03       		.byte	0x3
 2080 02fa 0A       		.uleb128 0xa
 2081 02fb CD070000 		.4byte	.LASF64
 2082 02ff 01       		.byte	0x1
 2083 0300 F3       		.byte	0xf3
 2084 0301 E4000000 		.4byte	0xe4
 2085 0305 04       		.byte	0x4
 2086 0306 0B       		.uleb128 0xb
 2087 0307 6A6F6700 		.ascii	"jog\000"
 2088 030b 01       		.byte	0x1
 2089 030c F4       		.byte	0xf4
 2090 030d B8000000 		.4byte	0xb8
 2091 0311 08       		.byte	0x8
 2092 0312 0A       		.uleb128 0xa
 2093 0313 C2000000 		.4byte	.LASF65
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 63


 2094 0317 01       		.byte	0x1
 2095 0318 F5       		.byte	0xf5
 2096 0319 C3000000 		.4byte	0xc3
 2097 031d 09       		.byte	0x9
 2098 031e 00       		.byte	0
 2099 031f 02       		.uleb128 0x2
 2100 0320 8A010000 		.4byte	.LASF66
 2101 0324 01       		.byte	0x1
 2102 0325 F6       		.byte	0xf6
 2103 0326 C2020000 		.4byte	0x2c2
 2104 032a 09       		.uleb128 0x9
 2105 032b 07       		.byte	0x7
 2106 032c 01       		.byte	0x1
 2107 032d F9       		.byte	0xf9
 2108 032e 63030000 		.4byte	0x363
 2109 0332 0A       		.uleb128 0xa
 2110 0333 C2010000 		.4byte	.LASF51
 2111 0337 01       		.byte	0x1
 2112 0338 FA       		.byte	0xfa
 2113 0339 C3000000 		.4byte	0xc3
 2114 033d 00       		.byte	0
 2115 033e 0A       		.uleb128 0xa
 2116 033f 7C050000 		.4byte	.LASF52
 2117 0343 01       		.byte	0x1
 2118 0344 FB       		.byte	0xfb
 2119 0345 C3000000 		.4byte	0xc3
 2120 0349 01       		.byte	0x1
 2121 034a 0A       		.uleb128 0xa
 2122 034b 36040000 		.4byte	.LASF53
 2123 034f 01       		.byte	0x1
 2124 0350 FC       		.byte	0xfc
 2125 0351 C3000000 		.4byte	0xc3
 2126 0355 02       		.byte	0x2
 2127 0356 0A       		.uleb128 0xa
 2128 0357 CD070000 		.4byte	.LASF64
 2129 035b 01       		.byte	0x1
 2130 035c FD       		.byte	0xfd
 2131 035d E4000000 		.4byte	0xe4
 2132 0361 03       		.byte	0x3
 2133 0362 00       		.byte	0
 2134 0363 02       		.uleb128 0x2
 2135 0364 60090000 		.4byte	.LASF67
 2136 0368 01       		.byte	0x1
 2137 0369 FE       		.byte	0xfe
 2138 036a 2A030000 		.4byte	0x32a
 2139 036e 0C       		.uleb128 0xc
 2140 036f 1F       		.byte	0x1f
 2141 0370 01       		.byte	0x1
 2142 0371 0201     		.2byte	0x102
 2143 0373 B4030000 		.4byte	0x3b4
 2144 0377 0D       		.uleb128 0xd
 2145 0378 62756600 		.ascii	"buf\000"
 2146 037c 01       		.byte	0x1
 2147 037d 0301     		.2byte	0x103
 2148 037f B4030000 		.4byte	0x3b4
 2149 0383 0E       		.uleb128 0xe
 2150 0384 40070000 		.4byte	.LASF68
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 64


 2151 0388 01       		.byte	0x1
 2152 0389 0401     		.2byte	0x104
 2153 038b 2B020000 		.4byte	0x22b
 2154 038f 0E       		.uleb128 0xe
 2155 0390 D2060000 		.4byte	.LASF69
 2156 0394 01       		.byte	0x1
 2157 0395 0501     		.2byte	0x105
 2158 0397 B7020000 		.4byte	0x2b7
 2159 039b 0E       		.uleb128 0xe
 2160 039c 50040000 		.4byte	.LASF70
 2161 03a0 01       		.byte	0x1
 2162 03a1 0601     		.2byte	0x106
 2163 03a3 1F030000 		.4byte	0x31f
 2164 03a7 0E       		.uleb128 0xe
 2165 03a8 CB010000 		.4byte	.LASF71
 2166 03ac 01       		.byte	0x1
 2167 03ad 0701     		.2byte	0x107
 2168 03af 63030000 		.4byte	0x363
 2169 03b3 00       		.byte	0
 2170 03b4 0F       		.uleb128 0xf
 2171 03b5 C3000000 		.4byte	0xc3
 2172 03b9 C4030000 		.4byte	0x3c4
 2173 03bd 10       		.uleb128 0x10
 2174 03be 3E010000 		.4byte	0x13e
 2175 03c2 1E       		.byte	0x1e
 2176 03c3 00       		.byte	0
 2177 03c4 11       		.uleb128 0x11
 2178 03c5 1F       		.byte	0x1f
 2179 03c6 01       		.byte	0x1
 2180 03c7 0B01     		.2byte	0x10b
 2181 03c9 9E040000 		.4byte	0x49e
 2182 03cd 12       		.uleb128 0x12
 2183 03ce C2010000 		.4byte	.LASF51
 2184 03d2 01       		.byte	0x1
 2185 03d3 0C01     		.2byte	0x10c
 2186 03d5 C3000000 		.4byte	0xc3
 2187 03d9 00       		.byte	0
 2188 03da 12       		.uleb128 0x12
 2189 03db 9B030000 		.4byte	.LASF72
 2190 03df 01       		.byte	0x1
 2191 03e0 0D01     		.2byte	0x10d
 2192 03e2 C3000000 		.4byte	0xc3
 2193 03e6 01       		.byte	0x1
 2194 03e7 12       		.uleb128 0x12
 2195 03e8 A4030000 		.4byte	.LASF73
 2196 03ec 01       		.byte	0x1
 2197 03ed 0E01     		.2byte	0x10e
 2198 03ef C3000000 		.4byte	0xc3
 2199 03f3 02       		.byte	0x2
 2200 03f4 12       		.uleb128 0x12
 2201 03f5 AD030000 		.4byte	.LASF74
 2202 03f9 01       		.byte	0x1
 2203 03fa 0F01     		.2byte	0x10f
 2204 03fc C3000000 		.4byte	0xc3
 2205 0400 03       		.byte	0x3
 2206 0401 12       		.uleb128 0x12
 2207 0402 7C050000 		.4byte	.LASF52
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 65


 2208 0406 01       		.byte	0x1
 2209 0407 1001     		.2byte	0x110
 2210 0409 C3000000 		.4byte	0xc3
 2211 040d 04       		.byte	0x4
 2212 040e 12       		.uleb128 0x12
 2213 040f 36040000 		.4byte	.LASF53
 2214 0413 01       		.byte	0x1
 2215 0414 1101     		.2byte	0x111
 2216 0416 C3000000 		.4byte	0xc3
 2217 041a 05       		.byte	0x5
 2218 041b 12       		.uleb128 0x12
 2219 041c 8E080000 		.4byte	.LASF75
 2220 0420 01       		.byte	0x1
 2221 0421 1201     		.2byte	0x112
 2222 0423 C3000000 		.4byte	0xc3
 2223 0427 06       		.byte	0x6
 2224 0428 12       		.uleb128 0x12
 2225 0429 3B0A0000 		.4byte	.LASF76
 2226 042d 01       		.byte	0x1
 2227 042e 1301     		.2byte	0x113
 2228 0430 C3000000 		.4byte	0xc3
 2229 0434 07       		.byte	0x7
 2230 0435 12       		.uleb128 0x12
 2231 0436 C2060000 		.4byte	.LASF55
 2232 043a 01       		.byte	0x1
 2233 043b 1401     		.2byte	0x114
 2234 043d C3000000 		.4byte	0xc3
 2235 0441 08       		.byte	0x8
 2236 0442 12       		.uleb128 0x12
 2237 0443 6C050000 		.4byte	.LASF77
 2238 0447 01       		.byte	0x1
 2239 0448 1501     		.2byte	0x115
 2240 044a D9000000 		.4byte	0xd9
 2241 044e 09       		.byte	0x9
 2242 044f 12       		.uleb128 0x12
 2243 0450 19000000 		.4byte	.LASF78
 2244 0454 01       		.byte	0x1
 2245 0455 1601     		.2byte	0x116
 2246 0457 CE000000 		.4byte	0xce
 2247 045b 0B       		.byte	0xb
 2248 045c 12       		.uleb128 0x12
 2249 045d 4F0A0000 		.4byte	.LASF79
 2250 0461 01       		.byte	0x1
 2251 0462 1701     		.2byte	0x117
 2252 0464 E4000000 		.4byte	0xe4
 2253 0468 0D       		.byte	0xd
 2254 0469 13       		.uleb128 0x13
 2255 046a 70776D00 		.ascii	"pwm\000"
 2256 046e 01       		.byte	0x1
 2257 046f 1801     		.2byte	0x118
 2258 0471 CE000000 		.4byte	0xce
 2259 0475 11       		.byte	0x11
 2260 0476 12       		.uleb128 0x12
 2261 0477 C3090000 		.4byte	.LASF80
 2262 047b 01       		.byte	0x1
 2263 047c 1901     		.2byte	0x119
 2264 047e E4000000 		.4byte	0xe4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 66


 2265 0482 13       		.byte	0x13
 2266 0483 12       		.uleb128 0x12
 2267 0484 D8030000 		.4byte	.LASF81
 2268 0488 01       		.byte	0x1
 2269 0489 1A01     		.2byte	0x11a
 2270 048b EF000000 		.4byte	0xef
 2271 048f 17       		.byte	0x17
 2272 0490 12       		.uleb128 0x12
 2273 0491 1A050000 		.4byte	.LASF82
 2274 0495 01       		.byte	0x1
 2275 0496 1B01     		.2byte	0x11b
 2276 0498 E4000000 		.4byte	0xe4
 2277 049c 1B       		.byte	0x1b
 2278 049d 00       		.byte	0
 2279 049e 05       		.uleb128 0x5
 2280 049f B8070000 		.4byte	.LASF83
 2281 04a3 01       		.byte	0x1
 2282 04a4 1C01     		.2byte	0x11c
 2283 04a6 C4030000 		.4byte	0x3c4
 2284 04aa 0C       		.uleb128 0xc
 2285 04ab 1F       		.byte	0x1f
 2286 04ac 01       		.byte	0x1
 2287 04ad 1F01     		.2byte	0x11f
 2288 04af CC040000 		.4byte	0x4cc
 2289 04b3 0D       		.uleb128 0xd
 2290 04b4 62756600 		.ascii	"buf\000"
 2291 04b8 01       		.byte	0x1
 2292 04b9 2001     		.2byte	0x120
 2293 04bb B4030000 		.4byte	0x3b4
 2294 04bf 0D       		.uleb128 0xd
 2295 04c0 6D736700 		.ascii	"msg\000"
 2296 04c4 01       		.byte	0x1
 2297 04c5 2101     		.2byte	0x121
 2298 04c7 9E040000 		.4byte	0x49e
 2299 04cb 00       		.byte	0
 2300 04cc 14       		.uleb128 0x14
 2301 04cd 01       		.byte	0x1
 2302 04ce 42000000 		.4byte	0x42
 2303 04d2 01       		.byte	0x1
 2304 04d3 2501     		.2byte	0x125
 2305 04d5 E6040000 		.4byte	0x4e6
 2306 04d9 08       		.uleb128 0x8
 2307 04da 33000000 		.4byte	.LASF84
 2308 04de 00       		.byte	0
 2309 04df 08       		.uleb128 0x8
 2310 04e0 CA050000 		.4byte	.LASF85
 2311 04e4 01       		.byte	0x1
 2312 04e5 00       		.byte	0
 2313 04e6 05       		.uleb128 0x5
 2314 04e7 08010000 		.4byte	.LASF86
 2315 04eb 01       		.byte	0x1
 2316 04ec 2801     		.2byte	0x128
 2317 04ee CC040000 		.4byte	0x4cc
 2318 04f2 15       		.uleb128 0x15
 2319 04f3 410A0000 		.4byte	.LASF87
 2320 04f7 01       		.byte	0x1
 2321 04f8 5604     		.2byte	0x456
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 67


 2322 04fa 00000000 		.4byte	.LFB43
 2323 04fe 24000000 		.4byte	.LFE43-.LFB43
 2324 0502 01       		.uleb128 0x1
 2325 0503 9C       		.byte	0x9c
 2326 0504 3D050000 		.4byte	0x53d
 2327 0508 16       		.uleb128 0x16
 2328 0509 06000000 		.4byte	.LVL0
 2329 050d 320E0000 		.4byte	0xe32
 2330 0511 16       		.uleb128 0x16
 2331 0512 0A000000 		.4byte	.LVL1
 2332 0516 3D0E0000 		.4byte	0xe3d
 2333 051a 17       		.uleb128 0x17
 2334 051b 10000000 		.4byte	.LVL2
 2335 051f 480E0000 		.4byte	0xe48
 2336 0523 2D050000 		.4byte	0x52d
 2337 0527 18       		.uleb128 0x18
 2338 0528 01       		.uleb128 0x1
 2339 0529 50       		.byte	0x50
 2340 052a 01       		.uleb128 0x1
 2341 052b 30       		.byte	0x30
 2342 052c 00       		.byte	0
 2343 052d 19       		.uleb128 0x19
 2344 052e 16000000 		.4byte	.LVL3
 2345 0532 530E0000 		.4byte	0xe53
 2346 0536 18       		.uleb128 0x18
 2347 0537 01       		.uleb128 0x1
 2348 0538 50       		.byte	0x50
 2349 0539 01       		.uleb128 0x1
 2350 053a 30       		.byte	0x30
 2351 053b 00       		.byte	0
 2352 053c 00       		.byte	0
 2353 053d 15       		.uleb128 0x15
 2354 053e F9000000 		.4byte	.LASF88
 2355 0542 01       		.byte	0x1
 2356 0543 7404     		.2byte	0x474
 2357 0545 00000000 		.4byte	.LFB44
 2358 0549 1C000000 		.4byte	.LFE44-.LFB44
 2359 054d 01       		.uleb128 0x1
 2360 054e 9C       		.byte	0x9c
 2361 054f 75050000 		.4byte	0x575
 2362 0553 16       		.uleb128 0x16
 2363 0554 06000000 		.4byte	.LVL4
 2364 0558 5E0E0000 		.4byte	0xe5e
 2365 055c 16       		.uleb128 0x16
 2366 055d 0A000000 		.4byte	.LVL5
 2367 0561 690E0000 		.4byte	0xe69
 2368 0565 19       		.uleb128 0x19
 2369 0566 10000000 		.4byte	.LVL6
 2370 056a 480E0000 		.4byte	0xe48
 2371 056e 18       		.uleb128 0x18
 2372 056f 01       		.uleb128 0x1
 2373 0570 50       		.byte	0x50
 2374 0571 01       		.uleb128 0x1
 2375 0572 30       		.byte	0x30
 2376 0573 00       		.byte	0
 2377 0574 00       		.byte	0
 2378 0575 15       		.uleb128 0x15
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 68


 2379 0576 3C060000 		.4byte	.LASF89
 2380 057a 01       		.byte	0x1
 2381 057b 8E04     		.2byte	0x48e
 2382 057d 00000000 		.4byte	.LFB45
 2383 0581 60000000 		.4byte	.LFE45-.LFB45
 2384 0585 01       		.uleb128 0x1
 2385 0586 9C       		.byte	0x9c
 2386 0587 E8050000 		.4byte	0x5e8
 2387 058b 1A       		.uleb128 0x1a
 2388 058c 6900     		.ascii	"i\000"
 2389 058e 01       		.byte	0x1
 2390 058f 9004     		.2byte	0x490
 2391 0591 EF000000 		.4byte	0xef
 2392 0595 00000000 		.4byte	.LLST0
 2393 0599 16       		.uleb128 0x16
 2394 059a 06000000 		.4byte	.LVL7
 2395 059e 740E0000 		.4byte	0xe74
 2396 05a2 16       		.uleb128 0x16
 2397 05a3 0A000000 		.4byte	.LVL8
 2398 05a7 7F0E0000 		.4byte	0xe7f
 2399 05ab 17       		.uleb128 0x17
 2400 05ac 2A000000 		.4byte	.LVL9
 2401 05b0 8A0E0000 		.4byte	0xe8a
 2402 05b4 CC050000 		.4byte	0x5cc
 2403 05b8 18       		.uleb128 0x18
 2404 05b9 01       		.uleb128 0x1
 2405 05ba 50       		.byte	0x50
 2406 05bb 05       		.uleb128 0x5
 2407 05bc 03       		.byte	0x3
 2408 05bd 00000000 		.4byte	txMessage
 2409 05c1 18       		.uleb128 0x18
 2410 05c2 01       		.uleb128 0x1
 2411 05c3 51       		.byte	0x51
 2412 05c4 01       		.uleb128 0x1
 2413 05c5 30       		.byte	0x30
 2414 05c6 18       		.uleb128 0x18
 2415 05c7 01       		.uleb128 0x1
 2416 05c8 52       		.byte	0x52
 2417 05c9 01       		.uleb128 0x1
 2418 05ca 4F       		.byte	0x4f
 2419 05cb 00       		.byte	0
 2420 05cc 16       		.uleb128 0x16
 2421 05cd 32000000 		.4byte	.LVL11
 2422 05d1 930E0000 		.4byte	0xe93
 2423 05d5 16       		.uleb128 0x16
 2424 05d6 40000000 		.4byte	.LVL13
 2425 05da 9F0E0000 		.4byte	0xe9f
 2426 05de 16       		.uleb128 0x16
 2427 05df 44000000 		.4byte	.LVL14
 2428 05e3 AB0E0000 		.4byte	0xeab
 2429 05e7 00       		.byte	0
 2430 05e8 15       		.uleb128 0x15
 2431 05e9 9D010000 		.4byte	.LASF90
 2432 05ed 01       		.byte	0x1
 2433 05ee 4101     		.2byte	0x141
 2434 05f0 00000000 		.4byte	.LFB32
 2435 05f4 1C000000 		.4byte	.LFE32-.LFB32
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 69


 2436 05f8 01       		.uleb128 0x1
 2437 05f9 9C       		.byte	0x9c
 2438 05fa 0F060000 		.4byte	0x60f
 2439 05fe 1B       		.uleb128 0x1b
 2440 05ff 3B0A0000 		.4byte	.LASF76
 2441 0603 01       		.byte	0x1
 2442 0604 4101     		.2byte	0x141
 2443 0606 BD010000 		.4byte	0x1bd
 2444 060a 1F000000 		.4byte	.LLST1
 2445 060e 00       		.byte	0
 2446 060f 15       		.uleb128 0x15
 2447 0610 1A010000 		.4byte	.LASF91
 2448 0614 01       		.byte	0x1
 2449 0615 5C01     		.2byte	0x15c
 2450 0617 00000000 		.4byte	.LFB33
 2451 061b 1C000000 		.4byte	.LFE33-.LFB33
 2452 061f 01       		.uleb128 0x1
 2453 0620 9C       		.byte	0x9c
 2454 0621 34060000 		.4byte	0x634
 2455 0625 1C       		.uleb128 0x1c
 2456 0626 3B0A0000 		.4byte	.LASF76
 2457 062a 01       		.byte	0x1
 2458 062b 5C01     		.2byte	0x15c
 2459 062d BD010000 		.4byte	0x1bd
 2460 0631 01       		.uleb128 0x1
 2461 0632 50       		.byte	0x50
 2462 0633 00       		.byte	0
 2463 0634 1D       		.uleb128 0x1d
 2464 0635 44000000 		.4byte	.LASF92
 2465 0639 01       		.byte	0x1
 2466 063a 7601     		.2byte	0x176
 2467 063c 00000000 		.4byte	.LFB34
 2468 0640 18000000 		.4byte	.LFE34-.LFB34
 2469 0644 01       		.uleb128 0x1
 2470 0645 9C       		.byte	0x9c
 2471 0646 69060000 		.4byte	0x669
 2472 064a 1A       		.uleb128 0x1a
 2473 064b 6300     		.ascii	"c\000"
 2474 064d 01       		.byte	0x1
 2475 064e 7901     		.2byte	0x179
 2476 0650 11010000 		.4byte	0x111
 2477 0654 40000000 		.4byte	.LLST2
 2478 0658 19       		.uleb128 0x19
 2479 0659 08000000 		.4byte	.LVL19
 2480 065d B70E0000 		.4byte	0xeb7
 2481 0661 18       		.uleb128 0x18
 2482 0662 01       		.uleb128 0x1
 2483 0663 50       		.byte	0x50
 2484 0664 02       		.uleb128 0x2
 2485 0665 08       		.byte	0x8
 2486 0666 40       		.byte	0x40
 2487 0667 00       		.byte	0
 2488 0668 00       		.byte	0
 2489 0669 15       		.uleb128 0x15
 2490 066a 04040000 		.4byte	.LASF93
 2491 066e 01       		.byte	0x1
 2492 066f 5B02     		.2byte	0x25b
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 70


 2493 0671 00000000 		.4byte	.LFB36
 2494 0675 10000000 		.4byte	.LFE36-.LFB36
 2495 0679 01       		.uleb128 0x1
 2496 067a 9C       		.byte	0x9c
 2497 067b A4060000 		.4byte	0x6a4
 2498 067f 1B       		.uleb128 0x1b
 2499 0680 3D000000 		.4byte	.LASF94
 2500 0684 01       		.byte	0x1
 2501 0685 5B02     		.2byte	0x25b
 2502 0687 E4000000 		.4byte	0xe4
 2503 068b 53000000 		.4byte	.LLST3
 2504 068f 19       		.uleb128 0x19
 2505 0690 0E000000 		.4byte	.LVL23
 2506 0694 C20E0000 		.4byte	0xec2
 2507 0698 18       		.uleb128 0x18
 2508 0699 01       		.uleb128 0x1
 2509 069a 50       		.byte	0x50
 2510 069b 06       		.uleb128 0x6
 2511 069c F3       		.byte	0xf3
 2512 069d 01       		.uleb128 0x1
 2513 069e 50       		.byte	0x50
 2514 069f 23       		.byte	0x23
 2515 06a0 A006     		.uleb128 0x320
 2516 06a2 00       		.byte	0
 2517 06a3 00       		.byte	0
 2518 06a4 1E       		.uleb128 0x1e
 2519 06a5 E2070000 		.4byte	.LASF184
 2520 06a9 01       		.byte	0x1
 2521 06aa 6C02     		.2byte	0x26c
 2522 06ac E4000000 		.4byte	0xe4
 2523 06b0 00000000 		.4byte	.LFB37
 2524 06b4 44000000 		.4byte	.LFE37-.LFB37
 2525 06b8 01       		.uleb128 0x1
 2526 06b9 9C       		.byte	0x9c
 2527 06ba EC060000 		.4byte	0x6ec
 2528 06be 1F       		.uleb128 0x1f
 2529 06bf 89070000 		.4byte	.LASF95
 2530 06c3 01       		.byte	0x1
 2531 06c4 6E02     		.2byte	0x26e
 2532 06c6 45010000 		.4byte	0x145
 2533 06ca 05       		.uleb128 0x5
 2534 06cb 03       		.byte	0x3
 2535 06cc 08000000 		.4byte	RawPosition.7291
 2536 06d0 1F       		.uleb128 0x1f
 2537 06d1 DA010000 		.4byte	.LASF96
 2538 06d5 01       		.byte	0x1
 2539 06d6 6F02     		.2byte	0x26f
 2540 06d8 EC060000 		.4byte	0x6ec
 2541 06dc 05       		.uleb128 0x5
 2542 06dd 03       		.byte	0x3
 2543 06de 0C000000 		.4byte	result.7292
 2544 06e2 16       		.uleb128 0x16
 2545 06e3 06000000 		.4byte	.LVL24
 2546 06e7 CE0E0000 		.4byte	0xece
 2547 06eb 00       		.byte	0
 2548 06ec 06       		.uleb128 0x6
 2549 06ed E4000000 		.4byte	0xe4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 71


 2550 06f1 15       		.uleb128 0x15
 2551 06f2 66060000 		.4byte	.LASF97
 2552 06f6 01       		.byte	0x1
 2553 06f7 8B01     		.2byte	0x18b
 2554 06f9 00000000 		.4byte	.LFB35
 2555 06fd C4020000 		.4byte	.LFE35-.LFB35
 2556 0701 01       		.uleb128 0x1
 2557 0702 9C       		.byte	0x9c
 2558 0703 CB070000 		.4byte	0x7cb
 2559 0707 20       		.uleb128 0x20
 2560 0708 36040000 		.4byte	.LASF53
 2561 070c 01       		.byte	0x1
 2562 070d 8D01     		.2byte	0x18d
 2563 070f F3010000 		.4byte	0x1f3
 2564 0713 82000000 		.4byte	.LLST4
 2565 0717 20       		.uleb128 0x20
 2566 0718 7C050000 		.4byte	.LASF52
 2567 071c 01       		.byte	0x1
 2568 071d 8E01     		.2byte	0x18e
 2569 071f C3000000 		.4byte	0xc3
 2570 0723 AC000000 		.4byte	.LLST5
 2571 0727 1A       		.uleb128 0x1a
 2572 0728 6900     		.ascii	"i\000"
 2573 072a 01       		.byte	0x1
 2574 072b 8F01     		.2byte	0x18f
 2575 072d C3000000 		.4byte	0xc3
 2576 0731 D5000000 		.4byte	.LLST6
 2577 0735 20       		.uleb128 0x20
 2578 0736 C2010000 		.4byte	.LASF51
 2579 073a 01       		.byte	0x1
 2580 073b 9001     		.2byte	0x190
 2581 073d C3000000 		.4byte	0xc3
 2582 0741 2C010000 		.4byte	.LLST7
 2583 0745 20       		.uleb128 0x20
 2584 0746 6A070000 		.4byte	.LASF98
 2585 074a 01       		.byte	0x1
 2586 074b 9101     		.2byte	0x191
 2587 074d E4000000 		.4byte	0xe4
 2588 0751 99010000 		.4byte	.LLST8
 2589 0755 16       		.uleb128 0x16
 2590 0756 6C000000 		.4byte	.LVL37
 2591 075a A4060000 		.4byte	0x6a4
 2592 075e 17       		.uleb128 0x17
 2593 075f B6000000 		.4byte	.LVL38
 2594 0763 0F060000 		.4byte	0x60f
 2595 0767 71070000 		.4byte	0x771
 2596 076b 18       		.uleb128 0x18
 2597 076c 01       		.uleb128 0x1
 2598 076d 50       		.byte	0x50
 2599 076e 01       		.uleb128 0x1
 2600 076f 30       		.byte	0x30
 2601 0770 00       		.byte	0
 2602 0771 16       		.uleb128 0x16
 2603 0772 F2000000 		.4byte	.LVL42
 2604 0776 A4060000 		.4byte	0x6a4
 2605 077a 17       		.uleb128 0x17
 2606 077b 1E010000 		.4byte	.LVL44
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 72


 2607 077f 530E0000 		.4byte	0xe53
 2608 0783 8D070000 		.4byte	0x78d
 2609 0787 18       		.uleb128 0x18
 2610 0788 01       		.uleb128 0x1
 2611 0789 50       		.byte	0x50
 2612 078a 01       		.uleb128 0x1
 2613 078b 30       		.byte	0x30
 2614 078c 00       		.byte	0
 2615 078d 16       		.uleb128 0x16
 2616 078e 7A010000 		.4byte	.LVL54
 2617 0792 480E0000 		.4byte	0xe48
 2618 0796 16       		.uleb128 0x16
 2619 0797 98010000 		.4byte	.LVL55
 2620 079b A4060000 		.4byte	0x6a4
 2621 079f 17       		.uleb128 0x17
 2622 07a0 56020000 		.4byte	.LVL63
 2623 07a4 D90E0000 		.4byte	0xed9
 2624 07a8 BB070000 		.4byte	0x7bb
 2625 07ac 18       		.uleb128 0x18
 2626 07ad 01       		.uleb128 0x1
 2627 07ae 50       		.byte	0x50
 2628 07af 05       		.uleb128 0x5
 2629 07b0 03       		.byte	0x3
 2630 07b1 00000000 		.4byte	txMessage
 2631 07b5 18       		.uleb128 0x18
 2632 07b6 01       		.uleb128 0x1
 2633 07b7 51       		.byte	0x51
 2634 07b8 01       		.uleb128 0x1
 2635 07b9 4F       		.byte	0x4f
 2636 07ba 00       		.byte	0
 2637 07bb 19       		.uleb128 0x19
 2638 07bc 6A020000 		.4byte	.LVL64
 2639 07c0 0F060000 		.4byte	0x60f
 2640 07c4 18       		.uleb128 0x18
 2641 07c5 01       		.uleb128 0x1
 2642 07c6 50       		.byte	0x50
 2643 07c7 01       		.uleb128 0x1
 2644 07c8 30       		.byte	0x30
 2645 07c9 00       		.byte	0
 2646 07ca 00       		.byte	0
 2647 07cb 15       		.uleb128 0x15
 2648 07cc AF090000 		.4byte	.LASF99
 2649 07d0 01       		.byte	0x1
 2650 07d1 8F02     		.2byte	0x28f
 2651 07d3 00000000 		.4byte	.LFB38
 2652 07d7 30000000 		.4byte	.LFE38-.LFB38
 2653 07db 01       		.uleb128 0x1
 2654 07dc 9C       		.byte	0x9c
 2655 07dd EB070000 		.4byte	0x7eb
 2656 07e1 16       		.uleb128 0x16
 2657 07e2 06000000 		.4byte	.LVL65
 2658 07e6 A4060000 		.4byte	0x6a4
 2659 07ea 00       		.byte	0
 2660 07eb 15       		.uleb128 0x15
 2661 07ec F8030000 		.4byte	.LASF100
 2662 07f0 01       		.byte	0x1
 2663 07f1 A802     		.2byte	0x2a8
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 73


 2664 07f3 00000000 		.4byte	.LFB39
 2665 07f7 28000000 		.4byte	.LFE39-.LFB39
 2666 07fb 01       		.uleb128 0x1
 2667 07fc 9C       		.byte	0x9c
 2668 07fd 2B080000 		.4byte	0x82b
 2669 0801 1B       		.uleb128 0x1b
 2670 0802 20070000 		.4byte	.LASF101
 2671 0806 01       		.byte	0x1
 2672 0807 A802     		.2byte	0x2a8
 2673 0809 EF000000 		.4byte	0xef
 2674 080d B7010000 		.4byte	.LLST9
 2675 0811 20       		.uleb128 0x20
 2676 0812 7F000000 		.4byte	.LASF102
 2677 0816 01       		.byte	0x1
 2678 0817 AA02     		.2byte	0x2aa
 2679 0819 2B080000 		.4byte	0x82b
 2680 081d D8010000 		.4byte	.LLST10
 2681 0821 16       		.uleb128 0x16
 2682 0822 1C000000 		.4byte	.LVL68
 2683 0826 CB070000 		.4byte	0x7cb
 2684 082a 00       		.byte	0
 2685 082b 03       		.uleb128 0x3
 2686 082c 01       		.byte	0x1
 2687 082d 02       		.byte	0x2
 2688 082e 1F030000 		.4byte	.LASF103
 2689 0832 15       		.uleb128 0x15
 2690 0833 B0000000 		.4byte	.LASF104
 2691 0837 01       		.byte	0x1
 2692 0838 BE02     		.2byte	0x2be
 2693 083a 00000000 		.4byte	.LFB40
 2694 083e 64010000 		.4byte	.LFE40-.LFB40
 2695 0842 01       		.uleb128 0x1
 2696 0843 9C       		.byte	0x9c
 2697 0844 DE080000 		.4byte	0x8de
 2698 0848 17       		.uleb128 0x17
 2699 0849 22000000 		.4byte	.LVL70
 2700 084d 69060000 		.4byte	0x669
 2701 0851 5C080000 		.4byte	0x85c
 2702 0855 18       		.uleb128 0x18
 2703 0856 01       		.uleb128 0x1
 2704 0857 50       		.byte	0x50
 2705 0858 02       		.uleb128 0x2
 2706 0859 74       		.byte	0x74
 2707 085a 00       		.sleb128 0
 2708 085b 00       		.byte	0
 2709 085c 17       		.uleb128 0x17
 2710 085d 3C000000 		.4byte	.LVL71
 2711 0861 E50E0000 		.4byte	0xee5
 2712 0865 6F080000 		.4byte	0x86f
 2713 0869 18       		.uleb128 0x18
 2714 086a 01       		.uleb128 0x1
 2715 086b 50       		.byte	0x50
 2716 086c 01       		.uleb128 0x1
 2717 086d 36       		.byte	0x36
 2718 086e 00       		.byte	0
 2719 086f 17       		.uleb128 0x17
 2720 0870 42000000 		.4byte	.LVL72
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 74


 2721 0874 F00E0000 		.4byte	0xef0
 2722 0878 82080000 		.4byte	0x882
 2723 087c 18       		.uleb128 0x18
 2724 087d 01       		.uleb128 0x1
 2725 087e 50       		.byte	0x50
 2726 087f 01       		.uleb128 0x1
 2727 0880 36       		.byte	0x36
 2728 0881 00       		.byte	0
 2729 0882 17       		.uleb128 0x17
 2730 0883 58000000 		.4byte	.LVL73
 2731 0887 EB070000 		.4byte	0x7eb
 2732 088b 95080000 		.4byte	0x895
 2733 088f 18       		.uleb128 0x18
 2734 0890 01       		.uleb128 0x1
 2735 0891 50       		.byte	0x50
 2736 0892 01       		.uleb128 0x1
 2737 0893 31       		.byte	0x31
 2738 0894 00       		.byte	0
 2739 0895 17       		.uleb128 0x17
 2740 0896 6C000000 		.4byte	.LVL74
 2741 089a EB070000 		.4byte	0x7eb
 2742 089e A9080000 		.4byte	0x8a9
 2743 08a2 18       		.uleb128 0x18
 2744 08a3 01       		.uleb128 0x1
 2745 08a4 50       		.byte	0x50
 2746 08a5 02       		.uleb128 0x2
 2747 08a6 74       		.byte	0x74
 2748 08a7 00       		.sleb128 0
 2749 08a8 00       		.byte	0
 2750 08a9 16       		.uleb128 0x16
 2751 08aa BC000000 		.4byte	.LVL75
 2752 08ae A4060000 		.4byte	0x6a4
 2753 08b2 16       		.uleb128 0x16
 2754 08b3 CA000000 		.4byte	.LVL76
 2755 08b7 FB0E0000 		.4byte	0xefb
 2756 08bb 16       		.uleb128 0x16
 2757 08bc D4000000 		.4byte	.LVL77
 2758 08c0 69060000 		.4byte	0x669
 2759 08c4 16       		.uleb128 0x16
 2760 08c5 2E010000 		.4byte	.LVL78
 2761 08c9 69060000 		.4byte	0x669
 2762 08cd 19       		.uleb128 0x19
 2763 08ce 36010000 		.4byte	.LVL79
 2764 08d2 69060000 		.4byte	0x669
 2765 08d6 18       		.uleb128 0x18
 2766 08d7 01       		.uleb128 0x1
 2767 08d8 50       		.byte	0x50
 2768 08d9 02       		.uleb128 0x2
 2769 08da 74       		.byte	0x74
 2770 08db 00       		.sleb128 0
 2771 08dc 00       		.byte	0
 2772 08dd 00       		.byte	0
 2773 08de 15       		.uleb128 0x15
 2774 08df 0C040000 		.4byte	.LASF105
 2775 08e3 01       		.byte	0x1
 2776 08e4 F503     		.2byte	0x3f5
 2777 08e6 00000000 		.4byte	.LFB42
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 75


 2778 08ea BC000000 		.4byte	.LFE42-.LFB42
 2779 08ee 01       		.uleb128 0x1
 2780 08ef 9C       		.byte	0x9c
 2781 08f0 8F090000 		.4byte	0x98f
 2782 08f4 1F       		.uleb128 0x1f
 2783 08f5 55000000 		.4byte	.LASF106
 2784 08f9 01       		.byte	0x1
 2785 08fa F703     		.2byte	0x3f7
 2786 08fc EF000000 		.4byte	0xef
 2787 0900 05       		.uleb128 0x5
 2788 0901 03       		.byte	0x3
 2789 0902 48000000 		.4byte	brmsTask.7310
 2790 0906 21       		.uleb128 0x21
 2791 0907 94000000 		.4byte	.LASF107
 2792 090b 01       		.byte	0x1
 2793 090c F903     		.2byte	0x3f9
 2794 090e 8F090000 		.4byte	0x98f
 2795 0912 01       		.byte	0x1
 2796 0913 21       		.uleb128 0x21
 2797 0914 D6070000 		.4byte	.LASF108
 2798 0918 01       		.byte	0x1
 2799 0919 FA03     		.2byte	0x3fa
 2800 091b 94090000 		.4byte	0x994
 2801 091f 02       		.byte	0x2
 2802 0920 21       		.uleb128 0x21
 2803 0921 AC070000 		.4byte	.LASF109
 2804 0925 01       		.byte	0x1
 2805 0926 FB03     		.2byte	0x3fb
 2806 0928 99090000 		.4byte	0x999
 2807 092c 04       		.byte	0x4
 2808 092d 21       		.uleb128 0x21
 2809 092e 27000000 		.4byte	.LASF110
 2810 0932 01       		.byte	0x1
 2811 0933 FC03     		.2byte	0x3fc
 2812 0935 9E090000 		.4byte	0x99e
 2813 0939 08       		.byte	0x8
 2814 093a 21       		.uleb128 0x21
 2815 093b 25070000 		.4byte	.LASF111
 2816 093f 01       		.byte	0x1
 2817 0940 FD03     		.2byte	0x3fd
 2818 0942 EF000000 		.4byte	0xef
 2819 0946 10       		.byte	0x10
 2820 0947 17       		.uleb128 0x17
 2821 0948 08000000 		.4byte	.LVL80
 2822 094c 060F0000 		.4byte	0xf06
 2823 0950 5A090000 		.4byte	0x95a
 2824 0954 18       		.uleb128 0x18
 2825 0955 01       		.uleb128 0x1
 2826 0956 50       		.byte	0x50
 2827 0957 01       		.uleb128 0x1
 2828 0958 32       		.byte	0x32
 2829 0959 00       		.byte	0
 2830 095a 17       		.uleb128 0x17
 2831 095b 0E000000 		.4byte	.LVL81
 2832 095f 120F0000 		.4byte	0xf12
 2833 0963 6D090000 		.4byte	0x96d
 2834 0967 18       		.uleb128 0x18
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 76


 2835 0968 01       		.uleb128 0x1
 2836 0969 50       		.byte	0x50
 2837 096a 01       		.uleb128 0x1
 2838 096b 31       		.byte	0x31
 2839 096c 00       		.byte	0
 2840 096d 16       		.uleb128 0x16
 2841 096e A2000000 		.4byte	.LVL82
 2842 0972 32080000 		.4byte	0x832
 2843 0976 16       		.uleb128 0x16
 2844 0977 B0000000 		.4byte	.LVL83
 2845 097b F1060000 		.4byte	0x6f1
 2846 097f 19       		.uleb128 0x19
 2847 0980 B6000000 		.4byte	.LVL84
 2848 0984 120F0000 		.4byte	0xf12
 2849 0988 18       		.uleb128 0x18
 2850 0989 01       		.uleb128 0x1
 2851 098a 50       		.byte	0x50
 2852 098b 01       		.uleb128 0x1
 2853 098c 30       		.byte	0x30
 2854 098d 00       		.byte	0
 2855 098e 00       		.byte	0
 2856 098f 22       		.uleb128 0x22
 2857 0990 EF000000 		.4byte	0xef
 2858 0994 22       		.uleb128 0x22
 2859 0995 EF000000 		.4byte	0xef
 2860 0999 22       		.uleb128 0x22
 2861 099a EF000000 		.4byte	0xef
 2862 099e 22       		.uleb128 0x22
 2863 099f EF000000 		.4byte	0xef
 2864 09a3 23       		.uleb128 0x23
 2865 09a4 BE090000 		.4byte	.LASF185
 2866 09a8 01       		.byte	0x1
 2867 09a9 4A03     		.2byte	0x34a
 2868 09ab AA000000 		.4byte	0xaa
 2869 09af 00000000 		.4byte	.LFB41
 2870 09b3 44010000 		.4byte	.LFE41-.LFB41
 2871 09b7 01       		.uleb128 0x1
 2872 09b8 9C       		.byte	0x9c
 2873 09b9 A90B0000 		.4byte	0xba9
 2874 09bd 17       		.uleb128 0x17
 2875 09be 08000000 		.4byte	.LVL85
 2876 09c2 E50E0000 		.4byte	0xee5
 2877 09c6 D0090000 		.4byte	0x9d0
 2878 09ca 18       		.uleb128 0x18
 2879 09cb 01       		.uleb128 0x1
 2880 09cc 50       		.byte	0x50
 2881 09cd 01       		.uleb128 0x1
 2882 09ce 31       		.byte	0x31
 2883 09cf 00       		.byte	0
 2884 09d0 17       		.uleb128 0x17
 2885 09d1 0E000000 		.4byte	.LVL86
 2886 09d5 F00E0000 		.4byte	0xef0
 2887 09d9 E3090000 		.4byte	0x9e3
 2888 09dd 18       		.uleb128 0x18
 2889 09de 01       		.uleb128 0x1
 2890 09df 50       		.byte	0x50
 2891 09e0 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 77


 2892 09e1 31       		.byte	0x31
 2893 09e2 00       		.byte	0
 2894 09e3 16       		.uleb128 0x16
 2895 09e4 12000000 		.4byte	.LVL87
 2896 09e8 1D0F0000 		.4byte	0xf1d
 2897 09ec 17       		.uleb128 0x17
 2898 09ed 18000000 		.4byte	.LVL88
 2899 09f1 290F0000 		.4byte	0xf29
 2900 09f5 030A0000 		.4byte	0xa03
 2901 09f9 18       		.uleb128 0x18
 2902 09fa 01       		.uleb128 0x1
 2903 09fb 50       		.byte	0x50
 2904 09fc 05       		.uleb128 0x5
 2905 09fd 03       		.byte	0x3
 2906 09fe 00000000 		.4byte	BRMS_Interrupt
 2907 0a02 00       		.byte	0
 2908 0a03 17       		.uleb128 0x17
 2909 0a04 1E000000 		.4byte	.LVL89
 2910 0a08 340F0000 		.4byte	0xf34
 2911 0a0c 160A0000 		.4byte	0xa16
 2912 0a10 18       		.uleb128 0x18
 2913 0a11 01       		.uleb128 0x1
 2914 0a12 50       		.byte	0x50
 2915 0a13 01       		.uleb128 0x1
 2916 0a14 32       		.byte	0x32
 2917 0a15 00       		.byte	0
 2918 0a16 17       		.uleb128 0x17
 2919 0a17 24000000 		.4byte	.LVL90
 2920 0a1b 3F0F0000 		.4byte	0xf3f
 2921 0a1f 2D0A0000 		.4byte	0xa2d
 2922 0a23 18       		.uleb128 0x18
 2923 0a24 01       		.uleb128 0x1
 2924 0a25 50       		.byte	0x50
 2925 0a26 05       		.uleb128 0x5
 2926 0a27 03       		.byte	0x3
 2927 0a28 00000000 		.4byte	HomeIsrHandler
 2928 0a2c 00       		.byte	0
 2929 0a2d 17       		.uleb128 0x17
 2930 0a2e 2A000000 		.4byte	.LVL91
 2931 0a32 4A0F0000 		.4byte	0xf4a
 2932 0a36 400A0000 		.4byte	0xa40
 2933 0a3a 18       		.uleb128 0x18
 2934 0a3b 01       		.uleb128 0x1
 2935 0a3c 50       		.byte	0x50
 2936 0a3d 01       		.uleb128 0x1
 2937 0a3e 33       		.byte	0x33
 2938 0a3f 00       		.byte	0
 2939 0a40 17       		.uleb128 0x17
 2940 0a41 30000000 		.4byte	.LVL92
 2941 0a45 550F0000 		.4byte	0xf55
 2942 0a49 570A0000 		.4byte	0xa57
 2943 0a4d 18       		.uleb128 0x18
 2944 0a4e 01       		.uleb128 0x1
 2945 0a4f 50       		.byte	0x50
 2946 0a50 05       		.uleb128 0x5
 2947 0a51 03       		.byte	0x3
 2948 0a52 00000000 		.4byte	RSTIsrHandler
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 78


 2949 0a56 00       		.byte	0
 2950 0a57 17       		.uleb128 0x17
 2951 0a58 36000000 		.4byte	.LVL93
 2952 0a5c 600F0000 		.4byte	0xf60
 2953 0a60 6A0A0000 		.4byte	0xa6a
 2954 0a64 18       		.uleb128 0x18
 2955 0a65 01       		.uleb128 0x1
 2956 0a66 50       		.byte	0x50
 2957 0a67 01       		.uleb128 0x1
 2958 0a68 33       		.byte	0x33
 2959 0a69 00       		.byte	0
 2960 0a6a 17       		.uleb128 0x17
 2961 0a6b 3C000000 		.4byte	.LVL94
 2962 0a6f 6B0F0000 		.4byte	0xf6b
 2963 0a73 810A0000 		.4byte	0xa81
 2964 0a77 18       		.uleb128 0x18
 2965 0a78 01       		.uleb128 0x1
 2966 0a79 50       		.byte	0x50
 2967 0a7a 05       		.uleb128 0x5
 2968 0a7b 03       		.byte	0x3
 2969 0a7c 00000000 		.4byte	SPI_SS_IsrHandler
 2970 0a80 00       		.byte	0
 2971 0a81 17       		.uleb128 0x17
 2972 0a82 42000000 		.4byte	.LVL95
 2973 0a86 760F0000 		.4byte	0xf76
 2974 0a8a 940A0000 		.4byte	0xa94
 2975 0a8e 18       		.uleb128 0x18
 2976 0a8f 01       		.uleb128 0x1
 2977 0a90 50       		.byte	0x50
 2978 0a91 01       		.uleb128 0x1
 2979 0a92 33       		.byte	0x33
 2980 0a93 00       		.byte	0
 2981 0a94 16       		.uleb128 0x16
 2982 0a95 48000000 		.4byte	.LVL96
 2983 0a99 810F0000 		.4byte	0xf81
 2984 0a9d 17       		.uleb128 0x17
 2985 0a9e 4E000000 		.4byte	.LVL97
 2986 0aa2 8C0F0000 		.4byte	0xf8c
 2987 0aa6 B10A0000 		.4byte	0xab1
 2988 0aaa 18       		.uleb128 0x18
 2989 0aab 01       		.uleb128 0x1
 2990 0aac 50       		.byte	0x50
 2991 0aad 02       		.uleb128 0x2
 2992 0aae 08       		.byte	0x8
 2993 0aaf 64       		.byte	0x64
 2994 0ab0 00       		.byte	0
 2995 0ab1 16       		.uleb128 0x16
 2996 0ab2 52000000 		.4byte	.LVL98
 2997 0ab6 970F0000 		.4byte	0xf97
 2998 0aba 16       		.uleb128 0x16
 2999 0abb 56000000 		.4byte	.LVL99
 3000 0abf A20F0000 		.4byte	0xfa2
 3001 0ac3 17       		.uleb128 0x17
 3002 0ac4 5E000000 		.4byte	.LVL100
 3003 0ac8 AE0F0000 		.4byte	0xfae
 3004 0acc D80A0000 		.4byte	0xad8
 3005 0ad0 18       		.uleb128 0x18
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 79


 3006 0ad1 01       		.uleb128 0x1
 3007 0ad2 50       		.byte	0x50
 3008 0ad3 03       		.uleb128 0x3
 3009 0ad4 0A       		.byte	0xa
 3010 0ad5 4006     		.2byte	0x640
 3011 0ad7 00       		.byte	0
 3012 0ad8 17       		.uleb128 0x17
 3013 0ad9 64000000 		.4byte	.LVL101
 3014 0add 69060000 		.4byte	0x669
 3015 0ae1 EB0A0000 		.4byte	0xaeb
 3016 0ae5 18       		.uleb128 0x18
 3017 0ae6 01       		.uleb128 0x1
 3018 0ae7 50       		.byte	0x50
 3019 0ae8 01       		.uleb128 0x1
 3020 0ae9 30       		.byte	0x30
 3021 0aea 00       		.byte	0
 3022 0aeb 16       		.uleb128 0x16
 3023 0aec 72000000 		.4byte	.LVL102
 3024 0af0 BA0F0000 		.4byte	0xfba
 3025 0af4 17       		.uleb128 0x17
 3026 0af5 7A000000 		.4byte	.LVL103
 3027 0af9 480E0000 		.4byte	0xe48
 3028 0afd 080B0000 		.4byte	0xb08
 3029 0b01 18       		.uleb128 0x18
 3030 0b02 01       		.uleb128 0x1
 3031 0b03 50       		.byte	0x50
 3032 0b04 02       		.uleb128 0x2
 3033 0b05 75       		.byte	0x75
 3034 0b06 00       		.sleb128 0
 3035 0b07 00       		.byte	0
 3036 0b08 16       		.uleb128 0x16
 3037 0b09 82000000 		.4byte	.LVL104
 3038 0b0d C50F0000 		.4byte	0xfc5
 3039 0b11 17       		.uleb128 0x17
 3040 0b12 88000000 		.4byte	.LVL105
 3041 0b16 530E0000 		.4byte	0xe53
 3042 0b1a 250B0000 		.4byte	0xb25
 3043 0b1e 18       		.uleb128 0x18
 3044 0b1f 01       		.uleb128 0x1
 3045 0b20 50       		.byte	0x50
 3046 0b21 02       		.uleb128 0x2
 3047 0b22 74       		.byte	0x74
 3048 0b23 00       		.sleb128 0
 3049 0b24 00       		.byte	0
 3050 0b25 16       		.uleb128 0x16
 3051 0b26 9A000000 		.4byte	.LVL106
 3052 0b2a CB070000 		.4byte	0x7cb
 3053 0b2e 17       		.uleb128 0x17
 3054 0b2f A0000000 		.4byte	.LVL107
 3055 0b33 EB070000 		.4byte	0x7eb
 3056 0b37 420B0000 		.4byte	0xb42
 3057 0b3b 18       		.uleb128 0x18
 3058 0b3c 01       		.uleb128 0x1
 3059 0b3d 50       		.byte	0x50
 3060 0b3e 02       		.uleb128 0x2
 3061 0b3f 74       		.byte	0x74
 3062 0b40 00       		.sleb128 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 80


 3063 0b41 00       		.byte	0
 3064 0b42 17       		.uleb128 0x17
 3065 0b43 CA000000 		.4byte	.LVL108
 3066 0b47 69060000 		.4byte	0x669
 3067 0b4b 560B0000 		.4byte	0xb56
 3068 0b4f 18       		.uleb128 0x18
 3069 0b50 01       		.uleb128 0x1
 3070 0b51 50       		.byte	0x50
 3071 0b52 02       		.uleb128 0x2
 3072 0b53 74       		.byte	0x74
 3073 0b54 00       		.sleb128 0
 3074 0b55 00       		.byte	0
 3075 0b56 17       		.uleb128 0x17
 3076 0b57 D0000000 		.4byte	.LVL109
 3077 0b5b D00F0000 		.4byte	0xfd0
 3078 0b5f 690B0000 		.4byte	0xb69
 3079 0b63 18       		.uleb128 0x18
 3080 0b64 01       		.uleb128 0x1
 3081 0b65 50       		.byte	0x50
 3082 0b66 01       		.uleb128 0x1
 3083 0b67 31       		.byte	0x31
 3084 0b68 00       		.byte	0
 3085 0b69 16       		.uleb128 0x16
 3086 0b6a D4000000 		.4byte	.LVL110
 3087 0b6e 34060000 		.4byte	0x634
 3088 0b72 17       		.uleb128 0x17
 3089 0b73 E6000000 		.4byte	.LVL111
 3090 0b77 DB0F0000 		.4byte	0xfdb
 3091 0b7b 850B0000 		.4byte	0xb85
 3092 0b7f 18       		.uleb128 0x18
 3093 0b80 01       		.uleb128 0x1
 3094 0b81 50       		.byte	0x50
 3095 0b82 01       		.uleb128 0x1
 3096 0b83 31       		.byte	0x31
 3097 0b84 00       		.byte	0
 3098 0b85 17       		.uleb128 0x17
 3099 0b86 EE000000 		.4byte	.LVL112
 3100 0b8a DB0F0000 		.4byte	0xfdb
 3101 0b8e 990B0000 		.4byte	0xb99
 3102 0b92 18       		.uleb128 0x18
 3103 0b93 01       		.uleb128 0x1
 3104 0b94 50       		.byte	0x50
 3105 0b95 02       		.uleb128 0x2
 3106 0b96 74       		.byte	0x74
 3107 0b97 00       		.sleb128 0
 3108 0b98 00       		.byte	0
 3109 0b99 19       		.uleb128 0x19
 3110 0b9a F4000000 		.4byte	.LVL113
 3111 0b9e 8C0F0000 		.4byte	0xf8c
 3112 0ba2 18       		.uleb128 0x18
 3113 0ba3 01       		.uleb128 0x1
 3114 0ba4 50       		.byte	0x50
 3115 0ba5 01       		.uleb128 0x1
 3116 0ba6 3A       		.byte	0x3a
 3117 0ba7 00       		.byte	0
 3118 0ba8 00       		.byte	0
 3119 0ba9 24       		.uleb128 0x24
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 81


 3120 0baa C3090000 		.4byte	.LASF80
 3121 0bae 05       		.byte	0x5
 3122 0baf 0F       		.byte	0xf
 3123 0bb0 E4000000 		.4byte	0xe4
 3124 0bb4 24       		.uleb128 0x24
 3125 0bb5 1A050000 		.4byte	.LASF82
 3126 0bb9 05       		.byte	0x5
 3127 0bba 10       		.byte	0x10
 3128 0bbb E4000000 		.4byte	0xe4
 3129 0bbf 25       		.uleb128 0x25
 3130 0bc0 34030000 		.4byte	.LASF112
 3131 0bc4 01       		.byte	0x1
 3132 0bc5 5B       		.byte	0x5b
 3133 0bc6 2B080000 		.4byte	0x82b
 3134 0bca 05       		.uleb128 0x5
 3135 0bcb 03       		.byte	0x3
 3136 0bcc 00000000 		.4byte	inAuto
 3137 0bd0 26       		.uleb128 0x26
 3138 0bd1 4A6F6700 		.ascii	"Jog\000"
 3139 0bd5 01       		.byte	0x1
 3140 0bd6 5D       		.byte	0x5d
 3141 0bd7 E10B0000 		.4byte	0xbe1
 3142 0bdb 05       		.uleb128 0x5
 3143 0bdc 03       		.byte	0x3
 3144 0bdd 00000000 		.4byte	Jog
 3145 0be1 06       		.uleb128 0x6
 3146 0be2 B8000000 		.4byte	0xb8
 3147 0be6 25       		.uleb128 0x25
 3148 0be7 14070000 		.4byte	.LASF113
 3149 0beb 01       		.byte	0x1
 3150 0bec 5E       		.byte	0x5e
 3151 0bed 2B080000 		.4byte	0x82b
 3152 0bf1 05       		.uleb128 0x5
 3153 0bf2 03       		.byte	0x3
 3154 0bf3 00000000 		.4byte	PID_Enabled
 3155 0bf7 25       		.uleb128 0x25
 3156 0bf8 04070000 		.4byte	.LASF114
 3157 0bfc 01       		.byte	0x1
 3158 0bfd 5E       		.byte	0x5e
 3159 0bfe 2B080000 		.4byte	0x82b
 3160 0c02 05       		.uleb128 0x5
 3161 0c03 03       		.byte	0x3
 3162 0c04 00000000 		.4byte	PID_Was_Enabled
 3163 0c08 25       		.uleb128 0x25
 3164 0c09 18080000 		.4byte	.LASF115
 3165 0c0d 01       		.byte	0x1
 3166 0c0e 5F       		.byte	0x5f
 3167 0c0f E4000000 		.4byte	0xe4
 3168 0c13 05       		.uleb128 0x5
 3169 0c14 03       		.byte	0x3
 3170 0c15 00000000 		.4byte	PID_Setpoint
 3171 0c19 25       		.uleb128 0x25
 3172 0c1a 750A0000 		.4byte	.LASF116
 3173 0c1e 01       		.byte	0x1
 3174 0c1f 5F       		.byte	0x5f
 3175 0c20 E4000000 		.4byte	0xe4
 3176 0c24 05       		.uleb128 0x5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 82


 3177 0c25 03       		.byte	0x3
 3178 0c26 00000000 		.4byte	PID_EffectiveSetpoint
 3179 0c2a 25       		.uleb128 0x25
 3180 0c2b F8010000 		.4byte	.LASF117
 3181 0c2f 01       		.byte	0x1
 3182 0c30 60       		.byte	0x60
 3183 0c31 C3000000 		.4byte	0xc3
 3184 0c35 05       		.uleb128 0x5
 3185 0c36 03       		.byte	0x3
 3186 0c37 00000000 		.4byte	PID_EffSetDelta
 3187 0c3b 25       		.uleb128 0x25
 3188 0c3c 08020000 		.4byte	.LASF118
 3189 0c40 01       		.byte	0x1
 3190 0c41 61       		.byte	0x61
 3191 0c42 EF000000 		.4byte	0xef
 3192 0c46 05       		.uleb128 0x5
 3193 0c47 03       		.byte	0x3
 3194 0c48 00000000 		.4byte	lastTime
 3195 0c4c 25       		.uleb128 0x25
 3196 0c4d CA030000 		.4byte	.LASF119
 3197 0c51 01       		.byte	0x1
 3198 0c52 63       		.byte	0x63
 3199 0c53 EC060000 		.4byte	0x6ec
 3200 0c57 05       		.uleb128 0x5
 3201 0c58 03       		.byte	0x3
 3202 0c59 00000000 		.4byte	Position
 3203 0c5d 25       		.uleb128 0x25
 3204 0c5e FD050000 		.4byte	.LASF120
 3205 0c62 01       		.byte	0x1
 3206 0c63 63       		.byte	0x63
 3207 0c64 EC060000 		.4byte	0x6ec
 3208 0c68 05       		.uleb128 0x5
 3209 0c69 03       		.byte	0x3
 3210 0c6a 00000000 		.4byte	LastPosition
 3211 0c6e 25       		.uleb128 0x25
 3212 0c6f CB060000 		.4byte	.LASF121
 3213 0c73 01       		.byte	0x1
 3214 0c74 64       		.byte	0x64
 3215 0c75 EC060000 		.4byte	0x6ec
 3216 0c79 05       		.uleb128 0x5
 3217 0c7a 03       		.byte	0x3
 3218 0c7b 00000000 		.4byte	Output
 3219 0c7f 25       		.uleb128 0x25
 3220 0c80 4E020000 		.4byte	.LASF59
 3221 0c84 01       		.byte	0x1
 3222 0c85 65       		.byte	0x65
 3223 0c86 900C0000 		.4byte	0xc90
 3224 0c8a 05       		.uleb128 0x5
 3225 0c8b 03       		.byte	0x3
 3226 0c8c 00000000 		.4byte	limitOutput
 3227 0c90 06       		.uleb128 0x6
 3228 0c91 D9000000 		.4byte	0xd9
 3229 0c95 25       		.uleb128 0x25
 3230 0c96 3D040000 		.4byte	.LASF60
 3231 0c9a 01       		.byte	0x1
 3232 0c9b 66       		.byte	0x66
 3233 0c9c 900C0000 		.4byte	0xc90
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 83


 3234 0ca0 05       		.uleb128 0x5
 3235 0ca1 03       		.byte	0x3
 3236 0ca2 00000000 		.4byte	limitIterm
 3237 0ca6 25       		.uleb128 0x25
 3238 0ca7 24090000 		.4byte	.LASF122
 3239 0cab 01       		.byte	0x1
 3240 0cac 68       		.byte	0x68
 3241 0cad 2B080000 		.4byte	0x82b
 3242 0cb1 05       		.uleb128 0x5
 3243 0cb2 03       		.byte	0x3
 3244 0cb3 00000000 		.4byte	homingDone
 3245 0cb7 25       		.uleb128 0x25
 3246 0cb8 54070000 		.4byte	.LASF123
 3247 0cbc 01       		.byte	0x1
 3248 0cbd 73       		.byte	0x73
 3249 0cbe EF000000 		.4byte	0xef
 3250 0cc2 05       		.uleb128 0x5
 3251 0cc3 03       		.byte	0x3
 3252 0cc4 00000000 		.4byte	LastMoveStartTimeUsec
 3253 0cc8 25       		.uleb128 0x25
 3254 0cc9 2F090000 		.4byte	.LASF124
 3255 0ccd 01       		.byte	0x1
 3256 0cce 74       		.byte	0x74
 3257 0ccf EF000000 		.4byte	0xef
 3258 0cd3 05       		.uleb128 0x5
 3259 0cd4 03       		.byte	0x3
 3260 0cd5 00000000 		.4byte	LastMoveEndTimeUsec
 3261 0cd9 25       		.uleb128 0x25
 3262 0cda 2F010000 		.4byte	.LASF125
 3263 0cde 01       		.byte	0x1
 3264 0cdf 77       		.byte	0x77
 3265 0ce0 D9000000 		.4byte	0xd9
 3266 0ce4 05       		.uleb128 0x5
 3267 0ce5 03       		.byte	0x3
 3268 0ce6 00000000 		.4byte	LastMoveStableCount
 3269 0cea 25       		.uleb128 0x25
 3270 0ceb CA040000 		.4byte	.LASF126
 3271 0cef 01       		.byte	0x1
 3272 0cf0 7A       		.byte	0x7a
 3273 0cf1 EF000000 		.4byte	0xef
 3274 0cf5 05       		.uleb128 0x5
 3275 0cf6 03       		.byte	0x3
 3276 0cf7 00000000 		.4byte	LastMoveTimeUsec
 3277 0cfb 25       		.uleb128 0x25
 3278 0cfc 2B060000 		.4byte	.LASF127
 3279 0d00 01       		.byte	0x1
 3280 0d01 7D       		.byte	0x7d
 3281 0d02 2B080000 		.4byte	0x82b
 3282 0d06 05       		.uleb128 0x5
 3283 0d07 03       		.byte	0x3
 3284 0d08 00000000 		.4byte	NewCommandedMove
 3285 0d0c 25       		.uleb128 0x25
 3286 0d0d 70080000 		.4byte	.LASF128
 3287 0d11 01       		.byte	0x1
 3288 0d12 82       		.byte	0x82
 3289 0d13 1D0D0000 		.4byte	0xd1d
 3290 0d17 05       		.uleb128 0x5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 84


 3291 0d18 03       		.byte	0x3
 3292 0d19 00000000 		.4byte	UptimeMicroseconds
 3293 0d1d 06       		.uleb128 0x6
 3294 0d1e FA000000 		.4byte	0xfa
 3295 0d22 25       		.uleb128 0x25
 3296 0d23 E6090000 		.4byte	.LASF129
 3297 0d27 01       		.byte	0x1
 3298 0d28 83       		.byte	0x83
 3299 0d29 1D0D0000 		.4byte	0xd1d
 3300 0d2d 05       		.uleb128 0x5
 3301 0d2e 03       		.byte	0x3
 3302 0d2f 00000000 		.4byte	UptimeMicrosecondsAccumulator
 3303 0d33 25       		.uleb128 0x25
 3304 0d34 72030000 		.4byte	.LASF130
 3305 0d38 01       		.byte	0x1
 3306 0d39 84       		.byte	0x84
 3307 0d3a 1D0D0000 		.4byte	0xd1d
 3308 0d3e 05       		.uleb128 0x5
 3309 0d3f 03       		.byte	0x3
 3310 0d40 00000000 		.4byte	UptimeMilliseconds
 3311 0d44 25       		.uleb128 0x25
 3312 0d45 4E050000 		.4byte	.LASF131
 3313 0d49 01       		.byte	0x1
 3314 0d4a 85       		.byte	0x85
 3315 0d4b 1D0D0000 		.4byte	0xd1d
 3316 0d4f 05       		.uleb128 0x5
 3317 0d50 03       		.byte	0x3
 3318 0d51 00000000 		.4byte	UptimeMillisecondsAccumulator
 3319 0d55 25       		.uleb128 0x25
 3320 0d56 EE070000 		.4byte	.LASF132
 3321 0d5a 01       		.byte	0x1
 3322 0d5b 86       		.byte	0x86
 3323 0d5c 1D0D0000 		.4byte	0xd1d
 3324 0d60 05       		.uleb128 0x5
 3325 0d61 03       		.byte	0x3
 3326 0d62 00000000 		.4byte	UptimeSeconds
 3327 0d66 25       		.uleb128 0x25
 3328 0d67 42020000 		.4byte	.LASF133
 3329 0d6b 01       		.byte	0x1
 3330 0d6c B2       		.byte	0xb2
 3331 0d6d 770D0000 		.4byte	0xd77
 3332 0d71 05       		.uleb128 0x5
 3333 0d72 03       		.byte	0x3
 3334 0d73 00000000 		.4byte	ConfigState
 3335 0d77 06       		.uleb128 0x6
 3336 0d78 6F010000 		.4byte	0x16f
 3337 0d7c 25       		.uleb128 0x25
 3338 0d7d E4080000 		.4byte	.LASF134
 3339 0d81 01       		.byte	0x1
 3340 0d82 B3       		.byte	0xb3
 3341 0d83 8D0D0000 		.4byte	0xd8d
 3342 0d87 05       		.uleb128 0x5
 3343 0d88 03       		.byte	0x3
 3344 0d89 00000000 		.4byte	FaultState
 3345 0d8d 06       		.uleb128 0x6
 3346 0d8e C3000000 		.4byte	0xc3
 3347 0d92 25       		.uleb128 0x25
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 85


 3348 0d93 15090000 		.4byte	.LASF135
 3349 0d97 01       		.byte	0x1
 3350 0d98 B4       		.byte	0xb4
 3351 0d99 8D0D0000 		.4byte	0xd8d
 3352 0d9d 05       		.uleb128 0x5
 3353 0d9e 03       		.byte	0x3
 3354 0d9f 00000000 		.4byte	ConfigSequence
 3355 0da3 25       		.uleb128 0x25
 3356 0da4 3E080000 		.4byte	.LASF136
 3357 0da8 01       		.byte	0x1
 3358 0da9 B5       		.byte	0xb5
 3359 0daa 900C0000 		.4byte	0xc90
 3360 0dae 05       		.uleb128 0x5
 3361 0daf 03       		.byte	0x3
 3362 0db0 00000000 		.4byte	ChecksumErrors
 3363 0db4 25       		.uleb128 0x25
 3364 0db5 11020000 		.4byte	.LASF137
 3365 0db9 01       		.byte	0x1
 3366 0dba B6       		.byte	0xb6
 3367 0dbb C50D0000 		.4byte	0xdc5
 3368 0dbf 05       		.uleb128 0x5
 3369 0dc0 03       		.byte	0x3
 3370 0dc1 00000000 		.4byte	MotorCurrent
 3371 0dc5 06       		.uleb128 0x6
 3372 0dc6 CE000000 		.4byte	0xce
 3373 0dca 0F       		.uleb128 0xf
 3374 0dcb C3000000 		.4byte	0xc3
 3375 0dcf DA0D0000 		.4byte	0xdda
 3376 0dd3 10       		.uleb128 0x10
 3377 0dd4 3E010000 		.4byte	0x13e
 3378 0dd8 13       		.byte	0x13
 3379 0dd9 00       		.byte	0
 3380 0dda 25       		.uleb128 0x25
 3381 0ddb D5050000 		.4byte	.LASF138
 3382 0ddf 01       		.byte	0x1
 3383 0de0 B7       		.byte	0xb7
 3384 0de1 CA0D0000 		.4byte	0xdca
 3385 0de5 05       		.uleb128 0x5
 3386 0de6 03       		.byte	0x3
 3387 0de7 00000000 		.4byte	CurrentI2Cinbuf
 3388 0deb 25       		.uleb128 0x25
 3389 0dec 95070000 		.4byte	.LASF139
 3390 0df0 01       		.byte	0x1
 3391 0df1 C9       		.byte	0xc9
 3392 0df2 EF000000 		.4byte	0xef
 3393 0df6 05       		.uleb128 0x5
 3394 0df7 03       		.byte	0x3
 3395 0df8 00000000 		.4byte	LastMessageTimeSeconds
 3396 0dfc 27       		.uleb128 0x27
 3397 0dfd 08000000 		.4byte	.LASF140
 3398 0e01 01       		.byte	0x1
 3399 0e02 0801     		.2byte	0x108
 3400 0e04 6E030000 		.4byte	0x36e
 3401 0e08 05       		.uleb128 0x5
 3402 0e09 03       		.byte	0x3
 3403 0e0a 00000000 		.4byte	rxMessage
 3404 0e0e 27       		.uleb128 0x27
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 86


 3405 0e0f 0A060000 		.4byte	.LASF141
 3406 0e13 01       		.byte	0x1
 3407 0e14 2201     		.2byte	0x122
 3408 0e16 AA040000 		.4byte	0x4aa
 3409 0e1a 05       		.uleb128 0x5
 3410 0e1b 03       		.byte	0x3
 3411 0e1c 00000000 		.4byte	txMessage
 3412 0e20 27       		.uleb128 0x27
 3413 0e21 660A0000 		.4byte	.LASF142
 3414 0e25 01       		.byte	0x1
 3415 0e26 2A01     		.2byte	0x12a
 3416 0e28 E6040000 		.4byte	0x4e6
 3417 0e2c 05       		.uleb128 0x5
 3418 0e2d 03       		.byte	0x3
 3419 0e2e 00000000 		.4byte	txMessageState
 3420 0e32 28       		.uleb128 0x28
 3421 0e33 96040000 		.4byte	.LASF143
 3422 0e37 96040000 		.4byte	.LASF143
 3423 0e3b 06       		.byte	0x6
 3424 0e3c 28       		.byte	0x28
 3425 0e3d 28       		.uleb128 0x28
 3426 0e3e 43090000 		.4byte	.LASF144
 3427 0e42 43090000 		.4byte	.LASF144
 3428 0e46 07       		.byte	0x7
 3429 0e47 39       		.byte	0x39
 3430 0e48 28       		.uleb128 0x28
 3431 0e49 14060000 		.4byte	.LASF145
 3432 0e4d 14060000 		.4byte	.LASF145
 3433 0e51 08       		.byte	0x8
 3434 0e52 5A       		.byte	0x5a
 3435 0e53 28       		.uleb128 0x28
 3436 0e54 5F040000 		.4byte	.LASF146
 3437 0e58 5F040000 		.4byte	.LASF146
 3438 0e5c 09       		.byte	0x9
 3439 0e5d 5A       		.byte	0x5a
 3440 0e5e 28       		.uleb128 0x28
 3441 0e5f 250A0000 		.4byte	.LASF147
 3442 0e63 250A0000 		.4byte	.LASF147
 3443 0e67 0A       		.byte	0xa
 3444 0e68 28       		.byte	0x28
 3445 0e69 28       		.uleb128 0x28
 3446 0e6a D8000000 		.4byte	.LASF148
 3447 0e6e D8000000 		.4byte	.LASF148
 3448 0e72 0B       		.byte	0xb
 3449 0e73 39       		.byte	0x39
 3450 0e74 28       		.uleb128 0x28
 3451 0e75 5C030000 		.4byte	.LASF149
 3452 0e79 5C030000 		.4byte	.LASF149
 3453 0e7d 0C       		.byte	0xc
 3454 0e7e 39       		.byte	0x39
 3455 0e7f 28       		.uleb128 0x28
 3456 0e80 0E050000 		.4byte	.LASF150
 3457 0e84 0E050000 		.4byte	.LASF150
 3458 0e88 0C       		.byte	0xc
 3459 0e89 32       		.byte	0x32
 3460 0e8a 29       		.uleb128 0x29
 3461 0e8b 47050000 		.4byte	.LASF186
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 87


 3462 0e8f 47050000 		.4byte	.LASF186
 3463 0e93 2A       		.uleb128 0x2a
 3464 0e94 E5050000 		.4byte	.LASF151
 3465 0e98 E5050000 		.4byte	.LASF151
 3466 0e9c 0D       		.byte	0xd
 3467 0e9d 3D03     		.2byte	0x33d
 3468 0e9f 2A       		.uleb128 0x2a
 3469 0ea0 1B040000 		.4byte	.LASF152
 3470 0ea4 1B040000 		.4byte	.LASF152
 3471 0ea8 0D       		.byte	0xd
 3472 0ea9 3F03     		.2byte	0x33f
 3473 0eab 2A       		.uleb128 0x2a
 3474 0eac 4B010000 		.4byte	.LASF153
 3475 0eb0 4B010000 		.4byte	.LASF153
 3476 0eb4 0D       		.byte	0xd
 3477 0eb5 4703     		.2byte	0x347
 3478 0eb7 28       		.uleb128 0x28
 3479 0eb8 99060000 		.4byte	.LASF154
 3480 0ebc 99060000 		.4byte	.LASF154
 3481 0ec0 0E       		.byte	0xe
 3482 0ec1 70       		.byte	0x70
 3483 0ec2 2A       		.uleb128 0x2a
 3484 0ec3 7C040000 		.4byte	.LASF155
 3485 0ec7 7C040000 		.4byte	.LASF155
 3486 0ecb 0F       		.byte	0xf
 3487 0ecc 5501     		.2byte	0x155
 3488 0ece 28       		.uleb128 0x28
 3489 0ecf 85030000 		.4byte	.LASF156
 3490 0ed3 85030000 		.4byte	.LASF156
 3491 0ed7 08       		.byte	0x8
 3492 0ed8 5D       		.byte	0x5d
 3493 0ed9 2A       		.uleb128 0x2a
 3494 0eda 46030000 		.4byte	.LASF157
 3495 0ede 46030000 		.4byte	.LASF157
 3496 0ee2 0D       		.byte	0xd
 3497 0ee3 4503     		.2byte	0x345
 3498 0ee5 28       		.uleb128 0x28
 3499 0ee6 73070000 		.4byte	.LASF158
 3500 0eea 73070000 		.4byte	.LASF158
 3501 0eee 10       		.byte	0x10
 3502 0eef 36       		.byte	0x36
 3503 0ef0 28       		.uleb128 0x28
 3504 0ef1 30050000 		.4byte	.LASF159
 3505 0ef5 30050000 		.4byte	.LASF159
 3506 0ef9 11       		.byte	0x11
 3507 0efa 36       		.byte	0x36
 3508 0efb 28       		.uleb128 0x28
 3509 0efc E7030000 		.4byte	.LASF160
 3510 0f00 E7030000 		.4byte	.LASF160
 3511 0f04 05       		.byte	0x5
 3512 0f05 11       		.byte	0x11
 3513 0f06 2A       		.uleb128 0x2a
 3514 0f07 E9040000 		.4byte	.LASF161
 3515 0f0b E9040000 		.4byte	.LASF161
 3516 0f0f 12       		.byte	0x12
 3517 0f10 4701     		.2byte	0x147
 3518 0f12 28       		.uleb128 0x28
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 88


 3519 0f13 73090000 		.4byte	.LASF162
 3520 0f17 73090000 		.4byte	.LASF162
 3521 0f1b 13       		.byte	0x13
 3522 0f1c 33       		.byte	0x33
 3523 0f1d 2A       		.uleb128 0x2a
 3524 0f1e 0E030000 		.4byte	.LASF163
 3525 0f22 0E030000 		.4byte	.LASF163
 3526 0f26 12       		.byte	0x12
 3527 0f27 3201     		.2byte	0x132
 3528 0f29 28       		.uleb128 0x28
 3529 0f2a FD020000 		.4byte	.LASF164
 3530 0f2e FD020000 		.4byte	.LASF164
 3531 0f32 14       		.byte	0x14
 3532 0f33 18       		.byte	0x18
 3533 0f34 28       		.uleb128 0x28
 3534 0f35 78060000 		.4byte	.LASF165
 3535 0f39 78060000 		.4byte	.LASF165
 3536 0f3d 14       		.byte	0x14
 3537 0f3e 20       		.byte	0x20
 3538 0f3f 28       		.uleb128 0x28
 3539 0f40 7F090000 		.4byte	.LASF166
 3540 0f44 7F090000 		.4byte	.LASF166
 3541 0f48 0A       		.byte	0xa
 3542 0f49 18       		.byte	0x18
 3543 0f4a 28       		.uleb128 0x28
 3544 0f4b E8020000 		.4byte	.LASF167
 3545 0f4f E8020000 		.4byte	.LASF167
 3546 0f53 0A       		.byte	0xa
 3547 0f54 20       		.byte	0x20
 3548 0f55 28       		.uleb128 0x28
 3549 0f56 0D0A0000 		.4byte	.LASF168
 3550 0f5a 0D0A0000 		.4byte	.LASF168
 3551 0f5e 06       		.byte	0x6
 3552 0f5f 18       		.byte	0x18
 3553 0f60 28       		.uleb128 0x28
 3554 0f61 FC070000 		.4byte	.LASF169
 3555 0f65 FC070000 		.4byte	.LASF169
 3556 0f69 06       		.byte	0x6
 3557 0f6a 20       		.byte	0x20
 3558 0f6b 28       		.uleb128 0x28
 3559 0f6c AF010000 		.4byte	.LASF170
 3560 0f70 AF010000 		.4byte	.LASF170
 3561 0f74 15       		.byte	0x15
 3562 0f75 18       		.byte	0x18
 3563 0f76 28       		.uleb128 0x28
 3564 0f77 B3040000 		.4byte	.LASF171
 3565 0f7b B3040000 		.4byte	.LASF171
 3566 0f7f 15       		.byte	0x15
 3567 0f80 20       		.byte	0x20
 3568 0f81 28       		.uleb128 0x28
 3569 0f82 25010000 		.4byte	.LASF172
 3570 0f86 25010000 		.4byte	.LASF172
 3571 0f8a 16       		.byte	0x16
 3572 0f8b 72       		.byte	0x72
 3573 0f8c 28       		.uleb128 0x28
 3574 0f8d 00000000 		.4byte	.LASF173
 3575 0f91 00000000 		.4byte	.LASF173
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 89


 3576 0f95 17       		.byte	0x17
 3577 0f96 EC       		.byte	0xec
 3578 0f97 28       		.uleb128 0x28
 3579 0f98 AA080000 		.4byte	.LASF174
 3580 0f9c AA080000 		.4byte	.LASF174
 3581 0fa0 18       		.byte	0x18
 3582 0fa1 72       		.byte	0x72
 3583 0fa2 2A       		.uleb128 0x2a
 3584 0fa3 48070000 		.4byte	.LASF175
 3585 0fa7 48070000 		.4byte	.LASF175
 3586 0fab 0F       		.byte	0xf
 3587 0fac 3201     		.2byte	0x132
 3588 0fae 2A       		.uleb128 0x2a
 3589 0faf 30020000 		.4byte	.LASF176
 3590 0fb3 30020000 		.4byte	.LASF176
 3591 0fb7 0F       		.byte	0xf
 3592 0fb8 5001     		.2byte	0x150
 3593 0fba 28       		.uleb128 0x28
 3594 0fbb A0000000 		.4byte	.LASF177
 3595 0fbf A0000000 		.4byte	.LASF177
 3596 0fc3 08       		.byte	0x8
 3597 0fc4 4F       		.byte	0x4f
 3598 0fc5 28       		.uleb128 0x28
 3599 0fc6 D0090000 		.4byte	.LASF178
 3600 0fca D0090000 		.4byte	.LASF178
 3601 0fce 09       		.byte	0x9
 3602 0fcf 4F       		.byte	0x4f
 3603 0fd0 28       		.uleb128 0x28
 3604 0fd1 EF080000 		.4byte	.LASF179
 3605 0fd5 EF080000 		.4byte	.LASF179
 3606 0fd9 19       		.byte	0x19
 3607 0fda 2F       		.byte	0x2f
 3608 0fdb 28       		.uleb128 0x28
 3609 0fdc EF000000 		.4byte	.LASF180
 3610 0fe0 EF000000 		.4byte	.LASF180
 3611 0fe4 1A       		.byte	0x1a
 3612 0fe5 33       		.byte	0x33
 3613 0fe6 00       		.byte	0
 3614              		.section	.debug_abbrev,"",%progbits
 3615              	.Ldebug_abbrev0:
 3616 0000 01       		.uleb128 0x1
 3617 0001 11       		.uleb128 0x11
 3618 0002 01       		.byte	0x1
 3619 0003 25       		.uleb128 0x25
 3620 0004 0E       		.uleb128 0xe
 3621 0005 13       		.uleb128 0x13
 3622 0006 0B       		.uleb128 0xb
 3623 0007 03       		.uleb128 0x3
 3624 0008 0E       		.uleb128 0xe
 3625 0009 1B       		.uleb128 0x1b
 3626 000a 0E       		.uleb128 0xe
 3627 000b 55       		.uleb128 0x55
 3628 000c 17       		.uleb128 0x17
 3629 000d 11       		.uleb128 0x11
 3630 000e 01       		.uleb128 0x1
 3631 000f 10       		.uleb128 0x10
 3632 0010 17       		.uleb128 0x17
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 90


 3633 0011 00       		.byte	0
 3634 0012 00       		.byte	0
 3635 0013 02       		.uleb128 0x2
 3636 0014 16       		.uleb128 0x16
 3637 0015 00       		.byte	0
 3638 0016 03       		.uleb128 0x3
 3639 0017 0E       		.uleb128 0xe
 3640 0018 3A       		.uleb128 0x3a
 3641 0019 0B       		.uleb128 0xb
 3642 001a 3B       		.uleb128 0x3b
 3643 001b 0B       		.uleb128 0xb
 3644 001c 49       		.uleb128 0x49
 3645 001d 13       		.uleb128 0x13
 3646 001e 00       		.byte	0
 3647 001f 00       		.byte	0
 3648 0020 03       		.uleb128 0x3
 3649 0021 24       		.uleb128 0x24
 3650 0022 00       		.byte	0
 3651 0023 0B       		.uleb128 0xb
 3652 0024 0B       		.uleb128 0xb
 3653 0025 3E       		.uleb128 0x3e
 3654 0026 0B       		.uleb128 0xb
 3655 0027 03       		.uleb128 0x3
 3656 0028 0E       		.uleb128 0xe
 3657 0029 00       		.byte	0
 3658 002a 00       		.byte	0
 3659 002b 04       		.uleb128 0x4
 3660 002c 24       		.uleb128 0x24
 3661 002d 00       		.byte	0
 3662 002e 0B       		.uleb128 0xb
 3663 002f 0B       		.uleb128 0xb
 3664 0030 3E       		.uleb128 0x3e
 3665 0031 0B       		.uleb128 0xb
 3666 0032 03       		.uleb128 0x3
 3667 0033 08       		.uleb128 0x8
 3668 0034 00       		.byte	0
 3669 0035 00       		.byte	0
 3670 0036 05       		.uleb128 0x5
 3671 0037 16       		.uleb128 0x16
 3672 0038 00       		.byte	0
 3673 0039 03       		.uleb128 0x3
 3674 003a 0E       		.uleb128 0xe
 3675 003b 3A       		.uleb128 0x3a
 3676 003c 0B       		.uleb128 0xb
 3677 003d 3B       		.uleb128 0x3b
 3678 003e 05       		.uleb128 0x5
 3679 003f 49       		.uleb128 0x49
 3680 0040 13       		.uleb128 0x13
 3681 0041 00       		.byte	0
 3682 0042 00       		.byte	0
 3683 0043 06       		.uleb128 0x6
 3684 0044 35       		.uleb128 0x35
 3685 0045 00       		.byte	0
 3686 0046 49       		.uleb128 0x49
 3687 0047 13       		.uleb128 0x13
 3688 0048 00       		.byte	0
 3689 0049 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 91


 3690 004a 07       		.uleb128 0x7
 3691 004b 04       		.uleb128 0x4
 3692 004c 01       		.byte	0x1
 3693 004d 0B       		.uleb128 0xb
 3694 004e 0B       		.uleb128 0xb
 3695 004f 49       		.uleb128 0x49
 3696 0050 13       		.uleb128 0x13
 3697 0051 3A       		.uleb128 0x3a
 3698 0052 0B       		.uleb128 0xb
 3699 0053 3B       		.uleb128 0x3b
 3700 0054 0B       		.uleb128 0xb
 3701 0055 01       		.uleb128 0x1
 3702 0056 13       		.uleb128 0x13
 3703 0057 00       		.byte	0
 3704 0058 00       		.byte	0
 3705 0059 08       		.uleb128 0x8
 3706 005a 28       		.uleb128 0x28
 3707 005b 00       		.byte	0
 3708 005c 03       		.uleb128 0x3
 3709 005d 0E       		.uleb128 0xe
 3710 005e 1C       		.uleb128 0x1c
 3711 005f 0B       		.uleb128 0xb
 3712 0060 00       		.byte	0
 3713 0061 00       		.byte	0
 3714 0062 09       		.uleb128 0x9
 3715 0063 13       		.uleb128 0x13
 3716 0064 01       		.byte	0x1
 3717 0065 0B       		.uleb128 0xb
 3718 0066 0B       		.uleb128 0xb
 3719 0067 3A       		.uleb128 0x3a
 3720 0068 0B       		.uleb128 0xb
 3721 0069 3B       		.uleb128 0x3b
 3722 006a 0B       		.uleb128 0xb
 3723 006b 01       		.uleb128 0x1
 3724 006c 13       		.uleb128 0x13
 3725 006d 00       		.byte	0
 3726 006e 00       		.byte	0
 3727 006f 0A       		.uleb128 0xa
 3728 0070 0D       		.uleb128 0xd
 3729 0071 00       		.byte	0
 3730 0072 03       		.uleb128 0x3
 3731 0073 0E       		.uleb128 0xe
 3732 0074 3A       		.uleb128 0x3a
 3733 0075 0B       		.uleb128 0xb
 3734 0076 3B       		.uleb128 0x3b
 3735 0077 0B       		.uleb128 0xb
 3736 0078 49       		.uleb128 0x49
 3737 0079 13       		.uleb128 0x13
 3738 007a 38       		.uleb128 0x38
 3739 007b 0B       		.uleb128 0xb
 3740 007c 00       		.byte	0
 3741 007d 00       		.byte	0
 3742 007e 0B       		.uleb128 0xb
 3743 007f 0D       		.uleb128 0xd
 3744 0080 00       		.byte	0
 3745 0081 03       		.uleb128 0x3
 3746 0082 08       		.uleb128 0x8
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 92


 3747 0083 3A       		.uleb128 0x3a
 3748 0084 0B       		.uleb128 0xb
 3749 0085 3B       		.uleb128 0x3b
 3750 0086 0B       		.uleb128 0xb
 3751 0087 49       		.uleb128 0x49
 3752 0088 13       		.uleb128 0x13
 3753 0089 38       		.uleb128 0x38
 3754 008a 0B       		.uleb128 0xb
 3755 008b 00       		.byte	0
 3756 008c 00       		.byte	0
 3757 008d 0C       		.uleb128 0xc
 3758 008e 17       		.uleb128 0x17
 3759 008f 01       		.byte	0x1
 3760 0090 0B       		.uleb128 0xb
 3761 0091 0B       		.uleb128 0xb
 3762 0092 3A       		.uleb128 0x3a
 3763 0093 0B       		.uleb128 0xb
 3764 0094 3B       		.uleb128 0x3b
 3765 0095 05       		.uleb128 0x5
 3766 0096 01       		.uleb128 0x1
 3767 0097 13       		.uleb128 0x13
 3768 0098 00       		.byte	0
 3769 0099 00       		.byte	0
 3770 009a 0D       		.uleb128 0xd
 3771 009b 0D       		.uleb128 0xd
 3772 009c 00       		.byte	0
 3773 009d 03       		.uleb128 0x3
 3774 009e 08       		.uleb128 0x8
 3775 009f 3A       		.uleb128 0x3a
 3776 00a0 0B       		.uleb128 0xb
 3777 00a1 3B       		.uleb128 0x3b
 3778 00a2 05       		.uleb128 0x5
 3779 00a3 49       		.uleb128 0x49
 3780 00a4 13       		.uleb128 0x13
 3781 00a5 00       		.byte	0
 3782 00a6 00       		.byte	0
 3783 00a7 0E       		.uleb128 0xe
 3784 00a8 0D       		.uleb128 0xd
 3785 00a9 00       		.byte	0
 3786 00aa 03       		.uleb128 0x3
 3787 00ab 0E       		.uleb128 0xe
 3788 00ac 3A       		.uleb128 0x3a
 3789 00ad 0B       		.uleb128 0xb
 3790 00ae 3B       		.uleb128 0x3b
 3791 00af 05       		.uleb128 0x5
 3792 00b0 49       		.uleb128 0x49
 3793 00b1 13       		.uleb128 0x13
 3794 00b2 00       		.byte	0
 3795 00b3 00       		.byte	0
 3796 00b4 0F       		.uleb128 0xf
 3797 00b5 01       		.uleb128 0x1
 3798 00b6 01       		.byte	0x1
 3799 00b7 49       		.uleb128 0x49
 3800 00b8 13       		.uleb128 0x13
 3801 00b9 01       		.uleb128 0x1
 3802 00ba 13       		.uleb128 0x13
 3803 00bb 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 93


 3804 00bc 00       		.byte	0
 3805 00bd 10       		.uleb128 0x10
 3806 00be 21       		.uleb128 0x21
 3807 00bf 00       		.byte	0
 3808 00c0 49       		.uleb128 0x49
 3809 00c1 13       		.uleb128 0x13
 3810 00c2 2F       		.uleb128 0x2f
 3811 00c3 0B       		.uleb128 0xb
 3812 00c4 00       		.byte	0
 3813 00c5 00       		.byte	0
 3814 00c6 11       		.uleb128 0x11
 3815 00c7 13       		.uleb128 0x13
 3816 00c8 01       		.byte	0x1
 3817 00c9 0B       		.uleb128 0xb
 3818 00ca 0B       		.uleb128 0xb
 3819 00cb 3A       		.uleb128 0x3a
 3820 00cc 0B       		.uleb128 0xb
 3821 00cd 3B       		.uleb128 0x3b
 3822 00ce 05       		.uleb128 0x5
 3823 00cf 01       		.uleb128 0x1
 3824 00d0 13       		.uleb128 0x13
 3825 00d1 00       		.byte	0
 3826 00d2 00       		.byte	0
 3827 00d3 12       		.uleb128 0x12
 3828 00d4 0D       		.uleb128 0xd
 3829 00d5 00       		.byte	0
 3830 00d6 03       		.uleb128 0x3
 3831 00d7 0E       		.uleb128 0xe
 3832 00d8 3A       		.uleb128 0x3a
 3833 00d9 0B       		.uleb128 0xb
 3834 00da 3B       		.uleb128 0x3b
 3835 00db 05       		.uleb128 0x5
 3836 00dc 49       		.uleb128 0x49
 3837 00dd 13       		.uleb128 0x13
 3838 00de 38       		.uleb128 0x38
 3839 00df 0B       		.uleb128 0xb
 3840 00e0 00       		.byte	0
 3841 00e1 00       		.byte	0
 3842 00e2 13       		.uleb128 0x13
 3843 00e3 0D       		.uleb128 0xd
 3844 00e4 00       		.byte	0
 3845 00e5 03       		.uleb128 0x3
 3846 00e6 08       		.uleb128 0x8
 3847 00e7 3A       		.uleb128 0x3a
 3848 00e8 0B       		.uleb128 0xb
 3849 00e9 3B       		.uleb128 0x3b
 3850 00ea 05       		.uleb128 0x5
 3851 00eb 49       		.uleb128 0x49
 3852 00ec 13       		.uleb128 0x13
 3853 00ed 38       		.uleb128 0x38
 3854 00ee 0B       		.uleb128 0xb
 3855 00ef 00       		.byte	0
 3856 00f0 00       		.byte	0
 3857 00f1 14       		.uleb128 0x14
 3858 00f2 04       		.uleb128 0x4
 3859 00f3 01       		.byte	0x1
 3860 00f4 0B       		.uleb128 0xb
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 94


 3861 00f5 0B       		.uleb128 0xb
 3862 00f6 49       		.uleb128 0x49
 3863 00f7 13       		.uleb128 0x13
 3864 00f8 3A       		.uleb128 0x3a
 3865 00f9 0B       		.uleb128 0xb
 3866 00fa 3B       		.uleb128 0x3b
 3867 00fb 05       		.uleb128 0x5
 3868 00fc 01       		.uleb128 0x1
 3869 00fd 13       		.uleb128 0x13
 3870 00fe 00       		.byte	0
 3871 00ff 00       		.byte	0
 3872 0100 15       		.uleb128 0x15
 3873 0101 2E       		.uleb128 0x2e
 3874 0102 01       		.byte	0x1
 3875 0103 3F       		.uleb128 0x3f
 3876 0104 19       		.uleb128 0x19
 3877 0105 03       		.uleb128 0x3
 3878 0106 0E       		.uleb128 0xe
 3879 0107 3A       		.uleb128 0x3a
 3880 0108 0B       		.uleb128 0xb
 3881 0109 3B       		.uleb128 0x3b
 3882 010a 05       		.uleb128 0x5
 3883 010b 27       		.uleb128 0x27
 3884 010c 19       		.uleb128 0x19
 3885 010d 11       		.uleb128 0x11
 3886 010e 01       		.uleb128 0x1
 3887 010f 12       		.uleb128 0x12
 3888 0110 06       		.uleb128 0x6
 3889 0111 40       		.uleb128 0x40
 3890 0112 18       		.uleb128 0x18
 3891 0113 9742     		.uleb128 0x2117
 3892 0115 19       		.uleb128 0x19
 3893 0116 01       		.uleb128 0x1
 3894 0117 13       		.uleb128 0x13
 3895 0118 00       		.byte	0
 3896 0119 00       		.byte	0
 3897 011a 16       		.uleb128 0x16
 3898 011b 898201   		.uleb128 0x4109
 3899 011e 00       		.byte	0
 3900 011f 11       		.uleb128 0x11
 3901 0120 01       		.uleb128 0x1
 3902 0121 31       		.uleb128 0x31
 3903 0122 13       		.uleb128 0x13
 3904 0123 00       		.byte	0
 3905 0124 00       		.byte	0
 3906 0125 17       		.uleb128 0x17
 3907 0126 898201   		.uleb128 0x4109
 3908 0129 01       		.byte	0x1
 3909 012a 11       		.uleb128 0x11
 3910 012b 01       		.uleb128 0x1
 3911 012c 31       		.uleb128 0x31
 3912 012d 13       		.uleb128 0x13
 3913 012e 01       		.uleb128 0x1
 3914 012f 13       		.uleb128 0x13
 3915 0130 00       		.byte	0
 3916 0131 00       		.byte	0
 3917 0132 18       		.uleb128 0x18
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 95


 3918 0133 8A8201   		.uleb128 0x410a
 3919 0136 00       		.byte	0
 3920 0137 02       		.uleb128 0x2
 3921 0138 18       		.uleb128 0x18
 3922 0139 9142     		.uleb128 0x2111
 3923 013b 18       		.uleb128 0x18
 3924 013c 00       		.byte	0
 3925 013d 00       		.byte	0
 3926 013e 19       		.uleb128 0x19
 3927 013f 898201   		.uleb128 0x4109
 3928 0142 01       		.byte	0x1
 3929 0143 11       		.uleb128 0x11
 3930 0144 01       		.uleb128 0x1
 3931 0145 31       		.uleb128 0x31
 3932 0146 13       		.uleb128 0x13
 3933 0147 00       		.byte	0
 3934 0148 00       		.byte	0
 3935 0149 1A       		.uleb128 0x1a
 3936 014a 34       		.uleb128 0x34
 3937 014b 00       		.byte	0
 3938 014c 03       		.uleb128 0x3
 3939 014d 08       		.uleb128 0x8
 3940 014e 3A       		.uleb128 0x3a
 3941 014f 0B       		.uleb128 0xb
 3942 0150 3B       		.uleb128 0x3b
 3943 0151 05       		.uleb128 0x5
 3944 0152 49       		.uleb128 0x49
 3945 0153 13       		.uleb128 0x13
 3946 0154 02       		.uleb128 0x2
 3947 0155 17       		.uleb128 0x17
 3948 0156 00       		.byte	0
 3949 0157 00       		.byte	0
 3950 0158 1B       		.uleb128 0x1b
 3951 0159 05       		.uleb128 0x5
 3952 015a 00       		.byte	0
 3953 015b 03       		.uleb128 0x3
 3954 015c 0E       		.uleb128 0xe
 3955 015d 3A       		.uleb128 0x3a
 3956 015e 0B       		.uleb128 0xb
 3957 015f 3B       		.uleb128 0x3b
 3958 0160 05       		.uleb128 0x5
 3959 0161 49       		.uleb128 0x49
 3960 0162 13       		.uleb128 0x13
 3961 0163 02       		.uleb128 0x2
 3962 0164 17       		.uleb128 0x17
 3963 0165 00       		.byte	0
 3964 0166 00       		.byte	0
 3965 0167 1C       		.uleb128 0x1c
 3966 0168 05       		.uleb128 0x5
 3967 0169 00       		.byte	0
 3968 016a 03       		.uleb128 0x3
 3969 016b 0E       		.uleb128 0xe
 3970 016c 3A       		.uleb128 0x3a
 3971 016d 0B       		.uleb128 0xb
 3972 016e 3B       		.uleb128 0x3b
 3973 016f 05       		.uleb128 0x5
 3974 0170 49       		.uleb128 0x49
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 96


 3975 0171 13       		.uleb128 0x13
 3976 0172 02       		.uleb128 0x2
 3977 0173 18       		.uleb128 0x18
 3978 0174 00       		.byte	0
 3979 0175 00       		.byte	0
 3980 0176 1D       		.uleb128 0x1d
 3981 0177 2E       		.uleb128 0x2e
 3982 0178 01       		.byte	0x1
 3983 0179 3F       		.uleb128 0x3f
 3984 017a 19       		.uleb128 0x19
 3985 017b 03       		.uleb128 0x3
 3986 017c 0E       		.uleb128 0xe
 3987 017d 3A       		.uleb128 0x3a
 3988 017e 0B       		.uleb128 0xb
 3989 017f 3B       		.uleb128 0x3b
 3990 0180 05       		.uleb128 0x5
 3991 0181 27       		.uleb128 0x27
 3992 0182 19       		.uleb128 0x19
 3993 0183 11       		.uleb128 0x11
 3994 0184 01       		.uleb128 0x1
 3995 0185 12       		.uleb128 0x12
 3996 0186 06       		.uleb128 0x6
 3997 0187 40       		.uleb128 0x40
 3998 0188 18       		.uleb128 0x18
 3999 0189 9642     		.uleb128 0x2116
 4000 018b 19       		.uleb128 0x19
 4001 018c 01       		.uleb128 0x1
 4002 018d 13       		.uleb128 0x13
 4003 018e 00       		.byte	0
 4004 018f 00       		.byte	0
 4005 0190 1E       		.uleb128 0x1e
 4006 0191 2E       		.uleb128 0x2e
 4007 0192 01       		.byte	0x1
 4008 0193 3F       		.uleb128 0x3f
 4009 0194 19       		.uleb128 0x19
 4010 0195 03       		.uleb128 0x3
 4011 0196 0E       		.uleb128 0xe
 4012 0197 3A       		.uleb128 0x3a
 4013 0198 0B       		.uleb128 0xb
 4014 0199 3B       		.uleb128 0x3b
 4015 019a 05       		.uleb128 0x5
 4016 019b 27       		.uleb128 0x27
 4017 019c 19       		.uleb128 0x19
 4018 019d 49       		.uleb128 0x49
 4019 019e 13       		.uleb128 0x13
 4020 019f 11       		.uleb128 0x11
 4021 01a0 01       		.uleb128 0x1
 4022 01a1 12       		.uleb128 0x12
 4023 01a2 06       		.uleb128 0x6
 4024 01a3 40       		.uleb128 0x40
 4025 01a4 18       		.uleb128 0x18
 4026 01a5 9742     		.uleb128 0x2117
 4027 01a7 19       		.uleb128 0x19
 4028 01a8 01       		.uleb128 0x1
 4029 01a9 13       		.uleb128 0x13
 4030 01aa 00       		.byte	0
 4031 01ab 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 97


 4032 01ac 1F       		.uleb128 0x1f
 4033 01ad 34       		.uleb128 0x34
 4034 01ae 00       		.byte	0
 4035 01af 03       		.uleb128 0x3
 4036 01b0 0E       		.uleb128 0xe
 4037 01b1 3A       		.uleb128 0x3a
 4038 01b2 0B       		.uleb128 0xb
 4039 01b3 3B       		.uleb128 0x3b
 4040 01b4 05       		.uleb128 0x5
 4041 01b5 49       		.uleb128 0x49
 4042 01b6 13       		.uleb128 0x13
 4043 01b7 02       		.uleb128 0x2
 4044 01b8 18       		.uleb128 0x18
 4045 01b9 00       		.byte	0
 4046 01ba 00       		.byte	0
 4047 01bb 20       		.uleb128 0x20
 4048 01bc 34       		.uleb128 0x34
 4049 01bd 00       		.byte	0
 4050 01be 03       		.uleb128 0x3
 4051 01bf 0E       		.uleb128 0xe
 4052 01c0 3A       		.uleb128 0x3a
 4053 01c1 0B       		.uleb128 0xb
 4054 01c2 3B       		.uleb128 0x3b
 4055 01c3 05       		.uleb128 0x5
 4056 01c4 49       		.uleb128 0x49
 4057 01c5 13       		.uleb128 0x13
 4058 01c6 02       		.uleb128 0x2
 4059 01c7 17       		.uleb128 0x17
 4060 01c8 00       		.byte	0
 4061 01c9 00       		.byte	0
 4062 01ca 21       		.uleb128 0x21
 4063 01cb 34       		.uleb128 0x34
 4064 01cc 00       		.byte	0
 4065 01cd 03       		.uleb128 0x3
 4066 01ce 0E       		.uleb128 0xe
 4067 01cf 3A       		.uleb128 0x3a
 4068 01d0 0B       		.uleb128 0xb
 4069 01d1 3B       		.uleb128 0x3b
 4070 01d2 05       		.uleb128 0x5
 4071 01d3 49       		.uleb128 0x49
 4072 01d4 13       		.uleb128 0x13
 4073 01d5 1C       		.uleb128 0x1c
 4074 01d6 0B       		.uleb128 0xb
 4075 01d7 00       		.byte	0
 4076 01d8 00       		.byte	0
 4077 01d9 22       		.uleb128 0x22
 4078 01da 26       		.uleb128 0x26
 4079 01db 00       		.byte	0
 4080 01dc 49       		.uleb128 0x49
 4081 01dd 13       		.uleb128 0x13
 4082 01de 00       		.byte	0
 4083 01df 00       		.byte	0
 4084 01e0 23       		.uleb128 0x23
 4085 01e1 2E       		.uleb128 0x2e
 4086 01e2 01       		.byte	0x1
 4087 01e3 3F       		.uleb128 0x3f
 4088 01e4 19       		.uleb128 0x19
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 98


 4089 01e5 03       		.uleb128 0x3
 4090 01e6 0E       		.uleb128 0xe
 4091 01e7 3A       		.uleb128 0x3a
 4092 01e8 0B       		.uleb128 0xb
 4093 01e9 3B       		.uleb128 0x3b
 4094 01ea 05       		.uleb128 0x5
 4095 01eb 27       		.uleb128 0x27
 4096 01ec 19       		.uleb128 0x19
 4097 01ed 49       		.uleb128 0x49
 4098 01ee 13       		.uleb128 0x13
 4099 01ef 8701     		.uleb128 0x87
 4100 01f1 19       		.uleb128 0x19
 4101 01f2 11       		.uleb128 0x11
 4102 01f3 01       		.uleb128 0x1
 4103 01f4 12       		.uleb128 0x12
 4104 01f5 06       		.uleb128 0x6
 4105 01f6 40       		.uleb128 0x40
 4106 01f7 18       		.uleb128 0x18
 4107 01f8 9742     		.uleb128 0x2117
 4108 01fa 19       		.uleb128 0x19
 4109 01fb 01       		.uleb128 0x1
 4110 01fc 13       		.uleb128 0x13
 4111 01fd 00       		.byte	0
 4112 01fe 00       		.byte	0
 4113 01ff 24       		.uleb128 0x24
 4114 0200 34       		.uleb128 0x34
 4115 0201 00       		.byte	0
 4116 0202 03       		.uleb128 0x3
 4117 0203 0E       		.uleb128 0xe
 4118 0204 3A       		.uleb128 0x3a
 4119 0205 0B       		.uleb128 0xb
 4120 0206 3B       		.uleb128 0x3b
 4121 0207 0B       		.uleb128 0xb
 4122 0208 49       		.uleb128 0x49
 4123 0209 13       		.uleb128 0x13
 4124 020a 3F       		.uleb128 0x3f
 4125 020b 19       		.uleb128 0x19
 4126 020c 3C       		.uleb128 0x3c
 4127 020d 19       		.uleb128 0x19
 4128 020e 00       		.byte	0
 4129 020f 00       		.byte	0
 4130 0210 25       		.uleb128 0x25
 4131 0211 34       		.uleb128 0x34
 4132 0212 00       		.byte	0
 4133 0213 03       		.uleb128 0x3
 4134 0214 0E       		.uleb128 0xe
 4135 0215 3A       		.uleb128 0x3a
 4136 0216 0B       		.uleb128 0xb
 4137 0217 3B       		.uleb128 0x3b
 4138 0218 0B       		.uleb128 0xb
 4139 0219 49       		.uleb128 0x49
 4140 021a 13       		.uleb128 0x13
 4141 021b 3F       		.uleb128 0x3f
 4142 021c 19       		.uleb128 0x19
 4143 021d 02       		.uleb128 0x2
 4144 021e 18       		.uleb128 0x18
 4145 021f 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 99


 4146 0220 00       		.byte	0
 4147 0221 26       		.uleb128 0x26
 4148 0222 34       		.uleb128 0x34
 4149 0223 00       		.byte	0
 4150 0224 03       		.uleb128 0x3
 4151 0225 08       		.uleb128 0x8
 4152 0226 3A       		.uleb128 0x3a
 4153 0227 0B       		.uleb128 0xb
 4154 0228 3B       		.uleb128 0x3b
 4155 0229 0B       		.uleb128 0xb
 4156 022a 49       		.uleb128 0x49
 4157 022b 13       		.uleb128 0x13
 4158 022c 3F       		.uleb128 0x3f
 4159 022d 19       		.uleb128 0x19
 4160 022e 02       		.uleb128 0x2
 4161 022f 18       		.uleb128 0x18
 4162 0230 00       		.byte	0
 4163 0231 00       		.byte	0
 4164 0232 27       		.uleb128 0x27
 4165 0233 34       		.uleb128 0x34
 4166 0234 00       		.byte	0
 4167 0235 03       		.uleb128 0x3
 4168 0236 0E       		.uleb128 0xe
 4169 0237 3A       		.uleb128 0x3a
 4170 0238 0B       		.uleb128 0xb
 4171 0239 3B       		.uleb128 0x3b
 4172 023a 05       		.uleb128 0x5
 4173 023b 49       		.uleb128 0x49
 4174 023c 13       		.uleb128 0x13
 4175 023d 3F       		.uleb128 0x3f
 4176 023e 19       		.uleb128 0x19
 4177 023f 02       		.uleb128 0x2
 4178 0240 18       		.uleb128 0x18
 4179 0241 00       		.byte	0
 4180 0242 00       		.byte	0
 4181 0243 28       		.uleb128 0x28
 4182 0244 2E       		.uleb128 0x2e
 4183 0245 00       		.byte	0
 4184 0246 3F       		.uleb128 0x3f
 4185 0247 19       		.uleb128 0x19
 4186 0248 3C       		.uleb128 0x3c
 4187 0249 19       		.uleb128 0x19
 4188 024a 6E       		.uleb128 0x6e
 4189 024b 0E       		.uleb128 0xe
 4190 024c 03       		.uleb128 0x3
 4191 024d 0E       		.uleb128 0xe
 4192 024e 3A       		.uleb128 0x3a
 4193 024f 0B       		.uleb128 0xb
 4194 0250 3B       		.uleb128 0x3b
 4195 0251 0B       		.uleb128 0xb
 4196 0252 00       		.byte	0
 4197 0253 00       		.byte	0
 4198 0254 29       		.uleb128 0x29
 4199 0255 2E       		.uleb128 0x2e
 4200 0256 00       		.byte	0
 4201 0257 3F       		.uleb128 0x3f
 4202 0258 19       		.uleb128 0x19
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 100


 4203 0259 3C       		.uleb128 0x3c
 4204 025a 19       		.uleb128 0x19
 4205 025b 6E       		.uleb128 0x6e
 4206 025c 0E       		.uleb128 0xe
 4207 025d 03       		.uleb128 0x3
 4208 025e 0E       		.uleb128 0xe
 4209 025f 00       		.byte	0
 4210 0260 00       		.byte	0
 4211 0261 2A       		.uleb128 0x2a
 4212 0262 2E       		.uleb128 0x2e
 4213 0263 00       		.byte	0
 4214 0264 3F       		.uleb128 0x3f
 4215 0265 19       		.uleb128 0x19
 4216 0266 3C       		.uleb128 0x3c
 4217 0267 19       		.uleb128 0x19
 4218 0268 6E       		.uleb128 0x6e
 4219 0269 0E       		.uleb128 0xe
 4220 026a 03       		.uleb128 0x3
 4221 026b 0E       		.uleb128 0xe
 4222 026c 3A       		.uleb128 0x3a
 4223 026d 0B       		.uleb128 0xb
 4224 026e 3B       		.uleb128 0x3b
 4225 026f 05       		.uleb128 0x5
 4226 0270 00       		.byte	0
 4227 0271 00       		.byte	0
 4228 0272 00       		.byte	0
 4229              		.section	.debug_loc,"",%progbits
 4230              	.Ldebug_loc0:
 4231              	.LLST0:
 4232 0000 2A000000 		.4byte	.LVL9
 4233 0004 2E000000 		.4byte	.LVL10
 4234 0008 0200     		.2byte	0x2
 4235 000a 30       		.byte	0x30
 4236 000b 9F       		.byte	0x9f
 4237 000c 2E000000 		.4byte	.LVL10
 4238 0010 4A000000 		.4byte	.LVL15
 4239 0014 0100     		.2byte	0x1
 4240 0016 54       		.byte	0x54
 4241 0017 00000000 		.4byte	0
 4242 001b 00000000 		.4byte	0
 4243              	.LLST1:
 4244 001f 00000000 		.4byte	.LVL16
 4245 0023 12000000 		.4byte	.LVL17
 4246 0027 0100     		.2byte	0x1
 4247 0029 50       		.byte	0x50
 4248 002a 12000000 		.4byte	.LVL17
 4249 002e 1C000000 		.4byte	.LFE32
 4250 0032 0400     		.2byte	0x4
 4251 0034 F3       		.byte	0xf3
 4252 0035 01       		.uleb128 0x1
 4253 0036 50       		.byte	0x50
 4254 0037 9F       		.byte	0x9f
 4255 0038 00000000 		.4byte	0
 4256 003c 00000000 		.4byte	0
 4257              	.LLST2:
 4258 0040 08000000 		.4byte	.LVL19
 4259 0044 0B000000 		.4byte	.LVL20-1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 101


 4260 0048 0100     		.2byte	0x1
 4261 004a 50       		.byte	0x50
 4262 004b 00000000 		.4byte	0
 4263 004f 00000000 		.4byte	0
 4264              	.LLST3:
 4265 0053 00000000 		.4byte	.LVL21
 4266 0057 0A000000 		.4byte	.LVL22
 4267 005b 0100     		.2byte	0x1
 4268 005d 50       		.byte	0x50
 4269 005e 0A000000 		.4byte	.LVL22
 4270 0062 0D000000 		.4byte	.LVL23-1
 4271 0066 0400     		.2byte	0x4
 4272 0068 70       		.byte	0x70
 4273 0069 E079     		.sleb128 -800
 4274 006b 9F       		.byte	0x9f
 4275 006c 0D000000 		.4byte	.LVL23-1
 4276 0070 10000000 		.4byte	.LFE36
 4277 0074 0400     		.2byte	0x4
 4278 0076 F3       		.byte	0xf3
 4279 0077 01       		.uleb128 0x1
 4280 0078 50       		.byte	0x50
 4281 0079 9F       		.byte	0x9f
 4282 007a 00000000 		.4byte	0
 4283 007e 00000000 		.4byte	0
 4284              	.LLST4:
 4285 0082 1C000000 		.4byte	.LVL26
 4286 0086 F4000000 		.4byte	.LVL43
 4287 008a 0100     		.2byte	0x1
 4288 008c 54       		.byte	0x54
 4289 008d 5C010000 		.4byte	.LVL50
 4290 0091 5E010000 		.4byte	.LVL51
 4291 0095 0100     		.2byte	0x1
 4292 0097 54       		.byte	0x54
 4293 0098 5E010000 		.4byte	.LVL51
 4294 009c 79010000 		.4byte	.LVL54-1
 4295 00a0 0200     		.2byte	0x2
 4296 00a2 74       		.byte	0x74
 4297 00a3 02       		.sleb128 2
 4298 00a4 00000000 		.4byte	0
 4299 00a8 00000000 		.4byte	0
 4300              	.LLST5:
 4301 00ac 1A000000 		.4byte	.LVL25
 4302 00b0 6B000000 		.4byte	.LVL37-1
 4303 00b4 0100     		.2byte	0x1
 4304 00b6 50       		.byte	0x50
 4305 00b7 B8000000 		.4byte	.LVL39
 4306 00bb BA000000 		.4byte	.LVL40
 4307 00bf 0100     		.2byte	0x1
 4308 00c1 50       		.byte	0x50
 4309 00c2 5C010000 		.4byte	.LVL50
 4310 00c6 6A010000 		.4byte	.LVL53
 4311 00ca 0100     		.2byte	0x1
 4312 00cc 50       		.byte	0x50
 4313 00cd 00000000 		.4byte	0
 4314 00d1 00000000 		.4byte	0
 4315              	.LLST6:
 4316 00d5 22000000 		.4byte	.LVL27
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 102


 4317 00d9 28000000 		.4byte	.LVL28
 4318 00dd 0200     		.2byte	0x2
 4319 00df 30       		.byte	0x30
 4320 00e0 9F       		.byte	0x9f
 4321 00e1 28000000 		.4byte	.LVL28
 4322 00e5 32000000 		.4byte	.LVL31
 4323 00e9 0100     		.2byte	0x1
 4324 00eb 53       		.byte	0x53
 4325 00ec 34000000 		.4byte	.LVL32
 4326 00f0 3E000000 		.4byte	.LVL33
 4327 00f4 0100     		.2byte	0x1
 4328 00f6 53       		.byte	0x53
 4329 00f7 50000000 		.4byte	.LVL35
 4330 00fb 52000000 		.4byte	.LVL36
 4331 00ff 0100     		.2byte	0x1
 4332 0101 53       		.byte	0x53
 4333 0102 34020000 		.4byte	.LVL56
 4334 0106 3A020000 		.4byte	.LVL57
 4335 010a 0200     		.2byte	0x2
 4336 010c 30       		.byte	0x30
 4337 010d 9F       		.byte	0x9f
 4338 010e 3A020000 		.4byte	.LVL57
 4339 0112 44020000 		.4byte	.LVL60
 4340 0116 0100     		.2byte	0x1
 4341 0118 53       		.byte	0x53
 4342 0119 46020000 		.4byte	.LVL61
 4343 011d 55020000 		.4byte	.LVL63-1
 4344 0121 0100     		.2byte	0x1
 4345 0123 53       		.byte	0x53
 4346 0124 00000000 		.4byte	0
 4347 0128 00000000 		.4byte	0
 4348              	.LLST7:
 4349 012c 22000000 		.4byte	.LVL27
 4350 0130 28000000 		.4byte	.LVL28
 4351 0134 0200     		.2byte	0x2
 4352 0136 30       		.byte	0x30
 4353 0137 9F       		.byte	0x9f
 4354 0138 28000000 		.4byte	.LVL28
 4355 013c 2E000000 		.4byte	.LVL29
 4356 0140 0100     		.2byte	0x1
 4357 0142 52       		.byte	0x52
 4358 0143 30000000 		.4byte	.LVL30
 4359 0147 42000000 		.4byte	.LVL34
 4360 014b 0100     		.2byte	0x1
 4361 014d 52       		.byte	0x52
 4362 014e 50000000 		.4byte	.LVL35
 4363 0152 6B000000 		.4byte	.LVL37-1
 4364 0156 0100     		.2byte	0x1
 4365 0158 52       		.byte	0x52
 4366 0159 B8000000 		.4byte	.LVL39
 4367 015d C0000000 		.4byte	.LVL41
 4368 0161 0100     		.2byte	0x1
 4369 0163 52       		.byte	0x52
 4370 0164 5C010000 		.4byte	.LVL50
 4371 0168 68010000 		.4byte	.LVL52
 4372 016c 0100     		.2byte	0x1
 4373 016e 52       		.byte	0x52
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 103


 4374 016f 34020000 		.4byte	.LVL56
 4375 0173 3A020000 		.4byte	.LVL57
 4376 0177 0200     		.2byte	0x2
 4377 0179 30       		.byte	0x30
 4378 017a 9F       		.byte	0x9f
 4379 017b 3A020000 		.4byte	.LVL57
 4380 017f 40020000 		.4byte	.LVL58
 4381 0183 0100     		.2byte	0x1
 4382 0185 52       		.byte	0x52
 4383 0186 42020000 		.4byte	.LVL59
 4384 018a 4E020000 		.4byte	.LVL62
 4385 018e 0100     		.2byte	0x1
 4386 0190 52       		.byte	0x52
 4387 0191 00000000 		.4byte	0
 4388 0195 00000000 		.4byte	0
 4389              	.LLST8:
 4390 0199 24010000 		.4byte	.LVL45
 4391 019d 34010000 		.4byte	.LVL47
 4392 01a1 0100     		.2byte	0x1
 4393 01a3 53       		.byte	0x53
 4394 01a4 44010000 		.4byte	.LVL48
 4395 01a8 48010000 		.4byte	.LVL49
 4396 01ac 0100     		.2byte	0x1
 4397 01ae 53       		.byte	0x53
 4398 01af 00000000 		.4byte	0
 4399 01b3 00000000 		.4byte	0
 4400              	.LLST9:
 4401 01b7 00000000 		.4byte	.LVL66
 4402 01bb 1B000000 		.4byte	.LVL68-1
 4403 01bf 0100     		.2byte	0x1
 4404 01c1 50       		.byte	0x50
 4405 01c2 1B000000 		.4byte	.LVL68-1
 4406 01c6 28000000 		.4byte	.LFE39
 4407 01ca 0400     		.2byte	0x4
 4408 01cc F3       		.byte	0xf3
 4409 01cd 01       		.uleb128 0x1
 4410 01ce 50       		.byte	0x50
 4411 01cf 9F       		.byte	0x9f
 4412 01d0 00000000 		.4byte	0
 4413 01d4 00000000 		.4byte	0
 4414              	.LLST10:
 4415 01d8 0A000000 		.4byte	.LVL67
 4416 01dc 22000000 		.4byte	.LVL69
 4417 01e0 0100     		.2byte	0x1
 4418 01e2 54       		.byte	0x54
 4419 01e3 22000000 		.4byte	.LVL69
 4420 01e7 28000000 		.4byte	.LFE39
 4421 01eb 0500     		.2byte	0x5
 4422 01ed 03       		.byte	0x3
 4423 01ee 00000000 		.4byte	inAuto
 4424 01f2 00000000 		.4byte	0
 4425 01f6 00000000 		.4byte	0
 4426              		.section	.debug_aranges,"",%progbits
 4427 0000 84000000 		.4byte	0x84
 4428 0004 0200     		.2byte	0x2
 4429 0006 00000000 		.4byte	.Ldebug_info0
 4430 000a 04       		.byte	0x4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 104


 4431 000b 00       		.byte	0
 4432 000c 0000     		.2byte	0
 4433 000e 0000     		.2byte	0
 4434 0010 00000000 		.4byte	.LFB43
 4435 0014 24000000 		.4byte	.LFE43-.LFB43
 4436 0018 00000000 		.4byte	.LFB44
 4437 001c 1C000000 		.4byte	.LFE44-.LFB44
 4438 0020 00000000 		.4byte	.LFB45
 4439 0024 60000000 		.4byte	.LFE45-.LFB45
 4440 0028 00000000 		.4byte	.LFB32
 4441 002c 1C000000 		.4byte	.LFE32-.LFB32
 4442 0030 00000000 		.4byte	.LFB33
 4443 0034 1C000000 		.4byte	.LFE33-.LFB33
 4444 0038 00000000 		.4byte	.LFB34
 4445 003c 18000000 		.4byte	.LFE34-.LFB34
 4446 0040 00000000 		.4byte	.LFB36
 4447 0044 10000000 		.4byte	.LFE36-.LFB36
 4448 0048 00000000 		.4byte	.LFB37
 4449 004c 44000000 		.4byte	.LFE37-.LFB37
 4450 0050 00000000 		.4byte	.LFB35
 4451 0054 C4020000 		.4byte	.LFE35-.LFB35
 4452 0058 00000000 		.4byte	.LFB38
 4453 005c 30000000 		.4byte	.LFE38-.LFB38
 4454 0060 00000000 		.4byte	.LFB39
 4455 0064 28000000 		.4byte	.LFE39-.LFB39
 4456 0068 00000000 		.4byte	.LFB40
 4457 006c 64010000 		.4byte	.LFE40-.LFB40
 4458 0070 00000000 		.4byte	.LFB42
 4459 0074 BC000000 		.4byte	.LFE42-.LFB42
 4460 0078 00000000 		.4byte	.LFB41
 4461 007c 44010000 		.4byte	.LFE41-.LFB41
 4462 0080 00000000 		.4byte	0
 4463 0084 00000000 		.4byte	0
 4464              		.section	.debug_ranges,"",%progbits
 4465              	.Ldebug_ranges0:
 4466 0000 00000000 		.4byte	.LFB43
 4467 0004 24000000 		.4byte	.LFE43
 4468 0008 00000000 		.4byte	.LFB44
 4469 000c 1C000000 		.4byte	.LFE44
 4470 0010 00000000 		.4byte	.LFB45
 4471 0014 60000000 		.4byte	.LFE45
 4472 0018 00000000 		.4byte	.LFB32
 4473 001c 1C000000 		.4byte	.LFE32
 4474 0020 00000000 		.4byte	.LFB33
 4475 0024 1C000000 		.4byte	.LFE33
 4476 0028 00000000 		.4byte	.LFB34
 4477 002c 18000000 		.4byte	.LFE34
 4478 0030 00000000 		.4byte	.LFB36
 4479 0034 10000000 		.4byte	.LFE36
 4480 0038 00000000 		.4byte	.LFB37
 4481 003c 44000000 		.4byte	.LFE37
 4482 0040 00000000 		.4byte	.LFB35
 4483 0044 C4020000 		.4byte	.LFE35
 4484 0048 00000000 		.4byte	.LFB38
 4485 004c 30000000 		.4byte	.LFE38
 4486 0050 00000000 		.4byte	.LFB39
 4487 0054 28000000 		.4byte	.LFE39
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 105


 4488 0058 00000000 		.4byte	.LFB40
 4489 005c 64010000 		.4byte	.LFE40
 4490 0060 00000000 		.4byte	.LFB42
 4491 0064 BC000000 		.4byte	.LFE42
 4492 0068 00000000 		.4byte	.LFB41
 4493 006c 44010000 		.4byte	.LFE41
 4494 0070 00000000 		.4byte	0
 4495 0074 00000000 		.4byte	0
 4496              		.section	.debug_line,"",%progbits
 4497              	.Ldebug_line0:
 4498 0000 A0040000 		.section	.debug_str,"MS",%progbits,1
 4498      02007902 
 4498      00000201 
 4498      FB0E0D00 
 4498      01010101 
 4499              	.LASF173:
 4500 0000 43794465 		.ascii	"CyDelay\000"
 4500      6C617900 
 4501              	.LASF140:
 4502 0008 72784D65 		.ascii	"rxMessage\000"
 4502      73736167 
 4502      6500
 4503              	.LASF182:
 4504 0012 6D61696E 		.ascii	"main.c\000"
 4504      2E6300
 4505              	.LASF78:
 4506 0019 6D6F746F 		.ascii	"motor_current\000"
 4506      725F6375 
 4506      7272656E 
 4506      7400
 4507              	.LASF110:
 4508 0027 62726D73 		.ascii	"brmsRG4Mask\000"
 4508      5247344D 
 4508      61736B00 
 4509              	.LASF84:
 4510 0033 74786D73 		.ascii	"txmsClear\000"
 4510      436C6561 
 4510      7200
 4511              	.LASF94:
 4512 003d 6F757470 		.ascii	"output\000"
 4512      757400
 4513              	.LASF92:
 4514 0044 4D6F746F 		.ascii	"MotorCurrentRead\000"
 4514      72437572 
 4514      72656E74 
 4514      52656164 
 4514      00
 4515              	.LASF106:
 4516 0055 62726D73 		.ascii	"brmsTask\000"
 4516      5461736B 
 4516      00
 4517              	.LASF61:
 4518 005e 65666673 		.ascii	"effsetdelta\000"
 4518      65746465 
 4518      6C746100 
 4519              	.LASF37:
 4520 006a 6673456E 		.ascii	"fsEncoder\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 106


 4520      636F6465 
 4520      7200
 4521              	.LASF31:
 4522 0074 6373556E 		.ascii	"csUnconfig\000"
 4522      636F6E66 
 4522      696700
 4523              	.LASF102:
 4524 007f 6E657741 		.ascii	"newAuto\000"
 4524      75746F00 
 4525              	.LASF15:
 4526 0087 756E7369 		.ascii	"unsigned int\000"
 4526      676E6564 
 4526      20696E74 
 4526      00
 4527              	.LASF107:
 4528 0094 62726D73 		.ascii	"brmsRG1Mask\000"
 4528      5247314D 
 4528      61736B00 
 4529              	.LASF177:
 4530 00a0 436F756E 		.ascii	"Counter_1_Start\000"
 4530      7465725F 
 4530      315F5374 
 4530      61727400 
 4531              	.LASF104:
 4532 00b0 72756E52 		.ascii	"runRateGroup1_PID\000"
 4532      61746547 
 4532      726F7570 
 4532      315F5049 
 4532      4400
 4533              	.LASF65:
 4534 00c2 636C6561 		.ascii	"clearfaults\000"
 4534      72666175 
 4534      6C747300 
 4535              	.LASF8:
 4536 00ce 5F5F696E 		.ascii	"__int32_t\000"
 4536      7433325F 
 4536      7400
 4537              	.LASF148:
 4538 00d8 484F4D45 		.ascii	"HOME_IN_ClearInterrupt\000"
 4538      5F494E5F 
 4538      436C6561 
 4538      72496E74 
 4538      65727275 
 4539              	.LASF180:
 4540 00ef 4C45445F 		.ascii	"LED_Write\000"
 4540      57726974 
 4540      6500
 4541              	.LASF88:
 4542 00f9 486F6D65 		.ascii	"HomeIsrHandler\000"
 4542      49737248 
 4542      616E646C 
 4542      657200
 4543              	.LASF86:
 4544 0108 74784D65 		.ascii	"txMessageStates_t\000"
 4544      73736167 
 4544      65537461 
 4544      7465735F 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 107


 4544      7400
 4545              	.LASF91:
 4546 011a 436C6561 		.ascii	"ClearFault\000"
 4546      72466175 
 4546      6C7400
 4547              	.LASF172:
 4548 0125 4932435F 		.ascii	"I2C_Start\000"
 4548      53746172 
 4548      7400
 4549              	.LASF125:
 4550 012f 4C617374 		.ascii	"LastMoveStableCount\000"
 4550      4D6F7665 
 4550      53746162 
 4550      6C65436F 
 4550      756E7400 
 4551              	.LASF32:
 4552 0143 63735265 		.ascii	"csReady\000"
 4552      61647900 
 4553              	.LASF153:
 4554 014b 5350495F 		.ascii	"SPI_1_SpiUartClearTxBuffer\000"
 4554      315F5370 
 4554      69556172 
 4554      74436C65 
 4554      61725478 
 4555              	.LASF21:
 4556 0166 75696E74 		.ascii	"uint32_t\000"
 4556      33325F74 
 4556      00
 4557              	.LASF16:
 4558 016f 696E7438 		.ascii	"int8_t\000"
 4558      5F7400
 4559              	.LASF50:
 4560 0176 72784D65 		.ascii	"rxMessage_opcodes_t\000"
 4560      73736167 
 4560      655F6F70 
 4560      636F6465 
 4560      735F7400 
 4561              	.LASF66:
 4562 018a 72784D65 		.ascii	"rxMessage_status_t\000"
 4562      73736167 
 4562      655F7374 
 4562      61747573 
 4562      5F7400
 4563              	.LASF90:
 4564 019d 41737365 		.ascii	"AssertFault\000"
 4564      72744661 
 4564      756C7400 
 4565              	.LASF24:
 4566 01a9 666C6F61 		.ascii	"float\000"
 4566      7400
 4567              	.LASF170:
 4568 01af 6973725F 		.ascii	"isr_spi_ss_StartEx\000"
 4568      7370695F 
 4568      73735F53 
 4568      74617274 
 4568      457800
 4569              	.LASF51:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 108


 4570 01c2 63686563 		.ascii	"checksum\000"
 4570      6B73756D 
 4570      00
 4571              	.LASF71:
 4572 01cb 73657465 		.ascii	"setenc\000"
 4572      6E6300
 4573              	.LASF18:
 4574 01d2 696E7431 		.ascii	"int16_t\000"
 4574      365F7400 
 4575              	.LASF96:
 4576 01da 72657375 		.ascii	"result\000"
 4576      6C7400
 4577              	.LASF14:
 4578 01e1 6C6F6E67 		.ascii	"long long unsigned int\000"
 4578      206C6F6E 
 4578      6720756E 
 4578      7369676E 
 4578      65642069 
 4579              	.LASF117:
 4580 01f8 5049445F 		.ascii	"PID_EffSetDelta\000"
 4580      45666653 
 4580      65744465 
 4580      6C746100 
 4581              	.LASF118:
 4582 0208 6C617374 		.ascii	"lastTime\000"
 4582      54696D65 
 4582      00
 4583              	.LASF137:
 4584 0211 4D6F746F 		.ascii	"MotorCurrent\000"
 4584      72437572 
 4584      72656E74 
 4584      00
 4585              	.LASF6:
 4586 021e 5F5F7569 		.ascii	"__uint16_t\000"
 4586      6E743136 
 4586      5F7400
 4587              	.LASF63:
 4588 0229 656E6162 		.ascii	"enable\000"
 4588      6C6500
 4589              	.LASF176:
 4590 0230 50574D5F 		.ascii	"PWM_1_WritePeriod\000"
 4590      315F5772 
 4590      69746550 
 4590      6572696F 
 4590      6400
 4591              	.LASF133:
 4592 0242 436F6E66 		.ascii	"ConfigState\000"
 4592      69675374 
 4592      61746500 
 4593              	.LASF59:
 4594 024e 6C696D69 		.ascii	"limitOutput\000"
 4594      744F7574 
 4594      70757400 
 4595              	.LASF181:
 4596 025a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4596      43313120 
 4596      352E342E 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 109


 4596      31203230 
 4596      31363036 
 4597 028d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 4597      20726576 
 4597      6973696F 
 4597      6E203233 
 4597      37373135 
 4598 02c0 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 4598      66756E63 
 4598      74696F6E 
 4598      2D736563 
 4598      74696F6E 
 4599              	.LASF167:
 4600 02e8 6973725F 		.ascii	"isr_home_SetPriority\000"
 4600      686F6D65 
 4600      5F536574 
 4600      5072696F 
 4600      72697479 
 4601              	.LASF164:
 4602 02fd 6973725F 		.ascii	"isr_brms_StartEx\000"
 4602      62726D73 
 4602      5F537461 
 4602      72744578 
 4602      00
 4603              	.LASF163:
 4604 030e 54696D65 		.ascii	"Timer_BRMS_Start\000"
 4604      725F4252 
 4604      4D535F53 
 4604      74617274 
 4604      00
 4605              	.LASF103:
 4606 031f 5F426F6F 		.ascii	"_Bool\000"
 4606      6C00
 4607              	.LASF36:
 4608 0325 6673556E 		.ascii	"fsUnconfigured\000"
 4608      636F6E66 
 4608      69677572 
 4608      656400
 4609              	.LASF112:
 4610 0334 696E4175 		.ascii	"inAuto\000"
 4610      746F00
 4611              	.LASF13:
 4612 033b 5F5F7569 		.ascii	"__uint64_t\000"
 4612      6E743634 
 4612      5F7400
 4613              	.LASF157:
 4614 0346 5350495F 		.ascii	"SPI_1_SpiUartPutArray\000"
 4614      315F5370 
 4614      69556172 
 4614      74507574 
 4614      41727261 
 4615              	.LASF149:
 4616 035c 7370695F 		.ascii	"spi_ss_ClearInterrupt\000"
 4616      73735F43 
 4616      6C656172 
 4616      496E7465 
 4616      72727570 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 110


 4617              	.LASF130:
 4618 0372 55707469 		.ascii	"UptimeMilliseconds\000"
 4618      6D654D69 
 4618      6C6C6973 
 4618      65636F6E 
 4618      647300
 4619              	.LASF156:
 4620 0385 436F756E 		.ascii	"Counter_1_ReadCounter\000"
 4620      7465725F 
 4620      315F5265 
 4620      6164436F 
 4620      756E7465 
 4621              	.LASF72:
 4622 039b 76657273 		.ascii	"version0\000"
 4622      696F6E30 
 4622      00
 4623              	.LASF73:
 4624 03a4 76657273 		.ascii	"version1\000"
 4624      696F6E31 
 4624      00
 4625              	.LASF74:
 4626 03ad 76657273 		.ascii	"version2\000"
 4626      696F6E32 
 4626      00
 4627              	.LASF54:
 4628 03b6 72784D65 		.ascii	"rxMessage_overlay_t\000"
 4628      73736167 
 4628      655F6F76 
 4628      65726C61 
 4628      795F7400 
 4629              	.LASF119:
 4630 03ca 506F7369 		.ascii	"Position\000"
 4630      74696F6E 
 4630      00
 4631              	.LASF26:
 4632 03d3 63686172 		.ascii	"char\000"
 4632      00
 4633              	.LASF81:
 4634 03d8 6C617374 		.ascii	"last_move_time\000"
 4634      5F6D6F76 
 4634      655F7469 
 4634      6D6500
 4635              	.LASF160:
 4636 03e7 5049445F 		.ascii	"PID_UpdateValues\000"
 4636      55706461 
 4636      74655661 
 4636      6C756573 
 4636      00
 4637              	.LASF100:
 4638 03f8 5049445F 		.ascii	"PID_SetMode\000"
 4638      5365744D 
 4638      6F646500 
 4639              	.LASF93:
 4640 0404 50574D5F 		.ascii	"PWM_Set\000"
 4640      53657400 
 4641              	.LASF105:
 4642 040c 42524D53 		.ascii	"BRMS_Interrupt\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 111


 4642      5F496E74 
 4642      65727275 
 4642      707400
 4643              	.LASF152:
 4644 041b 5350495F 		.ascii	"SPI_1_SpiUartClearRxBuffer\000"
 4644      315F5370 
 4644      69556172 
 4644      74436C65 
 4644      61725278 
 4645              	.LASF53:
 4646 0436 6F70636F 		.ascii	"opcode\000"
 4646      646500
 4647              	.LASF60:
 4648 043d 6C696D69 		.ascii	"limitIterm\000"
 4648      74497465 
 4648      726D00
 4649              	.LASF17:
 4650 0448 75696E74 		.ascii	"uint8_t\000"
 4650      385F7400 
 4651              	.LASF70:
 4652 0450 73746174 		.ascii	"status\000"
 4652      757300
 4653              	.LASF38:
 4654 0457 6673496E 		.ascii	"fsIndex\000"
 4654      64657800 
 4655              	.LASF146:
 4656 045f 496E6465 		.ascii	"Index_Counter_1_WriteCounter\000"
 4656      785F436F 
 4656      756E7465 
 4656      725F315F 
 4656      57726974 
 4657              	.LASF155:
 4658 047c 50574D5F 		.ascii	"PWM_1_WriteCompare\000"
 4658      315F5772 
 4658      69746543 
 4658      6F6D7061 
 4658      726500
 4659              	.LASF35:
 4660 048f 66734E4F 		.ascii	"fsNONE\000"
 4660      4E4500
 4661              	.LASF143:
 4662 0496 6973725F 		.ascii	"isr_rst_encoder_ClearPending\000"
 4662      7273745F 
 4662      656E636F 
 4662      6465725F 
 4662      436C6561 
 4663              	.LASF171:
 4664 04b3 6973725F 		.ascii	"isr_spi_ss_SetPriority\000"
 4664      7370695F 
 4664      73735F53 
 4664      65745072 
 4664      696F7269 
 4665              	.LASF126:
 4666 04ca 4C617374 		.ascii	"LastMoveTimeUsec\000"
 4666      4D6F7665 
 4666      54696D65 
 4666      55736563 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 112


 4666      00
 4667              	.LASF12:
 4668 04db 6C6F6E67 		.ascii	"long long int\000"
 4668      206C6F6E 
 4668      6720696E 
 4668      7400
 4669              	.LASF161:
 4670 04e9 54696D65 		.ascii	"Timer_BRMS_ClearInterrupt\000"
 4670      725F4252 
 4670      4D535F43 
 4670      6C656172 
 4670      496E7465 
 4671              	.LASF40:
 4672 0503 66734368 		.ascii	"fsChecksum\000"
 4672      65636B73 
 4672      756D00
 4673              	.LASF150:
 4674 050e 7370695F 		.ascii	"spi_ss_Read\000"
 4674      73735F52 
 4674      65616400 
 4675              	.LASF82:
 4676 051a 69746572 		.ascii	"iterm_delay\000"
 4676      6D5F6465 
 4676      6C617900 
 4677              	.LASF4:
 4678 0526 5F5F696E 		.ascii	"__int16_t\000"
 4678      7431365F 
 4678      7400
 4679              	.LASF159:
 4680 0530 494E4445 		.ascii	"INDEX_OUT_SetDriveMode\000"
 4680      585F4F55 
 4680      545F5365 
 4680      74447269 
 4680      76654D6F 
 4681              	.LASF186:
 4682 0547 6D656D73 		.ascii	"memset\000"
 4682      657400
 4683              	.LASF131:
 4684 054e 55707469 		.ascii	"UptimeMillisecondsAccumulator\000"
 4684      6D654D69 
 4684      6C6C6973 
 4684      65636F6E 
 4684      64734163 
 4685              	.LASF77:
 4686 056c 63686563 		.ascii	"checksum_errors\000"
 4686      6B73756D 
 4686      5F657272 
 4686      6F727300 
 4687              	.LASF52:
 4688 057c 73697A65 		.ascii	"size\000"
 4688      00
 4689              	.LASF183:
 4690 0581 433A5C55 		.ascii	"C:\\Users\\prichards\\proj\\acsnb-motor-cypress\\Qu"
 4690      73657273 
 4690      5C707269 
 4690      63686172 
 4690      64735C70 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 113


 4691 05af 6164456E 		.ascii	"adEncoderRTOS.cydsn\000"
 4691      636F6465 
 4691      7252544F 
 4691      532E6379 
 4691      64736E00 
 4692              	.LASF23:
 4693 05c3 75696E74 		.ascii	"uint32\000"
 4693      333200
 4694              	.LASF85:
 4695 05ca 74786D73 		.ascii	"txmsLoaded\000"
 4695      4C6F6164 
 4695      656400
 4696              	.LASF138:
 4697 05d5 43757272 		.ascii	"CurrentI2Cinbuf\000"
 4697      656E7449 
 4697      3243696E 
 4697      62756600 
 4698              	.LASF151:
 4699 05e5 5350495F 		.ascii	"SPI_1_SpiUartReadRxData\000"
 4699      315F5370 
 4699      69556172 
 4699      74526561 
 4699      64527844 
 4700              	.LASF120:
 4701 05fd 4C617374 		.ascii	"LastPosition\000"
 4701      506F7369 
 4701      74696F6E 
 4701      00
 4702              	.LASF141:
 4703 060a 74784D65 		.ascii	"txMessage\000"
 4703      73736167 
 4703      6500
 4704              	.LASF145:
 4705 0614 436F756E 		.ascii	"Counter_1_WriteCounter\000"
 4705      7465725F 
 4705      315F5772 
 4705      69746543 
 4705      6F756E74 
 4706              	.LASF127:
 4707 062b 4E657743 		.ascii	"NewCommandedMove\000"
 4707      6F6D6D61 
 4707      6E646564 
 4707      4D6F7665 
 4707      00
 4708              	.LASF89:
 4709 063c 5350495F 		.ascii	"SPI_SS_IsrHandler\000"
 4709      53535F49 
 4709      73724861 
 4709      6E646C65 
 4709      7200
 4710              	.LASF0:
 4711 064e 5F5F696E 		.ascii	"__int8_t\000"
 4711      74385F74 
 4711      00
 4712              	.LASF34:
 4713 0657 436F6E66 		.ascii	"ConfigStates_t\000"
 4713      69675374 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 114


 4713      61746573 
 4713      5F7400
 4714              	.LASF97:
 4715 0666 72756E52 		.ascii	"runRateGroup3_SPI\000"
 4715      61746547 
 4715      726F7570 
 4715      335F5350 
 4715      4900
 4716              	.LASF165:
 4717 0678 6973725F 		.ascii	"isr_brms_SetPriority\000"
 4717      62726D73 
 4717      5F536574 
 4717      5072696F 
 4717      72697479 
 4718              	.LASF28:
 4719 068d 6C6F6E67 		.ascii	"long double\000"
 4719      20646F75 
 4719      626C6500 
 4720              	.LASF154:
 4721 0699 67657443 		.ascii	"getCurrent_mA\000"
 4721      75727265 
 4721      6E745F6D 
 4721      4100
 4722              	.LASF19:
 4723 06a7 75696E74 		.ascii	"uint16_t\000"
 4723      31365F74 
 4723      00
 4724              	.LASF27:
 4725 06b0 72656733 		.ascii	"reg32\000"
 4725      3200
 4726              	.LASF30:
 4727 06b6 6373554E 		.ascii	"csUNDEFINED\000"
 4727      44454649 
 4727      4E454400 
 4728              	.LASF55:
 4729 06c2 73657175 		.ascii	"sequence\000"
 4729      656E6365 
 4729      00
 4730              	.LASF121:
 4731 06cb 4F757470 		.ascii	"Output\000"
 4731      757400
 4732              	.LASF69:
 4733 06d2 636F6E66 		.ascii	"config\000"
 4733      696700
 4734              	.LASF39:
 4735 06d9 66734375 		.ascii	"fsCurrentRead\000"
 4735      7272656E 
 4735      74526561 
 4735      6400
 4736              	.LASF5:
 4737 06e7 73686F72 		.ascii	"short int\000"
 4737      7420696E 
 4737      7400
 4738              	.LASF62:
 4739 06f1 72784D65 		.ascii	"rxMessage_config_t\000"
 4739      73736167 
 4739      655F636F 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 115


 4739      6E666967 
 4739      5F7400
 4740              	.LASF114:
 4741 0704 5049445F 		.ascii	"PID_Was_Enabled\000"
 4741      5761735F 
 4741      456E6162 
 4741      6C656400 
 4742              	.LASF113:
 4743 0714 5049445F 		.ascii	"PID_Enabled\000"
 4743      456E6162 
 4743      6C656400 
 4744              	.LASF101:
 4745 0720 4D6F6465 		.ascii	"Mode\000"
 4745      00
 4746              	.LASF111:
 4747 0725 62726D73 		.ascii	"brmsRG5Mask\000"
 4747      5247354D 
 4747      61736B00 
 4748              	.LASF9:
 4749 0731 6C6F6E67 		.ascii	"long int\000"
 4749      20696E74 
 4749      00
 4750              	.LASF33:
 4751 073a 63734D41 		.ascii	"csMAX\000"
 4751      5800
 4752              	.LASF68:
 4753 0740 6F766572 		.ascii	"overlay\000"
 4753      6C617900 
 4754              	.LASF175:
 4755 0748 50574D5F 		.ascii	"PWM_1_Start\000"
 4755      315F5374 
 4755      61727400 
 4756              	.LASF123:
 4757 0754 4C617374 		.ascii	"LastMoveStartTimeUsec\000"
 4757      4D6F7665 
 4757      53746172 
 4757      7454696D 
 4757      65557365 
 4758              	.LASF98:
 4759 076a 64697374 		.ascii	"distance\000"
 4759      616E6365 
 4759      00
 4760              	.LASF158:
 4761 0773 484F4D45 		.ascii	"HOME_OUT_SetDriveMode\000"
 4761      5F4F5554 
 4761      5F536574 
 4761      44726976 
 4761      654D6F64 
 4762              	.LASF95:
 4763 0789 52617750 		.ascii	"RawPosition\000"
 4763      6F736974 
 4763      696F6E00 
 4764              	.LASF139:
 4765 0795 4C617374 		.ascii	"LastMessageTimeSeconds\000"
 4765      4D657373 
 4765      61676554 
 4765      696D6553 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 116


 4765      65636F6E 
 4766              	.LASF109:
 4767 07ac 62726D73 		.ascii	"brmsRG3Mask\000"
 4767      5247334D 
 4767      61736B00 
 4768              	.LASF83:
 4769 07b8 74784D65 		.ascii	"txMessage_t\000"
 4769      73736167 
 4769      655F7400 
 4770              	.LASF22:
 4771 07c4 75696E74 		.ascii	"uint64_t\000"
 4771      36345F74 
 4771      00
 4772              	.LASF64:
 4773 07cd 73657470 		.ascii	"setpoint\000"
 4773      6F696E74 
 4773      00
 4774              	.LASF108:
 4775 07d6 62726D73 		.ascii	"brmsRG2Mask\000"
 4775      5247324D 
 4775      61736B00 
 4776              	.LASF184:
 4777 07e2 47657450 		.ascii	"GetPosition\000"
 4777      6F736974 
 4777      696F6E00 
 4778              	.LASF132:
 4779 07ee 55707469 		.ascii	"UptimeSeconds\000"
 4779      6D655365 
 4779      636F6E64 
 4779      7300
 4780              	.LASF169:
 4781 07fc 6973725F 		.ascii	"isr_rst_encoder_SetPriority\000"
 4781      7273745F 
 4781      656E636F 
 4781      6465725F 
 4781      53657450 
 4782              	.LASF115:
 4783 0818 5049445F 		.ascii	"PID_Setpoint\000"
 4783      53657470 
 4783      6F696E74 
 4783      00
 4784              	.LASF1:
 4785 0825 5F5F7569 		.ascii	"__uint8_t\000"
 4785      6E74385F 
 4785      7400
 4786              	.LASF47:
 4787 082f 6F705374 		.ascii	"opStatus\000"
 4787      61747573 
 4787      00
 4788              	.LASF49:
 4789 0838 6F704D41 		.ascii	"opMAX\000"
 4789      5800
 4790              	.LASF136:
 4791 083e 43686563 		.ascii	"ChecksumErrors\000"
 4791      6B73756D 
 4791      4572726F 
 4791      727300
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 117


 4792              	.LASF29:
 4793 084d 73697A65 		.ascii	"sizetype\000"
 4793      74797065 
 4793      00
 4794              	.LASF11:
 4795 0856 6C6F6E67 		.ascii	"long unsigned int\000"
 4795      20756E73 
 4795      69676E65 
 4795      6420696E 
 4795      7400
 4796              	.LASF20:
 4797 0868 696E7433 		.ascii	"int32_t\000"
 4797      325F7400 
 4798              	.LASF128:
 4799 0870 55707469 		.ascii	"UptimeMicroseconds\000"
 4799      6D654D69 
 4799      63726F73 
 4799      65636F6E 
 4799      647300
 4800              	.LASF58:
 4801 0883 6F766572 		.ascii	"overrideKd\000"
 4801      72696465 
 4801      4B6400
 4802              	.LASF75:
 4803 088e 73746174 		.ascii	"state\000"
 4803      6500
 4804              	.LASF57:
 4805 0894 6F766572 		.ascii	"overrideKi\000"
 4805      72696465 
 4805      4B6900
 4806              	.LASF56:
 4807 089f 6F766572 		.ascii	"overrideKp\000"
 4807      72696465 
 4807      4B7000
 4808              	.LASF174:
 4809 08aa 5350495F 		.ascii	"SPI_1_Start\000"
 4809      315F5374 
 4809      61727400 
 4810              	.LASF3:
 4811 08b6 756E7369 		.ascii	"unsigned char\000"
 4811      676E6564 
 4811      20636861 
 4811      7200
 4812              	.LASF10:
 4813 08c4 5F5F7569 		.ascii	"__uint32_t\000"
 4813      6E743332 
 4813      5F7400
 4814              	.LASF45:
 4815 08cf 6F70554E 		.ascii	"opUNDEFINED\000"
 4815      44454649 
 4815      4E454400 
 4816              	.LASF48:
 4817 08db 6F705365 		.ascii	"opSetEnc\000"
 4817      74456E63 
 4817      00
 4818              	.LASF134:
 4819 08e4 4661756C 		.ascii	"FaultState\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 118


 4819      74537461 
 4819      746500
 4820              	.LASF179:
 4821 08ef 456E636F 		.ascii	"EncoderDirection_Write\000"
 4821      64657244 
 4821      69726563 
 4821      74696F6E 
 4821      5F577269 
 4822              	.LASF41:
 4823 0906 66735832 		.ascii	"fsX2\000"
 4823      00
 4824              	.LASF42:
 4825 090b 66735833 		.ascii	"fsX3\000"
 4825      00
 4826              	.LASF43:
 4827 0910 66735834 		.ascii	"fsX4\000"
 4827      00
 4828              	.LASF135:
 4829 0915 436F6E66 		.ascii	"ConfigSequence\000"
 4829      69675365 
 4829      7175656E 
 4829      636500
 4830              	.LASF122:
 4831 0924 686F6D69 		.ascii	"homingDone\000"
 4831      6E67446F 
 4831      6E6500
 4832              	.LASF124:
 4833 092f 4C617374 		.ascii	"LastMoveEndTimeUsec\000"
 4833      4D6F7665 
 4833      456E6454 
 4833      696D6555 
 4833      73656300 
 4834              	.LASF144:
 4835 0943 52657365 		.ascii	"Reset_Encoder_ClearInterrupt\000"
 4835      745F456E 
 4835      636F6465 
 4835      725F436C 
 4835      65617249 
 4836              	.LASF67:
 4837 0960 72784D65 		.ascii	"rxMessage_setenc_t\000"
 4837      73736167 
 4837      655F7365 
 4837      74656E63 
 4837      5F7400
 4838              	.LASF162:
 4839 0973 50524F42 		.ascii	"PROBE_Write\000"
 4839      455F5772 
 4839      69746500 
 4840              	.LASF166:
 4841 097f 6973725F 		.ascii	"isr_home_StartEx\000"
 4841      686F6D65 
 4841      5F537461 
 4841      72744578 
 4841      00
 4842              	.LASF2:
 4843 0990 7369676E 		.ascii	"signed char\000"
 4843      65642063 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 119


 4843      68617200 
 4844              	.LASF7:
 4845 099c 73686F72 		.ascii	"short unsigned int\000"
 4845      7420756E 
 4845      7369676E 
 4845      65642069 
 4845      6E7400
 4846              	.LASF99:
 4847 09af 5049445F 		.ascii	"PID_Initialize\000"
 4847      496E6974 
 4847      69616C69 
 4847      7A6500
 4848              	.LASF185:
 4849 09be 6D61696E 		.ascii	"main\000"
 4849      00
 4850              	.LASF80:
 4851 09c3 69746572 		.ascii	"iterm\000"
 4851      6D00
 4852              	.LASF25:
 4853 09c9 646F7562 		.ascii	"double\000"
 4853      6C6500
 4854              	.LASF178:
 4855 09d0 496E6465 		.ascii	"Index_Counter_1_Start\000"
 4855      785F436F 
 4855      756E7465 
 4855      725F315F 
 4855      53746172 
 4856              	.LASF129:
 4857 09e6 55707469 		.ascii	"UptimeMicrosecondsAccumulator\000"
 4857      6D654D69 
 4857      63726F73 
 4857      65636F6E 
 4857      64734163 
 4858              	.LASF46:
 4859 0a04 6F70436F 		.ascii	"opConfig\000"
 4859      6E666967 
 4859      00
 4860              	.LASF168:
 4861 0a0d 6973725F 		.ascii	"isr_rst_encoder_StartEx\000"
 4861      7273745F 
 4861      656E636F 
 4861      6465725F 
 4861      53746172 
 4862              	.LASF147:
 4863 0a25 6973725F 		.ascii	"isr_home_ClearPending\000"
 4863      686F6D65 
 4863      5F436C65 
 4863      61725065 
 4863      6E64696E 
 4864              	.LASF76:
 4865 0a3b 6661756C 		.ascii	"fault\000"
 4865      7400
 4866              	.LASF87:
 4867 0a41 52535449 		.ascii	"RSTIsrHandler\000"
 4867      73724861 
 4867      6E646C65 
 4867      7200
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccgFXcjC.s 			page 120


 4868              	.LASF79:
 4869 0a4f 706F7369 		.ascii	"position\000"
 4869      74696F6E 
 4869      00
 4870              	.LASF44:
 4871 0a58 4661756C 		.ascii	"FaultStates_t\000"
 4871      74537461 
 4871      7465735F 
 4871      7400
 4872              	.LASF142:
 4873 0a66 74784D65 		.ascii	"txMessageState\000"
 4873      73736167 
 4873      65537461 
 4873      746500
 4874              	.LASF116:
 4875 0a75 5049445F 		.ascii	"PID_EffectiveSetpoint\000"
 4875      45666665 
 4875      63746976 
 4875      65536574 
 4875      706F696E 
 4876              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
