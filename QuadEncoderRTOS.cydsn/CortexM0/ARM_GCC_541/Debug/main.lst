ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RSTIsrHandler,"ax",%progbits
  20              		.align	2
  21              		.global	RSTIsrHandler
  22              		.code	16
  23              		.thumb_func
  24              		.type	RSTIsrHandler, %function
  25              	RSTIsrHandler:
  26              	.LFB43:
  27              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** * Author: Paul Richards, W.M. Keck Observatory
   4:main.c        **** *   (Adapted from original version from Kona Scientific, JP Fumo)
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *  This file provides a SPI interface for the Quadrature Encoder for the ACS project.
   8:main.c        **** *  The I2C device provides readback of motor current consumption.
   9:main.c        **** *
  10:main.c        **** * History:
  11:main.c        **** * 04/07/23 PMR  Rev: 0-2-1 add move timer to messaging, fix jog function
  12:main.c        **** * 02/08/23 PMR  Rev: 0-2-0 rework PID algorithm based on Galil findings
  13:main.c        **** * 07/27/22 PMR  Rev: 0-1-0 convert FreeRTOS to binary-rate-monotonic-scheduler (BRMS)
  14:main.c        **** * 07/09/20 PMR  Rev: 0-0-7 implement zeroing the encoder value
  15:main.c        **** * 07/09/19 PMR  Rev: 0-0-6 fix tuning of INA219 and inhibit encoder report during homing
  16:main.c        **** * 05/09/19 PMR  Rev: 0-0-5 multiple shaper and PID fixes; let encoder go negative
  17:main.c        **** * 03/22/19 PMR  Rev: 0-0-3 add PID separate I limit and simplify limiting code
  18:main.c        **** * 02/07/19 PMR  Rev: 0-0-2 implement revision numbering in protocol
  19:main.c        **** * 12/18/18 PMR  Rev: B  Implement checksummed messaging and max PWM limiting
  20:main.c        **** * 10/11/18 PMR  Rev: A  Implement PWM functions for PDI control
  21:main.c        **** * 07/31/18 PMR  Rev: NC Initial Release after port from Kona Scientific code
  22:main.c        **** *******************************************************************************/
  23:main.c        **** #include <I2C_I2C.h>
  24:main.c        **** #include <stdbool.h>
  25:main.c        **** #include <stdlib.h>
  26:main.c        **** #include <math.h>
  27:main.c        **** #include "pid.h"
  28:main.c        **** #include "INA219.h"
  29:main.c        **** 
  30:main.c        **** /* Firmware revision as of 2023-04-07 */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 2


  31:main.c        **** #define FIRMWARE_REV_0 0
  32:main.c        **** #define FIRMWARE_REV_1 2
  33:main.c        **** #define FIRMWARE_REV_2 1
  34:main.c        **** 
  35:main.c        **** /* Debugging - undefine this for a production system that needs to watchdog */
  36:main.c        **** #define DEBUG_PROBE_ATTACHED 1
  37:main.c        **** 
  38:main.c        **** /* For the ACS test set, the drives are wired backwards!  Use a polarity of -1 in that case. */
  39:main.c        **** //#define DRIVE_POLARITY -1
  40:main.c        **** #define DRIVE_POLARITY 1
  41:main.c        **** 
  42:main.c        **** /* --------------------------------------------------------------------- 
  43:main.c        ****  * CONSTANTS
  44:main.c        ****  * --------------------------------------------------------------------- */
  45:main.c        **** 
  46:main.c        **** /* Interrupt priorities */
  47:main.c        **** #define NESTED_ISR                             (1u)
  48:main.c        **** #define HIGHER_PRIORITY                        (2u)
  49:main.c        **** #define DEFAULT_PRIORITY                       (3u)
  50:main.c        **** 
  51:main.c        **** /* Interrupt prototypes */
  52:main.c        **** CY_ISR_PROTO(HomeIsrHandler);
  53:main.c        **** CY_ISR_PROTO(RSTIsrHandler);
  54:main.c        **** CY_ISR_PROTO(SPI_IsrHandler);
  55:main.c        **** CY_ISR_PROTO(SPI_SS_IsrHandler);
  56:main.c        **** CY_ISR_PROTO(BRMS_Interrupt);
  57:main.c        **** 
  58:main.c        **** /* --------------------------------------------------------------------- 
  59:main.c        ****  * WDT Defines
  60:main.c        ****  *
  61:main.c        ****  * ILO clock is 32KHz (approx. 31ms/count)
  62:main.c        ****  * We will allow the CPU to stall for 2 full seconds before forcibly
  63:main.c        ****  * resetting.  That comes to 64,000 counts for that 2 seconds.
  64:main.c        ****  * --------------------------------------------------------------------- */
  65:main.c        **** #define WDT_COUNT1_REFRESH()                   CySysWdtResetCounters(CY_SYS_WDT_COUNTER1_RESET)
  66:main.c        **** #define WDT_COUNT1_MATCH_RESET                 (0xFA00u)
  67:main.c        **** 
  68:main.c        **** /* --------------------------------------------------------------------- 
  69:main.c        ****  * PWM Defines
  70:main.c        ****  * --------------------------------------------------------------------- */
  71:main.c        **** #define PWM_15KHZ_PERIOD                       (1600)
  72:main.c        **** #define PWM_NEUTRAL_OLD                        (PWM_15KHZ_PERIOD/2)
  73:main.c        **** #define PWM_SET_NEUTRAL                        (0)
  74:main.c        **** 
  75:main.c        **** /* TI INA219 Zero-Drift, Bidirectional Current/Power Monitor With I2C Interface */
  76:main.c        **** #define INA219_I2C_ADDR                        (0x40)
  77:main.c        **** #define INA219_CAL_VALUE                       (8192)
  78:main.c        **** 
  79:main.c        **** /* PWM maximum current value clipped to +/- X% duty cycle around the center (50 by default, full po
  80:main.c        **** #define PWM_MAX_MAGNITUDE                      (50) 
  81:main.c        **** 
  82:main.c        **** /* --------------------------------------------------------------------- 
  83:main.c        ****  * PID Defines
  84:main.c        ****  * --------------------------------------------------------------------- */
  85:main.c        **** #define PID_MANUAL                             (0)
  86:main.c        **** #define PID_AUTOMATIC                          (1)
  87:main.c        **** #define PID_EFFECTIVE_SETPOINT_DELTA_DEFAULT   (250)
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 3


  88:main.c        **** #define OVERRIDE_PID_CONSTANTS                 1
  89:main.c        **** #define ITERM_90PCT_FIT_CONSTANT               (13)
  90:main.c        **** 
  91:main.c        **** bool inAuto = false;
  92:main.c        **** 
  93:main.c        **** volatile int8_t Jog;
  94:main.c        **** bool PID_Enabled, PID_Was_Enabled;
  95:main.c        **** int32_t PID_Setpoint, PID_EffectiveSetpoint;
  96:main.c        **** uint8_t PID_EffSetDelta;
  97:main.c        **** uint32_t lastTime;
  98:main.c        **** 
  99:main.c        **** volatile int32_t Position, LastPosition;
 100:main.c        **** volatile int32_t Output;
 101:main.c        **** volatile uint16_t limitOutput;
 102:main.c        **** volatile uint16_t limitIterm;
 103:main.c        **** 
 104:main.c        **** bool homingDone = true;
 105:main.c        **** 
 106:main.c        **** /* --------------------------------------------------------------------- 
 107:main.c        ****  * Move timer defines
 108:main.c        ****  * 
 109:main.c        ****  * Wait for 30 samples of position to be the same before declaring a move
 110:main.c        ****  * done.
 111:main.c        ****  * --------------------------------------------------------------------- */
 112:main.c        **** #define LAST_MOVE_TIME_SAMPLE_COUNT 30
 113:main.c        **** 
 114:main.c        **** /* Use UptimeMicroseconds to calculate how long a move elapsed */
 115:main.c        **** uint32_t LastMoveStartTimeUsec = 0;
 116:main.c        **** uint32_t LastMoveEndTimeUsec = 0;
 117:main.c        **** 
 118:main.c        **** /* Counter for how many samples elapsed since the move was complete */
 119:main.c        **** uint16_t LastMoveStableCount = 0;
 120:main.c        **** 
 121:main.c        **** /* Time value in microseconds for how long the last move took */
 122:main.c        **** uint32_t LastMoveTimeUsec = 0;
 123:main.c        **** 
 124:main.c        **** /* Set this flag when a new move comes down from the ACS */
 125:main.c        **** bool NewCommandedMove = false;
 126:main.c        **** 
 127:main.c        **** /* --------------------------------------------------------------------- 
 128:main.c        ****  * Timekeeping defines
 129:main.c        ****  * --------------------------------------------------------------------- */
 130:main.c        **** volatile uint64_t UptimeMicroseconds = 0;
 131:main.c        **** volatile uint64_t UptimeMicrosecondsAccumulator = 0;
 132:main.c        **** volatile uint64_t UptimeMilliseconds = 0;
 133:main.c        **** volatile uint64_t UptimeMillisecondsAccumulator = 0;
 134:main.c        **** volatile uint64_t UptimeSeconds = 0;
 135:main.c        **** 
 136:main.c        **** /* --------------------------------------------------------------------- 
 137:main.c        ****  * ENCODER PROPERTIES
 138:main.c        ****  *
 139:main.c        ****  * The encoder counts up and down in Counter_1, which is unsigned 24 bit
 140:main.c        ****  *
 141:main.c        ****  * Note: the negative boundary is defined as 1,048,576 counts of underflow
 142:main.c        ****  * in the Counter_1 value.  This allows us to start at max travel, reset 
 143:main.c        ****  * encoder to 0 and count negative the full travel before hitting the home
 144:main.c        ****  * flag and resetting the counter to 0 again.
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 4


 145:main.c        ****  *
 146:main.c        ****  * (0x100000 or 1.048M is >3x the entire actuator travel)
 147:main.c        ****  * --------------------------------------------------------------------- */
 148:main.c        **** #define ENCODER_MAX                            (0xFFFFFF)             
 149:main.c        **** #define ENCODER_NEGATIVE_BOUNDARY              (0xFFFFFF - 0x100000)  
 150:main.c        **** #define ENCODER_COUNTS_PER_INDEX               (10000)
 151:main.c        **** 
 152:main.c        **** /* --------------------------------------------------------------------- 
 153:main.c        ****  * GLOBALS
 154:main.c        ****  * --------------------------------------------------------------------- */
 155:main.c        **** /* Coarse reporting of state back to the node box software */
 156:main.c        **** typedef enum {    
 157:main.c        ****     csUNDEFINED   = 0,  /* Invalid state */
 158:main.c        ****     csUnconfig    = 1,  /* Unconfigured, freshly rebooted */
 159:main.c        ****     csReady       = 2,  /* Configuration complete and ready for commands */
 160:main.c        ****     csMAX    
 161:main.c        **** } ConfigStates_t;
 162:main.c        **** 
 163:main.c        **** #define configStateValid(s) ( ((ConfigStates_t) s > csUNDEFINED) && ((ConfigStates_t) s < csMAX) )
 164:main.c        **** 
 165:main.c        **** /* Fault codes, these are bit encoded into a uint8_t */
 166:main.c        **** typedef enum {
 167:main.c        ****     fsNONE         = 0b00000000,    /* No faults detected */
 168:main.c        ****     fsUnconfigured = 0b00000001,    /* Attempt to move an unconfigured system */
 169:main.c        ****     fsEncoder      = 0b00000010,    /* One or more encoder phases not changing during a move */
 170:main.c        ****     fsIndex        = 0b00000100,    /* Index marks not seen during a move */
 171:main.c        ****     fsCurrentRead  = 0b00001000,    /* Unable to read current from INA219 device */
 172:main.c        ****     fsChecksum     = 0b00010000,    /* Too many checksum faults */
 173:main.c        ****     fsX2           = 0b00100000,    /* */
 174:main.c        ****     fsX3           = 0b01000000,    /* */
 175:main.c        ****     fsX4           = 0b10000000     /* */
 176:main.c        **** } FaultStates_t;
 177:main.c        **** 
 178:main.c        **** volatile ConfigStates_t ConfigState;
 179:main.c        **** volatile uint8_t FaultState;
 180:main.c        **** volatile uint8_t ConfigSequence;
 181:main.c        **** volatile uint16_t ChecksumErrors;
 182:main.c        **** volatile int16_t MotorCurrent;
 183:main.c        **** uint8_t CurrentI2Cinbuf[20];
 184:main.c        **** 
 185:main.c        **** /* --------------------------------------------------------------------- 
 186:main.c        ****  * SPI MESSAGING
 187:main.c        ****  * --------------------------------------------------------------------- */
 188:main.c        **** /* V2 protocol 
 189:main.c        **** 
 190:main.c        ****    1) Messages have opcodes (configuration, position, get status)
 191:main.c        ****    2) Messages are validated by a checksum instead of an arbitrary signature pattern.
 192:main.c        ****    3) Transfer the max message size every time, regardless of all bytes used or not.
 193:main.c        **** */
 194:main.c        ****     
 195:main.c        **** /* Set this to be at least the size of the status response message */
 196:main.c        **** #define MAX_MESSAGE_SIZE 27
 197:main.c        ****     
 198:main.c        **** /* Remember the last time a message came in so we can timeout moves if the node box stops 
 199:main.c        ****    talking.  Nominally 1 second max of not talking. */
 200:main.c        **** #define MAX_LAST_MESSAGE_TIME_SECONDS 1
 201:main.c        **** uint32_t LastMessageTimeSeconds;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 5


 202:main.c        **** 
 203:main.c        **** /* Opcodes that can come from the node box software */
 204:main.c        **** typedef enum {
 205:main.c        ****     opUNDEFINED = 0,
 206:main.c        ****     opConfig    = 1,
 207:main.c        ****     opStatus    = 2,
 208:main.c        ****     opSetEnc    = 3,
 209:main.c        ****     opMAX       
 210:main.c        **** } rxMessage_opcodes_t;    
 211:main.c        **** 
 212:main.c        **** /* Sanity check for opcodes */
 213:main.c        **** #define rxMessageOpcodeValid(op) ( ((rxMessage_opcodes_t) op > opUNDEFINED) && ((rxMessage_opcodes_
 214:main.c        **** 
 215:main.c        **** typedef struct { 
 216:main.c        ****     uint8_t checksum;        
 217:main.c        ****     uint8_t size;       /* Size of the message bytes, including opcode and size and checksum */
 218:main.c        ****     uint8_t opcode;     /* Operation (generic overlay for previewing opcode value) */
 219:main.c        **** } __attribute__ ((__packed__)) rxMessage_overlay_t;
 220:main.c        **** 
 221:main.c        **** /* Configuration message, 22 bytes */
 222:main.c        **** typedef struct {
 223:main.c        ****     uint8_t checksum;        
 224:main.c        ****     uint8_t size;        /* Size of the message bytes, including opcode and size and checksum */
 225:main.c        ****     uint8_t opcode;      /* Operation: 01 == config */        
 226:main.c        ****     uint8_t sequence;    /* Configuration message sequence number */
 227:main.c        ****     
 228:main.c        ****     uint32_t overrideKp; /* If nonzero, override the PID P term */
 229:main.c        ****     uint32_t overrideKi; /* If nonzero, override the PID I term */
 230:main.c        ****     uint32_t overrideKd; /* If nonzero, override the PID D term */
 231:main.c        ****     
 232:main.c        ****     uint16_t limitOutput;/* Drive output limit, ranges from 0 to 800 */
 233:main.c        ****     uint16_t limitIterm; /* PID I term output limit, ranges from 0 to 800 */
 234:main.c        ****     uint16_t effsetdelta;/* PID effective setpoint increment delta, nominally 250 steps */
 235:main.c        **** } __attribute__ ((__packed__)) rxMessage_config_t;
 236:main.c        **** 
 237:main.c        **** /* Status message, contains desired position and such values, 10 bytes */
 238:main.c        **** typedef struct {
 239:main.c        ****     uint8_t  checksum;        
 240:main.c        ****     uint8_t  size;       /* Size of the message bytes, including opcode and size and checksum */
 241:main.c        ****     uint8_t  opcode;     /* Operation: 02 == status */
 242:main.c        ****     uint8_t  enable;     /* Enable/disable PID algorithm */
 243:main.c        ****     int32_t  setpoint;   /* Setpoint (desired actuator position) */
 244:main.c        ****     int8_t   jog;        /* Jog value, to manually move the motor; valid range -100 to 100 */ 
 245:main.c        ****     uint8_t  clearfaults;/* Set to nonzero to clear all the current faults */
 246:main.c        **** } __attribute__ ((__packed__)) rxMessage_status_t;
 247:main.c        ****    
 248:main.c        **** /* Clear message, contains new encoder position, 7 bytes */
 249:main.c        **** typedef struct {
 250:main.c        ****     uint8_t  checksum;        
 251:main.c        ****     uint8_t  size;       /* Size of the message bytes, including opcode and size and checksum */
 252:main.c        ****     uint8_t  opcode;     /* Operation: 03 == set encoders */
 253:main.c        ****     int32_t  setpoint;   /* Setpoint (force an actuator logical position) */
 254:main.c        **** } __attribute__ ((__packed__)) rxMessage_setenc_t;
 255:main.c        **** 
 256:main.c        **** 
 257:main.c        **** /* Wrap the message with an array of bytes */
 258:main.c        **** union {
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 6


 259:main.c        ****     uint8_t             buf[MAX_MESSAGE_SIZE];
 260:main.c        ****     rxMessage_overlay_t overlay;
 261:main.c        ****     rxMessage_config_t  config;
 262:main.c        ****     rxMessage_status_t  status;  
 263:main.c        ****     rxMessage_setenc_t  setenc;
 264:main.c        **** } rxMessage;
 265:main.c        **** 
 266:main.c        **** /* Message back to the BBB, watch out for alignment here by packing the structure (27 bytes) */
 267:main.c        **** typedef struct  {  
 268:main.c        ****     uint8_t  checksum;        /* Message checksum */    
 269:main.c        ****     uint8_t  version0;        /* Version byte 0 */ 
 270:main.c        ****     uint8_t  version1;        /* Version byte 1 */
 271:main.c        ****     uint8_t  version2;        /* Version byte 2 */
 272:main.c        ****     uint8_t  size;            /* Size of the message bytes, including opcode and size and checksum 
 273:main.c        ****     uint8_t  opcode;          /* Echo back of the opcode this response is for, operation: 02 == sta
 274:main.c        ****     uint8_t  state;           /* Enum value for current device configuration state */ 
 275:main.c        ****     uint8_t  fault;           /* Bit encoded fields for current fault status */
 276:main.c        ****     uint8_t  sequence;        /* Echo back the config sequence number currently set */
 277:main.c        ****     uint16_t checksum_errors; /* Count of checksum errors */
 278:main.c        ****     int16_t  motor_current;   /* Motor current consumption (mA) */
 279:main.c        ****     int32_t  position;        /* Actual actuator position, signed value */ 
 280:main.c        ****     int16_t  pwm;             /* PWM value the motor is moving at */     
 281:main.c        ****     int32_t  iterm;           /* Instantaneous PID iterm value */
 282:main.c        ****     uint32_t last_move_time;  /* Amount of time for the last move, in us */ 
 283:main.c        **** } __attribute__ ((__packed__)) txMessage_t;
 284:main.c        **** 
 285:main.c        **** /* Wrap the message with an array of bytes */
 286:main.c        **** union {    
 287:main.c        ****     uint8_t     buf[MAX_MESSAGE_SIZE];
 288:main.c        ****     txMessage_t msg;
 289:main.c        **** } txMessage;
 290:main.c        **** 
 291:main.c        **** /* State machine definition for transmit side of messaging */
 292:main.c        **** typedef enum {
 293:main.c        ****     txmsClear,    /* Transmit message buffer is empty and needs loading */
 294:main.c        ****     txmsLoaded    /* Transmit message buffer has been loaded by the message thread for sending */
 295:main.c        **** } txMessageStates_t;
 296:main.c        **** 
 297:main.c        **** txMessageStates_t txMessageState;
 298:main.c        **** 
 299:main.c        **** 
 300:main.c        **** 
 301:main.c        **** /* --------------------------------------------------------------------- 
 302:main.c        ****  * Function prototypes
 303:main.c        ****  * --------------------------------------------------------------------- */
 304:main.c        **** int32_t GetPosition(void);
 305:main.c        **** void runRateGroup1_PID(void);
 306:main.c        **** void runRateGroup3_SPI(void);
 307:main.c        **** void MotorCurrentRead(void);
 308:main.c        **** 
 309:main.c        **** 
 310:main.c        **** /*******************************************************************************
 311:main.c        **** * Function Name: AssertFault
 312:main.c        **** ********************************************************************************
 313:main.c        **** * Summary:
 314:main.c        **** *  Sets a flag that a particular fault has been detected.  Assert fsNONE to clear
 315:main.c        **** *  all faults.
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 7


 316:main.c        **** *
 317:main.c        **** * Parameters: FaultStates_t of the fault detected.
 318:main.c        **** * Return: None
 319:main.c        **** *******************************************************************************/
 320:main.c        **** void AssertFault(FaultStates_t fault) {
 321:main.c        ****  
 322:main.c        ****     switch (fault) {
 323:main.c        ****      
 324:main.c        ****         /* Clears all asserted faults */
 325:main.c        ****         case fsNONE:
 326:main.c        ****             FaultState = fsNONE;
 327:main.c        ****             break;        
 328:main.c        ****         
 329:main.c        ****         /* Any other fault has its bit turned on in the fault status */
 330:main.c        ****         default:
 331:main.c        ****             FaultState |= fault;
 332:main.c        ****             break;        
 333:main.c        ****     }    
 334:main.c        **** }
 335:main.c        **** 
 336:main.c        **** 
 337:main.c        **** /*******************************************************************************
 338:main.c        **** * Function Name: ClearFault
 339:main.c        **** ********************************************************************************
 340:main.c        **** * Summary:
 341:main.c        **** *  Clears a flag that a particular fault has been detected.  Assert fsNONE to clear
 342:main.c        **** *  all faults.
 343:main.c        **** *
 344:main.c        **** * Parameters: FaultStates_t of the fault to be cleared.
 345:main.c        **** * Return: None
 346:main.c        **** *******************************************************************************/
 347:main.c        **** void ClearFault(FaultStates_t fault) {
 348:main.c        ****  
 349:main.c        ****     switch (fault) {
 350:main.c        ****      
 351:main.c        ****         /* Clears all asserted faults */
 352:main.c        ****         case fsNONE:
 353:main.c        ****             FaultState = fsNONE;
 354:main.c        ****             break;        
 355:main.c        ****         
 356:main.c        ****         /* Any other fault has its bit turned off in the fault status */
 357:main.c        ****         default:
 358:main.c        ****             FaultState &= ~fault;
 359:main.c        ****             break;        
 360:main.c        ****     }    
 361:main.c        **** }
 362:main.c        **** 
 363:main.c        **** 
 364:main.c        **** /*******************************************************************************
 365:main.c        **** * Function Name: MotorCurrentRead
 366:main.c        **** ********************************************************************************
 367:main.c        **** * Summary:
 368:main.c        **** *  Read the motor current consumption.
 369:main.c        **** *
 370:main.c        **** * Parameters: None
 371:main.c        **** * Return: None
 372:main.c        **** *******************************************************************************/
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 8


 373:main.c        **** void MotorCurrentRead(void) {
 374:main.c        ****     
 375:main.c        ****     //TODO: Convert this to integer math
 376:main.c        ****     float c;
 377:main.c        ****     
 378:main.c        ****     c = getCurrent_mA(INA219_I2C_ADDR);
 379:main.c        ****     
 380:main.c        ****     /* Assign the global MotorCurrent value */
 381:main.c        ****     MotorCurrent = (int16_t) c;       
 382:main.c        **** }
 383:main.c        **** 
 384:main.c        **** 
 385:main.c        **** /*******************************************************************************
 386:main.c        **** * Function Name: Comm_Task
 387:main.c        **** ********************************************************************************
 388:main.c        **** * Summary:
 389:main.c        **** *  Task to perform the SPI communications.
 390:main.c        **** *
 391:main.c        **** * Parameters: None
 392:main.c        **** * Return: None
 393:main.c        **** *******************************************************************************/
 394:main.c        **** void runRateGroup3_SPI(void) {
 395:main.c        ****  
 396:main.c        ****     rxMessage_opcodes_t opcode;
 397:main.c        ****     uint8_t size;
 398:main.c        ****     uint8_t i;
 399:main.c        ****     uint8_t checksum;
 400:main.c        ****     int32_t distance;
 401:main.c        ****     
 402:main.c        ****     /* If the SPI is moving data out right now, do not touch the message buffer, we will
 403:main.c        ****        get to it next cycle! */
 404:main.c        ****     if (SPI_1_SpiIsBusBusy()) 
 405:main.c        ****         return;
 406:main.c        ****     
 407:main.c        ****     /* In certain states, this thread is responsible for loading the outbound messaging */
 408:main.c        ****     switch (txMessageState) {
 409:main.c        ****      
 410:main.c        ****         /* Output buffer is clear and ready for loading, rxMessage is (probably) good and needs pro
 411:main.c        ****         case txmsClear:
 412:main.c        ****                 
 413:main.c        ****             /* Get a few items out of the message before checking the sum */
 414:main.c        ****             size     = rxMessage.overlay.size;
 415:main.c        ****             opcode   = (rxMessage_opcodes_t) rxMessage.overlay.opcode;
 416:main.c        ****             
 417:main.c        ****             /* Make sure the size makes sense.  If we have to reset the size it's probably a corrup
 418:main.c        ****             if (size > sizeof(txMessage.buf))
 419:main.c        ****                 size = sizeof(txMessage.buf);                            
 420:main.c        ****         
 421:main.c        ****             /* Calculate the checksum by summing the bytes of the entire message, it should resolve
 422:main.c        ****             for (i = 0, checksum = 0; i < size; i++)
 423:main.c        ****                 checksum += rxMessage.buf[i]; 
 424:main.c        **** 
 425:main.c        ****             /* Checksum fault, don't try to process the messgage */
 426:main.c        ****             if ((checksum & 0xFF) != 0) {
 427:main.c        ****                 
 428:main.c        ****                 txMessage.msg.opcode = opcode;
 429:main.c        ****                 txMessage.msg.size = sizeof(txMessage_t);
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 9


 430:main.c        ****                 ChecksumErrors++;
 431:main.c        ****                 
 432:main.c        ****             /* Message looks fine, process it */
 433:main.c        ****             } else {
 434:main.c        **** 
 435:main.c        ****                 /* Message opcode must be valid before trying to process the message contents */
 436:main.c        ****                 if ( rxMessageOpcodeValid(opcode) ) {                            
 437:main.c        ****                 
 438:main.c        ****                     switch (opcode) {
 439:main.c        ****                     
 440:main.c        ****                         case opConfig:
 441:main.c        ****                             /* Special message to establish settings on the device such as PID gain
 442:main.c        ****                         
 443:main.c        ****                             /* Remember where we were when the init was sent */
 444:main.c        ****                             LastPosition = GetPosition();
 445:main.c        ****                            
 446:main.c        ****                             /* Initialize the setpoints to be equal to where we are right now.*/
 447:main.c        ****                             PID_Setpoint = LastPosition;
 448:main.c        ****                             PID_EffectiveSetpoint = LastPosition;                                  
 449:main.c        ****                             
 450:main.c        ****                             /* Disable PID if it's on */
 451:main.c        ****                             PID_Was_Enabled = false;
 452:main.c        ****                             PID_Enabled = false;
 453:main.c        **** 
 454:main.c        ****                             /* Stop a jog if one was in progress */
 455:main.c        ****                             Jog = 0;
 456:main.c        ****                             
 457:main.c        ****                             /* Output and Iterm limits */
 458:main.c        ****                             limitOutput = rxMessage.config.limitOutput;
 459:main.c        ****                             limitIterm = rxMessage.config.limitIterm;
 460:main.c        ****                                 
 461:main.c        ****                                 
 462:main.c        ****                             /* Update the PID values passed down from the server */
 463:main.c        ****                         
 464:main.c        **** #ifndef OVERRIDE_PID_CONSTANTS
 465:main.c        ****                             kp = rxMessage.config.Kp;
 466:main.c        ****                             ki = rxMessage.config.Ki;
 467:main.c        ****                             kd = rxMessage.config.Kd;      
 468:main.c        ****                         
 469:main.c        ****                             /* PID effective setpoint increment delta value */                     
 470:main.c        ****                             PID_EffSetDelta = rxMessage.config.effsetdelta;
 471:main.c        **** #endif
 472:main.c        ****                         
 473:main.c        ****                             /* We have received a config message, so signal to the PID thread that 
 474:main.c        ****                             ConfigState = csReady;  
 475:main.c        ****                             ConfigSequence = rxMessage.config.sequence;
 476:main.c        ****                         
 477:main.c        ****                             /* Clear all the faults when reconfigured */
 478:main.c        ****                             ClearFault(fsNONE);
 479:main.c        ****                             break;
 480:main.c        **** 
 481:main.c        ****                         case opStatus:
 482:main.c        ****                             /* The normal message telling us where to go, how much to jog, enable o
 483:main.c        ****                             PID_Enabled = (bool) rxMessage.status.enable;
 484:main.c        ****                             
 485:main.c        ****                             /* If we are commanded to move somewhere else, remember where we starte
 486:main.c        ****                             if (PID_Setpoint != rxMessage.status.setpoint) {
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 10


 487:main.c        ****                                 
 488:main.c        ****                                 /* This is a new move, start timing! */
 489:main.c        ****                                 NewCommandedMove = true;
 490:main.c        ****                                 LastMoveStartTimeUsec = UptimeMicroseconds;
 491:main.c        ****                                 
 492:main.c        ****                                 /* Remember where we started */
 493:main.c        ****                                 LastPosition = GetPosition();
 494:main.c        ****                                 
 495:main.c        ****                                 /* Update destination */
 496:main.c        ****                                 PID_Setpoint = rxMessage.status.setpoint;
 497:main.c        ****                                 
 498:main.c        ****                                 /* Initialize the effective setpoint to be equal to where we are ri
 499:main.c        ****                                 it will be incremented/decremented when the PID algorithm runs next
 500:main.c        ****                                 PID_EffectiveSetpoint = LastPosition;                              
 501:main.c        ****                                 
 502:main.c        ****                                 /* Reset counting of index marks */
 503:main.c        ****                                 Index_Counter_1_WriteCounter(0);
 504:main.c        ****                                 
 505:main.c        ****                                 
 506:main.c        ****                                 /* The demand has changed.  Hold off the integrator for a certain a
 507:main.c        ****                                 dictated by the size of the move (if it's more than 50 counts) */
 508:main.c        ****                                 distance = PID_Setpoint - LastPosition;                            
 509:main.c        ****                                 if (distance < 0) {
 510:main.c        ****                                     distance *= -1;
 511:main.c        ****                                 }
 512:main.c        ****                                 
 513:main.c        ****                                 if (distance > 50) {                                
 514:main.c        ****                                     iterm_delay = ((distance / 16) + ITERM_90PCT_FIT_CONSTANT) * 10
 515:main.c        ****                                     //iterm_delay = distance >> 4;  // Shift by 4 is equal to div b
 516:main.c        ****                                 } else {
 517:main.c        ****                                     iterm_delay = 0;
 518:main.c        ****                                 }
 519:main.c        ****                                 
 520:main.c        ****                                 
 521:main.c        ****                                 /* The demand has changed, reset the iterm delay to the max */
 522:main.c        ****                                 //iterm_delay = ITERM_DELAY_DEFAULT;  
 523:main.c        ****                                 //iterm_delay = 0;
 524:main.c        ****                             }                                        
 525:main.c        ****                         
 526:main.c        ****                             /* PWM jog value ranges from -100 to 100, where -100 is max-reverse cur
 527:main.c        ****                             100 is max-forward, 0 is neutral/no movement */
 528:main.c        ****                             Jog = rxMessage.status.jog;                                            
 529:main.c        ****                             break;
 530:main.c        ****                         
 531:main.c        ****                         case opSetEnc:
 532:main.c        ****                             /* The message is telling us what to arbitrarily set the encoder values
 533:main.c        ****                             Counter_1_WriteCounter(rxMessage.status.setpoint);
 534:main.c        ****                             LastPosition = rxMessage.status.setpoint;
 535:main.c        ****                             break;                                        
 536:main.c        ****                             
 537:main.c        ****                         /* No other opcodes are valid */
 538:main.c        ****                         default:
 539:main.c        ****                             break;
 540:main.c        ****                     }                           
 541:main.c        ****                 }                            
 542:main.c        ****             }
 543:main.c        ****             
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 11


 544:main.c        ****             /* Get a fresh copy of the position information */
 545:main.c        ****             Position = GetPosition();
 546:main.c        ****             
 547:main.c        ****             /* Fill out the common reponse the same way every time, as a status response */
 548:main.c        ****             txMessage.msg.checksum        = 0;
 549:main.c        ****             txMessage.msg.version0        = FIRMWARE_REV_0;
 550:main.c        ****             txMessage.msg.version1        = FIRMWARE_REV_1;
 551:main.c        ****             txMessage.msg.version2        = FIRMWARE_REV_2;
 552:main.c        ****             txMessage.msg.size            = sizeof(txMessage_t);
 553:main.c        ****             txMessage.msg.opcode          = opStatus;
 554:main.c        ****             txMessage.msg.state           = (uint8_t) ConfigState;
 555:main.c        ****             txMessage.msg.fault           = (uint8_t) FaultState;
 556:main.c        ****             txMessage.msg.checksum_errors = ChecksumErrors;
 557:main.c        ****             txMessage.msg.sequence        = ConfigSequence;
 558:main.c        ****             txMessage.msg.position        = Position;
 559:main.c        ****             txMessage.msg.pwm             = Output;
 560:main.c        ****             txMessage.msg.iterm           = iterm;
 561:main.c        ****             txMessage.msg.motor_current   = MotorCurrent;                  
 562:main.c        ****             txMessage.msg.last_move_time  = LastMoveTimeUsec;
 563:main.c        ****             
 564:main.c        ****             /* Set the checksum in the response */
 565:main.c        ****             for (i = 0, checksum = 0; i < sizeof(txMessage_t); i++)
 566:main.c        ****                 checksum += txMessage.buf[i]; 
 567:main.c        ****                 
 568:main.c        ****             /* Take the 2's complement of the sum and put it back in the message */
 569:main.c        ****             txMessage.msg.checksum = ~checksum + 1;
 570:main.c        ****                 
 571:main.c        ****             /* Copy the readied buffer out to the FIFO */
 572:main.c        ****             //TODO: should we clear this here, or at the end of the transmit complete interrupt?   
 573:main.c        ****             SPI_1_SpiUartPutArray(txMessage.buf, sizeof(txMessage.buf)); 
 574:main.c        **** 
 575:main.c        ****             /* Indicate it's loaded for use */
 576:main.c        ****             txMessageState = txmsLoaded;
 577:main.c        ****             
 578:main.c        ****             /* Clear all the faults if told to */
 579:main.c        ****             if ((bool) rxMessage.status.clearfaults)
 580:main.c        ****                 ClearFault(fsNONE);
 581:main.c        ****         
 582:main.c        ****             break;
 583:main.c        ****     
 584:main.c        ****         /* A message was already readied for transmission, nothing to do here */
 585:main.c        ****         case txmsLoaded:                
 586:main.c        ****             break;
 587:main.c        ****                 
 588:main.c        ****     } // End of message state case statement
 589:main.c        **** 
 590:main.c        **** }
 591:main.c        ****     
 592:main.c        **** 
 593:main.c        **** /*******************************************************************************
 594:main.c        **** * Function Name: PWM_Set
 595:main.c        **** ********************************************************************************
 596:main.c        **** * Summary:
 597:main.c        **** *  Sets the duty cycle of the PWM at the output pin.
 598:main.c        **** *
 599:main.c        **** * Parameters: Duty cycle, from -800 to 800 where 0 is neutral (no movement).
 600:main.c        **** * 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 12


 601:main.c        **** * Return: None
 602:main.c        **** *******************************************************************************/
 603:main.c        **** void PWM_Set(int32_t output) {    
 604:main.c        ****         
 605:main.c        ****     /* output varies from -800 to 800, which needs to be expressed as 0 to 1600 
 606:main.c        ****        for the PWM */
 607:main.c        ****     PWM_1_WriteCompare((PWM_15KHZ_PERIOD/2) + (DRIVE_POLARITY * output));    
 608:main.c        **** }
 609:main.c        **** 
 610:main.c        **** 
 611:main.c        **** /*******************************************************************************
 612:main.c        **** * Function Name: GetPosition
 613:main.c        **** ********************************************************************************
 614:main.c        **** * Summary:
 615:main.c        **** *  Get the physical position value and compensate for negative locations.
 616:main.c        **** *
 617:main.c        **** * Parameters: None
 618:main.c        **** * Return: int32_t (signed!) position value
 619:main.c        **** *******************************************************************************/
 620:main.c        **** int32_t GetPosition(void) {
 621:main.c        ****     
 622:main.c        ****     static volatile uint32_t RawPosition;
 623:main.c        ****     static volatile int32_t result;
 624:main.c        ****     
 625:main.c        ****     /* Get up-to-date position from the 24 bit unsigned counter*/
 626:main.c        ****     RawPosition = Counter_1_ReadCounter();   
 627:main.c        ****     
 628:main.c        ****     /* If the raw position is higher than some extremely high number, treat it as 
 629:main.c        ****        underflow and make that into a negative value */
 630:main.c        ****     if (RawPosition > ENCODER_NEGATIVE_BOUNDARY) {
 631:main.c        ****         
 632:main.c        ****         result = (-1) * ((int32_t) ENCODER_MAX - (int32_t) RawPosition);
 633:main.c        ****         
 634:main.c        ****     } else {
 635:main.c        ****      
 636:main.c        ****         /* Value is "positive", treat it normally */
 637:main.c        ****         result = (int32_t) RawPosition;
 638:main.c        ****     }
 639:main.c        ****     
 640:main.c        ****     /* Update the master copy of position information */
 641:main.c        ****     Position = result;
 642:main.c        ****     return result;
 643:main.c        **** }
 644:main.c        **** 
 645:main.c        **** 
 646:main.c        **** /*******************************************************************************
 647:main.c        **** * Function Name: PID_Initialize
 648:main.c        **** ********************************************************************************
 649:main.c        **** * Summary:
 650:main.c        **** *  Setup and reset the PID terms.
 651:main.c        **** *
 652:main.c        **** * Parameters: None
 653:main.c        **** * Return: None
 654:main.c        **** *******************************************************************************/
 655:main.c        **** void PID_Initialize(void) {
 656:main.c        ****     
 657:main.c        ****     /* Get up-to-date position */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 13


 658:main.c        ****     Position = GetPosition();
 659:main.c        ****     LastPosition = Position;
 660:main.c        ****     
 661:main.c        ****     /* Initialize the effective setpoint to be equal to where we are right now,
 662:main.c        ****     it will be incremented/decremented when the PID algorithm runs next time */
 663:main.c        ****     PID_EffectiveSetpoint = LastPosition;
 664:main.c        ****     
 665:main.c        ****     /* 2019-03-13 PMR: Init to zero instead of the output value, since we are not
 666:main.c        ****        switching from manual to auto frequently */
 667:main.c        ****     iterm = 0;
 668:main.c        **** }    
 669:main.c        **** 
 670:main.c        **** 
 671:main.c        **** /*******************************************************************************
 672:main.c        **** * Function Name: PID_SetMode
 673:main.c        **** ********************************************************************************
 674:main.c        **** * Summary:
 675:main.c        **** *  Sets the PID into automatic or manual mode.
 676:main.c        **** *
 677:main.c        **** * Parameters: Mode, either PID_AUTOMATIC or PID_MANUAL.
 678:main.c        **** * Return: None
 679:main.c        **** *******************************************************************************/
 680:main.c        **** void PID_SetMode(uint32_t Mode) {
 681:main.c        ****     
 682:main.c        ****     bool newAuto = (Mode == PID_AUTOMATIC);
 683:main.c        ****     
 684:main.c        ****     if (newAuto && !inAuto) {  
 685:main.c        ****         /*we just went from manual to auto*/
 686:main.c        ****         PID_Initialize();
 687:main.c        ****     }
 688:main.c        ****     
 689:main.c        ****     inAuto = newAuto;
 690:main.c        **** } 
 691:main.c        **** 
 692:main.c        **** 
 693:main.c        **** /*******************************************************************************
 694:main.c        **** * Function Name: runRateGroup1_PID
 695:main.c        **** ********************************************************************************
 696:main.c        **** * Summary:
 697:main.c        **** *  Task to perform the PID calculations.
 698:main.c        **** *
 699:main.c        **** * Parameters: None
 700:main.c        **** * Return: None
 701:main.c        **** *******************************************************************************/
 702:main.c        **** void runRateGroup1_PID(void) {
 703:main.c        ****      
 704:main.c        ****     /////////////////////////////////////////////////////
 705:main.c        ****     // TESTING ONLY
 706:main.c        ****     //ConfigState = csReady;
 707:main.c        ****     //PID_Enabled = true;
 708:main.c        ****     /////////////////////////////////////////////////////
 709:main.c        **** 
 710:main.c        ****     /* If the server hasn't talked to us in a while (no messages on the SPI), 
 711:main.c        ****        take preventative action and abandon any moves in progress. */
 712:main.c        ****     if (UptimeSeconds > (LastMessageTimeSeconds + MAX_LAST_MESSAGE_TIME_SECONDS)) {
 713:main.c        ****         
 714:main.c        ****         /* Stop all motion */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 14


 715:main.c        ****         PWM_Set(PWM_SET_NEUTRAL);
 716:main.c        ****         PID_Enabled = false;
 717:main.c        ****         
 718:main.c        ****         /* Clear the values that would drive motion on the next message arrival.  Assume the 
 719:main.c        ****         next message might be a config, in which case we want to be neutral. */
 720:main.c        ****         Jog = 0;
 721:main.c        **** 
 722:main.c        ****     /* Only run the PID algorithm if we have been configured by the nodebox software */
 723:main.c        ****     } else if (ConfigState == csReady) {
 724:main.c        ****         
 725:main.c        ****         /* Enable the drive outputs for the home and index once configured, otherwise they
 726:main.c        ****            can screw up the boot pins on the BeagleBoneBlack */
 727:main.c        ****         HOME_OUT_SetDriveMode(HOME_OUT_DM_STRONG); 
 728:main.c        ****         INDEX_OUT_SetDriveMode(INDEX_OUT_DM_STRONG); 
 729:main.c        **** 
 730:main.c        ****         /* Handle mode switching */
 731:main.c        ****         if (!PID_Was_Enabled && PID_Enabled) {
 732:main.c        ****             PID_SetMode(PID_AUTOMATIC);
 733:main.c        ****         } else if (!PID_Enabled && PID_Was_Enabled) {
 734:main.c        ****             PID_SetMode(PID_MANUAL);                
 735:main.c        ****         } else {
 736:main.c        ****             // No mode change happened   
 737:main.c        ****         }
 738:main.c        ****         
 739:main.c        ****         /* Save value for next cycle */
 740:main.c        ****         PID_Was_Enabled = PID_Enabled;
 741:main.c        ****         
 742:main.c        ****         /* Calculate the effective setpoint, which is defined as N (nominally 25) counts closer to 
 743:main.c        ****         actual setpoint, incremented once per cycle of this algorithm.  
 744:main.c        ****     
 745:main.c        ****         Consider a move of +2000 counts from position 0 to 2000: 
 746:main.c        ****         
 747:main.c        ****         1) The setpoint will change to 2000.
 748:main.c        ****         2) The effective setpoint is initialized to the current position, plus 25 counts = 25.
 749:main.c        ****         3) Calculate the PID and return.
 750:main.c        ****         4) The next time PID_Compute is called, increment the effective setpoint by 25 counts = 50.
 751:main.c        ****         5) Calculate the PID and return.
 752:main.c        ****         6) Repeat steps 4 and 5 until the effective setpoint equals the actual setpoint.           
 753:main.c        ****         */
 754:main.c        ****         
 755:main.c        ****         if (PID_Enabled) {
 756:main.c        ****             
 757:main.c        ****             if (PID_EffSetDelta == 0) {
 758:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;
 759:main.c        ****             } else if ( labs(PID_EffectiveSetpoint - PID_Setpoint) <= (2 * PID_EffSetDelta) ) {
 760:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;                                              
 761:main.c        ****             } else if (PID_Setpoint > PID_EffectiveSetpoint) {
 762:main.c        ****                 PID_EffectiveSetpoint = (PID_EffectiveSetpoint + PID_EffSetDelta);
 763:main.c        ****             } else {
 764:main.c        ****                 PID_EffectiveSetpoint = (PID_EffectiveSetpoint - PID_EffSetDelta);
 765:main.c        ****             }
 766:main.c        ****             
 767:main.c        ****             /* Get most up-to-date current position */
 768:main.c        ****             Position = GetPosition();
 769:main.c        ****             
 770:main.c        ****             /* Run the PID algorithm once */
 771:main.c        ****             Output = PID_UpdateValues(PID_EffectiveSetpoint, Position);
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 15


 772:main.c        ****             
 773:main.c        ****             /* Put the PID output value out on the wire */
 774:main.c        ****             PWM_Set(Output);
 775:main.c        ****             
 776:main.c        ****             /* Calculate how long the last commanded move has taken */
 777:main.c        ****             if (NewCommandedMove) {
 778:main.c        ****                 
 779:main.c        ****                 if (Position == PID_Setpoint) {
 780:main.c        ****                     
 781:main.c        ****                     /* We are at the set point, but it's not known if the motion is stable yet, we 
 782:main.c        ****                     Therefore, count how many times we have held at this location.  When it exceeds
 783:main.c        ****                     use the time we first reached this position as the move's end time. */
 784:main.c        ****                     if (LastMoveStableCount == LAST_MOVE_TIME_SAMPLE_COUNT) {
 785:main.c        ****                         
 786:main.c        ****                         /* We have arrived at the set point and have been here for 6ms (30 counts o
 787:main.c        ****                         good and calculate how long this move took */
 788:main.c        ****                         LastMoveTimeUsec = LastMoveEndTimeUsec - LastMoveStartTimeUsec;
 789:main.c        ****                         
 790:main.c        ****                         /* Clear the flag for this particular move */ 
 791:main.c        ****                         NewCommandedMove = false;
 792:main.c        ****                         
 793:main.c        ****                     } else {
 794:main.c        ****                         
 795:main.c        ****                         /* We have reached the destination but it is not yet proven stable. Increme
 796:main.c        ****                         It will be reset to zero if we deviate from this position. */              
 797:main.c        ****                         LastMoveStableCount += 1;
 798:main.c        **** 
 799:main.c        ****                         /* If the stable count is exactly 1, then this might be the start of a new 
 800:main.c        ****                         note the time.  This is potentially the END TIME of a move.  The start time
 801:main.c        ****                         when the node box sent a new set point. */
 802:main.c        ****                         if (LastMoveStableCount == 1) {
 803:main.c        ****                             LastMoveEndTimeUsec = UptimeMicroseconds;
 804:main.c        ****                         }                    
 805:main.c        ****                     }                
 806:main.c        ****                     
 807:main.c        ****                 } else {
 808:main.c        ****                     
 809:main.c        ****                     /* Reset the stable counter, because we are not at the commanded location */
 810:main.c        ****                     LastMoveStableCount = 0;                
 811:main.c        ****                 }
 812:main.c        ****             }
 813:main.c        **** 
 814:main.c        ****         } else {
 815:main.c        ****             
 816:main.c        ****             /* If the server is asking us to jog, do that instead of PID.  Drive in the direction 
 817:main.c        ****             and speed the server told us.  Translate the jog percentage, from -100 to +100, into 
 818:main.c        ****             PWM_Set values from -800 to 800 */
 819:main.c        ****             Output = (Jog * 8);
 820:main.c        ****             
 821:main.c        ****             /* Put the new jog value on the wire, instead of a PID value */
 822:main.c        ****             PWM_Set(Output);            
 823:main.c        ****         }        
 824:main.c        ****         
 825:main.c        ****     } else {
 826:main.c        ****         
 827:main.c        ****         /* Config state is not ready (configured), inhibit all motion */
 828:main.c        ****         PWM_Set(PWM_SET_NEUTRAL);        
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 16


 829:main.c        ****     }
 830:main.c        **** }
 831:main.c        **** 
 832:main.c        **** 
 833:main.c        **** /*******************************************************************************
 834:main.c        **** * Function Name: main
 835:main.c        **** ********************************************************************************
 836:main.c        **** * Summary:
 837:main.c        **** *  Setup tasks, interrupts, and perform the background task functions.
 838:main.c        **** *
 839:main.c        **** * Parameters: None
 840:main.c        **** * Return: NEVER!
 841:main.c        **** *******************************************************************************/
 842:main.c        **** int main(void) {
 843:main.c        ****     
 844:main.c        ****     /* DISABLE the drive outputs for the home and index immediately upon booting the 
 845:main.c        ****        microprocessor.  There is a race condition here: unless the actuator is on a home
 846:main.c        ****        flag or index mark, a 1 will be written to each output.  Depending on which 
 847:main.c        ****        Cypress device this is, it could end up going to one of the boot pins of the Beagle
 848:main.c        ****        Bone Black device.  Undesirable results can result: corrupt serial output on the
 849:main.c        ****        console, inabulity to boot from eMMC, or even a complete failure to power on. */
 850:main.c        ****     HOME_OUT_SetDriveMode(HOME_OUT_DM_DIG_HIZ); 
 851:main.c        ****     INDEX_OUT_SetDriveMode(INDEX_OUT_DM_DIG_HIZ); 
 852:main.c        **** 
 853:main.c        ****     
 854:main.c        ****     /********************************************************************** 
 855:main.c        ****     * Interrupts
 856:main.c        ****     **********************************************************************/
 857:main.c        ****     
 858:main.c        ****     /* BRMS timer interrupt */
 859:main.c        ****     Timer_BRMS_Start();
 860:main.c        ****     isr_brms_StartEx(BRMS_Interrupt);
 861:main.c        ****     isr_brms_SetPriority(HIGHER_PRIORITY);
 862:main.c        **** 
 863:main.c        ****     /* Sets up the Index and Reset interrupt and enables them */
 864:main.c        ****     isr_home_StartEx(HomeIsrHandler);
 865:main.c        ****     isr_home_SetPriority(DEFAULT_PRIORITY);
 866:main.c        **** 
 867:main.c        ****     /* Encoder interrupt */
 868:main.c        ****     isr_rst_encoder_StartEx(RSTIsrHandler);
 869:main.c        ****     isr_rst_encoder_SetPriority(DEFAULT_PRIORITY);
 870:main.c        ****     
 871:main.c        ****     /* Setup the SPI slave select interrupt ISR */
 872:main.c        ****     isr_spi_ss_StartEx(SPI_SS_IsrHandler);
 873:main.c        ****     isr_spi_ss_SetPriority(DEFAULT_PRIORITY);   
 874:main.c        **** 
 875:main.c        ****     /* Enable the global interrupt */
 876:main.c        ****     CyGlobalIntEnable;
 877:main.c        ****     
 878:main.c        ****     /********************************************************************** 
 879:main.c        ****     * Watchdog timer.  Implements the WDT1 automatic CPU reset.
 880:main.c        ****     **********************************************************************/
 881:main.c        **** 
 882:main.c        ****     /* If you are using the JTAG debugging probe, turn off the watchdog by
 883:main.c        ****        defining DEBUG_PROBE_ATTACHED to something, or it will reset the CPU
 884:main.c        ****        when you hit a breakpoint. */
 885:main.c        **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 17


 886:main.c        **** #ifndef DEBUG_PROBE_ATTACHED
 887:main.c        **** 	/* Set WDT counter 1 to generate reset on match */
 888:main.c        **** 	CySysWdtWriteMatch(CY_SYS_WDT_COUNTER1, WDT_COUNT1_MATCH_RESET);
 889:main.c        **** 	CySysWdtWriteMode(CY_SYS_WDT_COUNTER1, CY_SYS_WDT_MODE_RESET);
 890:main.c        ****     CySysWdtWriteClearOnMatch(CY_SYS_WDT_COUNTER1, 1u);
 891:main.c        **** 	
 892:main.c        **** 	/* Enable WDT counter 1 */
 893:main.c        **** 	CySysWdtEnable(CY_SYS_WDT_COUNTER1_MASK);
 894:main.c        **** 	
 895:main.c        **** 	/* Lock WDT registers and try to disable WDT 1 */
 896:main.c        **** 	CySysWdtLock();
 897:main.c        **** 	CySysWdtDisable(CY_SYS_WDT_COUNTER1_MASK);
 898:main.c        **** 	CySysWdtUnlock();        
 899:main.c        **** #endif    
 900:main.c        **** 
 901:main.c        ****     
 902:main.c        ****     /*********************************************************************** 
 903:main.c        ****     * Start the various subsystems.
 904:main.c        ****     ***********************************************************************/
 905:main.c        ****     I2C_Start();
 906:main.c        ****     
 907:main.c        ****     /* Start I2C for the Motor Current monitor */
 908:main.c        ****     //Init_INA(INA219_I2C_ADDR);
 909:main.c        ****     
 910:main.c        ****     CyDelay(100u);
 911:main.c        ****     SPI_1_Start();
 912:main.c        ****     
 913:main.c        ****     /* Setup the PWM at a base frequency of 15KHz, 50% duty cycle.  Clock_1 is set to
 914:main.c        ****        12MHz, so the desired period to get 15KHz is a count of 800. */
 915:main.c        ****     PWM_1_Start();
 916:main.c        ****     PWM_1_WritePeriod(PWM_15KHZ_PERIOD);
 917:main.c        ****     PWM_Set(PWM_SET_NEUTRAL);   
 918:main.c        ****     
 919:main.c        ****     /* Default the jog value to neutral (no movement) */
 920:main.c        ****     Jog = 0;
 921:main.c        ****     
 922:main.c        ****     /* Set a flag that homing is not done yet, since we just booted */
 923:main.c        ****     homingDone = false;
 924:main.c        ****    
 925:main.c        ****     /* Start counting the quadrature encoding */
 926:main.c        ****     Counter_1_Start();    
 927:main.c        ****     Counter_1_WriteCounter(ENCODER_MAX);  // Set the encoder initially to mid range
 928:main.c        ****     LastPosition = ENCODER_MAX;
 929:main.c        ****     
 930:main.c        ****     /* Clear and start the index mark counter */
 931:main.c        ****     Index_Counter_1_Start();
 932:main.c        ****     Index_Counter_1_WriteCounter(0);
 933:main.c        ****      
 934:main.c        ****     /* Start off unconfigured */
 935:main.c        ****     ConfigState = csUnconfig;  
 936:main.c        ****     ConfigSequence = 0;
 937:main.c        ****     ChecksumErrors = 0;
 938:main.c        ****     
 939:main.c        ****     /***************************/
 940:main.c        ****     /* Setup the PID subsystem */
 941:main.c        ****     PID_Initialize();
 942:main.c        ****     PID_SetMode(PID_MANUAL);
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 18


 943:main.c        ****     
 944:main.c        ****     /* Initially default to full output max until config tells us otherwise */
 945:main.c        ****     limitOutput = 800;
 946:main.c        ****     limitIterm = 800;
 947:main.c        ****     
 948:main.c        ****     /* Start off disabled */
 949:main.c        ****     PID_Setpoint          = 0;  
 950:main.c        ****     PID_EffectiveSetpoint = 0;
 951:main.c        ****     PID_EffSetDelta       = 250; //PID_EFFECTIVE_SETPOINT_DELTA_DEFAULT;
 952:main.c        ****     PID_Was_Enabled       = false;
 953:main.c        ****     PID_Enabled           = false;
 954:main.c        ****     PWM_Set(PWM_SET_NEUTRAL);
 955:main.c        ****   
 956:main.c        ****     /***********************************************************************
 957:main.c        ****     * Run the background tasks.  Assume anything executed in here will be
 958:main.c        ****     * constantly interrupted by the task scheduler.
 959:main.c        ****     ***********************************************************************/
 960:main.c        ****     while (1) {
 961:main.c        **** 
 962:main.c        ****         //TODO: Enable/disable this mechanism based on some input from the SPI master,
 963:main.c        ****         //      which might be the ACS test set, or the beagle bone node box.  Disable it for
 964:main.c        ****         //      now to prevent multi-mastering of the I2C bus, which doesn't work.
 965:main.c        ****         /*
 966:main.c        ****         PROBE_Write(1);
 967:main.c        ****         MotorCurrentRead();
 968:main.c        ****         PROBE_Write(0);
 969:main.c        ****         */
 970:main.c        ****         
 971:main.c        ****         /*
 972:main.c        ****         if (UptimeMicroseconds > (LastUptimeMicroseconds + 500)) {
 973:main.c        ****             LastUptimeMicroseconds = UptimeMicroseconds;
 974:main.c        ****             
 975:main.c        ****             if (toggle) {
 976:main.c        ****                 PROBE_Write(1);
 977:main.c        ****                 toggle = false;
 978:main.c        ****             } else {
 979:main.c        ****                 PROBE_Write(0);
 980:main.c        ****                 toggle = true;
 981:main.c        ****             }
 982:main.c        ****         }
 983:main.c        ****         */
 984:main.c        ****         
 985:main.c        ****         
 986:main.c        ****         /* Use the LED as a heartbeat */
 987:main.c        ****         if (UptimeSeconds % 2) {
 988:main.c        ****             LED_Write(1);
 989:main.c        ****         } else {
 990:main.c        ****             LED_Write(0);
 991:main.c        ****         } 
 992:main.c        ****         
 993:main.c        ****         // Delay 10ms before next loop iteration
 994:main.c        ****         CyDelay(10);         
 995:main.c        ****         
 996:main.c        ****         
 997:main.c        ****    
 998:main.c        ****     /* ------------------------------------------------------------------------------------ */
 999:main.c        ****     /* Every loop, refresh the counter of the watchdog to indicate the system is still alive
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 19


1000:main.c        ****        and not stalled out in some interrupt somewhre.  Were the BRMS to stop working or the 
1001:main.c        ****        motion thread to die, the CPU will be reset after 2 seconds. */
1002:main.c        **** ////    WDT_COUNT1_REFRESH();        
1003:main.c        ****     /* ------------------------------------------------------------------------------------ */
1004:main.c        ****         
1005:main.c        ****     }
1006:main.c        ****       
1007:main.c        ****     
1008:main.c        ****     /***********************************************************************
1009:main.c        ****     *  We should never reach this, if we do, we'll crash (reset).
1010:main.c        ****     ***********************************************************************/
1011:main.c        ****     return 1;       
1012:main.c        **** }
1013:main.c        **** 
1014:main.c        **** 
1015:main.c        **** /*******************************************************************************
1016:main.c        **** * Function Name: BRMS_Interrupt
1017:main.c        **** ********************************************************************************
1018:main.c        **** * Summary:
1019:main.c        **** *  Hooks the 200us tick for the BRMS scheduler.
1020:main.c        **** *
1021:main.c        **** * Parameters: None
1022:main.c        **** * Return: None
1023:main.c        **** *******************************************************************************/
1024:main.c        **** CY_ISR(BRMS_Interrupt) {
1025:main.c        ****     
1026:main.c        ****     static uint32_t brmsTask;                 // The BRMS schedule counter
1027:main.c        **** 
1028:main.c        ****     static uint32_t brmsRG1Mask = 0b00000001; // Rate group 1 mask
1029:main.c        ****     static uint32_t brmsRG2Mask = 0b00000010; // Rate group 2 mask
1030:main.c        ****     static uint32_t brmsRG3Mask = 0b00000100; // Rate group 3 mask
1031:main.c        ****     static uint32_t brmsRG4Mask = 0b00001000; // Rate group 4 mask
1032:main.c        ****     static uint32_t brmsRG5Mask = 0b00010000; // Rate group 5 mask
1033:main.c        ****     
1034:main.c        ****     /* Clears the timer interrupt */
1035:main.c        ****     Timer_BRMS_ClearInterrupt(Timer_BRMS_INTR_MASK_CC_MATCH);
1036:main.c        **** 
1037:main.c        ****     PROBE_Write(1);
1038:main.c        ****     
1039:main.c        ****     /* Use this 200us interrupt as a clock mechanism */
1040:main.c        ****     UptimeMicroseconds += 200;
1041:main.c        ****     UptimeMicrosecondsAccumulator += 200;
1042:main.c        ****     
1043:main.c        ****     /* Count milliseconds */
1044:main.c        ****     if (UptimeMicrosecondsAccumulator > 1000) {
1045:main.c        ****         UptimeMicrosecondsAccumulator = 0;
1046:main.c        ****         UptimeMilliseconds += 1;
1047:main.c        ****         UptimeMillisecondsAccumulator += 1;
1048:main.c        ****     }
1049:main.c        ****     
1050:main.c        ****     /* Count seconds */
1051:main.c        ****     if (UptimeMillisecondsAccumulator > 1000) {
1052:main.c        ****         UptimeMillisecondsAccumulator = 0;
1053:main.c        ****         UptimeSeconds += 1;
1054:main.c        ****     }
1055:main.c        ****     
1056:main.c        ****     /* Increment the BRMS task counter infinitely */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 20


1057:main.c        ****     brmsTask++;
1058:main.c        **** 
1059:main.c        ****     /* Determine which rate group to run.  Do this by applying the rate group masks
1060:main.c        ****        sequentially until one results in a "true" value.  
1061:main.c        ****     
1062:main.c        ****        For example: the 1st rate group is invoked every time the brmsTask value ends 
1063:main.c        ****        in 0bxxx1, and ignored when it's 0bxxx0.  
1064:main.c        ****     
1065:main.c        ****        The second rate group is invoked half as often as the first: when the brmsTask
1066:main.c        ****        value ends in 0bxx10. 
1067:main.c        ****     
1068:main.c        ****        The third rate group is invoked half as often as the second: when brmsTask
1069:main.c        ****        ends in 0bx100.  
1070:main.c        ****     
1071:main.c        ****        In this way, we have decreasing tiers of tasks that are run for at most 200us.
1072:main.c        ****     
1073:main.c        ****        The "background" task does not run at interrupt level.  The main() of the program
1074:main.c        ****        represents everything non time critical, using whatever CPU is left over when the
1075:main.c        ****        interrupt returns.
1076:main.c        ****     */
1077:main.c        ****     if (brmsTask & brmsRG1Mask) {
1078:main.c        ****         
1079:main.c        ****         /* The PID task has the highest priority for this system.  Run it every time rate 
1080:main.c        ****            group 1 comes around, which results in an invocation of PID every 400us.  Equal
1081:main.c        ****            to a 2.5KHz update rate. */
1082:main.c        ****         runRateGroup1_PID();
1083:main.c        ****         
1084:main.c        ****     } else if (brmsTask & brmsRG2Mask) {
1085:main.c        ****         
1086:main.c        ****         /* Rate group 2 is run every 0.8ms, or 1.25KHz*/
1087:main.c        ****         //runRateGroup2_TBD();           
1088:main.c        ****         
1089:main.c        ****     } else if (brmsTask & brmsRG3Mask) {
1090:main.c        ****         
1091:main.c        ****         /* Rate group 3 is run every 1.6ms, or 625Hz*/
1092:main.c        ****         runRateGroup3_SPI();
1093:main.c        ****         
1094:main.c        ****     } else if (brmsTask & brmsRG4Mask) {
1095:main.c        ****      
1096:main.c        ****         /* Rate group 4 is run every 3.2ms, or 312Hz*/
1097:main.c        ****         //runRateGroup4_TBD();
1098:main.c        **** 
1099:main.c        ****     } else if (brmsTask & brmsRG5Mask) {
1100:main.c        ****      
1101:main.c        ****         /* Rate group 5 is run every 6.4ms, or 156Hz*/
1102:main.c        ****         //runRateGroup5_TBD();
1103:main.c        ****     }
1104:main.c        ****     
1105:main.c        ****     PROBE_Write(0);
1106:main.c        ****    
1107:main.c        **** }
1108:main.c        **** 
1109:main.c        **** 
1110:main.c        **** /*******************************************************************************
1111:main.c        **** * Function Name: RSTIsrHandler
1112:main.c        **** ********************************************************************************
1113:main.c        **** * Summary:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 21


1114:main.c        **** *  The interrupt handler for resetting the encoder count interrupts.
1115:main.c        **** *  Clears a pending Interrupt.
1116:main.c        **** *  Clears a pin Interrupt.
1117:main.c        **** *
1118:main.c        **** * Parameters: None
1119:main.c        **** * Return: None
1120:main.c        **** *******************************************************************************/
1121:main.c        **** CY_ISR(RSTIsrHandler) {
  28              		.loc 1 1121 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
1122:main.c        ****     
1123:main.c        ****     /* Clear pending Interrupt */
1124:main.c        ****     isr_rst_encoder_ClearPending(); 
  36              		.loc 1 1124 0
  37 0002 FFF7FEFF 		bl	isr_rst_encoder_ClearPending
  38              	.LVL0:
1125:main.c        ****     
1126:main.c        ****     /* Clear pin Interrupt */
1127:main.c        ****     Reset_Encoder_ClearInterrupt();
  39              		.loc 1 1127 0
  40 0006 FFF7FEFF 		bl	Reset_Encoder_ClearInterrupt
  41              	.LVL1:
1128:main.c        ****     
1129:main.c        ****     /* Clear the 24b Encoder (Absolute Position Counter) */
1130:main.c        ****     Counter_1_WriteCounter(0);
  42              		.loc 1 1130 0
  43 000a 0020     		movs	r0, #0
  44 000c FFF7FEFF 		bl	Counter_1_WriteCounter
  45              	.LVL2:
1131:main.c        ****     
1132:main.c        ****     /* Clear the index counter */
1133:main.c        ****     Index_Counter_1_WriteCounter(0);  
  46              		.loc 1 1133 0
  47 0010 0020     		movs	r0, #0
  48 0012 FFF7FEFF 		bl	Index_Counter_1_WriteCounter
  49              	.LVL3:
1134:main.c        ****     
1135:main.c        ****     /* When we hit the index mark, homing is complete */
1136:main.c        ****     homingDone = true;    
  50              		.loc 1 1136 0
  51 0016 0122     		movs	r2, #1
  52 0018 014B     		ldr	r3, .L2
  53 001a 1A70     		strb	r2, [r3]
1137:main.c        **** }
  54              		.loc 1 1137 0
  55              		@ sp needed
  56 001c 10BD     		pop	{r4, pc}
  57              	.L3:
  58 001e C046     		.align	2
  59              	.L2:
  60 0020 00000000 		.word	.LANCHOR0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 22


  61              		.cfi_endproc
  62              	.LFE43:
  63              		.size	RSTIsrHandler, .-RSTIsrHandler
  64              		.section	.text.HomeIsrHandler,"ax",%progbits
  65              		.align	2
  66              		.global	HomeIsrHandler
  67              		.code	16
  68              		.thumb_func
  69              		.type	HomeIsrHandler, %function
  70              	HomeIsrHandler:
  71              	.LFB44:
1138:main.c        **** 
1139:main.c        **** 
1140:main.c        **** /*******************************************************************************
1141:main.c        **** * Function Name: HomeIsrHandler
1142:main.c        **** ********************************************************************************
1143:main.c        **** * Summary:
1144:main.c        **** *  The interrupt handler for resetting the encoder count interrupts.
1145:main.c        **** *  Clears a pending Interrupt.
1146:main.c        **** *  Clears a pin Interrupt.
1147:main.c        **** *
1148:main.c        **** * Parameters: None
1149:main.c        **** * Return: None
1150:main.c        **** *******************************************************************************/
1151:main.c        **** CY_ISR(HomeIsrHandler) {
  72              		.loc 1 1151 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76 0000 10B5     		push	{r4, lr}
  77              		.cfi_def_cfa_offset 8
  78              		.cfi_offset 4, -8
  79              		.cfi_offset 14, -4
1152:main.c        ****     
1153:main.c        ****     /* Clear pending Interrupt */
1154:main.c        ****     isr_home_ClearPending(); 
  80              		.loc 1 1154 0
  81 0002 FFF7FEFF 		bl	isr_home_ClearPending
  82              	.LVL4:
1155:main.c        ****     
1156:main.c        ****     /* Clear pin Interrupt */
1157:main.c        ****     HOME_IN_ClearInterrupt();
  83              		.loc 1 1157 0
  84 0006 FFF7FEFF 		bl	HOME_IN_ClearInterrupt
  85              	.LVL5:
1158:main.c        **** 
1159:main.c        ****     /* Clear the 24b Encoder (Absolute Position Counter) */
1160:main.c        ****     Counter_1_WriteCounter(0);
  86              		.loc 1 1160 0
  87 000a 0020     		movs	r0, #0
  88 000c FFF7FEFF 		bl	Counter_1_WriteCounter
  89              	.LVL6:
1161:main.c        ****     
1162:main.c        ****     /* Set a flag that homing is not done yet until the next index position */
1163:main.c        ****     homingDone = false;
  90              		.loc 1 1163 0
  91 0010 0022     		movs	r2, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 23


  92 0012 014B     		ldr	r3, .L5
  93 0014 1A70     		strb	r2, [r3]
1164:main.c        **** }
  94              		.loc 1 1164 0
  95              		@ sp needed
  96 0016 10BD     		pop	{r4, pc}
  97              	.L6:
  98              		.align	2
  99              	.L5:
 100 0018 00000000 		.word	.LANCHOR0
 101              		.cfi_endproc
 102              	.LFE44:
 103              		.size	HomeIsrHandler, .-HomeIsrHandler
 104              		.section	.text.SPI_SS_IsrHandler,"ax",%progbits
 105              		.align	2
 106              		.global	SPI_SS_IsrHandler
 107              		.code	16
 108              		.thumb_func
 109              		.type	SPI_SS_IsrHandler, %function
 110              	SPI_SS_IsrHandler:
 111              	.LFB45:
1165:main.c        **** 
1166:main.c        **** 
1167:main.c        **** /*******************************************************************************
1168:main.c        **** * Function Name: SPI_SS_IsrHandler
1169:main.c        **** ********************************************************************************
1170:main.c        **** * Summary:
1171:main.c        **** *  The interrupt handler for knowing when the SPI master deasserts the slave select.
1172:main.c        **** *  Clears a pin Interrupt.
1173:main.c        **** *
1174:main.c        **** * Parameters: None
1175:main.c        **** * Return: None
1176:main.c        **** *******************************************************************************/
1177:main.c        **** CY_ISR(SPI_SS_IsrHandler) {
 112              		.loc 1 1177 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116 0000 10B5     		push	{r4, lr}
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 4, -8
 119              		.cfi_offset 14, -4
1178:main.c        ****     
1179:main.c        ****     uint32_t i;
1180:main.c        ****     
1181:main.c        ****     /* Clear SPI slave select pin Interrupt */
1182:main.c        ****     spi_ss_ClearInterrupt();
 120              		.loc 1 1182 0
 121 0002 FFF7FEFF 		bl	spi_ss_ClearInterrupt
 122              	.LVL7:
1183:main.c        ****     
1184:main.c        ****     /* Make sure the slave select is actually de-asserted before proceeding */
1185:main.c        ****     if (!spi_ss_Read()) 
 123              		.loc 1 1185 0
 124 0006 FFF7FEFF 		bl	spi_ss_Read
 125              	.LVL8:
 126 000a 0028     		cmp	r0, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 24


 127 000c 1DD0     		beq	.L7
1186:main.c        ****         return;
1187:main.c        ****    
1188:main.c        ****     /* Update the last message tick timer */
1189:main.c        ****     LastMessageTimeSeconds = UptimeSeconds;
 128              		.loc 1 1189 0
 129 000e 0F4B     		ldr	r3, .L12
 130 0010 1A68     		ldr	r2, [r3]
 131 0012 5B68     		ldr	r3, [r3, #4]
 132 0014 0E4B     		ldr	r3, .L12+4
 133 0016 1A60     		str	r2, [r3]
1190:main.c        **** 
1191:main.c        ****     /* It's possible the slave select has fired and returned without transmitting any data (glitche
1192:main.c        ****        check the messaging state before resetting the buffers */
1193:main.c        ****     switch (txMessageState) {
 134              		.loc 1 1193 0
 135 0018 0E4B     		ldr	r3, .L12+8
 136 001a 1B78     		ldrb	r3, [r3]
 137 001c 012B     		cmp	r3, #1
 138 001e 14D1     		bne	.L7
1194:main.c        ****      
1195:main.c        ****         /* FIFO is not yet loaded and slave select deasserted, this is a glitch */ 
1196:main.c        ****         case txmsClear:
1197:main.c        ****             break;
1198:main.c        ****      
1199:main.c        ****         /* A message was readied for transmission */
1200:main.c        ****         case txmsLoaded:
1201:main.c        ****          
1202:main.c        ****             /* FIFO is clear and slave select deasserted, it's time to reset */ 
1203:main.c        ****             
1204:main.c        ****             /* Clear the transmit message buffer, the comm thread will fill it in again to make sur
1205:main.c        ****             bzero(txMessage.buf, sizeof(txMessage.buf)); 
 139              		.loc 1 1205 0
 140 0020 1B22     		movs	r2, #27
 141 0022 0021     		movs	r1, #0
 142 0024 0C48     		ldr	r0, .L12+12
 143 0026 FFF7FEFF 		bl	memset
 144              	.LVL9:
1206:main.c        **** 
1207:main.c        ****             /* Message from the master is completely clocked in by now */     
1208:main.c        ****             for (i = 0; i < sizeof(rxMessage.buf); i++) {
 145              		.loc 1 1208 0
 146 002a 0024     		movs	r4, #0
 147 002c 04E0     		b	.L10
 148              	.LVL10:
 149              	.L11:
1209:main.c        ****                 rxMessage.buf[i] = (uint8_t) SPI_1_SpiUartReadRxData();            
 150              		.loc 1 1209 0 discriminator 3
 151 002e FFF7FEFF 		bl	SPI_1_SpiUartReadRxData
 152              	.LVL11:
 153 0032 0A4B     		ldr	r3, .L12+16
 154 0034 1855     		strb	r0, [r3, r4]
1208:main.c        ****                 rxMessage.buf[i] = (uint8_t) SPI_1_SpiUartReadRxData();            
 155              		.loc 1 1208 0 discriminator 3
 156 0036 0134     		adds	r4, r4, #1
 157              	.LVL12:
 158              	.L10:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 25


1208:main.c        ****                 rxMessage.buf[i] = (uint8_t) SPI_1_SpiUartReadRxData();            
 159              		.loc 1 1208 0 is_stmt 0 discriminator 1
 160 0038 1A2C     		cmp	r4, #26
 161 003a F8D9     		bls	.L11
1210:main.c        ****             }
1211:main.c        ****             
1212:main.c        ****             /* Clear out all the bytes in the receive side so they can be filled in again */
1213:main.c        ****             SPI_1_SpiUartClearRxBuffer();  
 162              		.loc 1 1213 0 is_stmt 1
 163 003c FFF7FEFF 		bl	SPI_1_SpiUartClearRxBuffer
 164              	.LVL13:
1214:main.c        ****             
1215:main.c        ****             /* Clear out any remaining bytes in the transmit buffer, in case the message transfer w
1216:main.c        ****             SPI_1_SpiUartClearTxBuffer();
 165              		.loc 1 1216 0
 166 0040 FFF7FEFF 		bl	SPI_1_SpiUartClearTxBuffer
 167              	.LVL14:
1217:main.c        ****             
1218:main.c        ****             /* Set the state to indicate to the messaging thread that it's time to load the TX buff
1219:main.c        ****             txMessageState = txmsClear;        
 168              		.loc 1 1219 0
 169 0044 0022     		movs	r2, #0
 170 0046 034B     		ldr	r3, .L12+8
 171 0048 1A70     		strb	r2, [r3]
 172              	.LVL15:
 173              	.L7:
1220:main.c        ****             break;
1221:main.c        ****             
1222:main.c        ****     } 
1223:main.c        ****         
1224:main.c        **** }
 174              		.loc 1 1224 0
 175              		@ sp needed
 176 004a 10BD     		pop	{r4, pc}
 177              	.L13:
 178              		.align	2
 179              	.L12:
 180 004c 00000000 		.word	.LANCHOR1
 181 0050 00000000 		.word	LastMessageTimeSeconds
 182 0054 00000000 		.word	txMessageState
 183 0058 00000000 		.word	txMessage
 184 005c 00000000 		.word	rxMessage
 185              		.cfi_endproc
 186              	.LFE45:
 187              		.size	SPI_SS_IsrHandler, .-SPI_SS_IsrHandler
 188              		.section	.text.AssertFault,"ax",%progbits
 189              		.align	2
 190              		.global	AssertFault
 191              		.code	16
 192              		.thumb_func
 193              		.type	AssertFault, %function
 194              	AssertFault:
 195              	.LFB32:
 320:main.c        ****  
 196              		.loc 1 320 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 26


 199              		@ frame_needed = 0, uses_anonymous_args = 0
 200              		@ link register save eliminated.
 201              	.LVL16:
 322:main.c        ****      
 202              		.loc 1 322 0
 203 0000 0028     		cmp	r0, #0
 204 0002 03D1     		bne	.L18
 326:main.c        ****             break;        
 205              		.loc 1 326 0
 206 0004 0022     		movs	r2, #0
 207 0006 044B     		ldr	r3, .L19
 208 0008 1A70     		strb	r2, [r3]
 327:main.c        ****         
 209              		.loc 1 327 0
 210 000a 03E0     		b	.L14
 211              	.L18:
 331:main.c        ****             break;        
 212              		.loc 1 331 0
 213 000c 024B     		ldr	r3, .L19
 214 000e 1A78     		ldrb	r2, [r3]
 215 0010 1043     		orrs	r0, r2
 216              	.LVL17:
 217 0012 1870     		strb	r0, [r3]
 218              	.L14:
 334:main.c        **** 
 219              		.loc 1 334 0
 220              		@ sp needed
 221 0014 7047     		bx	lr
 222              	.L20:
 223 0016 C046     		.align	2
 224              	.L19:
 225 0018 00000000 		.word	FaultState
 226              		.cfi_endproc
 227              	.LFE32:
 228              		.size	AssertFault, .-AssertFault
 229              		.section	.text.ClearFault,"ax",%progbits
 230              		.align	2
 231              		.global	ClearFault
 232              		.code	16
 233              		.thumb_func
 234              		.type	ClearFault, %function
 235              	ClearFault:
 236              	.LFB33:
 347:main.c        ****  
 237              		.loc 1 347 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242              	.LVL18:
 349:main.c        ****      
 243              		.loc 1 349 0
 244 0000 0028     		cmp	r0, #0
 245 0002 03D1     		bne	.L25
 353:main.c        ****             break;        
 246              		.loc 1 353 0
 247 0004 0022     		movs	r2, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 27


 248 0006 044B     		ldr	r3, .L26
 249 0008 1A70     		strb	r2, [r3]
 354:main.c        ****         
 250              		.loc 1 354 0
 251 000a 03E0     		b	.L21
 252              	.L25:
 358:main.c        ****             break;        
 253              		.loc 1 358 0
 254 000c 024A     		ldr	r2, .L26
 255 000e 1378     		ldrb	r3, [r2]
 256 0010 8343     		bics	r3, r0
 257 0012 1370     		strb	r3, [r2]
 258              	.L21:
 361:main.c        **** 
 259              		.loc 1 361 0
 260              		@ sp needed
 261 0014 7047     		bx	lr
 262              	.L27:
 263 0016 C046     		.align	2
 264              	.L26:
 265 0018 00000000 		.word	FaultState
 266              		.cfi_endproc
 267              	.LFE33:
 268              		.size	ClearFault, .-ClearFault
 269              		.global	__aeabi_f2iz
 270              		.section	.text.MotorCurrentRead,"ax",%progbits
 271              		.align	2
 272              		.global	MotorCurrentRead
 273              		.code	16
 274              		.thumb_func
 275              		.type	MotorCurrentRead, %function
 276              	MotorCurrentRead:
 277              	.LFB34:
 373:main.c        ****     
 278              		.loc 1 373 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282 0000 10B5     		push	{r4, lr}
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 4, -8
 285              		.cfi_offset 14, -4
 378:main.c        ****     
 286              		.loc 1 378 0
 287 0002 4020     		movs	r0, #64
 288 0004 FFF7FEFF 		bl	getCurrent_mA
 289              	.LVL19:
 381:main.c        **** }
 290              		.loc 1 381 0
 291 0008 FFF7FEFF 		bl	__aeabi_f2iz
 292              	.LVL20:
 293 000c 00B2     		sxth	r0, r0
 294 000e 014B     		ldr	r3, .L29
 295 0010 1880     		strh	r0, [r3]
 382:main.c        **** 
 296              		.loc 1 382 0
 297              		@ sp needed
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 28


 298 0012 10BD     		pop	{r4, pc}
 299              	.L30:
 300              		.align	2
 301              	.L29:
 302 0014 00000000 		.word	MotorCurrent
 303              		.cfi_endproc
 304              	.LFE34:
 305              		.size	MotorCurrentRead, .-MotorCurrentRead
 306              		.section	.text.PWM_Set,"ax",%progbits
 307              		.align	2
 308              		.global	PWM_Set
 309              		.code	16
 310              		.thumb_func
 311              		.type	PWM_Set, %function
 312              	PWM_Set:
 313              	.LFB36:
 603:main.c        ****         
 314              		.loc 1 603 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              	.LVL21:
 319 0000 10B5     		push	{r4, lr}
 320              		.cfi_def_cfa_offset 8
 321              		.cfi_offset 4, -8
 322              		.cfi_offset 14, -4
 607:main.c        **** }
 323              		.loc 1 607 0
 324 0002 C823     		movs	r3, #200
 325 0004 9B00     		lsls	r3, r3, #2
 326 0006 9C46     		mov	ip, r3
 327 0008 6044     		add	r0, r0, ip
 328              	.LVL22:
 329 000a FFF7FEFF 		bl	PWM_1_WriteCompare
 330              	.LVL23:
 608:main.c        **** 
 331              		.loc 1 608 0
 332              		@ sp needed
 333 000e 10BD     		pop	{r4, pc}
 334              		.cfi_endproc
 335              	.LFE36:
 336              		.size	PWM_Set, .-PWM_Set
 337              		.section	.text.GetPosition,"ax",%progbits
 338              		.align	2
 339              		.global	GetPosition
 340              		.code	16
 341              		.thumb_func
 342              		.type	GetPosition, %function
 343              	GetPosition:
 344              	.LFB37:
 620:main.c        ****     
 345              		.loc 1 620 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349 0000 10B5     		push	{r4, lr}
 350              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 29


 351              		.cfi_offset 4, -8
 352              		.cfi_offset 14, -4
 626:main.c        ****     
 353              		.loc 1 626 0
 354 0002 FFF7FEFF 		bl	Counter_1_ReadCounter
 355              	.LVL24:
 356 0006 0B4B     		ldr	r3, .L35
 357 0008 9860     		str	r0, [r3, #8]
 630:main.c        ****         
 358              		.loc 1 630 0
 359 000a 9A68     		ldr	r2, [r3, #8]
 360 000c 0A4B     		ldr	r3, .L35+4
 361 000e 9A42     		cmp	r2, r3
 362 0010 06D9     		bls	.L33
 632:main.c        ****         
 363              		.loc 1 632 0
 364 0012 084A     		ldr	r2, .L35
 365 0014 9368     		ldr	r3, [r2, #8]
 366 0016 0949     		ldr	r1, .L35+8
 367 0018 8C46     		mov	ip, r1
 368 001a 6344     		add	r3, r3, ip
 369 001c D360     		str	r3, [r2, #12]
 370 001e 02E0     		b	.L34
 371              	.L33:
 637:main.c        ****     }
 372              		.loc 1 637 0
 373 0020 044B     		ldr	r3, .L35
 374 0022 9A68     		ldr	r2, [r3, #8]
 375 0024 DA60     		str	r2, [r3, #12]
 376              	.L34:
 641:main.c        ****     return result;
 377              		.loc 1 641 0
 378 0026 034B     		ldr	r3, .L35
 379 0028 D968     		ldr	r1, [r3, #12]
 380 002a 054A     		ldr	r2, .L35+12
 381 002c 1160     		str	r1, [r2]
 642:main.c        **** }
 382              		.loc 1 642 0
 383 002e D868     		ldr	r0, [r3, #12]
 643:main.c        **** 
 384              		.loc 1 643 0
 385              		@ sp needed
 386 0030 10BD     		pop	{r4, pc}
 387              	.L36:
 388 0032 C046     		.align	2
 389              	.L35:
 390 0034 00000000 		.word	.LANCHOR1
 391 0038 FFFFEF00 		.word	15728639
 392 003c 010000FF 		.word	-16777215
 393 0040 00000000 		.word	Position
 394              		.cfi_endproc
 395              	.LFE37:
 396              		.size	GetPosition, .-GetPosition
 397              		.section	.text.runRateGroup3_SPI,"ax",%progbits
 398              		.align	2
 399              		.global	runRateGroup3_SPI
 400              		.code	16
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 30


 401              		.thumb_func
 402              		.type	runRateGroup3_SPI, %function
 403              	runRateGroup3_SPI:
 404              	.LFB35:
 394:main.c        ****  
 405              		.loc 1 394 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409 0000 70B5     		push	{r4, r5, r6, lr}
 410              		.cfi_def_cfa_offset 16
 411              		.cfi_offset 4, -16
 412              		.cfi_offset 5, -12
 413              		.cfi_offset 6, -8
 414              		.cfi_offset 14, -4
 404:main.c        ****         return;
 415              		.loc 1 404 0
 416 0002 954B     		ldr	r3, .L54
 417 0004 1B68     		ldr	r3, [r3]
 418 0006 DB07     		lsls	r3, r3, #31
 419 0008 00D5     		bpl	.LCB323
 420 000a 23E1     		b	.L37	@long jump
 421              	.LCB323:
 408:main.c        ****      
 422              		.loc 1 408 0
 423 000c 934B     		ldr	r3, .L54+4
 424 000e 1B78     		ldrb	r3, [r3]
 425 0010 002B     		cmp	r3, #0
 426 0012 00D0     		beq	.LCB328
 427 0014 1EE1     		b	.L37	@long jump
 428              	.LCB328:
 414:main.c        ****             opcode   = (rxMessage_opcodes_t) rxMessage.overlay.opcode;
 429              		.loc 1 414 0
 430 0016 924B     		ldr	r3, .L54+8
 431 0018 5878     		ldrb	r0, [r3, #1]
 432              	.LVL25:
 415:main.c        ****             
 433              		.loc 1 415 0
 434 001a 9C78     		ldrb	r4, [r3, #2]
 435              	.LVL26:
 418:main.c        ****                 size = sizeof(txMessage.buf);                            
 436              		.loc 1 418 0
 437 001c 1B28     		cmp	r0, #27
 438 001e 00D9     		bls	.L40
 419:main.c        ****         
 439              		.loc 1 419 0
 440 0020 1B20     		movs	r0, #27
 441              	.LVL27:
 442              	.L40:
 422:main.c        ****                 checksum += rxMessage.buf[i]; 
 443              		.loc 1 422 0
 444 0022 0022     		movs	r2, #0
 445 0024 0023     		movs	r3, #0
 446 0026 05E0     		b	.L41
 447              	.LVL28:
 448              	.L42:
 423:main.c        **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 31


 449              		.loc 1 423 0 discriminator 3
 450 0028 8D49     		ldr	r1, .L54+8
 451 002a C95C     		ldrb	r1, [r1, r3]
 452 002c 5218     		adds	r2, r2, r1
 453              	.LVL29:
 454 002e D2B2     		uxtb	r2, r2
 455              	.LVL30:
 422:main.c        ****                 checksum += rxMessage.buf[i]; 
 456              		.loc 1 422 0 discriminator 3
 457 0030 0133     		adds	r3, r3, #1
 458              	.LVL31:
 459 0032 DBB2     		uxtb	r3, r3
 460              	.LVL32:
 461              	.L41:
 422:main.c        ****                 checksum += rxMessage.buf[i]; 
 462              		.loc 1 422 0 is_stmt 0 discriminator 1
 463 0034 9842     		cmp	r0, r3
 464 0036 F7D8     		bhi	.L42
 426:main.c        ****                 
 465              		.loc 1 426 0 is_stmt 1
 466 0038 002A     		cmp	r2, #0
 467 003a 09D0     		beq	.L43
 428:main.c        ****                 txMessage.msg.size = sizeof(txMessage_t);
 468              		.loc 1 428 0
 469 003c 894B     		ldr	r3, .L54+12
 470              	.LVL33:
 471 003e 5C71     		strb	r4, [r3, #5]
 429:main.c        ****                 ChecksumErrors++;
 472              		.loc 1 429 0
 473 0040 1B22     		movs	r2, #27
 474              	.LVL34:
 475 0042 1A71     		strb	r2, [r3, #4]
 430:main.c        ****                 
 476              		.loc 1 430 0
 477 0044 884A     		ldr	r2, .L54+16
 478 0046 1388     		ldrh	r3, [r2]
 479 0048 0133     		adds	r3, r3, #1
 480 004a 9BB2     		uxth	r3, r3
 481 004c 1380     		strh	r3, [r2]
 482 004e 9EE0     		b	.L44
 483              	.LVL35:
 484              	.L43:
 436:main.c        ****                 
 485              		.loc 1 436 0
 486 0050 631E     		subs	r3, r4, #1
 487              	.LVL36:
 488 0052 DBB2     		uxtb	r3, r3
 489 0054 022B     		cmp	r3, #2
 490 0056 00D9     		bls	.LCB394
 491 0058 99E0     		b	.L44	@long jump
 492              	.LCB394:
 438:main.c        ****                     
 493              		.loc 1 438 0
 494 005a 022C     		cmp	r4, #2
 495 005c 2CD0     		beq	.L45
 496 005e 032C     		cmp	r4, #3
 497 0060 79D0     		beq	.L46
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 32


 498 0062 012C     		cmp	r4, #1
 499 0064 00D0     		beq	.LCB400
 500 0066 92E0     		b	.L44	@long jump
 501              	.LCB400:
 444:main.c        ****                            
 502              		.loc 1 444 0
 503 0068 FFF7FEFF 		bl	GetPosition
 504              	.LVL37:
 505 006c 7F4B     		ldr	r3, .L54+20
 506 006e 1860     		str	r0, [r3]
 447:main.c        ****                             PID_EffectiveSetpoint = LastPosition;                                  
 507              		.loc 1 447 0
 508 0070 1968     		ldr	r1, [r3]
 509 0072 7F4A     		ldr	r2, .L54+24
 510 0074 1160     		str	r1, [r2]
 448:main.c        ****                             
 511              		.loc 1 448 0
 512 0076 1A68     		ldr	r2, [r3]
 513 0078 7E4B     		ldr	r3, .L54+28
 514 007a 1A60     		str	r2, [r3]
 451:main.c        ****                             PID_Enabled = false;
 515              		.loc 1 451 0
 516 007c 0023     		movs	r3, #0
 517 007e 7E4A     		ldr	r2, .L54+32
 518 0080 1370     		strb	r3, [r2]
 452:main.c        **** 
 519              		.loc 1 452 0
 520 0082 7E4A     		ldr	r2, .L54+36
 521 0084 1370     		strb	r3, [r2]
 455:main.c        ****                             
 522              		.loc 1 455 0
 523 0086 7E4A     		ldr	r2, .L54+40
 524 0088 1370     		strb	r3, [r2]
 458:main.c        ****                             limitIterm = rxMessage.config.limitIterm;
 525              		.loc 1 458 0
 526 008a 754B     		ldr	r3, .L54+8
 527 008c 197C     		ldrb	r1, [r3, #16]
 528 008e 5A7C     		ldrb	r2, [r3, #17]
 529 0090 1202     		lsls	r2, r2, #8
 530 0092 0A43     		orrs	r2, r1
 531 0094 7B49     		ldr	r1, .L54+44
 532 0096 0A80     		strh	r2, [r1]
 459:main.c        ****                                 
 533              		.loc 1 459 0
 534 0098 997C     		ldrb	r1, [r3, #18]
 535 009a DA7C     		ldrb	r2, [r3, #19]
 536 009c 1202     		lsls	r2, r2, #8
 537 009e 0A43     		orrs	r2, r1
 538 00a0 7949     		ldr	r1, .L54+48
 539 00a2 0A80     		strh	r2, [r1]
 474:main.c        ****                             ConfigSequence = rxMessage.config.sequence;
 540              		.loc 1 474 0
 541 00a4 0221     		movs	r1, #2
 542 00a6 794A     		ldr	r2, .L54+52
 543 00a8 1170     		strb	r1, [r2]
 475:main.c        ****                         
 544              		.loc 1 475 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 33


 545 00aa DA78     		ldrb	r2, [r3, #3]
 546 00ac 784B     		ldr	r3, .L54+56
 547 00ae 1A70     		strb	r2, [r3]
 478:main.c        ****                             break;
 548              		.loc 1 478 0
 549 00b0 0020     		movs	r0, #0
 550 00b2 FFF7FEFF 		bl	ClearFault
 551              	.LVL38:
 479:main.c        **** 
 552              		.loc 1 479 0
 553 00b6 6AE0     		b	.L44
 554              	.LVL39:
 555              	.L45:
 483:main.c        ****                             
 556              		.loc 1 483 0
 557 00b8 6948     		ldr	r0, .L54+8
 558              	.LVL40:
 559 00ba C378     		ldrb	r3, [r0, #3]
 560 00bc 5A1E     		subs	r2, r3, #1
 561 00be 9341     		sbcs	r3, r3, r2
 562              	.LVL41:
 563 00c0 6E4A     		ldr	r2, .L54+36
 564 00c2 1370     		strb	r3, [r2]
 486:main.c        ****                                 
 565              		.loc 1 486 0
 566 00c4 0379     		ldrb	r3, [r0, #4]
 567 00c6 4279     		ldrb	r2, [r0, #5]
 568 00c8 1202     		lsls	r2, r2, #8
 569 00ca 1A43     		orrs	r2, r3
 570 00cc 8379     		ldrb	r3, [r0, #6]
 571 00ce 1B04     		lsls	r3, r3, #16
 572 00d0 1343     		orrs	r3, r2
 573 00d2 1A00     		movs	r2, r3
 574 00d4 C379     		ldrb	r3, [r0, #7]
 575 00d6 1B06     		lsls	r3, r3, #24
 576 00d8 1343     		orrs	r3, r2
 577 00da 654A     		ldr	r2, .L54+24
 578 00dc 1268     		ldr	r2, [r2]
 579 00de 9342     		cmp	r3, r2
 580 00e0 33D0     		beq	.L48
 489:main.c        ****                                 LastMoveStartTimeUsec = UptimeMicroseconds;
 581              		.loc 1 489 0
 582 00e2 6C4B     		ldr	r3, .L54+60
 583 00e4 0122     		movs	r2, #1
 584 00e6 1A74     		strb	r2, [r3, #16]
 490:main.c        ****                                 
 585              		.loc 1 490 0
 586 00e8 9869     		ldr	r0, [r3, #24]
 587 00ea D969     		ldr	r1, [r3, #28]
 588 00ec 1862     		str	r0, [r3, #32]
 493:main.c        ****                                 
 589              		.loc 1 493 0
 590 00ee FFF7FEFF 		bl	GetPosition
 591              	.LVL42:
 592 00f2 5E4C     		ldr	r4, .L54+20
 593              	.LVL43:
 594 00f4 2060     		str	r0, [r4]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 34


 496:main.c        ****                                 
 595              		.loc 1 496 0
 596 00f6 5A48     		ldr	r0, .L54+8
 597 00f8 0379     		ldrb	r3, [r0, #4]
 598 00fa 4279     		ldrb	r2, [r0, #5]
 599 00fc 1202     		lsls	r2, r2, #8
 600 00fe 1A43     		orrs	r2, r3
 601 0100 8379     		ldrb	r3, [r0, #6]
 602 0102 1B04     		lsls	r3, r3, #16
 603 0104 1343     		orrs	r3, r2
 604 0106 1A00     		movs	r2, r3
 605 0108 C379     		ldrb	r3, [r0, #7]
 606 010a 1B06     		lsls	r3, r3, #24
 607 010c 1343     		orrs	r3, r2
 608 010e 584D     		ldr	r5, .L54+24
 609 0110 2B60     		str	r3, [r5]
 500:main.c        ****                                 
 610              		.loc 1 500 0
 611 0112 2268     		ldr	r2, [r4]
 612 0114 574B     		ldr	r3, .L54+28
 613 0116 1A60     		str	r2, [r3]
 503:main.c        ****                                 
 614              		.loc 1 503 0
 615 0118 0020     		movs	r0, #0
 616 011a FFF7FEFF 		bl	Index_Counter_1_WriteCounter
 617              	.LVL44:
 508:main.c        ****                                 if (distance < 0) {
 618              		.loc 1 508 0
 619 011e 2B68     		ldr	r3, [r5]
 620 0120 2268     		ldr	r2, [r4]
 621 0122 9B1A     		subs	r3, r3, r2
 622              	.LVL45:
 509:main.c        ****                                     distance *= -1;
 623              		.loc 1 509 0
 624 0124 00D5     		bpl	.L49
 510:main.c        ****                                 }
 625              		.loc 1 510 0
 626 0126 5B42     		rsbs	r3, r3, #0
 627              	.LVL46:
 628              	.L49:
 513:main.c        ****                                     iterm_delay = ((distance / 16) + ITERM_90PCT_FIT_CONSTANT) * 10
 629              		.loc 1 513 0
 630 0128 322B     		cmp	r3, #50
 631 012a 0BDD     		ble	.L50
 514:main.c        ****                                     //iterm_delay = distance >> 4;  // Shift by 4 is equal to div b
 632              		.loc 1 514 0
 633 012c DA17     		asrs	r2, r3, #31
 634 012e 0F21     		movs	r1, #15
 635 0130 0A40     		ands	r2, r1
 636 0132 D318     		adds	r3, r2, r3
 637              	.LVL47:
 638 0134 1B11     		asrs	r3, r3, #4
 639 0136 0D33     		adds	r3, r3, #13
 640 0138 FA22     		movs	r2, #250
 641 013a 9200     		lsls	r2, r2, #2
 642 013c 5343     		muls	r3, r2
 643 013e 564A     		ldr	r2, .L54+64
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 35


 644 0140 1360     		str	r3, [r2]
 645 0142 02E0     		b	.L48
 646              	.LVL48:
 647              	.L50:
 517:main.c        ****                                 }
 648              		.loc 1 517 0
 649 0144 0022     		movs	r2, #0
 650 0146 544B     		ldr	r3, .L54+64
 651              	.LVL49:
 652 0148 1A60     		str	r2, [r3]
 653              	.L48:
 528:main.c        ****                             break;
 654              		.loc 1 528 0
 655 014a 454B     		ldr	r3, .L54+8
 656 014c 0822     		movs	r2, #8
 657 014e 9A56     		ldrsb	r2, [r3, r2]
 658 0150 4B4B     		ldr	r3, .L54+40
 659 0152 1A70     		strb	r2, [r3]
 529:main.c        ****                         
 660              		.loc 1 529 0
 661 0154 1BE0     		b	.L44
 662              	.LVL50:
 663              	.L46:
 533:main.c        ****                             LastPosition = rxMessage.status.setpoint;
 664              		.loc 1 533 0
 665 0156 424C     		ldr	r4, .L54+8
 666              	.LVL51:
 667 0158 2179     		ldrb	r1, [r4, #4]
 668 015a 6379     		ldrb	r3, [r4, #5]
 669 015c 1B02     		lsls	r3, r3, #8
 670 015e 0B43     		orrs	r3, r1
 671 0160 1A00     		movs	r2, r3
 672              	.LVL52:
 673 0162 A079     		ldrb	r0, [r4, #6]
 674              	.LVL53:
 675 0164 0004     		lsls	r0, r0, #16
 676 0166 0300     		movs	r3, r0
 677 0168 1343     		orrs	r3, r2
 678 016a E079     		ldrb	r0, [r4, #7]
 679 016c 0006     		lsls	r0, r0, #24
 680 016e 1843     		orrs	r0, r3
 681 0170 FFF7FEFF 		bl	Counter_1_WriteCounter
 682              	.LVL54:
 534:main.c        ****                             break;                                        
 683              		.loc 1 534 0
 684 0174 2379     		ldrb	r3, [r4, #4]
 685 0176 6279     		ldrb	r2, [r4, #5]
 686 0178 1202     		lsls	r2, r2, #8
 687 017a 1A43     		orrs	r2, r3
 688 017c A379     		ldrb	r3, [r4, #6]
 689 017e 1B04     		lsls	r3, r3, #16
 690 0180 1343     		orrs	r3, r2
 691 0182 1A00     		movs	r2, r3
 692 0184 E379     		ldrb	r3, [r4, #7]
 693 0186 1B06     		lsls	r3, r3, #24
 694 0188 1343     		orrs	r3, r2
 695 018a 384A     		ldr	r2, .L54+20
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 36


 696 018c 1360     		str	r3, [r2]
 697              	.L44:
 545:main.c        ****             
 698              		.loc 1 545 0
 699 018e FFF7FEFF 		bl	GetPosition
 700              	.LVL55:
 701 0192 4249     		ldr	r1, .L54+68
 702 0194 0860     		str	r0, [r1]
 548:main.c        ****             txMessage.msg.version0        = FIRMWARE_REV_0;
 703              		.loc 1 548 0
 704 0196 334B     		ldr	r3, .L54+12
 705 0198 0022     		movs	r2, #0
 706 019a 1A70     		strb	r2, [r3]
 549:main.c        ****             txMessage.msg.version1        = FIRMWARE_REV_1;
 707              		.loc 1 549 0
 708 019c 5A70     		strb	r2, [r3, #1]
 550:main.c        ****             txMessage.msg.version2        = FIRMWARE_REV_2;
 709              		.loc 1 550 0
 710 019e 0232     		adds	r2, r2, #2
 711 01a0 9A70     		strb	r2, [r3, #2]
 551:main.c        ****             txMessage.msg.size            = sizeof(txMessage_t);
 712              		.loc 1 551 0
 713 01a2 0120     		movs	r0, #1
 714 01a4 D870     		strb	r0, [r3, #3]
 552:main.c        ****             txMessage.msg.opcode          = opStatus;
 715              		.loc 1 552 0
 716 01a6 1A30     		adds	r0, r0, #26
 717 01a8 1871     		strb	r0, [r3, #4]
 553:main.c        ****             txMessage.msg.state           = (uint8_t) ConfigState;
 718              		.loc 1 553 0
 719 01aa 5A71     		strb	r2, [r3, #5]
 554:main.c        ****             txMessage.msg.fault           = (uint8_t) FaultState;
 720              		.loc 1 554 0
 721 01ac 374A     		ldr	r2, .L54+52
 722 01ae 1278     		ldrb	r2, [r2]
 723 01b0 9A71     		strb	r2, [r3, #6]
 555:main.c        ****             txMessage.msg.checksum_errors = ChecksumErrors;
 724              		.loc 1 555 0
 725 01b2 3B4A     		ldr	r2, .L54+72
 726 01b4 1278     		ldrb	r2, [r2]
 727 01b6 DA71     		strb	r2, [r3, #7]
 556:main.c        ****             txMessage.msg.sequence        = ConfigSequence;
 728              		.loc 1 556 0
 729 01b8 2B4A     		ldr	r2, .L54+16
 730 01ba 1288     		ldrh	r2, [r2]
 731 01bc 92B2     		uxth	r2, r2
 732 01be 5A72     		strb	r2, [r3, #9]
 733 01c0 120A     		lsrs	r2, r2, #8
 734 01c2 9A72     		strb	r2, [r3, #10]
 557:main.c        ****             txMessage.msg.position        = Position;
 735              		.loc 1 557 0
 736 01c4 324A     		ldr	r2, .L54+56
 737 01c6 1278     		ldrb	r2, [r2]
 738 01c8 1A72     		strb	r2, [r3, #8]
 558:main.c        ****             txMessage.msg.pwm             = Output;
 739              		.loc 1 558 0
 740 01ca 0A68     		ldr	r2, [r1]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 37


 741 01cc 5A73     		strb	r2, [r3, #13]
 742 01ce 100A     		lsrs	r0, r2, #8
 743 01d0 9873     		strb	r0, [r3, #14]
 744 01d2 100C     		lsrs	r0, r2, #16
 745 01d4 D873     		strb	r0, [r3, #15]
 746 01d6 120E     		lsrs	r2, r2, #24
 747 01d8 1A74     		strb	r2, [r3, #16]
 559:main.c        ****             txMessage.msg.iterm           = iterm;
 748              		.loc 1 559 0
 749 01da 324A     		ldr	r2, .L54+76
 750 01dc 1268     		ldr	r2, [r2]
 751 01de 92B2     		uxth	r2, r2
 752 01e0 5A74     		strb	r2, [r3, #17]
 753 01e2 120A     		lsrs	r2, r2, #8
 754 01e4 9A74     		strb	r2, [r3, #18]
 560:main.c        ****             txMessage.msg.motor_current   = MotorCurrent;                  
 755              		.loc 1 560 0
 756 01e6 304A     		ldr	r2, .L54+80
 757 01e8 1078     		ldrb	r0, [r2]
 758 01ea D874     		strb	r0, [r3, #19]
 759 01ec 5078     		ldrb	r0, [r2, #1]
 760 01ee 1875     		strb	r0, [r3, #20]
 761 01f0 9078     		ldrb	r0, [r2, #2]
 762 01f2 5875     		strb	r0, [r3, #21]
 763 01f4 D278     		ldrb	r2, [r2, #3]
 764 01f6 9A75     		strb	r2, [r3, #22]
 561:main.c        ****             txMessage.msg.last_move_time  = LastMoveTimeUsec;
 765              		.loc 1 561 0
 766 01f8 2C4A     		ldr	r2, .L54+84
 767 01fa 1288     		ldrh	r2, [r2]
 768 01fc DA72     		strb	r2, [r3, #11]
 769 01fe 120A     		lsrs	r2, r2, #8
 770 0200 1A73     		strb	r2, [r3, #12]
 562:main.c        ****             
 771              		.loc 1 562 0
 772 0202 244A     		ldr	r2, .L54+60
 773 0204 1900     		movs	r1, r3
 774 0206 2420     		movs	r0, #36
 775 0208 105C     		ldrb	r0, [r2, r0]
 776 020a D875     		strb	r0, [r3, #23]
 777 020c 2523     		movs	r3, #37
 778 020e D35C     		ldrb	r3, [r2, r3]
 779 0210 0B76     		strb	r3, [r1, #24]
 780 0212 2623     		movs	r3, #38
 781 0214 D35C     		ldrb	r3, [r2, r3]
 782 0216 4B76     		strb	r3, [r1, #25]
 783 0218 2723     		movs	r3, #39
 784 021a D35C     		ldrb	r3, [r2, r3]
 785 021c 8B76     		strb	r3, [r1, #26]
 786              	.LVL56:
 565:main.c        ****                 checksum += txMessage.buf[i]; 
 787              		.loc 1 565 0
 788 021e 0022     		movs	r2, #0
 789 0220 0023     		movs	r3, #0
 790 0222 05E0     		b	.L51
 791              	.LVL57:
 792              	.L52:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 38


 566:main.c        ****                 
 793              		.loc 1 566 0 discriminator 3
 794 0224 0F49     		ldr	r1, .L54+12
 795 0226 C95C     		ldrb	r1, [r1, r3]
 796 0228 5218     		adds	r2, r2, r1
 797              	.LVL58:
 798 022a D2B2     		uxtb	r2, r2
 799              	.LVL59:
 565:main.c        ****                 checksum += txMessage.buf[i]; 
 800              		.loc 1 565 0 discriminator 3
 801 022c 0133     		adds	r3, r3, #1
 802              	.LVL60:
 803 022e DBB2     		uxtb	r3, r3
 804              	.LVL61:
 805              	.L51:
 565:main.c        ****                 checksum += txMessage.buf[i]; 
 806              		.loc 1 565 0 is_stmt 0 discriminator 1
 807 0230 1A2B     		cmp	r3, #26
 808 0232 F7D9     		bls	.L52
 569:main.c        ****                 
 809              		.loc 1 569 0 is_stmt 1
 810 0234 0B48     		ldr	r0, .L54+12
 811 0236 5242     		rsbs	r2, r2, #0
 812              	.LVL62:
 813 0238 0270     		strb	r2, [r0]
 573:main.c        **** 
 814              		.loc 1 573 0
 815 023a 1B21     		movs	r1, #27
 816 023c FFF7FEFF 		bl	SPI_1_SpiUartPutArray
 817              	.LVL63:
 576:main.c        ****             
 818              		.loc 1 576 0
 819 0240 0122     		movs	r2, #1
 820 0242 064B     		ldr	r3, .L54+4
 821 0244 1A70     		strb	r2, [r3]
 579:main.c        ****                 ClearFault(fsNONE);
 822              		.loc 1 579 0
 823 0246 064B     		ldr	r3, .L54+8
 824 0248 5B7A     		ldrb	r3, [r3, #9]
 825 024a 002B     		cmp	r3, #0
 826 024c 02D0     		beq	.L37
 580:main.c        ****         
 827              		.loc 1 580 0
 828 024e 0020     		movs	r0, #0
 829 0250 FFF7FEFF 		bl	ClearFault
 830              	.LVL64:
 831              	.L37:
 590:main.c        ****     
 832              		.loc 1 590 0
 833              		@ sp needed
 834 0254 70BD     		pop	{r4, r5, r6, pc}
 835              	.L55:
 836 0256 C046     		.align	2
 837              	.L54:
 838 0258 24000740 		.word	1074200612
 839 025c 00000000 		.word	txMessageState
 840 0260 00000000 		.word	rxMessage
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 39


 841 0264 00000000 		.word	txMessage
 842 0268 00000000 		.word	ChecksumErrors
 843 026c 00000000 		.word	LastPosition
 844 0270 00000000 		.word	PID_Setpoint
 845 0274 00000000 		.word	PID_EffectiveSetpoint
 846 0278 00000000 		.word	PID_Was_Enabled
 847 027c 00000000 		.word	PID_Enabled
 848 0280 00000000 		.word	Jog
 849 0284 00000000 		.word	limitOutput
 850 0288 00000000 		.word	limitIterm
 851 028c 00000000 		.word	ConfigState
 852 0290 00000000 		.word	ConfigSequence
 853 0294 00000000 		.word	.LANCHOR1
 854 0298 00000000 		.word	iterm_delay
 855 029c 00000000 		.word	Position
 856 02a0 00000000 		.word	FaultState
 857 02a4 00000000 		.word	Output
 858 02a8 00000000 		.word	iterm
 859 02ac 00000000 		.word	MotorCurrent
 860              		.cfi_endproc
 861              	.LFE35:
 862              		.size	runRateGroup3_SPI, .-runRateGroup3_SPI
 863              		.section	.text.PID_Initialize,"ax",%progbits
 864              		.align	2
 865              		.global	PID_Initialize
 866              		.code	16
 867              		.thumb_func
 868              		.type	PID_Initialize, %function
 869              	PID_Initialize:
 870              	.LFB38:
 655:main.c        ****     
 871              		.loc 1 655 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875 0000 10B5     		push	{r4, lr}
 876              		.cfi_def_cfa_offset 8
 877              		.cfi_offset 4, -8
 878              		.cfi_offset 14, -4
 658:main.c        ****     LastPosition = Position;
 879              		.loc 1 658 0
 880 0002 FFF7FEFF 		bl	GetPosition
 881              	.LVL65:
 882 0006 064B     		ldr	r3, .L57
 883 0008 1860     		str	r0, [r3]
 659:main.c        ****     
 884              		.loc 1 659 0
 885 000a 1A68     		ldr	r2, [r3]
 886 000c 054B     		ldr	r3, .L57+4
 887 000e 1A60     		str	r2, [r3]
 663:main.c        ****     
 888              		.loc 1 663 0
 889 0010 1A68     		ldr	r2, [r3]
 890 0012 054B     		ldr	r3, .L57+8
 891 0014 1A60     		str	r2, [r3]
 667:main.c        **** }    
 892              		.loc 1 667 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 40


 893 0016 0022     		movs	r2, #0
 894 0018 044B     		ldr	r3, .L57+12
 895 001a 1A60     		str	r2, [r3]
 668:main.c        **** 
 896              		.loc 1 668 0
 897              		@ sp needed
 898 001c 10BD     		pop	{r4, pc}
 899              	.L58:
 900 001e C046     		.align	2
 901              	.L57:
 902 0020 00000000 		.word	Position
 903 0024 00000000 		.word	LastPosition
 904 0028 00000000 		.word	PID_EffectiveSetpoint
 905 002c 00000000 		.word	iterm
 906              		.cfi_endproc
 907              	.LFE38:
 908              		.size	PID_Initialize, .-PID_Initialize
 909              		.section	.text.PID_SetMode,"ax",%progbits
 910              		.align	2
 911              		.global	PID_SetMode
 912              		.code	16
 913              		.thumb_func
 914              		.type	PID_SetMode, %function
 915              	PID_SetMode:
 916              	.LFB39:
 680:main.c        ****     
 917              		.loc 1 680 0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 921              	.LVL66:
 922 0000 10B5     		push	{r4, lr}
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 4, -8
 925              		.cfi_offset 14, -4
 682:main.c        ****     
 926              		.loc 1 682 0
 927 0002 441E     		subs	r4, r0, #1
 928 0004 6342     		rsbs	r3, r4, #0
 929 0006 5C41     		adcs	r4, r4, r3
 930 0008 E4B2     		uxtb	r4, r4
 931              	.LVL67:
 684:main.c        ****         /*we just went from manual to auto*/
 932              		.loc 1 684 0
 933 000a 0128     		cmp	r0, #1
 934 000c 06D1     		bne	.L60
 684:main.c        ****         /*we just went from manual to auto*/
 935              		.loc 1 684 0 is_stmt 0 discriminator 1
 936 000e 2823     		movs	r3, #40
 937 0010 044A     		ldr	r2, .L61
 938 0012 D35C     		ldrb	r3, [r2, r3]
 939 0014 002B     		cmp	r3, #0
 940 0016 01D1     		bne	.L60
 686:main.c        ****     }
 941              		.loc 1 686 0 is_stmt 1
 942 0018 FFF7FEFF 		bl	PID_Initialize
 943              	.LVL68:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 41


 944              	.L60:
 689:main.c        **** } 
 945              		.loc 1 689 0
 946 001c 2823     		movs	r3, #40
 947 001e 014A     		ldr	r2, .L61
 948 0020 D454     		strb	r4, [r2, r3]
 690:main.c        **** 
 949              		.loc 1 690 0
 950              		@ sp needed
 951              	.LVL69:
 952 0022 10BD     		pop	{r4, pc}
 953              	.L62:
 954              		.align	2
 955              	.L61:
 956 0024 00000000 		.word	.LANCHOR1
 957              		.cfi_endproc
 958              	.LFE39:
 959              		.size	PID_SetMode, .-PID_SetMode
 960              		.section	.text.runRateGroup1_PID,"ax",%progbits
 961              		.align	2
 962              		.global	runRateGroup1_PID
 963              		.code	16
 964              		.thumb_func
 965              		.type	runRateGroup1_PID, %function
 966              	runRateGroup1_PID:
 967              	.LFB40:
 702:main.c        ****      
 968              		.loc 1 702 0
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 0
 971              		@ frame_needed = 0, uses_anonymous_args = 0
 972 0000 10B5     		push	{r4, lr}
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 4, -8
 975              		.cfi_offset 14, -4
 712:main.c        ****         
 976              		.loc 1 712 0
 977 0002 4D4B     		ldr	r3, .L78
 978 0004 1B68     		ldr	r3, [r3]
 979 0006 0133     		adds	r3, r3, #1
 980 0008 0024     		movs	r4, #0
 981 000a 4C4A     		ldr	r2, .L78+4
 982 000c 1068     		ldr	r0, [r2]
 983 000e 5168     		ldr	r1, [r2, #4]
 984 0010 0029     		cmp	r1, #0
 985 0012 03D1     		bne	.L77
 986 0014 A142     		cmp	r1, r4
 987 0016 0AD1     		bne	.L64
 988 0018 9842     		cmp	r0, r3
 989 001a 08D9     		bls	.L64
 990              	.L77:
 715:main.c        ****         PID_Enabled = false;
 991              		.loc 1 715 0
 992 001c 0020     		movs	r0, #0
 993 001e FFF7FEFF 		bl	PWM_Set
 994              	.LVL70:
 716:main.c        ****         
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 42


 995              		.loc 1 716 0
 996 0022 0023     		movs	r3, #0
 997 0024 464A     		ldr	r2, .L78+8
 998 0026 1370     		strb	r3, [r2]
 720:main.c        **** 
 999              		.loc 1 720 0
 1000 0028 464A     		ldr	r2, .L78+12
 1001 002a 1370     		strb	r3, [r2]
 1002 002c 83E0     		b	.L63
 1003              	.L64:
 723:main.c        ****         
 1004              		.loc 1 723 0
 1005 002e 464B     		ldr	r3, .L78+16
 1006 0030 1B78     		ldrb	r3, [r3]
 1007 0032 022B     		cmp	r3, #2
 1008 0034 7CD1     		bne	.L67
 727:main.c        ****         INDEX_OUT_SetDriveMode(INDEX_OUT_DM_STRONG); 
 1009              		.loc 1 727 0
 1010 0036 0620     		movs	r0, #6
 1011 0038 FFF7FEFF 		bl	HOME_OUT_SetDriveMode
 1012              	.LVL71:
 728:main.c        **** 
 1013              		.loc 1 728 0
 1014 003c 0620     		movs	r0, #6
 1015 003e FFF7FEFF 		bl	INDEX_OUT_SetDriveMode
 1016              	.LVL72:
 731:main.c        ****             PID_SetMode(PID_AUTOMATIC);
 1017              		.loc 1 731 0
 1018 0042 424B     		ldr	r3, .L78+20
 1019 0044 1B78     		ldrb	r3, [r3]
 1020 0046 002B     		cmp	r3, #0
 1021 0048 07D1     		bne	.L68
 731:main.c        ****             PID_SetMode(PID_AUTOMATIC);
 1022              		.loc 1 731 0 is_stmt 0 discriminator 1
 1023 004a 3D4A     		ldr	r2, .L78+8
 1024 004c 1278     		ldrb	r2, [r2]
 1025 004e 002A     		cmp	r2, #0
 1026 0050 03D0     		beq	.L68
 732:main.c        ****         } else if (!PID_Enabled && PID_Was_Enabled) {
 1027              		.loc 1 732 0 is_stmt 1
 1028 0052 0120     		movs	r0, #1
 1029 0054 FFF7FEFF 		bl	PID_SetMode
 1030              	.LVL73:
 1031 0058 08E0     		b	.L69
 1032              	.L68:
 733:main.c        ****             PID_SetMode(PID_MANUAL);                
 1033              		.loc 1 733 0
 1034 005a 394A     		ldr	r2, .L78+8
 1035 005c 1278     		ldrb	r2, [r2]
 1036 005e 002A     		cmp	r2, #0
 1037 0060 04D1     		bne	.L69
 733:main.c        ****             PID_SetMode(PID_MANUAL);                
 1038              		.loc 1 733 0 is_stmt 0 discriminator 1
 1039 0062 002B     		cmp	r3, #0
 1040 0064 02D0     		beq	.L69
 734:main.c        ****         } else {
 1041              		.loc 1 734 0 is_stmt 1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 43


 1042 0066 0020     		movs	r0, #0
 1043 0068 FFF7FEFF 		bl	PID_SetMode
 1044              	.LVL74:
 1045              	.L69:
 740:main.c        ****         
 1046              		.loc 1 740 0
 1047 006c 344B     		ldr	r3, .L78+8
 1048 006e 1B78     		ldrb	r3, [r3]
 1049 0070 364A     		ldr	r2, .L78+20
 1050 0072 1370     		strb	r3, [r2]
 755:main.c        ****             
 1051              		.loc 1 755 0
 1052 0074 002B     		cmp	r3, #0
 1053 0076 51D0     		beq	.L70
 757:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;
 1054              		.loc 1 757 0
 1055 0078 354B     		ldr	r3, .L78+24
 1056 007a 1B78     		ldrb	r3, [r3]
 1057 007c 002B     		cmp	r3, #0
 1058 007e 04D1     		bne	.L71
 758:main.c        ****             } else if ( labs(PID_EffectiveSetpoint - PID_Setpoint) <= (2 * PID_EffSetDelta) ) {
 1059              		.loc 1 758 0
 1060 0080 344B     		ldr	r3, .L78+28
 1061 0082 1A68     		ldr	r2, [r3]
 1062 0084 344B     		ldr	r3, .L78+32
 1063 0086 1A60     		str	r2, [r3]
 1064 0088 16E0     		b	.L72
 1065              	.L71:
 759:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;                                              
 1066              		.loc 1 759 0
 1067 008a 334A     		ldr	r2, .L78+32
 1068 008c 1168     		ldr	r1, [r2]
 1069 008e 314A     		ldr	r2, .L78+28
 1070 0090 1068     		ldr	r0, [r2]
 1071 0092 0A1A     		subs	r2, r1, r0
 1072 0094 D417     		asrs	r4, r2, #31
 1073 0096 1219     		adds	r2, r2, r4
 1074 0098 6240     		eors	r2, r4
 1075 009a 5C00     		lsls	r4, r3, #1
 1076 009c A242     		cmp	r2, r4
 1077 009e 02DC     		bgt	.L73
 760:main.c        ****             } else if (PID_Setpoint > PID_EffectiveSetpoint) {
 1078              		.loc 1 760 0
 1079 00a0 2D4B     		ldr	r3, .L78+32
 1080 00a2 1860     		str	r0, [r3]
 1081 00a4 08E0     		b	.L72
 1082              	.L73:
 761:main.c        ****                 PID_EffectiveSetpoint = (PID_EffectiveSetpoint + PID_EffSetDelta);
 1083              		.loc 1 761 0
 1084 00a6 8142     		cmp	r1, r0
 1085 00a8 03DA     		bge	.L74
 762:main.c        ****             } else {
 1086              		.loc 1 762 0
 1087 00aa CB18     		adds	r3, r1, r3
 1088 00ac 2A4A     		ldr	r2, .L78+32
 1089 00ae 1360     		str	r3, [r2]
 1090 00b0 02E0     		b	.L72
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 44


 1091              	.L74:
 764:main.c        ****             }
 1092              		.loc 1 764 0
 1093 00b2 CB1A     		subs	r3, r1, r3
 1094 00b4 284A     		ldr	r2, .L78+32
 1095 00b6 1360     		str	r3, [r2]
 1096              	.L72:
 768:main.c        ****             
 1097              		.loc 1 768 0
 1098 00b8 FFF7FEFF 		bl	GetPosition
 1099              	.LVL75:
 1100 00bc 274B     		ldr	r3, .L78+36
 1101 00be 1860     		str	r0, [r3]
 771:main.c        ****             
 1102              		.loc 1 771 0
 1103 00c0 1968     		ldr	r1, [r3]
 1104 00c2 254B     		ldr	r3, .L78+32
 1105 00c4 1868     		ldr	r0, [r3]
 1106 00c6 FFF7FEFF 		bl	PID_UpdateValues
 1107              	.LVL76:
 1108 00ca 254B     		ldr	r3, .L78+40
 1109 00cc 1860     		str	r0, [r3]
 774:main.c        ****             
 1110              		.loc 1 774 0
 1111 00ce 1868     		ldr	r0, [r3]
 1112 00d0 FFF7FEFF 		bl	PWM_Set
 1113              	.LVL77:
 777:main.c        ****                 
 1114              		.loc 1 777 0
 1115 00d4 194B     		ldr	r3, .L78+4
 1116 00d6 1B7C     		ldrb	r3, [r3, #16]
 1117 00d8 002B     		cmp	r3, #0
 1118 00da 2CD0     		beq	.L63
 779:main.c        ****                     
 1119              		.loc 1 779 0
 1120 00dc 1F4B     		ldr	r3, .L78+36
 1121 00de 1A68     		ldr	r2, [r3]
 1122 00e0 1C4B     		ldr	r3, .L78+28
 1123 00e2 1B68     		ldr	r3, [r3]
 1124 00e4 9A42     		cmp	r2, r3
 1125 00e6 15D1     		bne	.L75
 784:main.c        ****                         
 1126              		.loc 1 784 0
 1127 00e8 144B     		ldr	r3, .L78+4
 1128 00ea 5B8D     		ldrh	r3, [r3, #42]
 1129 00ec 1E2B     		cmp	r3, #30
 1130 00ee 07D1     		bne	.L76
 788:main.c        ****                         
 1131              		.loc 1 788 0
 1132 00f0 124B     		ldr	r3, .L78+4
 1133 00f2 DA6A     		ldr	r2, [r3, #44]
 1134 00f4 196A     		ldr	r1, [r3, #32]
 1135 00f6 521A     		subs	r2, r2, r1
 1136 00f8 5A62     		str	r2, [r3, #36]
 791:main.c        ****                         
 1137              		.loc 1 791 0
 1138 00fa 0022     		movs	r2, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 45


 1139 00fc 1A74     		strb	r2, [r3, #16]
 1140 00fe 1AE0     		b	.L63
 1141              	.L76:
 797:main.c        **** 
 1142              		.loc 1 797 0
 1143 0100 0133     		adds	r3, r3, #1
 1144 0102 9BB2     		uxth	r3, r3
 1145 0104 0D4A     		ldr	r2, .L78+4
 1146 0106 5385     		strh	r3, [r2, #42]
 802:main.c        ****                             LastMoveEndTimeUsec = UptimeMicroseconds;
 1147              		.loc 1 802 0
 1148 0108 012B     		cmp	r3, #1
 1149 010a 14D1     		bne	.L63
 803:main.c        ****                         }                    
 1150              		.loc 1 803 0
 1151 010c 9069     		ldr	r0, [r2, #24]
 1152 010e D169     		ldr	r1, [r2, #28]
 1153 0110 D062     		str	r0, [r2, #44]
 1154 0112 10E0     		b	.L63
 1155              	.L75:
 810:main.c        ****                 }
 1156              		.loc 1 810 0
 1157 0114 0022     		movs	r2, #0
 1158 0116 094B     		ldr	r3, .L78+4
 1159 0118 5A85     		strh	r2, [r3, #42]
 1160 011a 0CE0     		b	.L63
 1161              	.L70:
 819:main.c        ****             
 1162              		.loc 1 819 0
 1163 011c 094B     		ldr	r3, .L78+12
 1164 011e 1B78     		ldrb	r3, [r3]
 1165 0120 5BB2     		sxtb	r3, r3
 1166 0122 DB00     		lsls	r3, r3, #3
 1167 0124 0E4A     		ldr	r2, .L78+40
 1168 0126 1360     		str	r3, [r2]
 822:main.c        ****         }        
 1169              		.loc 1 822 0
 1170 0128 1068     		ldr	r0, [r2]
 1171 012a FFF7FEFF 		bl	PWM_Set
 1172              	.LVL78:
 1173 012e 02E0     		b	.L63
 1174              	.L67:
 828:main.c        ****     }
 1175              		.loc 1 828 0
 1176 0130 0020     		movs	r0, #0
 1177 0132 FFF7FEFF 		bl	PWM_Set
 1178              	.LVL79:
 1179              	.L63:
 830:main.c        **** 
 1180              		.loc 1 830 0
 1181              		@ sp needed
 1182 0136 10BD     		pop	{r4, pc}
 1183              	.L79:
 1184              		.align	2
 1185              	.L78:
 1186 0138 00000000 		.word	LastMessageTimeSeconds
 1187 013c 00000000 		.word	.LANCHOR1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 46


 1188 0140 00000000 		.word	PID_Enabled
 1189 0144 00000000 		.word	Jog
 1190 0148 00000000 		.word	ConfigState
 1191 014c 00000000 		.word	PID_Was_Enabled
 1192 0150 00000000 		.word	PID_EffSetDelta
 1193 0154 00000000 		.word	PID_Setpoint
 1194 0158 00000000 		.word	PID_EffectiveSetpoint
 1195 015c 00000000 		.word	Position
 1196 0160 00000000 		.word	Output
 1197              		.cfi_endproc
 1198              	.LFE40:
 1199              		.size	runRateGroup1_PID, .-runRateGroup1_PID
 1200              		.section	.text.BRMS_Interrupt,"ax",%progbits
 1201              		.align	2
 1202              		.global	BRMS_Interrupt
 1203              		.code	16
 1204              		.thumb_func
 1205              		.type	BRMS_Interrupt, %function
 1206              	BRMS_Interrupt:
 1207              	.LFB42:
1024:main.c        ****     
 1208              		.loc 1 1024 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212 0000 70B5     		push	{r4, r5, r6, lr}
 1213              		.cfi_def_cfa_offset 16
 1214              		.cfi_offset 4, -16
 1215              		.cfi_offset 5, -12
 1216              		.cfi_offset 6, -8
 1217              		.cfi_offset 14, -4
1035:main.c        **** 
 1218              		.loc 1 1035 0
 1219 0002 0220     		movs	r0, #2
 1220 0004 FFF7FEFF 		bl	Timer_BRMS_ClearInterrupt
 1221              	.LVL80:
1037:main.c        ****     
 1222              		.loc 1 1037 0
 1223 0008 0120     		movs	r0, #1
 1224 000a FFF7FEFF 		bl	PROBE_Write
 1225              	.LVL81:
1040:main.c        ****     UptimeMicrosecondsAccumulator += 200;
 1226              		.loc 1 1040 0
 1227 000e 2A4B     		ldr	r3, .L89
 1228 0010 9C69     		ldr	r4, [r3, #24]
 1229 0012 DD69     		ldr	r5, [r3, #28]
 1230 0014 C820     		movs	r0, #200
 1231 0016 0021     		movs	r1, #0
 1232 0018 2418     		adds	r4, r4, r0
 1233 001a 4D41     		adcs	r5, r5, r1
 1234 001c 9C61     		str	r4, [r3, #24]
 1235 001e DD61     		str	r5, [r3, #28]
1041:main.c        ****     
 1236              		.loc 1 1041 0
 1237 0020 1C6B     		ldr	r4, [r3, #48]
 1238 0022 5D6B     		ldr	r5, [r3, #52]
 1239 0024 0019     		adds	r0, r0, r4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 47


 1240 0026 6941     		adcs	r1, r1, r5
 1241 0028 1863     		str	r0, [r3, #48]
 1242 002a 5963     		str	r1, [r3, #52]
1044:main.c        ****         UptimeMicrosecondsAccumulator = 0;
 1243              		.loc 1 1044 0
 1244 002c 196B     		ldr	r1, [r3, #48]
 1245 002e 5A6B     		ldr	r2, [r3, #52]
 1246 0030 002A     		cmp	r2, #0
 1247 0032 04D1     		bne	.L87
 1248 0034 16D1     		bne	.L81
 1249 0036 FA23     		movs	r3, #250
 1250 0038 9B00     		lsls	r3, r3, #2
 1251 003a 9942     		cmp	r1, r3
 1252 003c 12D9     		bls	.L81
 1253              	.L87:
1045:main.c        ****         UptimeMilliseconds += 1;
 1254              		.loc 1 1045 0
 1255 003e 1E4B     		ldr	r3, .L89
 1256 0040 0020     		movs	r0, #0
 1257 0042 0021     		movs	r1, #0
 1258 0044 1863     		str	r0, [r3, #48]
 1259 0046 5963     		str	r1, [r3, #52]
1046:main.c        ****         UptimeMillisecondsAccumulator += 1;
 1260              		.loc 1 1046 0
 1261 0048 9C6B     		ldr	r4, [r3, #56]
 1262 004a DD6B     		ldr	r5, [r3, #60]
 1263 004c 0120     		movs	r0, #1
 1264 004e 0021     		movs	r1, #0
 1265 0050 2418     		adds	r4, r4, r0
 1266 0052 4D41     		adcs	r5, r5, r1
 1267 0054 9C63     		str	r4, [r3, #56]
 1268 0056 DD63     		str	r5, [r3, #60]
1047:main.c        ****     }
 1269              		.loc 1 1047 0
 1270 0058 1C6C     		ldr	r4, [r3, #64]
 1271 005a 5D6C     		ldr	r5, [r3, #68]
 1272 005c 0019     		adds	r0, r0, r4
 1273 005e 6941     		adcs	r1, r1, r5
 1274 0060 1864     		str	r0, [r3, #64]
 1275 0062 5964     		str	r1, [r3, #68]
 1276              	.L81:
1051:main.c        ****         UptimeMillisecondsAccumulator = 0;
 1277              		.loc 1 1051 0
 1278 0064 144B     		ldr	r3, .L89
 1279 0066 196C     		ldr	r1, [r3, #64]
 1280 0068 5A6C     		ldr	r2, [r3, #68]
 1281 006a 002A     		cmp	r2, #0
 1282 006c 04D1     		bne	.L88
 1283 006e 10D1     		bne	.L83
 1284 0070 FA23     		movs	r3, #250
 1285 0072 9B00     		lsls	r3, r3, #2
 1286 0074 9942     		cmp	r1, r3
 1287 0076 0CD9     		bls	.L83
 1288              	.L88:
1052:main.c        ****         UptimeSeconds += 1;
 1289              		.loc 1 1052 0
 1290 0078 0F4B     		ldr	r3, .L89
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 48


 1291 007a 0020     		movs	r0, #0
 1292 007c 0021     		movs	r1, #0
 1293 007e 1864     		str	r0, [r3, #64]
 1294 0080 5964     		str	r1, [r3, #68]
1053:main.c        ****     }
 1295              		.loc 1 1053 0
 1296 0082 1C68     		ldr	r4, [r3]
 1297 0084 5D68     		ldr	r5, [r3, #4]
 1298 0086 0120     		movs	r0, #1
 1299 0088 0021     		movs	r1, #0
 1300 008a 0019     		adds	r0, r0, r4
 1301 008c 6941     		adcs	r1, r1, r5
 1302 008e 1860     		str	r0, [r3]
 1303 0090 5960     		str	r1, [r3, #4]
 1304              	.L83:
1057:main.c        **** 
 1305              		.loc 1 1057 0
 1306 0092 094A     		ldr	r2, .L89
 1307 0094 936C     		ldr	r3, [r2, #72]
 1308 0096 0133     		adds	r3, r3, #1
 1309 0098 9364     		str	r3, [r2, #72]
1077:main.c        ****         
 1310              		.loc 1 1077 0
 1311 009a DA07     		lsls	r2, r3, #31
 1312 009c 02D5     		bpl	.L85
1082:main.c        ****         
 1313              		.loc 1 1082 0
 1314 009e FFF7FEFF 		bl	runRateGroup1_PID
 1315              	.LVL82:
 1316 00a2 05E0     		b	.L86
 1317              	.L85:
1084:main.c        ****         
 1318              		.loc 1 1084 0
 1319 00a4 9A07     		lsls	r2, r3, #30
 1320 00a6 03D4     		bmi	.L86
1089:main.c        ****         
 1321              		.loc 1 1089 0
 1322 00a8 5B07     		lsls	r3, r3, #29
 1323 00aa 01D5     		bpl	.L86
1092:main.c        ****         
 1324              		.loc 1 1092 0
 1325 00ac FFF7FEFF 		bl	runRateGroup3_SPI
 1326              	.LVL83:
 1327              	.L86:
1105:main.c        ****    
 1328              		.loc 1 1105 0
 1329 00b0 0020     		movs	r0, #0
 1330 00b2 FFF7FEFF 		bl	PROBE_Write
 1331              	.LVL84:
1107:main.c        **** 
 1332              		.loc 1 1107 0
 1333              		@ sp needed
 1334 00b6 70BD     		pop	{r4, r5, r6, pc}
 1335              	.L90:
 1336              		.align	2
 1337              	.L89:
 1338 00b8 00000000 		.word	.LANCHOR1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 49


 1339              		.cfi_endproc
 1340              	.LFE42:
 1341              		.size	BRMS_Interrupt, .-BRMS_Interrupt
 1342              		.section	.text.main,"ax",%progbits
 1343              		.align	2
 1344              		.global	main
 1345              		.code	16
 1346              		.thumb_func
 1347              		.type	main, %function
 1348              	main:
 1349              	.LFB41:
 842:main.c        ****     
 1350              		.loc 1 842 0
 1351              		.cfi_startproc
 1352              		@ Volatile: function does not return.
 1353              		@ args = 0, pretend = 0, frame = 0
 1354              		@ frame_needed = 0, uses_anonymous_args = 0
 1355 0000 70B5     		push	{r4, r5, r6, lr}
 1356              		.cfi_def_cfa_offset 16
 1357              		.cfi_offset 4, -16
 1358              		.cfi_offset 5, -12
 1359              		.cfi_offset 6, -8
 1360              		.cfi_offset 14, -4
 850:main.c        ****     INDEX_OUT_SetDriveMode(INDEX_OUT_DM_DIG_HIZ); 
 1361              		.loc 1 850 0
 1362 0002 0120     		movs	r0, #1
 1363 0004 FFF7FEFF 		bl	HOME_OUT_SetDriveMode
 1364              	.LVL85:
 851:main.c        **** 
 1365              		.loc 1 851 0
 1366 0008 0120     		movs	r0, #1
 1367 000a FFF7FEFF 		bl	INDEX_OUT_SetDriveMode
 1368              	.LVL86:
 859:main.c        ****     isr_brms_StartEx(BRMS_Interrupt);
 1369              		.loc 1 859 0
 1370 000e FFF7FEFF 		bl	Timer_BRMS_Start
 1371              	.LVL87:
 860:main.c        ****     isr_brms_SetPriority(HIGHER_PRIORITY);
 1372              		.loc 1 860 0
 1373 0012 3648     		ldr	r0, .L96
 1374 0014 FFF7FEFF 		bl	isr_brms_StartEx
 1375              	.LVL88:
 861:main.c        **** 
 1376              		.loc 1 861 0
 1377 0018 0220     		movs	r0, #2
 1378 001a FFF7FEFF 		bl	isr_brms_SetPriority
 1379              	.LVL89:
 864:main.c        ****     isr_home_SetPriority(DEFAULT_PRIORITY);
 1380              		.loc 1 864 0
 1381 001e 3448     		ldr	r0, .L96+4
 1382 0020 FFF7FEFF 		bl	isr_home_StartEx
 1383              	.LVL90:
 865:main.c        **** 
 1384              		.loc 1 865 0
 1385 0024 0320     		movs	r0, #3
 1386 0026 FFF7FEFF 		bl	isr_home_SetPriority
 1387              	.LVL91:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 50


 868:main.c        ****     isr_rst_encoder_SetPriority(DEFAULT_PRIORITY);
 1388              		.loc 1 868 0
 1389 002a 3248     		ldr	r0, .L96+8
 1390 002c FFF7FEFF 		bl	isr_rst_encoder_StartEx
 1391              	.LVL92:
 869:main.c        ****     
 1392              		.loc 1 869 0
 1393 0030 0320     		movs	r0, #3
 1394 0032 FFF7FEFF 		bl	isr_rst_encoder_SetPriority
 1395              	.LVL93:
 872:main.c        ****     isr_spi_ss_SetPriority(DEFAULT_PRIORITY);   
 1396              		.loc 1 872 0
 1397 0036 3048     		ldr	r0, .L96+12
 1398 0038 FFF7FEFF 		bl	isr_spi_ss_StartEx
 1399              	.LVL94:
 873:main.c        **** 
 1400              		.loc 1 873 0
 1401 003c 0320     		movs	r0, #3
 1402 003e FFF7FEFF 		bl	isr_spi_ss_SetPriority
 1403              	.LVL95:
 876:main.c        ****     
 1404              		.loc 1 876 0
 1405              		.syntax divided
 1406              	@ 876 "main.c" 1
 1407 0042 62B6     		CPSIE   i
 1408              	@ 0 "" 2
 905:main.c        ****     
 1409              		.loc 1 905 0
 1410              		.thumb
 1411              		.syntax unified
 1412 0044 FFF7FEFF 		bl	I2C_Start
 1413              	.LVL96:
 910:main.c        ****     SPI_1_Start();
 1414              		.loc 1 910 0
 1415 0048 6420     		movs	r0, #100
 1416 004a FFF7FEFF 		bl	CyDelay
 1417              	.LVL97:
 911:main.c        ****     
 1418              		.loc 1 911 0
 1419 004e FFF7FEFF 		bl	SPI_1_Start
 1420              	.LVL98:
 915:main.c        ****     PWM_1_WritePeriod(PWM_15KHZ_PERIOD);
 1421              		.loc 1 915 0
 1422 0052 FFF7FEFF 		bl	PWM_1_Start
 1423              	.LVL99:
 916:main.c        ****     PWM_Set(PWM_SET_NEUTRAL);   
 1424              		.loc 1 916 0
 1425 0056 C820     		movs	r0, #200
 1426 0058 C000     		lsls	r0, r0, #3
 1427 005a FFF7FEFF 		bl	PWM_1_WritePeriod
 1428              	.LVL100:
 917:main.c        ****     
 1429              		.loc 1 917 0
 1430 005e 0020     		movs	r0, #0
 1431 0060 FFF7FEFF 		bl	PWM_Set
 1432              	.LVL101:
 920:main.c        ****     
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 51


 1433              		.loc 1 920 0
 1434 0064 0024     		movs	r4, #0
 1435 0066 254B     		ldr	r3, .L96+16
 1436 0068 1C70     		strb	r4, [r3]
 923:main.c        ****    
 1437              		.loc 1 923 0
 1438 006a 254B     		ldr	r3, .L96+20
 1439 006c 1C70     		strb	r4, [r3]
 926:main.c        ****     Counter_1_WriteCounter(ENCODER_MAX);  // Set the encoder initially to mid range
 1440              		.loc 1 926 0
 1441 006e FFF7FEFF 		bl	Counter_1_Start
 1442              	.LVL102:
 927:main.c        ****     LastPosition = ENCODER_MAX;
 1443              		.loc 1 927 0
 1444 0072 244D     		ldr	r5, .L96+24
 1445 0074 2800     		movs	r0, r5
 1446 0076 FFF7FEFF 		bl	Counter_1_WriteCounter
 1447              	.LVL103:
 928:main.c        ****     
 1448              		.loc 1 928 0
 1449 007a 234B     		ldr	r3, .L96+28
 1450 007c 1D60     		str	r5, [r3]
 931:main.c        ****     Index_Counter_1_WriteCounter(0);
 1451              		.loc 1 931 0
 1452 007e FFF7FEFF 		bl	Index_Counter_1_Start
 1453              	.LVL104:
 932:main.c        ****      
 1454              		.loc 1 932 0
 1455 0082 0020     		movs	r0, #0
 1456 0084 FFF7FEFF 		bl	Index_Counter_1_WriteCounter
 1457              	.LVL105:
 935:main.c        ****     ConfigSequence = 0;
 1458              		.loc 1 935 0
 1459 0088 0122     		movs	r2, #1
 1460 008a 204B     		ldr	r3, .L96+32
 1461 008c 1A70     		strb	r2, [r3]
 936:main.c        ****     ChecksumErrors = 0;
 1462              		.loc 1 936 0
 1463 008e 204B     		ldr	r3, .L96+36
 1464 0090 1C70     		strb	r4, [r3]
 937:main.c        ****     
 1465              		.loc 1 937 0
 1466 0092 204B     		ldr	r3, .L96+40
 1467 0094 1C80     		strh	r4, [r3]
 941:main.c        ****     PID_SetMode(PID_MANUAL);
 1468              		.loc 1 941 0
 1469 0096 FFF7FEFF 		bl	PID_Initialize
 1470              	.LVL106:
 942:main.c        ****     
 1471              		.loc 1 942 0
 1472 009a 0020     		movs	r0, #0
 1473 009c FFF7FEFF 		bl	PID_SetMode
 1474              	.LVL107:
 945:main.c        ****     limitIterm = 800;
 1475              		.loc 1 945 0
 1476 00a0 C823     		movs	r3, #200
 1477 00a2 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 52


 1478 00a4 1C4A     		ldr	r2, .L96+44
 1479 00a6 1380     		strh	r3, [r2]
 946:main.c        ****     
 1480              		.loc 1 946 0
 1481 00a8 1C4A     		ldr	r2, .L96+48
 1482 00aa 1380     		strh	r3, [r2]
 949:main.c        ****     PID_EffectiveSetpoint = 0;
 1483              		.loc 1 949 0
 1484 00ac 1C4B     		ldr	r3, .L96+52
 1485 00ae 1C60     		str	r4, [r3]
 950:main.c        ****     PID_EffSetDelta       = 250; //PID_EFFECTIVE_SETPOINT_DELTA_DEFAULT;
 1486              		.loc 1 950 0
 1487 00b0 1C4B     		ldr	r3, .L96+56
 1488 00b2 1C60     		str	r4, [r3]
 951:main.c        ****     PID_Was_Enabled       = false;
 1489              		.loc 1 951 0
 1490 00b4 FA22     		movs	r2, #250
 1491 00b6 1C4B     		ldr	r3, .L96+60
 1492 00b8 1A70     		strb	r2, [r3]
 952:main.c        ****     PID_Enabled           = false;
 1493              		.loc 1 952 0
 1494 00ba 1C4B     		ldr	r3, .L96+64
 1495 00bc 0022     		movs	r2, #0
 1496 00be 1A70     		strb	r2, [r3]
 953:main.c        ****     PWM_Set(PWM_SET_NEUTRAL);
 1497              		.loc 1 953 0
 1498 00c0 1B4B     		ldr	r3, .L96+68
 1499 00c2 1A70     		strb	r2, [r3]
 954:main.c        ****   
 1500              		.loc 1 954 0
 1501 00c4 0020     		movs	r0, #0
 1502 00c6 FFF7FEFF 		bl	PWM_Set
 1503              	.LVL108:
 1504              	.L95:
 987:main.c        ****             LED_Write(1);
 1505              		.loc 1 987 0
 1506 00ca 1A4B     		ldr	r3, .L96+72
 1507 00cc 1A68     		ldr	r2, [r3]
 1508 00ce 5B68     		ldr	r3, [r3, #4]
 1509 00d0 0123     		movs	r3, #1
 1510 00d2 1342     		tst	r3, r2
 1511 00d4 03D0     		beq	.L92
 988:main.c        ****         } else {
 1512              		.loc 1 988 0
 1513 00d6 0120     		movs	r0, #1
 1514 00d8 FFF7FEFF 		bl	LED_Write
 1515              	.LVL109:
 1516 00dc 02E0     		b	.L94
 1517              	.L92:
 990:main.c        ****         } 
 1518              		.loc 1 990 0
 1519 00de 0020     		movs	r0, #0
 1520 00e0 FFF7FEFF 		bl	LED_Write
 1521              	.LVL110:
 1522              	.L94:
 994:main.c        ****         
 1523              		.loc 1 994 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 53


 1524 00e4 0A20     		movs	r0, #10
 1525 00e6 FFF7FEFF 		bl	CyDelay
 1526              	.LVL111:
1005:main.c        ****       
 1527              		.loc 1 1005 0
 1528 00ea EEE7     		b	.L95
 1529              	.L97:
 1530              		.align	2
 1531              	.L96:
 1532 00ec 00000000 		.word	BRMS_Interrupt
 1533 00f0 00000000 		.word	HomeIsrHandler
 1534 00f4 00000000 		.word	RSTIsrHandler
 1535 00f8 00000000 		.word	SPI_SS_IsrHandler
 1536 00fc 00000000 		.word	Jog
 1537 0100 00000000 		.word	.LANCHOR0
 1538 0104 FFFFFF00 		.word	16777215
 1539 0108 00000000 		.word	LastPosition
 1540 010c 00000000 		.word	ConfigState
 1541 0110 00000000 		.word	ConfigSequence
 1542 0114 00000000 		.word	ChecksumErrors
 1543 0118 00000000 		.word	limitOutput
 1544 011c 00000000 		.word	limitIterm
 1545 0120 00000000 		.word	PID_Setpoint
 1546 0124 00000000 		.word	PID_EffectiveSetpoint
 1547 0128 00000000 		.word	PID_EffSetDelta
 1548 012c 00000000 		.word	PID_Was_Enabled
 1549 0130 00000000 		.word	PID_Enabled
 1550 0134 00000000 		.word	.LANCHOR1
 1551              		.cfi_endproc
 1552              	.LFE41:
 1553              		.size	main, .-main
 1554              		.comm	txMessageState,1,1
 1555              		.comm	txMessage,27,4
 1556              		.comm	rxMessage,27,4
 1557              		.comm	LastMessageTimeSeconds,4,4
 1558              		.comm	CurrentI2Cinbuf,20,4
 1559              		.comm	MotorCurrent,2,2
 1560              		.comm	ChecksumErrors,2,2
 1561              		.comm	ConfigSequence,1,1
 1562              		.comm	FaultState,1,1
 1563              		.comm	ConfigState,1,1
 1564              		.global	UptimeSeconds
 1565              		.global	UptimeMillisecondsAccumulator
 1566              		.global	UptimeMilliseconds
 1567              		.global	UptimeMicrosecondsAccumulator
 1568              		.global	UptimeMicroseconds
 1569              		.global	NewCommandedMove
 1570              		.global	LastMoveTimeUsec
 1571              		.global	LastMoveStableCount
 1572              		.global	LastMoveEndTimeUsec
 1573              		.global	LastMoveStartTimeUsec
 1574              		.global	homingDone
 1575              		.comm	limitIterm,2,2
 1576              		.comm	limitOutput,2,2
 1577              		.comm	Output,4,4
 1578              		.comm	LastPosition,4,4
 1579              		.comm	Position,4,4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 54


 1580              		.comm	lastTime,4,4
 1581              		.comm	PID_EffSetDelta,1,1
 1582              		.comm	PID_EffectiveSetpoint,4,4
 1583              		.comm	PID_Setpoint,4,4
 1584              		.comm	PID_Was_Enabled,1,1
 1585              		.comm	PID_Enabled,1,1
 1586              		.comm	Jog,1,1
 1587              		.global	inAuto
 1588              		.data
 1589              		.set	.LANCHOR0,. + 0
 1590              		.type	homingDone, %object
 1591              		.size	homingDone, 1
 1592              	homingDone:
 1593 0000 01       		.byte	1
 1594              		.bss
 1595              		.align	3
 1596              		.set	.LANCHOR1,. + 0
 1597              		.type	UptimeSeconds, %object
 1598              		.size	UptimeSeconds, 8
 1599              	UptimeSeconds:
 1600 0000 00000000 		.space	8
 1600      00000000 
 1601              		.type	RawPosition.7275, %object
 1602              		.size	RawPosition.7275, 4
 1603              	RawPosition.7275:
 1604 0008 00000000 		.space	4
 1605              		.type	result.7276, %object
 1606              		.size	result.7276, 4
 1607              	result.7276:
 1608 000c 00000000 		.space	4
 1609              		.type	NewCommandedMove, %object
 1610              		.size	NewCommandedMove, 1
 1611              	NewCommandedMove:
 1612 0010 00       		.space	1
 1613 0011 00000000 		.space	7
 1613      000000
 1614              		.type	UptimeMicroseconds, %object
 1615              		.size	UptimeMicroseconds, 8
 1616              	UptimeMicroseconds:
 1617 0018 00000000 		.space	8
 1617      00000000 
 1618              		.type	LastMoveStartTimeUsec, %object
 1619              		.size	LastMoveStartTimeUsec, 4
 1620              	LastMoveStartTimeUsec:
 1621 0020 00000000 		.space	4
 1622              		.type	LastMoveTimeUsec, %object
 1623              		.size	LastMoveTimeUsec, 4
 1624              	LastMoveTimeUsec:
 1625 0024 00000000 		.space	4
 1626              		.type	inAuto, %object
 1627              		.size	inAuto, 1
 1628              	inAuto:
 1629 0028 00       		.space	1
 1630 0029 00       		.space	1
 1631              		.type	LastMoveStableCount, %object
 1632              		.size	LastMoveStableCount, 2
 1633              	LastMoveStableCount:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 55


 1634 002a 0000     		.space	2
 1635              		.type	LastMoveEndTimeUsec, %object
 1636              		.size	LastMoveEndTimeUsec, 4
 1637              	LastMoveEndTimeUsec:
 1638 002c 00000000 		.space	4
 1639              		.type	UptimeMicrosecondsAccumulator, %object
 1640              		.size	UptimeMicrosecondsAccumulator, 8
 1641              	UptimeMicrosecondsAccumulator:
 1642 0030 00000000 		.space	8
 1642      00000000 
 1643              		.type	UptimeMilliseconds, %object
 1644              		.size	UptimeMilliseconds, 8
 1645              	UptimeMilliseconds:
 1646 0038 00000000 		.space	8
 1646      00000000 
 1647              		.type	UptimeMillisecondsAccumulator, %object
 1648              		.size	UptimeMillisecondsAccumulator, 8
 1649              	UptimeMillisecondsAccumulator:
 1650 0040 00000000 		.space	8
 1650      00000000 
 1651              		.type	brmsTask.7294, %object
 1652              		.size	brmsTask.7294, 4
 1653              	brmsTask.7294:
 1654 0048 00000000 		.space	4
 1655              		.text
 1656              	.Letext0:
 1657              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1658              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1659              		.file 4 "Generated_Source\\PSoC4/cytypes.h"
 1660              		.file 5 "pid.h"
 1661              		.file 6 "Generated_Source\\PSoC4/isr_rst_encoder.h"
 1662              		.file 7 "Generated_Source\\PSoC4/Reset_Encoder.h"
 1663              		.file 8 "Generated_Source\\PSoC4/Counter_1.h"
 1664              		.file 9 "Generated_Source\\PSoC4/Index_Counter_1.h"
 1665              		.file 10 "Generated_Source\\PSoC4/isr_home.h"
 1666              		.file 11 "Generated_Source\\PSoC4/HOME_IN.h"
 1667              		.file 12 "Generated_Source\\PSoC4/spi_ss.h"
 1668              		.file 13 "Generated_Source\\PSoC4/SPI_1_SPI_UART.h"
 1669              		.file 14 "INA219.h"
 1670              		.file 15 "Generated_Source\\PSoC4/PWM_1.h"
 1671              		.file 16 "Generated_Source\\PSoC4/HOME_OUT.h"
 1672              		.file 17 "Generated_Source\\PSoC4/INDEX_OUT.h"
 1673              		.file 18 "Generated_Source\\PSoC4/Timer_BRMS.h"
 1674              		.file 19 "Generated_Source\\PSoC4/PROBE.h"
 1675              		.file 20 "Generated_Source\\PSoC4/isr_brms.h"
 1676              		.file 21 "Generated_Source\\PSoC4/isr_spi_ss.h"
 1677              		.file 22 "Generated_Source\\PSoC4/I2C.h"
 1678              		.file 23 "Generated_Source\\PSoC4/CyLib.h"
 1679              		.file 24 "Generated_Source\\PSoC4/SPI_1.h"
 1680              		.file 25 "Generated_Source\\PSoC4/LED.h"
 1681              		.section	.debug_info,"",%progbits
 1682              	.Ldebug_info0:
 1683 0000 AF0F0000 		.4byte	0xfaf
 1684 0004 0400     		.2byte	0x4
 1685 0006 00000000 		.4byte	.Ldebug_abbrev0
 1686 000a 04       		.byte	0x4
 1687 000b 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 56


 1688 000c 5A020000 		.4byte	.LASF180
 1689 0010 0C       		.byte	0xc
 1690 0011 12000000 		.4byte	.LASF181
 1691 0015 81050000 		.4byte	.LASF182
 1692 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1693 001d 00000000 		.4byte	0
 1694 0021 00000000 		.4byte	.Ldebug_line0
 1695 0025 02       		.uleb128 0x2
 1696 0026 4E060000 		.4byte	.LASF0
 1697 002a 02       		.byte	0x2
 1698 002b 1B       		.byte	0x1b
 1699 002c 30000000 		.4byte	0x30
 1700 0030 03       		.uleb128 0x3
 1701 0031 01       		.byte	0x1
 1702 0032 06       		.byte	0x6
 1703 0033 79090000 		.4byte	.LASF2
 1704 0037 02       		.uleb128 0x2
 1705 0038 25080000 		.4byte	.LASF1
 1706 003c 02       		.byte	0x2
 1707 003d 1D       		.byte	0x1d
 1708 003e 42000000 		.4byte	0x42
 1709 0042 03       		.uleb128 0x3
 1710 0043 01       		.byte	0x1
 1711 0044 08       		.byte	0x8
 1712 0045 B6080000 		.4byte	.LASF3
 1713 0049 02       		.uleb128 0x2
 1714 004a 26050000 		.4byte	.LASF4
 1715 004e 02       		.byte	0x2
 1716 004f 29       		.byte	0x29
 1717 0050 54000000 		.4byte	0x54
 1718 0054 03       		.uleb128 0x3
 1719 0055 02       		.byte	0x2
 1720 0056 05       		.byte	0x5
 1721 0057 E7060000 		.4byte	.LASF5
 1722 005b 02       		.uleb128 0x2
 1723 005c 1E020000 		.4byte	.LASF6
 1724 0060 02       		.byte	0x2
 1725 0061 2B       		.byte	0x2b
 1726 0062 66000000 		.4byte	0x66
 1727 0066 03       		.uleb128 0x3
 1728 0067 02       		.byte	0x2
 1729 0068 07       		.byte	0x7
 1730 0069 85090000 		.4byte	.LASF7
 1731 006d 02       		.uleb128 0x2
 1732 006e CE000000 		.4byte	.LASF8
 1733 0072 02       		.byte	0x2
 1734 0073 3F       		.byte	0x3f
 1735 0074 78000000 		.4byte	0x78
 1736 0078 03       		.uleb128 0x3
 1737 0079 04       		.byte	0x4
 1738 007a 05       		.byte	0x5
 1739 007b 31070000 		.4byte	.LASF9
 1740 007f 02       		.uleb128 0x2
 1741 0080 C4080000 		.4byte	.LASF10
 1742 0084 02       		.byte	0x2
 1743 0085 41       		.byte	0x41
 1744 0086 8A000000 		.4byte	0x8a
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 57


 1745 008a 03       		.uleb128 0x3
 1746 008b 04       		.byte	0x4
 1747 008c 07       		.byte	0x7
 1748 008d 56080000 		.4byte	.LASF11
 1749 0091 03       		.uleb128 0x3
 1750 0092 08       		.byte	0x8
 1751 0093 05       		.byte	0x5
 1752 0094 DB040000 		.4byte	.LASF12
 1753 0098 02       		.uleb128 0x2
 1754 0099 3B030000 		.4byte	.LASF13
 1755 009d 02       		.byte	0x2
 1756 009e 5B       		.byte	0x5b
 1757 009f A3000000 		.4byte	0xa3
 1758 00a3 03       		.uleb128 0x3
 1759 00a4 08       		.byte	0x8
 1760 00a5 07       		.byte	0x7
 1761 00a6 E1010000 		.4byte	.LASF14
 1762 00aa 04       		.uleb128 0x4
 1763 00ab 04       		.byte	0x4
 1764 00ac 05       		.byte	0x5
 1765 00ad 696E7400 		.ascii	"int\000"
 1766 00b1 03       		.uleb128 0x3
 1767 00b2 04       		.byte	0x4
 1768 00b3 07       		.byte	0x7
 1769 00b4 87000000 		.4byte	.LASF15
 1770 00b8 02       		.uleb128 0x2
 1771 00b9 6F010000 		.4byte	.LASF16
 1772 00bd 03       		.byte	0x3
 1773 00be 14       		.byte	0x14
 1774 00bf 25000000 		.4byte	0x25
 1775 00c3 02       		.uleb128 0x2
 1776 00c4 48040000 		.4byte	.LASF17
 1777 00c8 03       		.byte	0x3
 1778 00c9 18       		.byte	0x18
 1779 00ca 37000000 		.4byte	0x37
 1780 00ce 02       		.uleb128 0x2
 1781 00cf D2010000 		.4byte	.LASF18
 1782 00d3 03       		.byte	0x3
 1783 00d4 20       		.byte	0x20
 1784 00d5 49000000 		.4byte	0x49
 1785 00d9 02       		.uleb128 0x2
 1786 00da A7060000 		.4byte	.LASF19
 1787 00de 03       		.byte	0x3
 1788 00df 24       		.byte	0x24
 1789 00e0 5B000000 		.4byte	0x5b
 1790 00e4 02       		.uleb128 0x2
 1791 00e5 68080000 		.4byte	.LASF20
 1792 00e9 03       		.byte	0x3
 1793 00ea 2C       		.byte	0x2c
 1794 00eb 6D000000 		.4byte	0x6d
 1795 00ef 02       		.uleb128 0x2
 1796 00f0 66010000 		.4byte	.LASF21
 1797 00f4 03       		.byte	0x3
 1798 00f5 30       		.byte	0x30
 1799 00f6 7F000000 		.4byte	0x7f
 1800 00fa 02       		.uleb128 0x2
 1801 00fb C4070000 		.4byte	.LASF22
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 58


 1802 00ff 03       		.byte	0x3
 1803 0100 3C       		.byte	0x3c
 1804 0101 98000000 		.4byte	0x98
 1805 0105 05       		.uleb128 0x5
 1806 0106 C3050000 		.4byte	.LASF23
 1807 010a 04       		.byte	0x4
 1808 010b FE01     		.2byte	0x1fe
 1809 010d 8A000000 		.4byte	0x8a
 1810 0111 03       		.uleb128 0x3
 1811 0112 04       		.byte	0x4
 1812 0113 04       		.byte	0x4
 1813 0114 A9010000 		.4byte	.LASF24
 1814 0118 03       		.uleb128 0x3
 1815 0119 08       		.byte	0x8
 1816 011a 04       		.byte	0x4
 1817 011b B2090000 		.4byte	.LASF25
 1818 011f 03       		.uleb128 0x3
 1819 0120 01       		.byte	0x1
 1820 0121 08       		.byte	0x8
 1821 0122 D3030000 		.4byte	.LASF26
 1822 0126 05       		.uleb128 0x5
 1823 0127 B0060000 		.4byte	.LASF27
 1824 012b 04       		.byte	0x4
 1825 012c A802     		.2byte	0x2a8
 1826 012e 32010000 		.4byte	0x132
 1827 0132 06       		.uleb128 0x6
 1828 0133 05010000 		.4byte	0x105
 1829 0137 03       		.uleb128 0x3
 1830 0138 08       		.byte	0x8
 1831 0139 04       		.byte	0x4
 1832 013a 8D060000 		.4byte	.LASF28
 1833 013e 03       		.uleb128 0x3
 1834 013f 04       		.byte	0x4
 1835 0140 07       		.byte	0x7
 1836 0141 4D080000 		.4byte	.LASF29
 1837 0145 06       		.uleb128 0x6
 1838 0146 EF000000 		.4byte	0xef
 1839 014a 07       		.uleb128 0x7
 1840 014b 01       		.byte	0x1
 1841 014c 42000000 		.4byte	0x42
 1842 0150 01       		.byte	0x1
 1843 0151 9C       		.byte	0x9c
 1844 0152 6F010000 		.4byte	0x16f
 1845 0156 08       		.uleb128 0x8
 1846 0157 B6060000 		.4byte	.LASF30
 1847 015b 00       		.byte	0
 1848 015c 08       		.uleb128 0x8
 1849 015d 74000000 		.4byte	.LASF31
 1850 0161 01       		.byte	0x1
 1851 0162 08       		.uleb128 0x8
 1852 0163 43010000 		.4byte	.LASF32
 1853 0167 02       		.byte	0x2
 1854 0168 08       		.uleb128 0x8
 1855 0169 3A070000 		.4byte	.LASF33
 1856 016d 03       		.byte	0x3
 1857 016e 00       		.byte	0
 1858 016f 02       		.uleb128 0x2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 59


 1859 0170 57060000 		.4byte	.LASF34
 1860 0174 01       		.byte	0x1
 1861 0175 A1       		.byte	0xa1
 1862 0176 4A010000 		.4byte	0x14a
 1863 017a 07       		.uleb128 0x7
 1864 017b 01       		.byte	0x1
 1865 017c 42000000 		.4byte	0x42
 1866 0180 01       		.byte	0x1
 1867 0181 A6       		.byte	0xa6
 1868 0182 BD010000 		.4byte	0x1bd
 1869 0186 08       		.uleb128 0x8
 1870 0187 8F040000 		.4byte	.LASF35
 1871 018b 00       		.byte	0
 1872 018c 08       		.uleb128 0x8
 1873 018d 25030000 		.4byte	.LASF36
 1874 0191 01       		.byte	0x1
 1875 0192 08       		.uleb128 0x8
 1876 0193 6A000000 		.4byte	.LASF37
 1877 0197 02       		.byte	0x2
 1878 0198 08       		.uleb128 0x8
 1879 0199 57040000 		.4byte	.LASF38
 1880 019d 04       		.byte	0x4
 1881 019e 08       		.uleb128 0x8
 1882 019f D9060000 		.4byte	.LASF39
 1883 01a3 08       		.byte	0x8
 1884 01a4 08       		.uleb128 0x8
 1885 01a5 03050000 		.4byte	.LASF40
 1886 01a9 10       		.byte	0x10
 1887 01aa 08       		.uleb128 0x8
 1888 01ab EF080000 		.4byte	.LASF41
 1889 01af 20       		.byte	0x20
 1890 01b0 08       		.uleb128 0x8
 1891 01b1 F4080000 		.4byte	.LASF42
 1892 01b5 40       		.byte	0x40
 1893 01b6 08       		.uleb128 0x8
 1894 01b7 F9080000 		.4byte	.LASF43
 1895 01bb 80       		.byte	0x80
 1896 01bc 00       		.byte	0
 1897 01bd 02       		.uleb128 0x2
 1898 01be 410A0000 		.4byte	.LASF44
 1899 01c2 01       		.byte	0x1
 1900 01c3 B0       		.byte	0xb0
 1901 01c4 7A010000 		.4byte	0x17a
 1902 01c8 07       		.uleb128 0x7
 1903 01c9 01       		.byte	0x1
 1904 01ca 42000000 		.4byte	0x42
 1905 01ce 01       		.byte	0x1
 1906 01cf CC       		.byte	0xcc
 1907 01d0 F3010000 		.4byte	0x1f3
 1908 01d4 08       		.uleb128 0x8
 1909 01d5 CF080000 		.4byte	.LASF45
 1910 01d9 00       		.byte	0
 1911 01da 08       		.uleb128 0x8
 1912 01db ED090000 		.4byte	.LASF46
 1913 01df 01       		.byte	0x1
 1914 01e0 08       		.uleb128 0x8
 1915 01e1 2F080000 		.4byte	.LASF47
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 60


 1916 01e5 02       		.byte	0x2
 1917 01e6 08       		.uleb128 0x8
 1918 01e7 DB080000 		.4byte	.LASF48
 1919 01eb 03       		.byte	0x3
 1920 01ec 08       		.uleb128 0x8
 1921 01ed 38080000 		.4byte	.LASF49
 1922 01f1 04       		.byte	0x4
 1923 01f2 00       		.byte	0
 1924 01f3 02       		.uleb128 0x2
 1925 01f4 76010000 		.4byte	.LASF50
 1926 01f8 01       		.byte	0x1
 1927 01f9 D2       		.byte	0xd2
 1928 01fa C8010000 		.4byte	0x1c8
 1929 01fe 09       		.uleb128 0x9
 1930 01ff 03       		.byte	0x3
 1931 0200 01       		.byte	0x1
 1932 0201 D7       		.byte	0xd7
 1933 0202 2B020000 		.4byte	0x22b
 1934 0206 0A       		.uleb128 0xa
 1935 0207 C2010000 		.4byte	.LASF51
 1936 020b 01       		.byte	0x1
 1937 020c D8       		.byte	0xd8
 1938 020d C3000000 		.4byte	0xc3
 1939 0211 00       		.byte	0
 1940 0212 0A       		.uleb128 0xa
 1941 0213 7C050000 		.4byte	.LASF52
 1942 0217 01       		.byte	0x1
 1943 0218 D9       		.byte	0xd9
 1944 0219 C3000000 		.4byte	0xc3
 1945 021d 01       		.byte	0x1
 1946 021e 0A       		.uleb128 0xa
 1947 021f 36040000 		.4byte	.LASF53
 1948 0223 01       		.byte	0x1
 1949 0224 DA       		.byte	0xda
 1950 0225 C3000000 		.4byte	0xc3
 1951 0229 02       		.byte	0x2
 1952 022a 00       		.byte	0
 1953 022b 02       		.uleb128 0x2
 1954 022c B6030000 		.4byte	.LASF54
 1955 0230 01       		.byte	0x1
 1956 0231 DB       		.byte	0xdb
 1957 0232 FE010000 		.4byte	0x1fe
 1958 0236 09       		.uleb128 0x9
 1959 0237 16       		.byte	0x16
 1960 0238 01       		.byte	0x1
 1961 0239 DE       		.byte	0xde
 1962 023a B7020000 		.4byte	0x2b7
 1963 023e 0A       		.uleb128 0xa
 1964 023f C2010000 		.4byte	.LASF51
 1965 0243 01       		.byte	0x1
 1966 0244 DF       		.byte	0xdf
 1967 0245 C3000000 		.4byte	0xc3
 1968 0249 00       		.byte	0
 1969 024a 0A       		.uleb128 0xa
 1970 024b 7C050000 		.4byte	.LASF52
 1971 024f 01       		.byte	0x1
 1972 0250 E0       		.byte	0xe0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 61


 1973 0251 C3000000 		.4byte	0xc3
 1974 0255 01       		.byte	0x1
 1975 0256 0A       		.uleb128 0xa
 1976 0257 36040000 		.4byte	.LASF53
 1977 025b 01       		.byte	0x1
 1978 025c E1       		.byte	0xe1
 1979 025d C3000000 		.4byte	0xc3
 1980 0261 02       		.byte	0x2
 1981 0262 0A       		.uleb128 0xa
 1982 0263 C2060000 		.4byte	.LASF55
 1983 0267 01       		.byte	0x1
 1984 0268 E2       		.byte	0xe2
 1985 0269 C3000000 		.4byte	0xc3
 1986 026d 03       		.byte	0x3
 1987 026e 0A       		.uleb128 0xa
 1988 026f 9F080000 		.4byte	.LASF56
 1989 0273 01       		.byte	0x1
 1990 0274 E4       		.byte	0xe4
 1991 0275 EF000000 		.4byte	0xef
 1992 0279 04       		.byte	0x4
 1993 027a 0A       		.uleb128 0xa
 1994 027b 94080000 		.4byte	.LASF57
 1995 027f 01       		.byte	0x1
 1996 0280 E5       		.byte	0xe5
 1997 0281 EF000000 		.4byte	0xef
 1998 0285 08       		.byte	0x8
 1999 0286 0A       		.uleb128 0xa
 2000 0287 83080000 		.4byte	.LASF58
 2001 028b 01       		.byte	0x1
 2002 028c E6       		.byte	0xe6
 2003 028d EF000000 		.4byte	0xef
 2004 0291 0C       		.byte	0xc
 2005 0292 0A       		.uleb128 0xa
 2006 0293 4E020000 		.4byte	.LASF59
 2007 0297 01       		.byte	0x1
 2008 0298 E8       		.byte	0xe8
 2009 0299 D9000000 		.4byte	0xd9
 2010 029d 10       		.byte	0x10
 2011 029e 0A       		.uleb128 0xa
 2012 029f 3D040000 		.4byte	.LASF60
 2013 02a3 01       		.byte	0x1
 2014 02a4 E9       		.byte	0xe9
 2015 02a5 D9000000 		.4byte	0xd9
 2016 02a9 12       		.byte	0x12
 2017 02aa 0A       		.uleb128 0xa
 2018 02ab 5E000000 		.4byte	.LASF61
 2019 02af 01       		.byte	0x1
 2020 02b0 EA       		.byte	0xea
 2021 02b1 D9000000 		.4byte	0xd9
 2022 02b5 14       		.byte	0x14
 2023 02b6 00       		.byte	0
 2024 02b7 02       		.uleb128 0x2
 2025 02b8 F1060000 		.4byte	.LASF62
 2026 02bc 01       		.byte	0x1
 2027 02bd EB       		.byte	0xeb
 2028 02be 36020000 		.4byte	0x236
 2029 02c2 09       		.uleb128 0x9
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 62


 2030 02c3 0A       		.byte	0xa
 2031 02c4 01       		.byte	0x1
 2032 02c5 EE       		.byte	0xee
 2033 02c6 1F030000 		.4byte	0x31f
 2034 02ca 0A       		.uleb128 0xa
 2035 02cb C2010000 		.4byte	.LASF51
 2036 02cf 01       		.byte	0x1
 2037 02d0 EF       		.byte	0xef
 2038 02d1 C3000000 		.4byte	0xc3
 2039 02d5 00       		.byte	0
 2040 02d6 0A       		.uleb128 0xa
 2041 02d7 7C050000 		.4byte	.LASF52
 2042 02db 01       		.byte	0x1
 2043 02dc F0       		.byte	0xf0
 2044 02dd C3000000 		.4byte	0xc3
 2045 02e1 01       		.byte	0x1
 2046 02e2 0A       		.uleb128 0xa
 2047 02e3 36040000 		.4byte	.LASF53
 2048 02e7 01       		.byte	0x1
 2049 02e8 F1       		.byte	0xf1
 2050 02e9 C3000000 		.4byte	0xc3
 2051 02ed 02       		.byte	0x2
 2052 02ee 0A       		.uleb128 0xa
 2053 02ef 29020000 		.4byte	.LASF63
 2054 02f3 01       		.byte	0x1
 2055 02f4 F2       		.byte	0xf2
 2056 02f5 C3000000 		.4byte	0xc3
 2057 02f9 03       		.byte	0x3
 2058 02fa 0A       		.uleb128 0xa
 2059 02fb CD070000 		.4byte	.LASF64
 2060 02ff 01       		.byte	0x1
 2061 0300 F3       		.byte	0xf3
 2062 0301 E4000000 		.4byte	0xe4
 2063 0305 04       		.byte	0x4
 2064 0306 0B       		.uleb128 0xb
 2065 0307 6A6F6700 		.ascii	"jog\000"
 2066 030b 01       		.byte	0x1
 2067 030c F4       		.byte	0xf4
 2068 030d B8000000 		.4byte	0xb8
 2069 0311 08       		.byte	0x8
 2070 0312 0A       		.uleb128 0xa
 2071 0313 C2000000 		.4byte	.LASF65
 2072 0317 01       		.byte	0x1
 2073 0318 F5       		.byte	0xf5
 2074 0319 C3000000 		.4byte	0xc3
 2075 031d 09       		.byte	0x9
 2076 031e 00       		.byte	0
 2077 031f 02       		.uleb128 0x2
 2078 0320 8A010000 		.4byte	.LASF66
 2079 0324 01       		.byte	0x1
 2080 0325 F6       		.byte	0xf6
 2081 0326 C2020000 		.4byte	0x2c2
 2082 032a 09       		.uleb128 0x9
 2083 032b 07       		.byte	0x7
 2084 032c 01       		.byte	0x1
 2085 032d F9       		.byte	0xf9
 2086 032e 63030000 		.4byte	0x363
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 63


 2087 0332 0A       		.uleb128 0xa
 2088 0333 C2010000 		.4byte	.LASF51
 2089 0337 01       		.byte	0x1
 2090 0338 FA       		.byte	0xfa
 2091 0339 C3000000 		.4byte	0xc3
 2092 033d 00       		.byte	0
 2093 033e 0A       		.uleb128 0xa
 2094 033f 7C050000 		.4byte	.LASF52
 2095 0343 01       		.byte	0x1
 2096 0344 FB       		.byte	0xfb
 2097 0345 C3000000 		.4byte	0xc3
 2098 0349 01       		.byte	0x1
 2099 034a 0A       		.uleb128 0xa
 2100 034b 36040000 		.4byte	.LASF53
 2101 034f 01       		.byte	0x1
 2102 0350 FC       		.byte	0xfc
 2103 0351 C3000000 		.4byte	0xc3
 2104 0355 02       		.byte	0x2
 2105 0356 0A       		.uleb128 0xa
 2106 0357 CD070000 		.4byte	.LASF64
 2107 035b 01       		.byte	0x1
 2108 035c FD       		.byte	0xfd
 2109 035d E4000000 		.4byte	0xe4
 2110 0361 03       		.byte	0x3
 2111 0362 00       		.byte	0
 2112 0363 02       		.uleb128 0x2
 2113 0364 49090000 		.4byte	.LASF67
 2114 0368 01       		.byte	0x1
 2115 0369 FE       		.byte	0xfe
 2116 036a 2A030000 		.4byte	0x32a
 2117 036e 0C       		.uleb128 0xc
 2118 036f 1B       		.byte	0x1b
 2119 0370 01       		.byte	0x1
 2120 0371 0201     		.2byte	0x102
 2121 0373 B4030000 		.4byte	0x3b4
 2122 0377 0D       		.uleb128 0xd
 2123 0378 62756600 		.ascii	"buf\000"
 2124 037c 01       		.byte	0x1
 2125 037d 0301     		.2byte	0x103
 2126 037f B4030000 		.4byte	0x3b4
 2127 0383 0E       		.uleb128 0xe
 2128 0384 40070000 		.4byte	.LASF68
 2129 0388 01       		.byte	0x1
 2130 0389 0401     		.2byte	0x104
 2131 038b 2B020000 		.4byte	0x22b
 2132 038f 0E       		.uleb128 0xe
 2133 0390 D2060000 		.4byte	.LASF69
 2134 0394 01       		.byte	0x1
 2135 0395 0501     		.2byte	0x105
 2136 0397 B7020000 		.4byte	0x2b7
 2137 039b 0E       		.uleb128 0xe
 2138 039c 50040000 		.4byte	.LASF70
 2139 03a0 01       		.byte	0x1
 2140 03a1 0601     		.2byte	0x106
 2141 03a3 1F030000 		.4byte	0x31f
 2142 03a7 0E       		.uleb128 0xe
 2143 03a8 CB010000 		.4byte	.LASF71
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 64


 2144 03ac 01       		.byte	0x1
 2145 03ad 0701     		.2byte	0x107
 2146 03af 63030000 		.4byte	0x363
 2147 03b3 00       		.byte	0
 2148 03b4 0F       		.uleb128 0xf
 2149 03b5 C3000000 		.4byte	0xc3
 2150 03b9 C4030000 		.4byte	0x3c4
 2151 03bd 10       		.uleb128 0x10
 2152 03be 3E010000 		.4byte	0x13e
 2153 03c2 1A       		.byte	0x1a
 2154 03c3 00       		.byte	0
 2155 03c4 11       		.uleb128 0x11
 2156 03c5 1B       		.byte	0x1b
 2157 03c6 01       		.byte	0x1
 2158 03c7 0B01     		.2byte	0x10b
 2159 03c9 91040000 		.4byte	0x491
 2160 03cd 12       		.uleb128 0x12
 2161 03ce C2010000 		.4byte	.LASF51
 2162 03d2 01       		.byte	0x1
 2163 03d3 0C01     		.2byte	0x10c
 2164 03d5 C3000000 		.4byte	0xc3
 2165 03d9 00       		.byte	0
 2166 03da 12       		.uleb128 0x12
 2167 03db 9B030000 		.4byte	.LASF72
 2168 03df 01       		.byte	0x1
 2169 03e0 0D01     		.2byte	0x10d
 2170 03e2 C3000000 		.4byte	0xc3
 2171 03e6 01       		.byte	0x1
 2172 03e7 12       		.uleb128 0x12
 2173 03e8 A4030000 		.4byte	.LASF73
 2174 03ec 01       		.byte	0x1
 2175 03ed 0E01     		.2byte	0x10e
 2176 03ef C3000000 		.4byte	0xc3
 2177 03f3 02       		.byte	0x2
 2178 03f4 12       		.uleb128 0x12
 2179 03f5 AD030000 		.4byte	.LASF74
 2180 03f9 01       		.byte	0x1
 2181 03fa 0F01     		.2byte	0x10f
 2182 03fc C3000000 		.4byte	0xc3
 2183 0400 03       		.byte	0x3
 2184 0401 12       		.uleb128 0x12
 2185 0402 7C050000 		.4byte	.LASF52
 2186 0406 01       		.byte	0x1
 2187 0407 1001     		.2byte	0x110
 2188 0409 C3000000 		.4byte	0xc3
 2189 040d 04       		.byte	0x4
 2190 040e 12       		.uleb128 0x12
 2191 040f 36040000 		.4byte	.LASF53
 2192 0413 01       		.byte	0x1
 2193 0414 1101     		.2byte	0x111
 2194 0416 C3000000 		.4byte	0xc3
 2195 041a 05       		.byte	0x5
 2196 041b 12       		.uleb128 0x12
 2197 041c 8E080000 		.4byte	.LASF75
 2198 0420 01       		.byte	0x1
 2199 0421 1201     		.2byte	0x112
 2200 0423 C3000000 		.4byte	0xc3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 65


 2201 0427 06       		.byte	0x6
 2202 0428 12       		.uleb128 0x12
 2203 0429 240A0000 		.4byte	.LASF76
 2204 042d 01       		.byte	0x1
 2205 042e 1301     		.2byte	0x113
 2206 0430 C3000000 		.4byte	0xc3
 2207 0434 07       		.byte	0x7
 2208 0435 12       		.uleb128 0x12
 2209 0436 C2060000 		.4byte	.LASF55
 2210 043a 01       		.byte	0x1
 2211 043b 1401     		.2byte	0x114
 2212 043d C3000000 		.4byte	0xc3
 2213 0441 08       		.byte	0x8
 2214 0442 12       		.uleb128 0x12
 2215 0443 6C050000 		.4byte	.LASF77
 2216 0447 01       		.byte	0x1
 2217 0448 1501     		.2byte	0x115
 2218 044a D9000000 		.4byte	0xd9
 2219 044e 09       		.byte	0x9
 2220 044f 12       		.uleb128 0x12
 2221 0450 19000000 		.4byte	.LASF78
 2222 0454 01       		.byte	0x1
 2223 0455 1601     		.2byte	0x116
 2224 0457 CE000000 		.4byte	0xce
 2225 045b 0B       		.byte	0xb
 2226 045c 12       		.uleb128 0x12
 2227 045d 380A0000 		.4byte	.LASF79
 2228 0461 01       		.byte	0x1
 2229 0462 1701     		.2byte	0x117
 2230 0464 E4000000 		.4byte	0xe4
 2231 0468 0D       		.byte	0xd
 2232 0469 13       		.uleb128 0x13
 2233 046a 70776D00 		.ascii	"pwm\000"
 2234 046e 01       		.byte	0x1
 2235 046f 1801     		.2byte	0x118
 2236 0471 CE000000 		.4byte	0xce
 2237 0475 11       		.byte	0x11
 2238 0476 12       		.uleb128 0x12
 2239 0477 AC090000 		.4byte	.LASF80
 2240 047b 01       		.byte	0x1
 2241 047c 1901     		.2byte	0x119
 2242 047e E4000000 		.4byte	0xe4
 2243 0482 13       		.byte	0x13
 2244 0483 12       		.uleb128 0x12
 2245 0484 D8030000 		.4byte	.LASF81
 2246 0488 01       		.byte	0x1
 2247 0489 1A01     		.2byte	0x11a
 2248 048b EF000000 		.4byte	0xef
 2249 048f 17       		.byte	0x17
 2250 0490 00       		.byte	0
 2251 0491 05       		.uleb128 0x5
 2252 0492 B8070000 		.4byte	.LASF82
 2253 0496 01       		.byte	0x1
 2254 0497 1B01     		.2byte	0x11b
 2255 0499 C4030000 		.4byte	0x3c4
 2256 049d 0C       		.uleb128 0xc
 2257 049e 1B       		.byte	0x1b
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 66


 2258 049f 01       		.byte	0x1
 2259 04a0 1E01     		.2byte	0x11e
 2260 04a2 BF040000 		.4byte	0x4bf
 2261 04a6 0D       		.uleb128 0xd
 2262 04a7 62756600 		.ascii	"buf\000"
 2263 04ab 01       		.byte	0x1
 2264 04ac 1F01     		.2byte	0x11f
 2265 04ae B4030000 		.4byte	0x3b4
 2266 04b2 0D       		.uleb128 0xd
 2267 04b3 6D736700 		.ascii	"msg\000"
 2268 04b7 01       		.byte	0x1
 2269 04b8 2001     		.2byte	0x120
 2270 04ba 91040000 		.4byte	0x491
 2271 04be 00       		.byte	0
 2272 04bf 14       		.uleb128 0x14
 2273 04c0 01       		.byte	0x1
 2274 04c1 42000000 		.4byte	0x42
 2275 04c5 01       		.byte	0x1
 2276 04c6 2401     		.2byte	0x124
 2277 04c8 D9040000 		.4byte	0x4d9
 2278 04cc 08       		.uleb128 0x8
 2279 04cd 33000000 		.4byte	.LASF83
 2280 04d1 00       		.byte	0
 2281 04d2 08       		.uleb128 0x8
 2282 04d3 CA050000 		.4byte	.LASF84
 2283 04d7 01       		.byte	0x1
 2284 04d8 00       		.byte	0
 2285 04d9 05       		.uleb128 0x5
 2286 04da 08010000 		.4byte	.LASF85
 2287 04de 01       		.byte	0x1
 2288 04df 2701     		.2byte	0x127
 2289 04e1 BF040000 		.4byte	0x4bf
 2290 04e5 15       		.uleb128 0x15
 2291 04e6 2A0A0000 		.4byte	.LASF86
 2292 04ea 01       		.byte	0x1
 2293 04eb 6104     		.2byte	0x461
 2294 04ed 00000000 		.4byte	.LFB43
 2295 04f1 24000000 		.4byte	.LFE43-.LFB43
 2296 04f5 01       		.uleb128 0x1
 2297 04f6 9C       		.byte	0x9c
 2298 04f7 30050000 		.4byte	0x530
 2299 04fb 16       		.uleb128 0x16
 2300 04fc 06000000 		.4byte	.LVL0
 2301 0500 090E0000 		.4byte	0xe09
 2302 0504 16       		.uleb128 0x16
 2303 0505 0A000000 		.4byte	.LVL1
 2304 0509 140E0000 		.4byte	0xe14
 2305 050d 17       		.uleb128 0x17
 2306 050e 10000000 		.4byte	.LVL2
 2307 0512 1F0E0000 		.4byte	0xe1f
 2308 0516 20050000 		.4byte	0x520
 2309 051a 18       		.uleb128 0x18
 2310 051b 01       		.uleb128 0x1
 2311 051c 50       		.byte	0x50
 2312 051d 01       		.uleb128 0x1
 2313 051e 30       		.byte	0x30
 2314 051f 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 67


 2315 0520 19       		.uleb128 0x19
 2316 0521 16000000 		.4byte	.LVL3
 2317 0525 2A0E0000 		.4byte	0xe2a
 2318 0529 18       		.uleb128 0x18
 2319 052a 01       		.uleb128 0x1
 2320 052b 50       		.byte	0x50
 2321 052c 01       		.uleb128 0x1
 2322 052d 30       		.byte	0x30
 2323 052e 00       		.byte	0
 2324 052f 00       		.byte	0
 2325 0530 15       		.uleb128 0x15
 2326 0531 F9000000 		.4byte	.LASF87
 2327 0535 01       		.byte	0x1
 2328 0536 7F04     		.2byte	0x47f
 2329 0538 00000000 		.4byte	.LFB44
 2330 053c 1C000000 		.4byte	.LFE44-.LFB44
 2331 0540 01       		.uleb128 0x1
 2332 0541 9C       		.byte	0x9c
 2333 0542 68050000 		.4byte	0x568
 2334 0546 16       		.uleb128 0x16
 2335 0547 06000000 		.4byte	.LVL4
 2336 054b 350E0000 		.4byte	0xe35
 2337 054f 16       		.uleb128 0x16
 2338 0550 0A000000 		.4byte	.LVL5
 2339 0554 400E0000 		.4byte	0xe40
 2340 0558 19       		.uleb128 0x19
 2341 0559 10000000 		.4byte	.LVL6
 2342 055d 1F0E0000 		.4byte	0xe1f
 2343 0561 18       		.uleb128 0x18
 2344 0562 01       		.uleb128 0x1
 2345 0563 50       		.byte	0x50
 2346 0564 01       		.uleb128 0x1
 2347 0565 30       		.byte	0x30
 2348 0566 00       		.byte	0
 2349 0567 00       		.byte	0
 2350 0568 15       		.uleb128 0x15
 2351 0569 3C060000 		.4byte	.LASF88
 2352 056d 01       		.byte	0x1
 2353 056e 9904     		.2byte	0x499
 2354 0570 00000000 		.4byte	.LFB45
 2355 0574 60000000 		.4byte	.LFE45-.LFB45
 2356 0578 01       		.uleb128 0x1
 2357 0579 9C       		.byte	0x9c
 2358 057a DB050000 		.4byte	0x5db
 2359 057e 1A       		.uleb128 0x1a
 2360 057f 6900     		.ascii	"i\000"
 2361 0581 01       		.byte	0x1
 2362 0582 9B04     		.2byte	0x49b
 2363 0584 EF000000 		.4byte	0xef
 2364 0588 00000000 		.4byte	.LLST0
 2365 058c 16       		.uleb128 0x16
 2366 058d 06000000 		.4byte	.LVL7
 2367 0591 4B0E0000 		.4byte	0xe4b
 2368 0595 16       		.uleb128 0x16
 2369 0596 0A000000 		.4byte	.LVL8
 2370 059a 560E0000 		.4byte	0xe56
 2371 059e 17       		.uleb128 0x17
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 68


 2372 059f 2A000000 		.4byte	.LVL9
 2373 05a3 610E0000 		.4byte	0xe61
 2374 05a7 BF050000 		.4byte	0x5bf
 2375 05ab 18       		.uleb128 0x18
 2376 05ac 01       		.uleb128 0x1
 2377 05ad 50       		.byte	0x50
 2378 05ae 05       		.uleb128 0x5
 2379 05af 03       		.byte	0x3
 2380 05b0 00000000 		.4byte	txMessage
 2381 05b4 18       		.uleb128 0x18
 2382 05b5 01       		.uleb128 0x1
 2383 05b6 51       		.byte	0x51
 2384 05b7 01       		.uleb128 0x1
 2385 05b8 30       		.byte	0x30
 2386 05b9 18       		.uleb128 0x18
 2387 05ba 01       		.uleb128 0x1
 2388 05bb 52       		.byte	0x52
 2389 05bc 01       		.uleb128 0x1
 2390 05bd 4B       		.byte	0x4b
 2391 05be 00       		.byte	0
 2392 05bf 16       		.uleb128 0x16
 2393 05c0 32000000 		.4byte	.LVL11
 2394 05c4 6A0E0000 		.4byte	0xe6a
 2395 05c8 16       		.uleb128 0x16
 2396 05c9 40000000 		.4byte	.LVL13
 2397 05cd 760E0000 		.4byte	0xe76
 2398 05d1 16       		.uleb128 0x16
 2399 05d2 44000000 		.4byte	.LVL14
 2400 05d6 820E0000 		.4byte	0xe82
 2401 05da 00       		.byte	0
 2402 05db 15       		.uleb128 0x15
 2403 05dc 9D010000 		.4byte	.LASF89
 2404 05e0 01       		.byte	0x1
 2405 05e1 4001     		.2byte	0x140
 2406 05e3 00000000 		.4byte	.LFB32
 2407 05e7 1C000000 		.4byte	.LFE32-.LFB32
 2408 05eb 01       		.uleb128 0x1
 2409 05ec 9C       		.byte	0x9c
 2410 05ed 02060000 		.4byte	0x602
 2411 05f1 1B       		.uleb128 0x1b
 2412 05f2 240A0000 		.4byte	.LASF76
 2413 05f6 01       		.byte	0x1
 2414 05f7 4001     		.2byte	0x140
 2415 05f9 BD010000 		.4byte	0x1bd
 2416 05fd 1F000000 		.4byte	.LLST1
 2417 0601 00       		.byte	0
 2418 0602 15       		.uleb128 0x15
 2419 0603 1A010000 		.4byte	.LASF90
 2420 0607 01       		.byte	0x1
 2421 0608 5B01     		.2byte	0x15b
 2422 060a 00000000 		.4byte	.LFB33
 2423 060e 1C000000 		.4byte	.LFE33-.LFB33
 2424 0612 01       		.uleb128 0x1
 2425 0613 9C       		.byte	0x9c
 2426 0614 27060000 		.4byte	0x627
 2427 0618 1C       		.uleb128 0x1c
 2428 0619 240A0000 		.4byte	.LASF76
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 69


 2429 061d 01       		.byte	0x1
 2430 061e 5B01     		.2byte	0x15b
 2431 0620 BD010000 		.4byte	0x1bd
 2432 0624 01       		.uleb128 0x1
 2433 0625 50       		.byte	0x50
 2434 0626 00       		.byte	0
 2435 0627 1D       		.uleb128 0x1d
 2436 0628 44000000 		.4byte	.LASF91
 2437 062c 01       		.byte	0x1
 2438 062d 7501     		.2byte	0x175
 2439 062f 00000000 		.4byte	.LFB34
 2440 0633 18000000 		.4byte	.LFE34-.LFB34
 2441 0637 01       		.uleb128 0x1
 2442 0638 9C       		.byte	0x9c
 2443 0639 5C060000 		.4byte	0x65c
 2444 063d 1A       		.uleb128 0x1a
 2445 063e 6300     		.ascii	"c\000"
 2446 0640 01       		.byte	0x1
 2447 0641 7801     		.2byte	0x178
 2448 0643 11010000 		.4byte	0x111
 2449 0647 40000000 		.4byte	.LLST2
 2450 064b 19       		.uleb128 0x19
 2451 064c 08000000 		.4byte	.LVL19
 2452 0650 8E0E0000 		.4byte	0xe8e
 2453 0654 18       		.uleb128 0x18
 2454 0655 01       		.uleb128 0x1
 2455 0656 50       		.byte	0x50
 2456 0657 02       		.uleb128 0x2
 2457 0658 08       		.byte	0x8
 2458 0659 40       		.byte	0x40
 2459 065a 00       		.byte	0
 2460 065b 00       		.byte	0
 2461 065c 15       		.uleb128 0x15
 2462 065d 04040000 		.4byte	.LASF92
 2463 0661 01       		.byte	0x1
 2464 0662 5B02     		.2byte	0x25b
 2465 0664 00000000 		.4byte	.LFB36
 2466 0668 10000000 		.4byte	.LFE36-.LFB36
 2467 066c 01       		.uleb128 0x1
 2468 066d 9C       		.byte	0x9c
 2469 066e 97060000 		.4byte	0x697
 2470 0672 1B       		.uleb128 0x1b
 2471 0673 3D000000 		.4byte	.LASF93
 2472 0677 01       		.byte	0x1
 2473 0678 5B02     		.2byte	0x25b
 2474 067a E4000000 		.4byte	0xe4
 2475 067e 53000000 		.4byte	.LLST3
 2476 0682 19       		.uleb128 0x19
 2477 0683 0E000000 		.4byte	.LVL23
 2478 0687 990E0000 		.4byte	0xe99
 2479 068b 18       		.uleb128 0x18
 2480 068c 01       		.uleb128 0x1
 2481 068d 50       		.byte	0x50
 2482 068e 06       		.uleb128 0x6
 2483 068f F3       		.byte	0xf3
 2484 0690 01       		.uleb128 0x1
 2485 0691 50       		.byte	0x50
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 70


 2486 0692 23       		.byte	0x23
 2487 0693 A006     		.uleb128 0x320
 2488 0695 00       		.byte	0
 2489 0696 00       		.byte	0
 2490 0697 1E       		.uleb128 0x1e
 2491 0698 E2070000 		.4byte	.LASF183
 2492 069c 01       		.byte	0x1
 2493 069d 6C02     		.2byte	0x26c
 2494 069f E4000000 		.4byte	0xe4
 2495 06a3 00000000 		.4byte	.LFB37
 2496 06a7 44000000 		.4byte	.LFE37-.LFB37
 2497 06ab 01       		.uleb128 0x1
 2498 06ac 9C       		.byte	0x9c
 2499 06ad DF060000 		.4byte	0x6df
 2500 06b1 1F       		.uleb128 0x1f
 2501 06b2 89070000 		.4byte	.LASF94
 2502 06b6 01       		.byte	0x1
 2503 06b7 6E02     		.2byte	0x26e
 2504 06b9 45010000 		.4byte	0x145
 2505 06bd 05       		.uleb128 0x5
 2506 06be 03       		.byte	0x3
 2507 06bf 08000000 		.4byte	RawPosition.7275
 2508 06c3 1F       		.uleb128 0x1f
 2509 06c4 DA010000 		.4byte	.LASF95
 2510 06c8 01       		.byte	0x1
 2511 06c9 6F02     		.2byte	0x26f
 2512 06cb DF060000 		.4byte	0x6df
 2513 06cf 05       		.uleb128 0x5
 2514 06d0 03       		.byte	0x3
 2515 06d1 0C000000 		.4byte	result.7276
 2516 06d5 16       		.uleb128 0x16
 2517 06d6 06000000 		.4byte	.LVL24
 2518 06da A50E0000 		.4byte	0xea5
 2519 06de 00       		.byte	0
 2520 06df 06       		.uleb128 0x6
 2521 06e0 E4000000 		.4byte	0xe4
 2522 06e4 15       		.uleb128 0x15
 2523 06e5 66060000 		.4byte	.LASF96
 2524 06e9 01       		.byte	0x1
 2525 06ea 8A01     		.2byte	0x18a
 2526 06ec 00000000 		.4byte	.LFB35
 2527 06f0 B0020000 		.4byte	.LFE35-.LFB35
 2528 06f4 01       		.uleb128 0x1
 2529 06f5 9C       		.byte	0x9c
 2530 06f6 BE070000 		.4byte	0x7be
 2531 06fa 20       		.uleb128 0x20
 2532 06fb 36040000 		.4byte	.LASF53
 2533 06ff 01       		.byte	0x1
 2534 0700 8C01     		.2byte	0x18c
 2535 0702 F3010000 		.4byte	0x1f3
 2536 0706 82000000 		.4byte	.LLST4
 2537 070a 20       		.uleb128 0x20
 2538 070b 7C050000 		.4byte	.LASF52
 2539 070f 01       		.byte	0x1
 2540 0710 8D01     		.2byte	0x18d
 2541 0712 C3000000 		.4byte	0xc3
 2542 0716 AC000000 		.4byte	.LLST5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 71


 2543 071a 1A       		.uleb128 0x1a
 2544 071b 6900     		.ascii	"i\000"
 2545 071d 01       		.byte	0x1
 2546 071e 8E01     		.2byte	0x18e
 2547 0720 C3000000 		.4byte	0xc3
 2548 0724 D5000000 		.4byte	.LLST6
 2549 0728 20       		.uleb128 0x20
 2550 0729 C2010000 		.4byte	.LASF51
 2551 072d 01       		.byte	0x1
 2552 072e 8F01     		.2byte	0x18f
 2553 0730 C3000000 		.4byte	0xc3
 2554 0734 2C010000 		.4byte	.LLST7
 2555 0738 20       		.uleb128 0x20
 2556 0739 6A070000 		.4byte	.LASF97
 2557 073d 01       		.byte	0x1
 2558 073e 9001     		.2byte	0x190
 2559 0740 E4000000 		.4byte	0xe4
 2560 0744 99010000 		.4byte	.LLST8
 2561 0748 16       		.uleb128 0x16
 2562 0749 6C000000 		.4byte	.LVL37
 2563 074d 97060000 		.4byte	0x697
 2564 0751 17       		.uleb128 0x17
 2565 0752 B6000000 		.4byte	.LVL38
 2566 0756 02060000 		.4byte	0x602
 2567 075a 64070000 		.4byte	0x764
 2568 075e 18       		.uleb128 0x18
 2569 075f 01       		.uleb128 0x1
 2570 0760 50       		.byte	0x50
 2571 0761 01       		.uleb128 0x1
 2572 0762 30       		.byte	0x30
 2573 0763 00       		.byte	0
 2574 0764 16       		.uleb128 0x16
 2575 0765 F2000000 		.4byte	.LVL42
 2576 0769 97060000 		.4byte	0x697
 2577 076d 17       		.uleb128 0x17
 2578 076e 1E010000 		.4byte	.LVL44
 2579 0772 2A0E0000 		.4byte	0xe2a
 2580 0776 80070000 		.4byte	0x780
 2581 077a 18       		.uleb128 0x18
 2582 077b 01       		.uleb128 0x1
 2583 077c 50       		.byte	0x50
 2584 077d 01       		.uleb128 0x1
 2585 077e 30       		.byte	0x30
 2586 077f 00       		.byte	0
 2587 0780 16       		.uleb128 0x16
 2588 0781 74010000 		.4byte	.LVL54
 2589 0785 1F0E0000 		.4byte	0xe1f
 2590 0789 16       		.uleb128 0x16
 2591 078a 92010000 		.4byte	.LVL55
 2592 078e 97060000 		.4byte	0x697
 2593 0792 17       		.uleb128 0x17
 2594 0793 40020000 		.4byte	.LVL63
 2595 0797 B00E0000 		.4byte	0xeb0
 2596 079b AE070000 		.4byte	0x7ae
 2597 079f 18       		.uleb128 0x18
 2598 07a0 01       		.uleb128 0x1
 2599 07a1 50       		.byte	0x50
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 72


 2600 07a2 05       		.uleb128 0x5
 2601 07a3 03       		.byte	0x3
 2602 07a4 00000000 		.4byte	txMessage
 2603 07a8 18       		.uleb128 0x18
 2604 07a9 01       		.uleb128 0x1
 2605 07aa 51       		.byte	0x51
 2606 07ab 01       		.uleb128 0x1
 2607 07ac 4B       		.byte	0x4b
 2608 07ad 00       		.byte	0
 2609 07ae 19       		.uleb128 0x19
 2610 07af 54020000 		.4byte	.LVL64
 2611 07b3 02060000 		.4byte	0x602
 2612 07b7 18       		.uleb128 0x18
 2613 07b8 01       		.uleb128 0x1
 2614 07b9 50       		.byte	0x50
 2615 07ba 01       		.uleb128 0x1
 2616 07bb 30       		.byte	0x30
 2617 07bc 00       		.byte	0
 2618 07bd 00       		.byte	0
 2619 07be 15       		.uleb128 0x15
 2620 07bf 98090000 		.4byte	.LASF98
 2621 07c3 01       		.byte	0x1
 2622 07c4 8F02     		.2byte	0x28f
 2623 07c6 00000000 		.4byte	.LFB38
 2624 07ca 30000000 		.4byte	.LFE38-.LFB38
 2625 07ce 01       		.uleb128 0x1
 2626 07cf 9C       		.byte	0x9c
 2627 07d0 DE070000 		.4byte	0x7de
 2628 07d4 16       		.uleb128 0x16
 2629 07d5 06000000 		.4byte	.LVL65
 2630 07d9 97060000 		.4byte	0x697
 2631 07dd 00       		.byte	0
 2632 07de 15       		.uleb128 0x15
 2633 07df F8030000 		.4byte	.LASF99
 2634 07e3 01       		.byte	0x1
 2635 07e4 A802     		.2byte	0x2a8
 2636 07e6 00000000 		.4byte	.LFB39
 2637 07ea 28000000 		.4byte	.LFE39-.LFB39
 2638 07ee 01       		.uleb128 0x1
 2639 07ef 9C       		.byte	0x9c
 2640 07f0 1E080000 		.4byte	0x81e
 2641 07f4 1B       		.uleb128 0x1b
 2642 07f5 20070000 		.4byte	.LASF100
 2643 07f9 01       		.byte	0x1
 2644 07fa A802     		.2byte	0x2a8
 2645 07fc EF000000 		.4byte	0xef
 2646 0800 B7010000 		.4byte	.LLST9
 2647 0804 20       		.uleb128 0x20
 2648 0805 7F000000 		.4byte	.LASF101
 2649 0809 01       		.byte	0x1
 2650 080a AA02     		.2byte	0x2aa
 2651 080c 1E080000 		.4byte	0x81e
 2652 0810 D8010000 		.4byte	.LLST10
 2653 0814 16       		.uleb128 0x16
 2654 0815 1C000000 		.4byte	.LVL68
 2655 0819 BE070000 		.4byte	0x7be
 2656 081d 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 73


 2657 081e 03       		.uleb128 0x3
 2658 081f 01       		.byte	0x1
 2659 0820 02       		.byte	0x2
 2660 0821 1F030000 		.4byte	.LASF102
 2661 0825 15       		.uleb128 0x15
 2662 0826 B0000000 		.4byte	.LASF103
 2663 082a 01       		.byte	0x1
 2664 082b BE02     		.2byte	0x2be
 2665 082d 00000000 		.4byte	.LFB40
 2666 0831 64010000 		.4byte	.LFE40-.LFB40
 2667 0835 01       		.uleb128 0x1
 2668 0836 9C       		.byte	0x9c
 2669 0837 D1080000 		.4byte	0x8d1
 2670 083b 17       		.uleb128 0x17
 2671 083c 22000000 		.4byte	.LVL70
 2672 0840 5C060000 		.4byte	0x65c
 2673 0844 4F080000 		.4byte	0x84f
 2674 0848 18       		.uleb128 0x18
 2675 0849 01       		.uleb128 0x1
 2676 084a 50       		.byte	0x50
 2677 084b 02       		.uleb128 0x2
 2678 084c 74       		.byte	0x74
 2679 084d 00       		.sleb128 0
 2680 084e 00       		.byte	0
 2681 084f 17       		.uleb128 0x17
 2682 0850 3C000000 		.4byte	.LVL71
 2683 0854 BC0E0000 		.4byte	0xebc
 2684 0858 62080000 		.4byte	0x862
 2685 085c 18       		.uleb128 0x18
 2686 085d 01       		.uleb128 0x1
 2687 085e 50       		.byte	0x50
 2688 085f 01       		.uleb128 0x1
 2689 0860 36       		.byte	0x36
 2690 0861 00       		.byte	0
 2691 0862 17       		.uleb128 0x17
 2692 0863 42000000 		.4byte	.LVL72
 2693 0867 C70E0000 		.4byte	0xec7
 2694 086b 75080000 		.4byte	0x875
 2695 086f 18       		.uleb128 0x18
 2696 0870 01       		.uleb128 0x1
 2697 0871 50       		.byte	0x50
 2698 0872 01       		.uleb128 0x1
 2699 0873 36       		.byte	0x36
 2700 0874 00       		.byte	0
 2701 0875 17       		.uleb128 0x17
 2702 0876 58000000 		.4byte	.LVL73
 2703 087a DE070000 		.4byte	0x7de
 2704 087e 88080000 		.4byte	0x888
 2705 0882 18       		.uleb128 0x18
 2706 0883 01       		.uleb128 0x1
 2707 0884 50       		.byte	0x50
 2708 0885 01       		.uleb128 0x1
 2709 0886 31       		.byte	0x31
 2710 0887 00       		.byte	0
 2711 0888 17       		.uleb128 0x17
 2712 0889 6C000000 		.4byte	.LVL74
 2713 088d DE070000 		.4byte	0x7de
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 74


 2714 0891 9C080000 		.4byte	0x89c
 2715 0895 18       		.uleb128 0x18
 2716 0896 01       		.uleb128 0x1
 2717 0897 50       		.byte	0x50
 2718 0898 02       		.uleb128 0x2
 2719 0899 74       		.byte	0x74
 2720 089a 00       		.sleb128 0
 2721 089b 00       		.byte	0
 2722 089c 16       		.uleb128 0x16
 2723 089d BC000000 		.4byte	.LVL75
 2724 08a1 97060000 		.4byte	0x697
 2725 08a5 16       		.uleb128 0x16
 2726 08a6 CA000000 		.4byte	.LVL76
 2727 08aa D20E0000 		.4byte	0xed2
 2728 08ae 16       		.uleb128 0x16
 2729 08af D4000000 		.4byte	.LVL77
 2730 08b3 5C060000 		.4byte	0x65c
 2731 08b7 16       		.uleb128 0x16
 2732 08b8 2E010000 		.4byte	.LVL78
 2733 08bc 5C060000 		.4byte	0x65c
 2734 08c0 19       		.uleb128 0x19
 2735 08c1 36010000 		.4byte	.LVL79
 2736 08c5 5C060000 		.4byte	0x65c
 2737 08c9 18       		.uleb128 0x18
 2738 08ca 01       		.uleb128 0x1
 2739 08cb 50       		.byte	0x50
 2740 08cc 02       		.uleb128 0x2
 2741 08cd 74       		.byte	0x74
 2742 08ce 00       		.sleb128 0
 2743 08cf 00       		.byte	0
 2744 08d0 00       		.byte	0
 2745 08d1 15       		.uleb128 0x15
 2746 08d2 0C040000 		.4byte	.LASF104
 2747 08d6 01       		.byte	0x1
 2748 08d7 0004     		.2byte	0x400
 2749 08d9 00000000 		.4byte	.LFB42
 2750 08dd BC000000 		.4byte	.LFE42-.LFB42
 2751 08e1 01       		.uleb128 0x1
 2752 08e2 9C       		.byte	0x9c
 2753 08e3 82090000 		.4byte	0x982
 2754 08e7 1F       		.uleb128 0x1f
 2755 08e8 55000000 		.4byte	.LASF105
 2756 08ec 01       		.byte	0x1
 2757 08ed 0204     		.2byte	0x402
 2758 08ef EF000000 		.4byte	0xef
 2759 08f3 05       		.uleb128 0x5
 2760 08f4 03       		.byte	0x3
 2761 08f5 48000000 		.4byte	brmsTask.7294
 2762 08f9 21       		.uleb128 0x21
 2763 08fa 94000000 		.4byte	.LASF106
 2764 08fe 01       		.byte	0x1
 2765 08ff 0404     		.2byte	0x404
 2766 0901 82090000 		.4byte	0x982
 2767 0905 01       		.byte	0x1
 2768 0906 21       		.uleb128 0x21
 2769 0907 D6070000 		.4byte	.LASF107
 2770 090b 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 75


 2771 090c 0504     		.2byte	0x405
 2772 090e 87090000 		.4byte	0x987
 2773 0912 02       		.byte	0x2
 2774 0913 21       		.uleb128 0x21
 2775 0914 AC070000 		.4byte	.LASF108
 2776 0918 01       		.byte	0x1
 2777 0919 0604     		.2byte	0x406
 2778 091b 8C090000 		.4byte	0x98c
 2779 091f 04       		.byte	0x4
 2780 0920 21       		.uleb128 0x21
 2781 0921 27000000 		.4byte	.LASF109
 2782 0925 01       		.byte	0x1
 2783 0926 0704     		.2byte	0x407
 2784 0928 91090000 		.4byte	0x991
 2785 092c 08       		.byte	0x8
 2786 092d 21       		.uleb128 0x21
 2787 092e 25070000 		.4byte	.LASF110
 2788 0932 01       		.byte	0x1
 2789 0933 0804     		.2byte	0x408
 2790 0935 EF000000 		.4byte	0xef
 2791 0939 10       		.byte	0x10
 2792 093a 17       		.uleb128 0x17
 2793 093b 08000000 		.4byte	.LVL80
 2794 093f DD0E0000 		.4byte	0xedd
 2795 0943 4D090000 		.4byte	0x94d
 2796 0947 18       		.uleb128 0x18
 2797 0948 01       		.uleb128 0x1
 2798 0949 50       		.byte	0x50
 2799 094a 01       		.uleb128 0x1
 2800 094b 32       		.byte	0x32
 2801 094c 00       		.byte	0
 2802 094d 17       		.uleb128 0x17
 2803 094e 0E000000 		.4byte	.LVL81
 2804 0952 E90E0000 		.4byte	0xee9
 2805 0956 60090000 		.4byte	0x960
 2806 095a 18       		.uleb128 0x18
 2807 095b 01       		.uleb128 0x1
 2808 095c 50       		.byte	0x50
 2809 095d 01       		.uleb128 0x1
 2810 095e 31       		.byte	0x31
 2811 095f 00       		.byte	0
 2812 0960 16       		.uleb128 0x16
 2813 0961 A2000000 		.4byte	.LVL82
 2814 0965 25080000 		.4byte	0x825
 2815 0969 16       		.uleb128 0x16
 2816 096a B0000000 		.4byte	.LVL83
 2817 096e E4060000 		.4byte	0x6e4
 2818 0972 19       		.uleb128 0x19
 2819 0973 B6000000 		.4byte	.LVL84
 2820 0977 E90E0000 		.4byte	0xee9
 2821 097b 18       		.uleb128 0x18
 2822 097c 01       		.uleb128 0x1
 2823 097d 50       		.byte	0x50
 2824 097e 01       		.uleb128 0x1
 2825 097f 30       		.byte	0x30
 2826 0980 00       		.byte	0
 2827 0981 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 76


 2828 0982 22       		.uleb128 0x22
 2829 0983 EF000000 		.4byte	0xef
 2830 0987 22       		.uleb128 0x22
 2831 0988 EF000000 		.4byte	0xef
 2832 098c 22       		.uleb128 0x22
 2833 098d EF000000 		.4byte	0xef
 2834 0991 22       		.uleb128 0x22
 2835 0992 EF000000 		.4byte	0xef
 2836 0996 23       		.uleb128 0x23
 2837 0997 A7090000 		.4byte	.LASF184
 2838 099b 01       		.byte	0x1
 2839 099c 4A03     		.2byte	0x34a
 2840 099e AA000000 		.4byte	0xaa
 2841 09a2 00000000 		.4byte	.LFB41
 2842 09a6 38010000 		.4byte	.LFE41-.LFB41
 2843 09aa 01       		.uleb128 0x1
 2844 09ab 9C       		.byte	0x9c
 2845 09ac 800B0000 		.4byte	0xb80
 2846 09b0 17       		.uleb128 0x17
 2847 09b1 08000000 		.4byte	.LVL85
 2848 09b5 BC0E0000 		.4byte	0xebc
 2849 09b9 C3090000 		.4byte	0x9c3
 2850 09bd 18       		.uleb128 0x18
 2851 09be 01       		.uleb128 0x1
 2852 09bf 50       		.byte	0x50
 2853 09c0 01       		.uleb128 0x1
 2854 09c1 31       		.byte	0x31
 2855 09c2 00       		.byte	0
 2856 09c3 17       		.uleb128 0x17
 2857 09c4 0E000000 		.4byte	.LVL86
 2858 09c8 C70E0000 		.4byte	0xec7
 2859 09cc D6090000 		.4byte	0x9d6
 2860 09d0 18       		.uleb128 0x18
 2861 09d1 01       		.uleb128 0x1
 2862 09d2 50       		.byte	0x50
 2863 09d3 01       		.uleb128 0x1
 2864 09d4 31       		.byte	0x31
 2865 09d5 00       		.byte	0
 2866 09d6 16       		.uleb128 0x16
 2867 09d7 12000000 		.4byte	.LVL87
 2868 09db F40E0000 		.4byte	0xef4
 2869 09df 17       		.uleb128 0x17
 2870 09e0 18000000 		.4byte	.LVL88
 2871 09e4 000F0000 		.4byte	0xf00
 2872 09e8 F6090000 		.4byte	0x9f6
 2873 09ec 18       		.uleb128 0x18
 2874 09ed 01       		.uleb128 0x1
 2875 09ee 50       		.byte	0x50
 2876 09ef 05       		.uleb128 0x5
 2877 09f0 03       		.byte	0x3
 2878 09f1 00000000 		.4byte	BRMS_Interrupt
 2879 09f5 00       		.byte	0
 2880 09f6 17       		.uleb128 0x17
 2881 09f7 1E000000 		.4byte	.LVL89
 2882 09fb 0B0F0000 		.4byte	0xf0b
 2883 09ff 090A0000 		.4byte	0xa09
 2884 0a03 18       		.uleb128 0x18
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 77


 2885 0a04 01       		.uleb128 0x1
 2886 0a05 50       		.byte	0x50
 2887 0a06 01       		.uleb128 0x1
 2888 0a07 32       		.byte	0x32
 2889 0a08 00       		.byte	0
 2890 0a09 17       		.uleb128 0x17
 2891 0a0a 24000000 		.4byte	.LVL90
 2892 0a0e 160F0000 		.4byte	0xf16
 2893 0a12 200A0000 		.4byte	0xa20
 2894 0a16 18       		.uleb128 0x18
 2895 0a17 01       		.uleb128 0x1
 2896 0a18 50       		.byte	0x50
 2897 0a19 05       		.uleb128 0x5
 2898 0a1a 03       		.byte	0x3
 2899 0a1b 00000000 		.4byte	HomeIsrHandler
 2900 0a1f 00       		.byte	0
 2901 0a20 17       		.uleb128 0x17
 2902 0a21 2A000000 		.4byte	.LVL91
 2903 0a25 210F0000 		.4byte	0xf21
 2904 0a29 330A0000 		.4byte	0xa33
 2905 0a2d 18       		.uleb128 0x18
 2906 0a2e 01       		.uleb128 0x1
 2907 0a2f 50       		.byte	0x50
 2908 0a30 01       		.uleb128 0x1
 2909 0a31 33       		.byte	0x33
 2910 0a32 00       		.byte	0
 2911 0a33 17       		.uleb128 0x17
 2912 0a34 30000000 		.4byte	.LVL92
 2913 0a38 2C0F0000 		.4byte	0xf2c
 2914 0a3c 4A0A0000 		.4byte	0xa4a
 2915 0a40 18       		.uleb128 0x18
 2916 0a41 01       		.uleb128 0x1
 2917 0a42 50       		.byte	0x50
 2918 0a43 05       		.uleb128 0x5
 2919 0a44 03       		.byte	0x3
 2920 0a45 00000000 		.4byte	RSTIsrHandler
 2921 0a49 00       		.byte	0
 2922 0a4a 17       		.uleb128 0x17
 2923 0a4b 36000000 		.4byte	.LVL93
 2924 0a4f 370F0000 		.4byte	0xf37
 2925 0a53 5D0A0000 		.4byte	0xa5d
 2926 0a57 18       		.uleb128 0x18
 2927 0a58 01       		.uleb128 0x1
 2928 0a59 50       		.byte	0x50
 2929 0a5a 01       		.uleb128 0x1
 2930 0a5b 33       		.byte	0x33
 2931 0a5c 00       		.byte	0
 2932 0a5d 17       		.uleb128 0x17
 2933 0a5e 3C000000 		.4byte	.LVL94
 2934 0a62 420F0000 		.4byte	0xf42
 2935 0a66 740A0000 		.4byte	0xa74
 2936 0a6a 18       		.uleb128 0x18
 2937 0a6b 01       		.uleb128 0x1
 2938 0a6c 50       		.byte	0x50
 2939 0a6d 05       		.uleb128 0x5
 2940 0a6e 03       		.byte	0x3
 2941 0a6f 00000000 		.4byte	SPI_SS_IsrHandler
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 78


 2942 0a73 00       		.byte	0
 2943 0a74 17       		.uleb128 0x17
 2944 0a75 42000000 		.4byte	.LVL95
 2945 0a79 4D0F0000 		.4byte	0xf4d
 2946 0a7d 870A0000 		.4byte	0xa87
 2947 0a81 18       		.uleb128 0x18
 2948 0a82 01       		.uleb128 0x1
 2949 0a83 50       		.byte	0x50
 2950 0a84 01       		.uleb128 0x1
 2951 0a85 33       		.byte	0x33
 2952 0a86 00       		.byte	0
 2953 0a87 16       		.uleb128 0x16
 2954 0a88 48000000 		.4byte	.LVL96
 2955 0a8c 580F0000 		.4byte	0xf58
 2956 0a90 17       		.uleb128 0x17
 2957 0a91 4E000000 		.4byte	.LVL97
 2958 0a95 630F0000 		.4byte	0xf63
 2959 0a99 A40A0000 		.4byte	0xaa4
 2960 0a9d 18       		.uleb128 0x18
 2961 0a9e 01       		.uleb128 0x1
 2962 0a9f 50       		.byte	0x50
 2963 0aa0 02       		.uleb128 0x2
 2964 0aa1 08       		.byte	0x8
 2965 0aa2 64       		.byte	0x64
 2966 0aa3 00       		.byte	0
 2967 0aa4 16       		.uleb128 0x16
 2968 0aa5 52000000 		.4byte	.LVL98
 2969 0aa9 6E0F0000 		.4byte	0xf6e
 2970 0aad 16       		.uleb128 0x16
 2971 0aae 56000000 		.4byte	.LVL99
 2972 0ab2 790F0000 		.4byte	0xf79
 2973 0ab6 17       		.uleb128 0x17
 2974 0ab7 5E000000 		.4byte	.LVL100
 2975 0abb 850F0000 		.4byte	0xf85
 2976 0abf CB0A0000 		.4byte	0xacb
 2977 0ac3 18       		.uleb128 0x18
 2978 0ac4 01       		.uleb128 0x1
 2979 0ac5 50       		.byte	0x50
 2980 0ac6 03       		.uleb128 0x3
 2981 0ac7 0A       		.byte	0xa
 2982 0ac8 4006     		.2byte	0x640
 2983 0aca 00       		.byte	0
 2984 0acb 17       		.uleb128 0x17
 2985 0acc 64000000 		.4byte	.LVL101
 2986 0ad0 5C060000 		.4byte	0x65c
 2987 0ad4 DE0A0000 		.4byte	0xade
 2988 0ad8 18       		.uleb128 0x18
 2989 0ad9 01       		.uleb128 0x1
 2990 0ada 50       		.byte	0x50
 2991 0adb 01       		.uleb128 0x1
 2992 0adc 30       		.byte	0x30
 2993 0add 00       		.byte	0
 2994 0ade 16       		.uleb128 0x16
 2995 0adf 72000000 		.4byte	.LVL102
 2996 0ae3 910F0000 		.4byte	0xf91
 2997 0ae7 17       		.uleb128 0x17
 2998 0ae8 7A000000 		.4byte	.LVL103
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 79


 2999 0aec 1F0E0000 		.4byte	0xe1f
 3000 0af0 FB0A0000 		.4byte	0xafb
 3001 0af4 18       		.uleb128 0x18
 3002 0af5 01       		.uleb128 0x1
 3003 0af6 50       		.byte	0x50
 3004 0af7 02       		.uleb128 0x2
 3005 0af8 75       		.byte	0x75
 3006 0af9 00       		.sleb128 0
 3007 0afa 00       		.byte	0
 3008 0afb 16       		.uleb128 0x16
 3009 0afc 82000000 		.4byte	.LVL104
 3010 0b00 9C0F0000 		.4byte	0xf9c
 3011 0b04 17       		.uleb128 0x17
 3012 0b05 88000000 		.4byte	.LVL105
 3013 0b09 2A0E0000 		.4byte	0xe2a
 3014 0b0d 180B0000 		.4byte	0xb18
 3015 0b11 18       		.uleb128 0x18
 3016 0b12 01       		.uleb128 0x1
 3017 0b13 50       		.byte	0x50
 3018 0b14 02       		.uleb128 0x2
 3019 0b15 74       		.byte	0x74
 3020 0b16 00       		.sleb128 0
 3021 0b17 00       		.byte	0
 3022 0b18 16       		.uleb128 0x16
 3023 0b19 9A000000 		.4byte	.LVL106
 3024 0b1d BE070000 		.4byte	0x7be
 3025 0b21 17       		.uleb128 0x17
 3026 0b22 A0000000 		.4byte	.LVL107
 3027 0b26 DE070000 		.4byte	0x7de
 3028 0b2a 350B0000 		.4byte	0xb35
 3029 0b2e 18       		.uleb128 0x18
 3030 0b2f 01       		.uleb128 0x1
 3031 0b30 50       		.byte	0x50
 3032 0b31 02       		.uleb128 0x2
 3033 0b32 74       		.byte	0x74
 3034 0b33 00       		.sleb128 0
 3035 0b34 00       		.byte	0
 3036 0b35 17       		.uleb128 0x17
 3037 0b36 CA000000 		.4byte	.LVL108
 3038 0b3a 5C060000 		.4byte	0x65c
 3039 0b3e 490B0000 		.4byte	0xb49
 3040 0b42 18       		.uleb128 0x18
 3041 0b43 01       		.uleb128 0x1
 3042 0b44 50       		.byte	0x50
 3043 0b45 02       		.uleb128 0x2
 3044 0b46 74       		.byte	0x74
 3045 0b47 00       		.sleb128 0
 3046 0b48 00       		.byte	0
 3047 0b49 17       		.uleb128 0x17
 3048 0b4a DC000000 		.4byte	.LVL109
 3049 0b4e A70F0000 		.4byte	0xfa7
 3050 0b52 5C0B0000 		.4byte	0xb5c
 3051 0b56 18       		.uleb128 0x18
 3052 0b57 01       		.uleb128 0x1
 3053 0b58 50       		.byte	0x50
 3054 0b59 01       		.uleb128 0x1
 3055 0b5a 31       		.byte	0x31
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 80


 3056 0b5b 00       		.byte	0
 3057 0b5c 17       		.uleb128 0x17
 3058 0b5d E4000000 		.4byte	.LVL110
 3059 0b61 A70F0000 		.4byte	0xfa7
 3060 0b65 700B0000 		.4byte	0xb70
 3061 0b69 18       		.uleb128 0x18
 3062 0b6a 01       		.uleb128 0x1
 3063 0b6b 50       		.byte	0x50
 3064 0b6c 02       		.uleb128 0x2
 3065 0b6d 74       		.byte	0x74
 3066 0b6e 00       		.sleb128 0
 3067 0b6f 00       		.byte	0
 3068 0b70 19       		.uleb128 0x19
 3069 0b71 EA000000 		.4byte	.LVL111
 3070 0b75 630F0000 		.4byte	0xf63
 3071 0b79 18       		.uleb128 0x18
 3072 0b7a 01       		.uleb128 0x1
 3073 0b7b 50       		.byte	0x50
 3074 0b7c 01       		.uleb128 0x1
 3075 0b7d 3A       		.byte	0x3a
 3076 0b7e 00       		.byte	0
 3077 0b7f 00       		.byte	0
 3078 0b80 24       		.uleb128 0x24
 3079 0b81 AC090000 		.4byte	.LASF80
 3080 0b85 05       		.byte	0x5
 3081 0b86 0F       		.byte	0xf
 3082 0b87 E4000000 		.4byte	0xe4
 3083 0b8b 24       		.uleb128 0x24
 3084 0b8c 1A050000 		.4byte	.LASF111
 3085 0b90 05       		.byte	0x5
 3086 0b91 10       		.byte	0x10
 3087 0b92 E4000000 		.4byte	0xe4
 3088 0b96 25       		.uleb128 0x25
 3089 0b97 34030000 		.4byte	.LASF112
 3090 0b9b 01       		.byte	0x1
 3091 0b9c 5B       		.byte	0x5b
 3092 0b9d 1E080000 		.4byte	0x81e
 3093 0ba1 05       		.uleb128 0x5
 3094 0ba2 03       		.byte	0x3
 3095 0ba3 00000000 		.4byte	inAuto
 3096 0ba7 26       		.uleb128 0x26
 3097 0ba8 4A6F6700 		.ascii	"Jog\000"
 3098 0bac 01       		.byte	0x1
 3099 0bad 5D       		.byte	0x5d
 3100 0bae B80B0000 		.4byte	0xbb8
 3101 0bb2 05       		.uleb128 0x5
 3102 0bb3 03       		.byte	0x3
 3103 0bb4 00000000 		.4byte	Jog
 3104 0bb8 06       		.uleb128 0x6
 3105 0bb9 B8000000 		.4byte	0xb8
 3106 0bbd 25       		.uleb128 0x25
 3107 0bbe 14070000 		.4byte	.LASF113
 3108 0bc2 01       		.byte	0x1
 3109 0bc3 5E       		.byte	0x5e
 3110 0bc4 1E080000 		.4byte	0x81e
 3111 0bc8 05       		.uleb128 0x5
 3112 0bc9 03       		.byte	0x3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 81


 3113 0bca 00000000 		.4byte	PID_Enabled
 3114 0bce 25       		.uleb128 0x25
 3115 0bcf 04070000 		.4byte	.LASF114
 3116 0bd3 01       		.byte	0x1
 3117 0bd4 5E       		.byte	0x5e
 3118 0bd5 1E080000 		.4byte	0x81e
 3119 0bd9 05       		.uleb128 0x5
 3120 0bda 03       		.byte	0x3
 3121 0bdb 00000000 		.4byte	PID_Was_Enabled
 3122 0bdf 25       		.uleb128 0x25
 3123 0be0 18080000 		.4byte	.LASF115
 3124 0be4 01       		.byte	0x1
 3125 0be5 5F       		.byte	0x5f
 3126 0be6 E4000000 		.4byte	0xe4
 3127 0bea 05       		.uleb128 0x5
 3128 0beb 03       		.byte	0x3
 3129 0bec 00000000 		.4byte	PID_Setpoint
 3130 0bf0 25       		.uleb128 0x25
 3131 0bf1 5E0A0000 		.4byte	.LASF116
 3132 0bf5 01       		.byte	0x1
 3133 0bf6 5F       		.byte	0x5f
 3134 0bf7 E4000000 		.4byte	0xe4
 3135 0bfb 05       		.uleb128 0x5
 3136 0bfc 03       		.byte	0x3
 3137 0bfd 00000000 		.4byte	PID_EffectiveSetpoint
 3138 0c01 25       		.uleb128 0x25
 3139 0c02 F8010000 		.4byte	.LASF117
 3140 0c06 01       		.byte	0x1
 3141 0c07 60       		.byte	0x60
 3142 0c08 C3000000 		.4byte	0xc3
 3143 0c0c 05       		.uleb128 0x5
 3144 0c0d 03       		.byte	0x3
 3145 0c0e 00000000 		.4byte	PID_EffSetDelta
 3146 0c12 25       		.uleb128 0x25
 3147 0c13 08020000 		.4byte	.LASF118
 3148 0c17 01       		.byte	0x1
 3149 0c18 61       		.byte	0x61
 3150 0c19 EF000000 		.4byte	0xef
 3151 0c1d 05       		.uleb128 0x5
 3152 0c1e 03       		.byte	0x3
 3153 0c1f 00000000 		.4byte	lastTime
 3154 0c23 25       		.uleb128 0x25
 3155 0c24 CA030000 		.4byte	.LASF119
 3156 0c28 01       		.byte	0x1
 3157 0c29 63       		.byte	0x63
 3158 0c2a DF060000 		.4byte	0x6df
 3159 0c2e 05       		.uleb128 0x5
 3160 0c2f 03       		.byte	0x3
 3161 0c30 00000000 		.4byte	Position
 3162 0c34 25       		.uleb128 0x25
 3163 0c35 FD050000 		.4byte	.LASF120
 3164 0c39 01       		.byte	0x1
 3165 0c3a 63       		.byte	0x63
 3166 0c3b DF060000 		.4byte	0x6df
 3167 0c3f 05       		.uleb128 0x5
 3168 0c40 03       		.byte	0x3
 3169 0c41 00000000 		.4byte	LastPosition
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 82


 3170 0c45 25       		.uleb128 0x25
 3171 0c46 CB060000 		.4byte	.LASF121
 3172 0c4a 01       		.byte	0x1
 3173 0c4b 64       		.byte	0x64
 3174 0c4c DF060000 		.4byte	0x6df
 3175 0c50 05       		.uleb128 0x5
 3176 0c51 03       		.byte	0x3
 3177 0c52 00000000 		.4byte	Output
 3178 0c56 25       		.uleb128 0x25
 3179 0c57 4E020000 		.4byte	.LASF59
 3180 0c5b 01       		.byte	0x1
 3181 0c5c 65       		.byte	0x65
 3182 0c5d 670C0000 		.4byte	0xc67
 3183 0c61 05       		.uleb128 0x5
 3184 0c62 03       		.byte	0x3
 3185 0c63 00000000 		.4byte	limitOutput
 3186 0c67 06       		.uleb128 0x6
 3187 0c68 D9000000 		.4byte	0xd9
 3188 0c6c 25       		.uleb128 0x25
 3189 0c6d 3D040000 		.4byte	.LASF60
 3190 0c71 01       		.byte	0x1
 3191 0c72 66       		.byte	0x66
 3192 0c73 670C0000 		.4byte	0xc67
 3193 0c77 05       		.uleb128 0x5
 3194 0c78 03       		.byte	0x3
 3195 0c79 00000000 		.4byte	limitIterm
 3196 0c7d 25       		.uleb128 0x25
 3197 0c7e 0D090000 		.4byte	.LASF122
 3198 0c82 01       		.byte	0x1
 3199 0c83 68       		.byte	0x68
 3200 0c84 1E080000 		.4byte	0x81e
 3201 0c88 05       		.uleb128 0x5
 3202 0c89 03       		.byte	0x3
 3203 0c8a 00000000 		.4byte	homingDone
 3204 0c8e 25       		.uleb128 0x25
 3205 0c8f 54070000 		.4byte	.LASF123
 3206 0c93 01       		.byte	0x1
 3207 0c94 73       		.byte	0x73
 3208 0c95 EF000000 		.4byte	0xef
 3209 0c99 05       		.uleb128 0x5
 3210 0c9a 03       		.byte	0x3
 3211 0c9b 00000000 		.4byte	LastMoveStartTimeUsec
 3212 0c9f 25       		.uleb128 0x25
 3213 0ca0 18090000 		.4byte	.LASF124
 3214 0ca4 01       		.byte	0x1
 3215 0ca5 74       		.byte	0x74
 3216 0ca6 EF000000 		.4byte	0xef
 3217 0caa 05       		.uleb128 0x5
 3218 0cab 03       		.byte	0x3
 3219 0cac 00000000 		.4byte	LastMoveEndTimeUsec
 3220 0cb0 25       		.uleb128 0x25
 3221 0cb1 2F010000 		.4byte	.LASF125
 3222 0cb5 01       		.byte	0x1
 3223 0cb6 77       		.byte	0x77
 3224 0cb7 D9000000 		.4byte	0xd9
 3225 0cbb 05       		.uleb128 0x5
 3226 0cbc 03       		.byte	0x3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 83


 3227 0cbd 00000000 		.4byte	LastMoveStableCount
 3228 0cc1 25       		.uleb128 0x25
 3229 0cc2 CA040000 		.4byte	.LASF126
 3230 0cc6 01       		.byte	0x1
 3231 0cc7 7A       		.byte	0x7a
 3232 0cc8 EF000000 		.4byte	0xef
 3233 0ccc 05       		.uleb128 0x5
 3234 0ccd 03       		.byte	0x3
 3235 0cce 00000000 		.4byte	LastMoveTimeUsec
 3236 0cd2 25       		.uleb128 0x25
 3237 0cd3 2B060000 		.4byte	.LASF127
 3238 0cd7 01       		.byte	0x1
 3239 0cd8 7D       		.byte	0x7d
 3240 0cd9 1E080000 		.4byte	0x81e
 3241 0cdd 05       		.uleb128 0x5
 3242 0cde 03       		.byte	0x3
 3243 0cdf 00000000 		.4byte	NewCommandedMove
 3244 0ce3 25       		.uleb128 0x25
 3245 0ce4 70080000 		.4byte	.LASF128
 3246 0ce8 01       		.byte	0x1
 3247 0ce9 82       		.byte	0x82
 3248 0cea F40C0000 		.4byte	0xcf4
 3249 0cee 05       		.uleb128 0x5
 3250 0cef 03       		.byte	0x3
 3251 0cf0 00000000 		.4byte	UptimeMicroseconds
 3252 0cf4 06       		.uleb128 0x6
 3253 0cf5 FA000000 		.4byte	0xfa
 3254 0cf9 25       		.uleb128 0x25
 3255 0cfa CF090000 		.4byte	.LASF129
 3256 0cfe 01       		.byte	0x1
 3257 0cff 83       		.byte	0x83
 3258 0d00 F40C0000 		.4byte	0xcf4
 3259 0d04 05       		.uleb128 0x5
 3260 0d05 03       		.byte	0x3
 3261 0d06 00000000 		.4byte	UptimeMicrosecondsAccumulator
 3262 0d0a 25       		.uleb128 0x25
 3263 0d0b 72030000 		.4byte	.LASF130
 3264 0d0f 01       		.byte	0x1
 3265 0d10 84       		.byte	0x84
 3266 0d11 F40C0000 		.4byte	0xcf4
 3267 0d15 05       		.uleb128 0x5
 3268 0d16 03       		.byte	0x3
 3269 0d17 00000000 		.4byte	UptimeMilliseconds
 3270 0d1b 25       		.uleb128 0x25
 3271 0d1c 4E050000 		.4byte	.LASF131
 3272 0d20 01       		.byte	0x1
 3273 0d21 85       		.byte	0x85
 3274 0d22 F40C0000 		.4byte	0xcf4
 3275 0d26 05       		.uleb128 0x5
 3276 0d27 03       		.byte	0x3
 3277 0d28 00000000 		.4byte	UptimeMillisecondsAccumulator
 3278 0d2c 25       		.uleb128 0x25
 3279 0d2d EE070000 		.4byte	.LASF132
 3280 0d31 01       		.byte	0x1
 3281 0d32 86       		.byte	0x86
 3282 0d33 F40C0000 		.4byte	0xcf4
 3283 0d37 05       		.uleb128 0x5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 84


 3284 0d38 03       		.byte	0x3
 3285 0d39 00000000 		.4byte	UptimeSeconds
 3286 0d3d 25       		.uleb128 0x25
 3287 0d3e 42020000 		.4byte	.LASF133
 3288 0d42 01       		.byte	0x1
 3289 0d43 B2       		.byte	0xb2
 3290 0d44 4E0D0000 		.4byte	0xd4e
 3291 0d48 05       		.uleb128 0x5
 3292 0d49 03       		.byte	0x3
 3293 0d4a 00000000 		.4byte	ConfigState
 3294 0d4e 06       		.uleb128 0x6
 3295 0d4f 6F010000 		.4byte	0x16f
 3296 0d53 25       		.uleb128 0x25
 3297 0d54 E4080000 		.4byte	.LASF134
 3298 0d58 01       		.byte	0x1
 3299 0d59 B3       		.byte	0xb3
 3300 0d5a 640D0000 		.4byte	0xd64
 3301 0d5e 05       		.uleb128 0x5
 3302 0d5f 03       		.byte	0x3
 3303 0d60 00000000 		.4byte	FaultState
 3304 0d64 06       		.uleb128 0x6
 3305 0d65 C3000000 		.4byte	0xc3
 3306 0d69 25       		.uleb128 0x25
 3307 0d6a FE080000 		.4byte	.LASF135
 3308 0d6e 01       		.byte	0x1
 3309 0d6f B4       		.byte	0xb4
 3310 0d70 640D0000 		.4byte	0xd64
 3311 0d74 05       		.uleb128 0x5
 3312 0d75 03       		.byte	0x3
 3313 0d76 00000000 		.4byte	ConfigSequence
 3314 0d7a 25       		.uleb128 0x25
 3315 0d7b 3E080000 		.4byte	.LASF136
 3316 0d7f 01       		.byte	0x1
 3317 0d80 B5       		.byte	0xb5
 3318 0d81 670C0000 		.4byte	0xc67
 3319 0d85 05       		.uleb128 0x5
 3320 0d86 03       		.byte	0x3
 3321 0d87 00000000 		.4byte	ChecksumErrors
 3322 0d8b 25       		.uleb128 0x25
 3323 0d8c 11020000 		.4byte	.LASF137
 3324 0d90 01       		.byte	0x1
 3325 0d91 B6       		.byte	0xb6
 3326 0d92 9C0D0000 		.4byte	0xd9c
 3327 0d96 05       		.uleb128 0x5
 3328 0d97 03       		.byte	0x3
 3329 0d98 00000000 		.4byte	MotorCurrent
 3330 0d9c 06       		.uleb128 0x6
 3331 0d9d CE000000 		.4byte	0xce
 3332 0da1 0F       		.uleb128 0xf
 3333 0da2 C3000000 		.4byte	0xc3
 3334 0da6 B10D0000 		.4byte	0xdb1
 3335 0daa 10       		.uleb128 0x10
 3336 0dab 3E010000 		.4byte	0x13e
 3337 0daf 13       		.byte	0x13
 3338 0db0 00       		.byte	0
 3339 0db1 25       		.uleb128 0x25
 3340 0db2 D5050000 		.4byte	.LASF138
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 85


 3341 0db6 01       		.byte	0x1
 3342 0db7 B7       		.byte	0xb7
 3343 0db8 A10D0000 		.4byte	0xda1
 3344 0dbc 05       		.uleb128 0x5
 3345 0dbd 03       		.byte	0x3
 3346 0dbe 00000000 		.4byte	CurrentI2Cinbuf
 3347 0dc2 25       		.uleb128 0x25
 3348 0dc3 95070000 		.4byte	.LASF139
 3349 0dc7 01       		.byte	0x1
 3350 0dc8 C9       		.byte	0xc9
 3351 0dc9 EF000000 		.4byte	0xef
 3352 0dcd 05       		.uleb128 0x5
 3353 0dce 03       		.byte	0x3
 3354 0dcf 00000000 		.4byte	LastMessageTimeSeconds
 3355 0dd3 27       		.uleb128 0x27
 3356 0dd4 08000000 		.4byte	.LASF140
 3357 0dd8 01       		.byte	0x1
 3358 0dd9 0801     		.2byte	0x108
 3359 0ddb 6E030000 		.4byte	0x36e
 3360 0ddf 05       		.uleb128 0x5
 3361 0de0 03       		.byte	0x3
 3362 0de1 00000000 		.4byte	rxMessage
 3363 0de5 27       		.uleb128 0x27
 3364 0de6 0A060000 		.4byte	.LASF141
 3365 0dea 01       		.byte	0x1
 3366 0deb 2101     		.2byte	0x121
 3367 0ded 9D040000 		.4byte	0x49d
 3368 0df1 05       		.uleb128 0x5
 3369 0df2 03       		.byte	0x3
 3370 0df3 00000000 		.4byte	txMessage
 3371 0df7 27       		.uleb128 0x27
 3372 0df8 4F0A0000 		.4byte	.LASF142
 3373 0dfc 01       		.byte	0x1
 3374 0dfd 2901     		.2byte	0x129
 3375 0dff D9040000 		.4byte	0x4d9
 3376 0e03 05       		.uleb128 0x5
 3377 0e04 03       		.byte	0x3
 3378 0e05 00000000 		.4byte	txMessageState
 3379 0e09 28       		.uleb128 0x28
 3380 0e0a 96040000 		.4byte	.LASF143
 3381 0e0e 96040000 		.4byte	.LASF143
 3382 0e12 06       		.byte	0x6
 3383 0e13 28       		.byte	0x28
 3384 0e14 28       		.uleb128 0x28
 3385 0e15 2C090000 		.4byte	.LASF144
 3386 0e19 2C090000 		.4byte	.LASF144
 3387 0e1d 07       		.byte	0x7
 3388 0e1e 39       		.byte	0x39
 3389 0e1f 28       		.uleb128 0x28
 3390 0e20 14060000 		.4byte	.LASF145
 3391 0e24 14060000 		.4byte	.LASF145
 3392 0e28 08       		.byte	0x8
 3393 0e29 5A       		.byte	0x5a
 3394 0e2a 28       		.uleb128 0x28
 3395 0e2b 5F040000 		.4byte	.LASF146
 3396 0e2f 5F040000 		.4byte	.LASF146
 3397 0e33 09       		.byte	0x9
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 86


 3398 0e34 5A       		.byte	0x5a
 3399 0e35 28       		.uleb128 0x28
 3400 0e36 0E0A0000 		.4byte	.LASF147
 3401 0e3a 0E0A0000 		.4byte	.LASF147
 3402 0e3e 0A       		.byte	0xa
 3403 0e3f 28       		.byte	0x28
 3404 0e40 28       		.uleb128 0x28
 3405 0e41 D8000000 		.4byte	.LASF148
 3406 0e45 D8000000 		.4byte	.LASF148
 3407 0e49 0B       		.byte	0xb
 3408 0e4a 39       		.byte	0x39
 3409 0e4b 28       		.uleb128 0x28
 3410 0e4c 5C030000 		.4byte	.LASF149
 3411 0e50 5C030000 		.4byte	.LASF149
 3412 0e54 0C       		.byte	0xc
 3413 0e55 39       		.byte	0x39
 3414 0e56 28       		.uleb128 0x28
 3415 0e57 0E050000 		.4byte	.LASF150
 3416 0e5b 0E050000 		.4byte	.LASF150
 3417 0e5f 0C       		.byte	0xc
 3418 0e60 32       		.byte	0x32
 3419 0e61 29       		.uleb128 0x29
 3420 0e62 47050000 		.4byte	.LASF185
 3421 0e66 47050000 		.4byte	.LASF185
 3422 0e6a 2A       		.uleb128 0x2a
 3423 0e6b E5050000 		.4byte	.LASF151
 3424 0e6f E5050000 		.4byte	.LASF151
 3425 0e73 0D       		.byte	0xd
 3426 0e74 3D03     		.2byte	0x33d
 3427 0e76 2A       		.uleb128 0x2a
 3428 0e77 1B040000 		.4byte	.LASF152
 3429 0e7b 1B040000 		.4byte	.LASF152
 3430 0e7f 0D       		.byte	0xd
 3431 0e80 3F03     		.2byte	0x33f
 3432 0e82 2A       		.uleb128 0x2a
 3433 0e83 4B010000 		.4byte	.LASF153
 3434 0e87 4B010000 		.4byte	.LASF153
 3435 0e8b 0D       		.byte	0xd
 3436 0e8c 4703     		.2byte	0x347
 3437 0e8e 28       		.uleb128 0x28
 3438 0e8f 99060000 		.4byte	.LASF154
 3439 0e93 99060000 		.4byte	.LASF154
 3440 0e97 0E       		.byte	0xe
 3441 0e98 70       		.byte	0x70
 3442 0e99 2A       		.uleb128 0x2a
 3443 0e9a 7C040000 		.4byte	.LASF155
 3444 0e9e 7C040000 		.4byte	.LASF155
 3445 0ea2 0F       		.byte	0xf
 3446 0ea3 5501     		.2byte	0x155
 3447 0ea5 28       		.uleb128 0x28
 3448 0ea6 85030000 		.4byte	.LASF156
 3449 0eaa 85030000 		.4byte	.LASF156
 3450 0eae 08       		.byte	0x8
 3451 0eaf 5D       		.byte	0x5d
 3452 0eb0 2A       		.uleb128 0x2a
 3453 0eb1 46030000 		.4byte	.LASF157
 3454 0eb5 46030000 		.4byte	.LASF157
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 87


 3455 0eb9 0D       		.byte	0xd
 3456 0eba 4503     		.2byte	0x345
 3457 0ebc 28       		.uleb128 0x28
 3458 0ebd 73070000 		.4byte	.LASF158
 3459 0ec1 73070000 		.4byte	.LASF158
 3460 0ec5 10       		.byte	0x10
 3461 0ec6 36       		.byte	0x36
 3462 0ec7 28       		.uleb128 0x28
 3463 0ec8 30050000 		.4byte	.LASF159
 3464 0ecc 30050000 		.4byte	.LASF159
 3465 0ed0 11       		.byte	0x11
 3466 0ed1 36       		.byte	0x36
 3467 0ed2 28       		.uleb128 0x28
 3468 0ed3 E7030000 		.4byte	.LASF160
 3469 0ed7 E7030000 		.4byte	.LASF160
 3470 0edb 05       		.byte	0x5
 3471 0edc 11       		.byte	0x11
 3472 0edd 2A       		.uleb128 0x2a
 3473 0ede E9040000 		.4byte	.LASF161
 3474 0ee2 E9040000 		.4byte	.LASF161
 3475 0ee6 12       		.byte	0x12
 3476 0ee7 4701     		.2byte	0x147
 3477 0ee9 28       		.uleb128 0x28
 3478 0eea 5C090000 		.4byte	.LASF162
 3479 0eee 5C090000 		.4byte	.LASF162
 3480 0ef2 13       		.byte	0x13
 3481 0ef3 33       		.byte	0x33
 3482 0ef4 2A       		.uleb128 0x2a
 3483 0ef5 0E030000 		.4byte	.LASF163
 3484 0ef9 0E030000 		.4byte	.LASF163
 3485 0efd 12       		.byte	0x12
 3486 0efe 3201     		.2byte	0x132
 3487 0f00 28       		.uleb128 0x28
 3488 0f01 FD020000 		.4byte	.LASF164
 3489 0f05 FD020000 		.4byte	.LASF164
 3490 0f09 14       		.byte	0x14
 3491 0f0a 18       		.byte	0x18
 3492 0f0b 28       		.uleb128 0x28
 3493 0f0c 78060000 		.4byte	.LASF165
 3494 0f10 78060000 		.4byte	.LASF165
 3495 0f14 14       		.byte	0x14
 3496 0f15 20       		.byte	0x20
 3497 0f16 28       		.uleb128 0x28
 3498 0f17 68090000 		.4byte	.LASF166
 3499 0f1b 68090000 		.4byte	.LASF166
 3500 0f1f 0A       		.byte	0xa
 3501 0f20 18       		.byte	0x18
 3502 0f21 28       		.uleb128 0x28
 3503 0f22 E8020000 		.4byte	.LASF167
 3504 0f26 E8020000 		.4byte	.LASF167
 3505 0f2a 0A       		.byte	0xa
 3506 0f2b 20       		.byte	0x20
 3507 0f2c 28       		.uleb128 0x28
 3508 0f2d F6090000 		.4byte	.LASF168
 3509 0f31 F6090000 		.4byte	.LASF168
 3510 0f35 06       		.byte	0x6
 3511 0f36 18       		.byte	0x18
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 88


 3512 0f37 28       		.uleb128 0x28
 3513 0f38 FC070000 		.4byte	.LASF169
 3514 0f3c FC070000 		.4byte	.LASF169
 3515 0f40 06       		.byte	0x6
 3516 0f41 20       		.byte	0x20
 3517 0f42 28       		.uleb128 0x28
 3518 0f43 AF010000 		.4byte	.LASF170
 3519 0f47 AF010000 		.4byte	.LASF170
 3520 0f4b 15       		.byte	0x15
 3521 0f4c 18       		.byte	0x18
 3522 0f4d 28       		.uleb128 0x28
 3523 0f4e B3040000 		.4byte	.LASF171
 3524 0f52 B3040000 		.4byte	.LASF171
 3525 0f56 15       		.byte	0x15
 3526 0f57 20       		.byte	0x20
 3527 0f58 28       		.uleb128 0x28
 3528 0f59 25010000 		.4byte	.LASF172
 3529 0f5d 25010000 		.4byte	.LASF172
 3530 0f61 16       		.byte	0x16
 3531 0f62 72       		.byte	0x72
 3532 0f63 28       		.uleb128 0x28
 3533 0f64 00000000 		.4byte	.LASF173
 3534 0f68 00000000 		.4byte	.LASF173
 3535 0f6c 17       		.byte	0x17
 3536 0f6d EC       		.byte	0xec
 3537 0f6e 28       		.uleb128 0x28
 3538 0f6f AA080000 		.4byte	.LASF174
 3539 0f73 AA080000 		.4byte	.LASF174
 3540 0f77 18       		.byte	0x18
 3541 0f78 72       		.byte	0x72
 3542 0f79 2A       		.uleb128 0x2a
 3543 0f7a 48070000 		.4byte	.LASF175
 3544 0f7e 48070000 		.4byte	.LASF175
 3545 0f82 0F       		.byte	0xf
 3546 0f83 3201     		.2byte	0x132
 3547 0f85 2A       		.uleb128 0x2a
 3548 0f86 30020000 		.4byte	.LASF176
 3549 0f8a 30020000 		.4byte	.LASF176
 3550 0f8e 0F       		.byte	0xf
 3551 0f8f 5001     		.2byte	0x150
 3552 0f91 28       		.uleb128 0x28
 3553 0f92 A0000000 		.4byte	.LASF177
 3554 0f96 A0000000 		.4byte	.LASF177
 3555 0f9a 08       		.byte	0x8
 3556 0f9b 4F       		.byte	0x4f
 3557 0f9c 28       		.uleb128 0x28
 3558 0f9d B9090000 		.4byte	.LASF178
 3559 0fa1 B9090000 		.4byte	.LASF178
 3560 0fa5 09       		.byte	0x9
 3561 0fa6 4F       		.byte	0x4f
 3562 0fa7 28       		.uleb128 0x28
 3563 0fa8 EF000000 		.4byte	.LASF179
 3564 0fac EF000000 		.4byte	.LASF179
 3565 0fb0 19       		.byte	0x19
 3566 0fb1 33       		.byte	0x33
 3567 0fb2 00       		.byte	0
 3568              		.section	.debug_abbrev,"",%progbits
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 89


 3569              	.Ldebug_abbrev0:
 3570 0000 01       		.uleb128 0x1
 3571 0001 11       		.uleb128 0x11
 3572 0002 01       		.byte	0x1
 3573 0003 25       		.uleb128 0x25
 3574 0004 0E       		.uleb128 0xe
 3575 0005 13       		.uleb128 0x13
 3576 0006 0B       		.uleb128 0xb
 3577 0007 03       		.uleb128 0x3
 3578 0008 0E       		.uleb128 0xe
 3579 0009 1B       		.uleb128 0x1b
 3580 000a 0E       		.uleb128 0xe
 3581 000b 55       		.uleb128 0x55
 3582 000c 17       		.uleb128 0x17
 3583 000d 11       		.uleb128 0x11
 3584 000e 01       		.uleb128 0x1
 3585 000f 10       		.uleb128 0x10
 3586 0010 17       		.uleb128 0x17
 3587 0011 00       		.byte	0
 3588 0012 00       		.byte	0
 3589 0013 02       		.uleb128 0x2
 3590 0014 16       		.uleb128 0x16
 3591 0015 00       		.byte	0
 3592 0016 03       		.uleb128 0x3
 3593 0017 0E       		.uleb128 0xe
 3594 0018 3A       		.uleb128 0x3a
 3595 0019 0B       		.uleb128 0xb
 3596 001a 3B       		.uleb128 0x3b
 3597 001b 0B       		.uleb128 0xb
 3598 001c 49       		.uleb128 0x49
 3599 001d 13       		.uleb128 0x13
 3600 001e 00       		.byte	0
 3601 001f 00       		.byte	0
 3602 0020 03       		.uleb128 0x3
 3603 0021 24       		.uleb128 0x24
 3604 0022 00       		.byte	0
 3605 0023 0B       		.uleb128 0xb
 3606 0024 0B       		.uleb128 0xb
 3607 0025 3E       		.uleb128 0x3e
 3608 0026 0B       		.uleb128 0xb
 3609 0027 03       		.uleb128 0x3
 3610 0028 0E       		.uleb128 0xe
 3611 0029 00       		.byte	0
 3612 002a 00       		.byte	0
 3613 002b 04       		.uleb128 0x4
 3614 002c 24       		.uleb128 0x24
 3615 002d 00       		.byte	0
 3616 002e 0B       		.uleb128 0xb
 3617 002f 0B       		.uleb128 0xb
 3618 0030 3E       		.uleb128 0x3e
 3619 0031 0B       		.uleb128 0xb
 3620 0032 03       		.uleb128 0x3
 3621 0033 08       		.uleb128 0x8
 3622 0034 00       		.byte	0
 3623 0035 00       		.byte	0
 3624 0036 05       		.uleb128 0x5
 3625 0037 16       		.uleb128 0x16
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 90


 3626 0038 00       		.byte	0
 3627 0039 03       		.uleb128 0x3
 3628 003a 0E       		.uleb128 0xe
 3629 003b 3A       		.uleb128 0x3a
 3630 003c 0B       		.uleb128 0xb
 3631 003d 3B       		.uleb128 0x3b
 3632 003e 05       		.uleb128 0x5
 3633 003f 49       		.uleb128 0x49
 3634 0040 13       		.uleb128 0x13
 3635 0041 00       		.byte	0
 3636 0042 00       		.byte	0
 3637 0043 06       		.uleb128 0x6
 3638 0044 35       		.uleb128 0x35
 3639 0045 00       		.byte	0
 3640 0046 49       		.uleb128 0x49
 3641 0047 13       		.uleb128 0x13
 3642 0048 00       		.byte	0
 3643 0049 00       		.byte	0
 3644 004a 07       		.uleb128 0x7
 3645 004b 04       		.uleb128 0x4
 3646 004c 01       		.byte	0x1
 3647 004d 0B       		.uleb128 0xb
 3648 004e 0B       		.uleb128 0xb
 3649 004f 49       		.uleb128 0x49
 3650 0050 13       		.uleb128 0x13
 3651 0051 3A       		.uleb128 0x3a
 3652 0052 0B       		.uleb128 0xb
 3653 0053 3B       		.uleb128 0x3b
 3654 0054 0B       		.uleb128 0xb
 3655 0055 01       		.uleb128 0x1
 3656 0056 13       		.uleb128 0x13
 3657 0057 00       		.byte	0
 3658 0058 00       		.byte	0
 3659 0059 08       		.uleb128 0x8
 3660 005a 28       		.uleb128 0x28
 3661 005b 00       		.byte	0
 3662 005c 03       		.uleb128 0x3
 3663 005d 0E       		.uleb128 0xe
 3664 005e 1C       		.uleb128 0x1c
 3665 005f 0B       		.uleb128 0xb
 3666 0060 00       		.byte	0
 3667 0061 00       		.byte	0
 3668 0062 09       		.uleb128 0x9
 3669 0063 13       		.uleb128 0x13
 3670 0064 01       		.byte	0x1
 3671 0065 0B       		.uleb128 0xb
 3672 0066 0B       		.uleb128 0xb
 3673 0067 3A       		.uleb128 0x3a
 3674 0068 0B       		.uleb128 0xb
 3675 0069 3B       		.uleb128 0x3b
 3676 006a 0B       		.uleb128 0xb
 3677 006b 01       		.uleb128 0x1
 3678 006c 13       		.uleb128 0x13
 3679 006d 00       		.byte	0
 3680 006e 00       		.byte	0
 3681 006f 0A       		.uleb128 0xa
 3682 0070 0D       		.uleb128 0xd
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 91


 3683 0071 00       		.byte	0
 3684 0072 03       		.uleb128 0x3
 3685 0073 0E       		.uleb128 0xe
 3686 0074 3A       		.uleb128 0x3a
 3687 0075 0B       		.uleb128 0xb
 3688 0076 3B       		.uleb128 0x3b
 3689 0077 0B       		.uleb128 0xb
 3690 0078 49       		.uleb128 0x49
 3691 0079 13       		.uleb128 0x13
 3692 007a 38       		.uleb128 0x38
 3693 007b 0B       		.uleb128 0xb
 3694 007c 00       		.byte	0
 3695 007d 00       		.byte	0
 3696 007e 0B       		.uleb128 0xb
 3697 007f 0D       		.uleb128 0xd
 3698 0080 00       		.byte	0
 3699 0081 03       		.uleb128 0x3
 3700 0082 08       		.uleb128 0x8
 3701 0083 3A       		.uleb128 0x3a
 3702 0084 0B       		.uleb128 0xb
 3703 0085 3B       		.uleb128 0x3b
 3704 0086 0B       		.uleb128 0xb
 3705 0087 49       		.uleb128 0x49
 3706 0088 13       		.uleb128 0x13
 3707 0089 38       		.uleb128 0x38
 3708 008a 0B       		.uleb128 0xb
 3709 008b 00       		.byte	0
 3710 008c 00       		.byte	0
 3711 008d 0C       		.uleb128 0xc
 3712 008e 17       		.uleb128 0x17
 3713 008f 01       		.byte	0x1
 3714 0090 0B       		.uleb128 0xb
 3715 0091 0B       		.uleb128 0xb
 3716 0092 3A       		.uleb128 0x3a
 3717 0093 0B       		.uleb128 0xb
 3718 0094 3B       		.uleb128 0x3b
 3719 0095 05       		.uleb128 0x5
 3720 0096 01       		.uleb128 0x1
 3721 0097 13       		.uleb128 0x13
 3722 0098 00       		.byte	0
 3723 0099 00       		.byte	0
 3724 009a 0D       		.uleb128 0xd
 3725 009b 0D       		.uleb128 0xd
 3726 009c 00       		.byte	0
 3727 009d 03       		.uleb128 0x3
 3728 009e 08       		.uleb128 0x8
 3729 009f 3A       		.uleb128 0x3a
 3730 00a0 0B       		.uleb128 0xb
 3731 00a1 3B       		.uleb128 0x3b
 3732 00a2 05       		.uleb128 0x5
 3733 00a3 49       		.uleb128 0x49
 3734 00a4 13       		.uleb128 0x13
 3735 00a5 00       		.byte	0
 3736 00a6 00       		.byte	0
 3737 00a7 0E       		.uleb128 0xe
 3738 00a8 0D       		.uleb128 0xd
 3739 00a9 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 92


 3740 00aa 03       		.uleb128 0x3
 3741 00ab 0E       		.uleb128 0xe
 3742 00ac 3A       		.uleb128 0x3a
 3743 00ad 0B       		.uleb128 0xb
 3744 00ae 3B       		.uleb128 0x3b
 3745 00af 05       		.uleb128 0x5
 3746 00b0 49       		.uleb128 0x49
 3747 00b1 13       		.uleb128 0x13
 3748 00b2 00       		.byte	0
 3749 00b3 00       		.byte	0
 3750 00b4 0F       		.uleb128 0xf
 3751 00b5 01       		.uleb128 0x1
 3752 00b6 01       		.byte	0x1
 3753 00b7 49       		.uleb128 0x49
 3754 00b8 13       		.uleb128 0x13
 3755 00b9 01       		.uleb128 0x1
 3756 00ba 13       		.uleb128 0x13
 3757 00bb 00       		.byte	0
 3758 00bc 00       		.byte	0
 3759 00bd 10       		.uleb128 0x10
 3760 00be 21       		.uleb128 0x21
 3761 00bf 00       		.byte	0
 3762 00c0 49       		.uleb128 0x49
 3763 00c1 13       		.uleb128 0x13
 3764 00c2 2F       		.uleb128 0x2f
 3765 00c3 0B       		.uleb128 0xb
 3766 00c4 00       		.byte	0
 3767 00c5 00       		.byte	0
 3768 00c6 11       		.uleb128 0x11
 3769 00c7 13       		.uleb128 0x13
 3770 00c8 01       		.byte	0x1
 3771 00c9 0B       		.uleb128 0xb
 3772 00ca 0B       		.uleb128 0xb
 3773 00cb 3A       		.uleb128 0x3a
 3774 00cc 0B       		.uleb128 0xb
 3775 00cd 3B       		.uleb128 0x3b
 3776 00ce 05       		.uleb128 0x5
 3777 00cf 01       		.uleb128 0x1
 3778 00d0 13       		.uleb128 0x13
 3779 00d1 00       		.byte	0
 3780 00d2 00       		.byte	0
 3781 00d3 12       		.uleb128 0x12
 3782 00d4 0D       		.uleb128 0xd
 3783 00d5 00       		.byte	0
 3784 00d6 03       		.uleb128 0x3
 3785 00d7 0E       		.uleb128 0xe
 3786 00d8 3A       		.uleb128 0x3a
 3787 00d9 0B       		.uleb128 0xb
 3788 00da 3B       		.uleb128 0x3b
 3789 00db 05       		.uleb128 0x5
 3790 00dc 49       		.uleb128 0x49
 3791 00dd 13       		.uleb128 0x13
 3792 00de 38       		.uleb128 0x38
 3793 00df 0B       		.uleb128 0xb
 3794 00e0 00       		.byte	0
 3795 00e1 00       		.byte	0
 3796 00e2 13       		.uleb128 0x13
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 93


 3797 00e3 0D       		.uleb128 0xd
 3798 00e4 00       		.byte	0
 3799 00e5 03       		.uleb128 0x3
 3800 00e6 08       		.uleb128 0x8
 3801 00e7 3A       		.uleb128 0x3a
 3802 00e8 0B       		.uleb128 0xb
 3803 00e9 3B       		.uleb128 0x3b
 3804 00ea 05       		.uleb128 0x5
 3805 00eb 49       		.uleb128 0x49
 3806 00ec 13       		.uleb128 0x13
 3807 00ed 38       		.uleb128 0x38
 3808 00ee 0B       		.uleb128 0xb
 3809 00ef 00       		.byte	0
 3810 00f0 00       		.byte	0
 3811 00f1 14       		.uleb128 0x14
 3812 00f2 04       		.uleb128 0x4
 3813 00f3 01       		.byte	0x1
 3814 00f4 0B       		.uleb128 0xb
 3815 00f5 0B       		.uleb128 0xb
 3816 00f6 49       		.uleb128 0x49
 3817 00f7 13       		.uleb128 0x13
 3818 00f8 3A       		.uleb128 0x3a
 3819 00f9 0B       		.uleb128 0xb
 3820 00fa 3B       		.uleb128 0x3b
 3821 00fb 05       		.uleb128 0x5
 3822 00fc 01       		.uleb128 0x1
 3823 00fd 13       		.uleb128 0x13
 3824 00fe 00       		.byte	0
 3825 00ff 00       		.byte	0
 3826 0100 15       		.uleb128 0x15
 3827 0101 2E       		.uleb128 0x2e
 3828 0102 01       		.byte	0x1
 3829 0103 3F       		.uleb128 0x3f
 3830 0104 19       		.uleb128 0x19
 3831 0105 03       		.uleb128 0x3
 3832 0106 0E       		.uleb128 0xe
 3833 0107 3A       		.uleb128 0x3a
 3834 0108 0B       		.uleb128 0xb
 3835 0109 3B       		.uleb128 0x3b
 3836 010a 05       		.uleb128 0x5
 3837 010b 27       		.uleb128 0x27
 3838 010c 19       		.uleb128 0x19
 3839 010d 11       		.uleb128 0x11
 3840 010e 01       		.uleb128 0x1
 3841 010f 12       		.uleb128 0x12
 3842 0110 06       		.uleb128 0x6
 3843 0111 40       		.uleb128 0x40
 3844 0112 18       		.uleb128 0x18
 3845 0113 9742     		.uleb128 0x2117
 3846 0115 19       		.uleb128 0x19
 3847 0116 01       		.uleb128 0x1
 3848 0117 13       		.uleb128 0x13
 3849 0118 00       		.byte	0
 3850 0119 00       		.byte	0
 3851 011a 16       		.uleb128 0x16
 3852 011b 898201   		.uleb128 0x4109
 3853 011e 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 94


 3854 011f 11       		.uleb128 0x11
 3855 0120 01       		.uleb128 0x1
 3856 0121 31       		.uleb128 0x31
 3857 0122 13       		.uleb128 0x13
 3858 0123 00       		.byte	0
 3859 0124 00       		.byte	0
 3860 0125 17       		.uleb128 0x17
 3861 0126 898201   		.uleb128 0x4109
 3862 0129 01       		.byte	0x1
 3863 012a 11       		.uleb128 0x11
 3864 012b 01       		.uleb128 0x1
 3865 012c 31       		.uleb128 0x31
 3866 012d 13       		.uleb128 0x13
 3867 012e 01       		.uleb128 0x1
 3868 012f 13       		.uleb128 0x13
 3869 0130 00       		.byte	0
 3870 0131 00       		.byte	0
 3871 0132 18       		.uleb128 0x18
 3872 0133 8A8201   		.uleb128 0x410a
 3873 0136 00       		.byte	0
 3874 0137 02       		.uleb128 0x2
 3875 0138 18       		.uleb128 0x18
 3876 0139 9142     		.uleb128 0x2111
 3877 013b 18       		.uleb128 0x18
 3878 013c 00       		.byte	0
 3879 013d 00       		.byte	0
 3880 013e 19       		.uleb128 0x19
 3881 013f 898201   		.uleb128 0x4109
 3882 0142 01       		.byte	0x1
 3883 0143 11       		.uleb128 0x11
 3884 0144 01       		.uleb128 0x1
 3885 0145 31       		.uleb128 0x31
 3886 0146 13       		.uleb128 0x13
 3887 0147 00       		.byte	0
 3888 0148 00       		.byte	0
 3889 0149 1A       		.uleb128 0x1a
 3890 014a 34       		.uleb128 0x34
 3891 014b 00       		.byte	0
 3892 014c 03       		.uleb128 0x3
 3893 014d 08       		.uleb128 0x8
 3894 014e 3A       		.uleb128 0x3a
 3895 014f 0B       		.uleb128 0xb
 3896 0150 3B       		.uleb128 0x3b
 3897 0151 05       		.uleb128 0x5
 3898 0152 49       		.uleb128 0x49
 3899 0153 13       		.uleb128 0x13
 3900 0154 02       		.uleb128 0x2
 3901 0155 17       		.uleb128 0x17
 3902 0156 00       		.byte	0
 3903 0157 00       		.byte	0
 3904 0158 1B       		.uleb128 0x1b
 3905 0159 05       		.uleb128 0x5
 3906 015a 00       		.byte	0
 3907 015b 03       		.uleb128 0x3
 3908 015c 0E       		.uleb128 0xe
 3909 015d 3A       		.uleb128 0x3a
 3910 015e 0B       		.uleb128 0xb
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 95


 3911 015f 3B       		.uleb128 0x3b
 3912 0160 05       		.uleb128 0x5
 3913 0161 49       		.uleb128 0x49
 3914 0162 13       		.uleb128 0x13
 3915 0163 02       		.uleb128 0x2
 3916 0164 17       		.uleb128 0x17
 3917 0165 00       		.byte	0
 3918 0166 00       		.byte	0
 3919 0167 1C       		.uleb128 0x1c
 3920 0168 05       		.uleb128 0x5
 3921 0169 00       		.byte	0
 3922 016a 03       		.uleb128 0x3
 3923 016b 0E       		.uleb128 0xe
 3924 016c 3A       		.uleb128 0x3a
 3925 016d 0B       		.uleb128 0xb
 3926 016e 3B       		.uleb128 0x3b
 3927 016f 05       		.uleb128 0x5
 3928 0170 49       		.uleb128 0x49
 3929 0171 13       		.uleb128 0x13
 3930 0172 02       		.uleb128 0x2
 3931 0173 18       		.uleb128 0x18
 3932 0174 00       		.byte	0
 3933 0175 00       		.byte	0
 3934 0176 1D       		.uleb128 0x1d
 3935 0177 2E       		.uleb128 0x2e
 3936 0178 01       		.byte	0x1
 3937 0179 3F       		.uleb128 0x3f
 3938 017a 19       		.uleb128 0x19
 3939 017b 03       		.uleb128 0x3
 3940 017c 0E       		.uleb128 0xe
 3941 017d 3A       		.uleb128 0x3a
 3942 017e 0B       		.uleb128 0xb
 3943 017f 3B       		.uleb128 0x3b
 3944 0180 05       		.uleb128 0x5
 3945 0181 27       		.uleb128 0x27
 3946 0182 19       		.uleb128 0x19
 3947 0183 11       		.uleb128 0x11
 3948 0184 01       		.uleb128 0x1
 3949 0185 12       		.uleb128 0x12
 3950 0186 06       		.uleb128 0x6
 3951 0187 40       		.uleb128 0x40
 3952 0188 18       		.uleb128 0x18
 3953 0189 9642     		.uleb128 0x2116
 3954 018b 19       		.uleb128 0x19
 3955 018c 01       		.uleb128 0x1
 3956 018d 13       		.uleb128 0x13
 3957 018e 00       		.byte	0
 3958 018f 00       		.byte	0
 3959 0190 1E       		.uleb128 0x1e
 3960 0191 2E       		.uleb128 0x2e
 3961 0192 01       		.byte	0x1
 3962 0193 3F       		.uleb128 0x3f
 3963 0194 19       		.uleb128 0x19
 3964 0195 03       		.uleb128 0x3
 3965 0196 0E       		.uleb128 0xe
 3966 0197 3A       		.uleb128 0x3a
 3967 0198 0B       		.uleb128 0xb
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 96


 3968 0199 3B       		.uleb128 0x3b
 3969 019a 05       		.uleb128 0x5
 3970 019b 27       		.uleb128 0x27
 3971 019c 19       		.uleb128 0x19
 3972 019d 49       		.uleb128 0x49
 3973 019e 13       		.uleb128 0x13
 3974 019f 11       		.uleb128 0x11
 3975 01a0 01       		.uleb128 0x1
 3976 01a1 12       		.uleb128 0x12
 3977 01a2 06       		.uleb128 0x6
 3978 01a3 40       		.uleb128 0x40
 3979 01a4 18       		.uleb128 0x18
 3980 01a5 9742     		.uleb128 0x2117
 3981 01a7 19       		.uleb128 0x19
 3982 01a8 01       		.uleb128 0x1
 3983 01a9 13       		.uleb128 0x13
 3984 01aa 00       		.byte	0
 3985 01ab 00       		.byte	0
 3986 01ac 1F       		.uleb128 0x1f
 3987 01ad 34       		.uleb128 0x34
 3988 01ae 00       		.byte	0
 3989 01af 03       		.uleb128 0x3
 3990 01b0 0E       		.uleb128 0xe
 3991 01b1 3A       		.uleb128 0x3a
 3992 01b2 0B       		.uleb128 0xb
 3993 01b3 3B       		.uleb128 0x3b
 3994 01b4 05       		.uleb128 0x5
 3995 01b5 49       		.uleb128 0x49
 3996 01b6 13       		.uleb128 0x13
 3997 01b7 02       		.uleb128 0x2
 3998 01b8 18       		.uleb128 0x18
 3999 01b9 00       		.byte	0
 4000 01ba 00       		.byte	0
 4001 01bb 20       		.uleb128 0x20
 4002 01bc 34       		.uleb128 0x34
 4003 01bd 00       		.byte	0
 4004 01be 03       		.uleb128 0x3
 4005 01bf 0E       		.uleb128 0xe
 4006 01c0 3A       		.uleb128 0x3a
 4007 01c1 0B       		.uleb128 0xb
 4008 01c2 3B       		.uleb128 0x3b
 4009 01c3 05       		.uleb128 0x5
 4010 01c4 49       		.uleb128 0x49
 4011 01c5 13       		.uleb128 0x13
 4012 01c6 02       		.uleb128 0x2
 4013 01c7 17       		.uleb128 0x17
 4014 01c8 00       		.byte	0
 4015 01c9 00       		.byte	0
 4016 01ca 21       		.uleb128 0x21
 4017 01cb 34       		.uleb128 0x34
 4018 01cc 00       		.byte	0
 4019 01cd 03       		.uleb128 0x3
 4020 01ce 0E       		.uleb128 0xe
 4021 01cf 3A       		.uleb128 0x3a
 4022 01d0 0B       		.uleb128 0xb
 4023 01d1 3B       		.uleb128 0x3b
 4024 01d2 05       		.uleb128 0x5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 97


 4025 01d3 49       		.uleb128 0x49
 4026 01d4 13       		.uleb128 0x13
 4027 01d5 1C       		.uleb128 0x1c
 4028 01d6 0B       		.uleb128 0xb
 4029 01d7 00       		.byte	0
 4030 01d8 00       		.byte	0
 4031 01d9 22       		.uleb128 0x22
 4032 01da 26       		.uleb128 0x26
 4033 01db 00       		.byte	0
 4034 01dc 49       		.uleb128 0x49
 4035 01dd 13       		.uleb128 0x13
 4036 01de 00       		.byte	0
 4037 01df 00       		.byte	0
 4038 01e0 23       		.uleb128 0x23
 4039 01e1 2E       		.uleb128 0x2e
 4040 01e2 01       		.byte	0x1
 4041 01e3 3F       		.uleb128 0x3f
 4042 01e4 19       		.uleb128 0x19
 4043 01e5 03       		.uleb128 0x3
 4044 01e6 0E       		.uleb128 0xe
 4045 01e7 3A       		.uleb128 0x3a
 4046 01e8 0B       		.uleb128 0xb
 4047 01e9 3B       		.uleb128 0x3b
 4048 01ea 05       		.uleb128 0x5
 4049 01eb 27       		.uleb128 0x27
 4050 01ec 19       		.uleb128 0x19
 4051 01ed 49       		.uleb128 0x49
 4052 01ee 13       		.uleb128 0x13
 4053 01ef 8701     		.uleb128 0x87
 4054 01f1 19       		.uleb128 0x19
 4055 01f2 11       		.uleb128 0x11
 4056 01f3 01       		.uleb128 0x1
 4057 01f4 12       		.uleb128 0x12
 4058 01f5 06       		.uleb128 0x6
 4059 01f6 40       		.uleb128 0x40
 4060 01f7 18       		.uleb128 0x18
 4061 01f8 9742     		.uleb128 0x2117
 4062 01fa 19       		.uleb128 0x19
 4063 01fb 01       		.uleb128 0x1
 4064 01fc 13       		.uleb128 0x13
 4065 01fd 00       		.byte	0
 4066 01fe 00       		.byte	0
 4067 01ff 24       		.uleb128 0x24
 4068 0200 34       		.uleb128 0x34
 4069 0201 00       		.byte	0
 4070 0202 03       		.uleb128 0x3
 4071 0203 0E       		.uleb128 0xe
 4072 0204 3A       		.uleb128 0x3a
 4073 0205 0B       		.uleb128 0xb
 4074 0206 3B       		.uleb128 0x3b
 4075 0207 0B       		.uleb128 0xb
 4076 0208 49       		.uleb128 0x49
 4077 0209 13       		.uleb128 0x13
 4078 020a 3F       		.uleb128 0x3f
 4079 020b 19       		.uleb128 0x19
 4080 020c 3C       		.uleb128 0x3c
 4081 020d 19       		.uleb128 0x19
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 98


 4082 020e 00       		.byte	0
 4083 020f 00       		.byte	0
 4084 0210 25       		.uleb128 0x25
 4085 0211 34       		.uleb128 0x34
 4086 0212 00       		.byte	0
 4087 0213 03       		.uleb128 0x3
 4088 0214 0E       		.uleb128 0xe
 4089 0215 3A       		.uleb128 0x3a
 4090 0216 0B       		.uleb128 0xb
 4091 0217 3B       		.uleb128 0x3b
 4092 0218 0B       		.uleb128 0xb
 4093 0219 49       		.uleb128 0x49
 4094 021a 13       		.uleb128 0x13
 4095 021b 3F       		.uleb128 0x3f
 4096 021c 19       		.uleb128 0x19
 4097 021d 02       		.uleb128 0x2
 4098 021e 18       		.uleb128 0x18
 4099 021f 00       		.byte	0
 4100 0220 00       		.byte	0
 4101 0221 26       		.uleb128 0x26
 4102 0222 34       		.uleb128 0x34
 4103 0223 00       		.byte	0
 4104 0224 03       		.uleb128 0x3
 4105 0225 08       		.uleb128 0x8
 4106 0226 3A       		.uleb128 0x3a
 4107 0227 0B       		.uleb128 0xb
 4108 0228 3B       		.uleb128 0x3b
 4109 0229 0B       		.uleb128 0xb
 4110 022a 49       		.uleb128 0x49
 4111 022b 13       		.uleb128 0x13
 4112 022c 3F       		.uleb128 0x3f
 4113 022d 19       		.uleb128 0x19
 4114 022e 02       		.uleb128 0x2
 4115 022f 18       		.uleb128 0x18
 4116 0230 00       		.byte	0
 4117 0231 00       		.byte	0
 4118 0232 27       		.uleb128 0x27
 4119 0233 34       		.uleb128 0x34
 4120 0234 00       		.byte	0
 4121 0235 03       		.uleb128 0x3
 4122 0236 0E       		.uleb128 0xe
 4123 0237 3A       		.uleb128 0x3a
 4124 0238 0B       		.uleb128 0xb
 4125 0239 3B       		.uleb128 0x3b
 4126 023a 05       		.uleb128 0x5
 4127 023b 49       		.uleb128 0x49
 4128 023c 13       		.uleb128 0x13
 4129 023d 3F       		.uleb128 0x3f
 4130 023e 19       		.uleb128 0x19
 4131 023f 02       		.uleb128 0x2
 4132 0240 18       		.uleb128 0x18
 4133 0241 00       		.byte	0
 4134 0242 00       		.byte	0
 4135 0243 28       		.uleb128 0x28
 4136 0244 2E       		.uleb128 0x2e
 4137 0245 00       		.byte	0
 4138 0246 3F       		.uleb128 0x3f
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 99


 4139 0247 19       		.uleb128 0x19
 4140 0248 3C       		.uleb128 0x3c
 4141 0249 19       		.uleb128 0x19
 4142 024a 6E       		.uleb128 0x6e
 4143 024b 0E       		.uleb128 0xe
 4144 024c 03       		.uleb128 0x3
 4145 024d 0E       		.uleb128 0xe
 4146 024e 3A       		.uleb128 0x3a
 4147 024f 0B       		.uleb128 0xb
 4148 0250 3B       		.uleb128 0x3b
 4149 0251 0B       		.uleb128 0xb
 4150 0252 00       		.byte	0
 4151 0253 00       		.byte	0
 4152 0254 29       		.uleb128 0x29
 4153 0255 2E       		.uleb128 0x2e
 4154 0256 00       		.byte	0
 4155 0257 3F       		.uleb128 0x3f
 4156 0258 19       		.uleb128 0x19
 4157 0259 3C       		.uleb128 0x3c
 4158 025a 19       		.uleb128 0x19
 4159 025b 6E       		.uleb128 0x6e
 4160 025c 0E       		.uleb128 0xe
 4161 025d 03       		.uleb128 0x3
 4162 025e 0E       		.uleb128 0xe
 4163 025f 00       		.byte	0
 4164 0260 00       		.byte	0
 4165 0261 2A       		.uleb128 0x2a
 4166 0262 2E       		.uleb128 0x2e
 4167 0263 00       		.byte	0
 4168 0264 3F       		.uleb128 0x3f
 4169 0265 19       		.uleb128 0x19
 4170 0266 3C       		.uleb128 0x3c
 4171 0267 19       		.uleb128 0x19
 4172 0268 6E       		.uleb128 0x6e
 4173 0269 0E       		.uleb128 0xe
 4174 026a 03       		.uleb128 0x3
 4175 026b 0E       		.uleb128 0xe
 4176 026c 3A       		.uleb128 0x3a
 4177 026d 0B       		.uleb128 0xb
 4178 026e 3B       		.uleb128 0x3b
 4179 026f 05       		.uleb128 0x5
 4180 0270 00       		.byte	0
 4181 0271 00       		.byte	0
 4182 0272 00       		.byte	0
 4183              		.section	.debug_loc,"",%progbits
 4184              	.Ldebug_loc0:
 4185              	.LLST0:
 4186 0000 2A000000 		.4byte	.LVL9
 4187 0004 2E000000 		.4byte	.LVL10
 4188 0008 0200     		.2byte	0x2
 4189 000a 30       		.byte	0x30
 4190 000b 9F       		.byte	0x9f
 4191 000c 2E000000 		.4byte	.LVL10
 4192 0010 4A000000 		.4byte	.LVL15
 4193 0014 0100     		.2byte	0x1
 4194 0016 54       		.byte	0x54
 4195 0017 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 100


 4196 001b 00000000 		.4byte	0
 4197              	.LLST1:
 4198 001f 00000000 		.4byte	.LVL16
 4199 0023 12000000 		.4byte	.LVL17
 4200 0027 0100     		.2byte	0x1
 4201 0029 50       		.byte	0x50
 4202 002a 12000000 		.4byte	.LVL17
 4203 002e 1C000000 		.4byte	.LFE32
 4204 0032 0400     		.2byte	0x4
 4205 0034 F3       		.byte	0xf3
 4206 0035 01       		.uleb128 0x1
 4207 0036 50       		.byte	0x50
 4208 0037 9F       		.byte	0x9f
 4209 0038 00000000 		.4byte	0
 4210 003c 00000000 		.4byte	0
 4211              	.LLST2:
 4212 0040 08000000 		.4byte	.LVL19
 4213 0044 0B000000 		.4byte	.LVL20-1
 4214 0048 0100     		.2byte	0x1
 4215 004a 50       		.byte	0x50
 4216 004b 00000000 		.4byte	0
 4217 004f 00000000 		.4byte	0
 4218              	.LLST3:
 4219 0053 00000000 		.4byte	.LVL21
 4220 0057 0A000000 		.4byte	.LVL22
 4221 005b 0100     		.2byte	0x1
 4222 005d 50       		.byte	0x50
 4223 005e 0A000000 		.4byte	.LVL22
 4224 0062 0D000000 		.4byte	.LVL23-1
 4225 0066 0400     		.2byte	0x4
 4226 0068 70       		.byte	0x70
 4227 0069 E079     		.sleb128 -800
 4228 006b 9F       		.byte	0x9f
 4229 006c 0D000000 		.4byte	.LVL23-1
 4230 0070 10000000 		.4byte	.LFE36
 4231 0074 0400     		.2byte	0x4
 4232 0076 F3       		.byte	0xf3
 4233 0077 01       		.uleb128 0x1
 4234 0078 50       		.byte	0x50
 4235 0079 9F       		.byte	0x9f
 4236 007a 00000000 		.4byte	0
 4237 007e 00000000 		.4byte	0
 4238              	.LLST4:
 4239 0082 1C000000 		.4byte	.LVL26
 4240 0086 F4000000 		.4byte	.LVL43
 4241 008a 0100     		.2byte	0x1
 4242 008c 54       		.byte	0x54
 4243 008d 56010000 		.4byte	.LVL50
 4244 0091 58010000 		.4byte	.LVL51
 4245 0095 0100     		.2byte	0x1
 4246 0097 54       		.byte	0x54
 4247 0098 58010000 		.4byte	.LVL51
 4248 009c 73010000 		.4byte	.LVL54-1
 4249 00a0 0200     		.2byte	0x2
 4250 00a2 74       		.byte	0x74
 4251 00a3 02       		.sleb128 2
 4252 00a4 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 101


 4253 00a8 00000000 		.4byte	0
 4254              	.LLST5:
 4255 00ac 1A000000 		.4byte	.LVL25
 4256 00b0 6B000000 		.4byte	.LVL37-1
 4257 00b4 0100     		.2byte	0x1
 4258 00b6 50       		.byte	0x50
 4259 00b7 B8000000 		.4byte	.LVL39
 4260 00bb BA000000 		.4byte	.LVL40
 4261 00bf 0100     		.2byte	0x1
 4262 00c1 50       		.byte	0x50
 4263 00c2 56010000 		.4byte	.LVL50
 4264 00c6 64010000 		.4byte	.LVL53
 4265 00ca 0100     		.2byte	0x1
 4266 00cc 50       		.byte	0x50
 4267 00cd 00000000 		.4byte	0
 4268 00d1 00000000 		.4byte	0
 4269              	.LLST6:
 4270 00d5 22000000 		.4byte	.LVL27
 4271 00d9 28000000 		.4byte	.LVL28
 4272 00dd 0200     		.2byte	0x2
 4273 00df 30       		.byte	0x30
 4274 00e0 9F       		.byte	0x9f
 4275 00e1 28000000 		.4byte	.LVL28
 4276 00e5 32000000 		.4byte	.LVL31
 4277 00e9 0100     		.2byte	0x1
 4278 00eb 53       		.byte	0x53
 4279 00ec 34000000 		.4byte	.LVL32
 4280 00f0 3E000000 		.4byte	.LVL33
 4281 00f4 0100     		.2byte	0x1
 4282 00f6 53       		.byte	0x53
 4283 00f7 50000000 		.4byte	.LVL35
 4284 00fb 52000000 		.4byte	.LVL36
 4285 00ff 0100     		.2byte	0x1
 4286 0101 53       		.byte	0x53
 4287 0102 1E020000 		.4byte	.LVL56
 4288 0106 24020000 		.4byte	.LVL57
 4289 010a 0200     		.2byte	0x2
 4290 010c 30       		.byte	0x30
 4291 010d 9F       		.byte	0x9f
 4292 010e 24020000 		.4byte	.LVL57
 4293 0112 2E020000 		.4byte	.LVL60
 4294 0116 0100     		.2byte	0x1
 4295 0118 53       		.byte	0x53
 4296 0119 30020000 		.4byte	.LVL61
 4297 011d 3F020000 		.4byte	.LVL63-1
 4298 0121 0100     		.2byte	0x1
 4299 0123 53       		.byte	0x53
 4300 0124 00000000 		.4byte	0
 4301 0128 00000000 		.4byte	0
 4302              	.LLST7:
 4303 012c 22000000 		.4byte	.LVL27
 4304 0130 28000000 		.4byte	.LVL28
 4305 0134 0200     		.2byte	0x2
 4306 0136 30       		.byte	0x30
 4307 0137 9F       		.byte	0x9f
 4308 0138 28000000 		.4byte	.LVL28
 4309 013c 2E000000 		.4byte	.LVL29
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 102


 4310 0140 0100     		.2byte	0x1
 4311 0142 52       		.byte	0x52
 4312 0143 30000000 		.4byte	.LVL30
 4313 0147 42000000 		.4byte	.LVL34
 4314 014b 0100     		.2byte	0x1
 4315 014d 52       		.byte	0x52
 4316 014e 50000000 		.4byte	.LVL35
 4317 0152 6B000000 		.4byte	.LVL37-1
 4318 0156 0100     		.2byte	0x1
 4319 0158 52       		.byte	0x52
 4320 0159 B8000000 		.4byte	.LVL39
 4321 015d C0000000 		.4byte	.LVL41
 4322 0161 0100     		.2byte	0x1
 4323 0163 52       		.byte	0x52
 4324 0164 56010000 		.4byte	.LVL50
 4325 0168 62010000 		.4byte	.LVL52
 4326 016c 0100     		.2byte	0x1
 4327 016e 52       		.byte	0x52
 4328 016f 1E020000 		.4byte	.LVL56
 4329 0173 24020000 		.4byte	.LVL57
 4330 0177 0200     		.2byte	0x2
 4331 0179 30       		.byte	0x30
 4332 017a 9F       		.byte	0x9f
 4333 017b 24020000 		.4byte	.LVL57
 4334 017f 2A020000 		.4byte	.LVL58
 4335 0183 0100     		.2byte	0x1
 4336 0185 52       		.byte	0x52
 4337 0186 2C020000 		.4byte	.LVL59
 4338 018a 38020000 		.4byte	.LVL62
 4339 018e 0100     		.2byte	0x1
 4340 0190 52       		.byte	0x52
 4341 0191 00000000 		.4byte	0
 4342 0195 00000000 		.4byte	0
 4343              	.LLST8:
 4344 0199 24010000 		.4byte	.LVL45
 4345 019d 34010000 		.4byte	.LVL47
 4346 01a1 0100     		.2byte	0x1
 4347 01a3 53       		.byte	0x53
 4348 01a4 44010000 		.4byte	.LVL48
 4349 01a8 48010000 		.4byte	.LVL49
 4350 01ac 0100     		.2byte	0x1
 4351 01ae 53       		.byte	0x53
 4352 01af 00000000 		.4byte	0
 4353 01b3 00000000 		.4byte	0
 4354              	.LLST9:
 4355 01b7 00000000 		.4byte	.LVL66
 4356 01bb 1B000000 		.4byte	.LVL68-1
 4357 01bf 0100     		.2byte	0x1
 4358 01c1 50       		.byte	0x50
 4359 01c2 1B000000 		.4byte	.LVL68-1
 4360 01c6 28000000 		.4byte	.LFE39
 4361 01ca 0400     		.2byte	0x4
 4362 01cc F3       		.byte	0xf3
 4363 01cd 01       		.uleb128 0x1
 4364 01ce 50       		.byte	0x50
 4365 01cf 9F       		.byte	0x9f
 4366 01d0 00000000 		.4byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 103


 4367 01d4 00000000 		.4byte	0
 4368              	.LLST10:
 4369 01d8 0A000000 		.4byte	.LVL67
 4370 01dc 22000000 		.4byte	.LVL69
 4371 01e0 0100     		.2byte	0x1
 4372 01e2 54       		.byte	0x54
 4373 01e3 22000000 		.4byte	.LVL69
 4374 01e7 28000000 		.4byte	.LFE39
 4375 01eb 0500     		.2byte	0x5
 4376 01ed 03       		.byte	0x3
 4377 01ee 00000000 		.4byte	inAuto
 4378 01f2 00000000 		.4byte	0
 4379 01f6 00000000 		.4byte	0
 4380              		.section	.debug_aranges,"",%progbits
 4381 0000 84000000 		.4byte	0x84
 4382 0004 0200     		.2byte	0x2
 4383 0006 00000000 		.4byte	.Ldebug_info0
 4384 000a 04       		.byte	0x4
 4385 000b 00       		.byte	0
 4386 000c 0000     		.2byte	0
 4387 000e 0000     		.2byte	0
 4388 0010 00000000 		.4byte	.LFB43
 4389 0014 24000000 		.4byte	.LFE43-.LFB43
 4390 0018 00000000 		.4byte	.LFB44
 4391 001c 1C000000 		.4byte	.LFE44-.LFB44
 4392 0020 00000000 		.4byte	.LFB45
 4393 0024 60000000 		.4byte	.LFE45-.LFB45
 4394 0028 00000000 		.4byte	.LFB32
 4395 002c 1C000000 		.4byte	.LFE32-.LFB32
 4396 0030 00000000 		.4byte	.LFB33
 4397 0034 1C000000 		.4byte	.LFE33-.LFB33
 4398 0038 00000000 		.4byte	.LFB34
 4399 003c 18000000 		.4byte	.LFE34-.LFB34
 4400 0040 00000000 		.4byte	.LFB36
 4401 0044 10000000 		.4byte	.LFE36-.LFB36
 4402 0048 00000000 		.4byte	.LFB37
 4403 004c 44000000 		.4byte	.LFE37-.LFB37
 4404 0050 00000000 		.4byte	.LFB35
 4405 0054 B0020000 		.4byte	.LFE35-.LFB35
 4406 0058 00000000 		.4byte	.LFB38
 4407 005c 30000000 		.4byte	.LFE38-.LFB38
 4408 0060 00000000 		.4byte	.LFB39
 4409 0064 28000000 		.4byte	.LFE39-.LFB39
 4410 0068 00000000 		.4byte	.LFB40
 4411 006c 64010000 		.4byte	.LFE40-.LFB40
 4412 0070 00000000 		.4byte	.LFB42
 4413 0074 BC000000 		.4byte	.LFE42-.LFB42
 4414 0078 00000000 		.4byte	.LFB41
 4415 007c 38010000 		.4byte	.LFE41-.LFB41
 4416 0080 00000000 		.4byte	0
 4417 0084 00000000 		.4byte	0
 4418              		.section	.debug_ranges,"",%progbits
 4419              	.Ldebug_ranges0:
 4420 0000 00000000 		.4byte	.LFB43
 4421 0004 24000000 		.4byte	.LFE43
 4422 0008 00000000 		.4byte	.LFB44
 4423 000c 1C000000 		.4byte	.LFE44
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 104


 4424 0010 00000000 		.4byte	.LFB45
 4425 0014 60000000 		.4byte	.LFE45
 4426 0018 00000000 		.4byte	.LFB32
 4427 001c 1C000000 		.4byte	.LFE32
 4428 0020 00000000 		.4byte	.LFB33
 4429 0024 1C000000 		.4byte	.LFE33
 4430 0028 00000000 		.4byte	.LFB34
 4431 002c 18000000 		.4byte	.LFE34
 4432 0030 00000000 		.4byte	.LFB36
 4433 0034 10000000 		.4byte	.LFE36
 4434 0038 00000000 		.4byte	.LFB37
 4435 003c 44000000 		.4byte	.LFE37
 4436 0040 00000000 		.4byte	.LFB35
 4437 0044 B0020000 		.4byte	.LFE35
 4438 0048 00000000 		.4byte	.LFB38
 4439 004c 30000000 		.4byte	.LFE38
 4440 0050 00000000 		.4byte	.LFB39
 4441 0054 28000000 		.4byte	.LFE39
 4442 0058 00000000 		.4byte	.LFB40
 4443 005c 64010000 		.4byte	.LFE40
 4444 0060 00000000 		.4byte	.LFB42
 4445 0064 BC000000 		.4byte	.LFE42
 4446 0068 00000000 		.4byte	.LFB41
 4447 006c 38010000 		.4byte	.LFE41
 4448 0070 00000000 		.4byte	0
 4449 0074 00000000 		.4byte	0
 4450              		.section	.debug_line,"",%progbits
 4451              	.Ldebug_line0:
 4452 0000 88040000 		.section	.debug_str,"MS",%progbits,1
 4452      02006302 
 4452      00000201 
 4452      FB0E0D00 
 4452      01010101 
 4453              	.LASF173:
 4454 0000 43794465 		.ascii	"CyDelay\000"
 4454      6C617900 
 4455              	.LASF140:
 4456 0008 72784D65 		.ascii	"rxMessage\000"
 4456      73736167 
 4456      6500
 4457              	.LASF181:
 4458 0012 6D61696E 		.ascii	"main.c\000"
 4458      2E6300
 4459              	.LASF78:
 4460 0019 6D6F746F 		.ascii	"motor_current\000"
 4460      725F6375 
 4460      7272656E 
 4460      7400
 4461              	.LASF109:
 4462 0027 62726D73 		.ascii	"brmsRG4Mask\000"
 4462      5247344D 
 4462      61736B00 
 4463              	.LASF83:
 4464 0033 74786D73 		.ascii	"txmsClear\000"
 4464      436C6561 
 4464      7200
 4465              	.LASF93:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 105


 4466 003d 6F757470 		.ascii	"output\000"
 4466      757400
 4467              	.LASF91:
 4468 0044 4D6F746F 		.ascii	"MotorCurrentRead\000"
 4468      72437572 
 4468      72656E74 
 4468      52656164 
 4468      00
 4469              	.LASF105:
 4470 0055 62726D73 		.ascii	"brmsTask\000"
 4470      5461736B 
 4470      00
 4471              	.LASF61:
 4472 005e 65666673 		.ascii	"effsetdelta\000"
 4472      65746465 
 4472      6C746100 
 4473              	.LASF37:
 4474 006a 6673456E 		.ascii	"fsEncoder\000"
 4474      636F6465 
 4474      7200
 4475              	.LASF31:
 4476 0074 6373556E 		.ascii	"csUnconfig\000"
 4476      636F6E66 
 4476      696700
 4477              	.LASF101:
 4478 007f 6E657741 		.ascii	"newAuto\000"
 4478      75746F00 
 4479              	.LASF15:
 4480 0087 756E7369 		.ascii	"unsigned int\000"
 4480      676E6564 
 4480      20696E74 
 4480      00
 4481              	.LASF106:
 4482 0094 62726D73 		.ascii	"brmsRG1Mask\000"
 4482      5247314D 
 4482      61736B00 
 4483              	.LASF177:
 4484 00a0 436F756E 		.ascii	"Counter_1_Start\000"
 4484      7465725F 
 4484      315F5374 
 4484      61727400 
 4485              	.LASF103:
 4486 00b0 72756E52 		.ascii	"runRateGroup1_PID\000"
 4486      61746547 
 4486      726F7570 
 4486      315F5049 
 4486      4400
 4487              	.LASF65:
 4488 00c2 636C6561 		.ascii	"clearfaults\000"
 4488      72666175 
 4488      6C747300 
 4489              	.LASF8:
 4490 00ce 5F5F696E 		.ascii	"__int32_t\000"
 4490      7433325F 
 4490      7400
 4491              	.LASF148:
 4492 00d8 484F4D45 		.ascii	"HOME_IN_ClearInterrupt\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 106


 4492      5F494E5F 
 4492      436C6561 
 4492      72496E74 
 4492      65727275 
 4493              	.LASF179:
 4494 00ef 4C45445F 		.ascii	"LED_Write\000"
 4494      57726974 
 4494      6500
 4495              	.LASF87:
 4496 00f9 486F6D65 		.ascii	"HomeIsrHandler\000"
 4496      49737248 
 4496      616E646C 
 4496      657200
 4497              	.LASF85:
 4498 0108 74784D65 		.ascii	"txMessageStates_t\000"
 4498      73736167 
 4498      65537461 
 4498      7465735F 
 4498      7400
 4499              	.LASF90:
 4500 011a 436C6561 		.ascii	"ClearFault\000"
 4500      72466175 
 4500      6C7400
 4501              	.LASF172:
 4502 0125 4932435F 		.ascii	"I2C_Start\000"
 4502      53746172 
 4502      7400
 4503              	.LASF125:
 4504 012f 4C617374 		.ascii	"LastMoveStableCount\000"
 4504      4D6F7665 
 4504      53746162 
 4504      6C65436F 
 4504      756E7400 
 4505              	.LASF32:
 4506 0143 63735265 		.ascii	"csReady\000"
 4506      61647900 
 4507              	.LASF153:
 4508 014b 5350495F 		.ascii	"SPI_1_SpiUartClearTxBuffer\000"
 4508      315F5370 
 4508      69556172 
 4508      74436C65 
 4508      61725478 
 4509              	.LASF21:
 4510 0166 75696E74 		.ascii	"uint32_t\000"
 4510      33325F74 
 4510      00
 4511              	.LASF16:
 4512 016f 696E7438 		.ascii	"int8_t\000"
 4512      5F7400
 4513              	.LASF50:
 4514 0176 72784D65 		.ascii	"rxMessage_opcodes_t\000"
 4514      73736167 
 4514      655F6F70 
 4514      636F6465 
 4514      735F7400 
 4515              	.LASF66:
 4516 018a 72784D65 		.ascii	"rxMessage_status_t\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 107


 4516      73736167 
 4516      655F7374 
 4516      61747573 
 4516      5F7400
 4517              	.LASF89:
 4518 019d 41737365 		.ascii	"AssertFault\000"
 4518      72744661 
 4518      756C7400 
 4519              	.LASF24:
 4520 01a9 666C6F61 		.ascii	"float\000"
 4520      7400
 4521              	.LASF170:
 4522 01af 6973725F 		.ascii	"isr_spi_ss_StartEx\000"
 4522      7370695F 
 4522      73735F53 
 4522      74617274 
 4522      457800
 4523              	.LASF51:
 4524 01c2 63686563 		.ascii	"checksum\000"
 4524      6B73756D 
 4524      00
 4525              	.LASF71:
 4526 01cb 73657465 		.ascii	"setenc\000"
 4526      6E6300
 4527              	.LASF18:
 4528 01d2 696E7431 		.ascii	"int16_t\000"
 4528      365F7400 
 4529              	.LASF95:
 4530 01da 72657375 		.ascii	"result\000"
 4530      6C7400
 4531              	.LASF14:
 4532 01e1 6C6F6E67 		.ascii	"long long unsigned int\000"
 4532      206C6F6E 
 4532      6720756E 
 4532      7369676E 
 4532      65642069 
 4533              	.LASF117:
 4534 01f8 5049445F 		.ascii	"PID_EffSetDelta\000"
 4534      45666653 
 4534      65744465 
 4534      6C746100 
 4535              	.LASF118:
 4536 0208 6C617374 		.ascii	"lastTime\000"
 4536      54696D65 
 4536      00
 4537              	.LASF137:
 4538 0211 4D6F746F 		.ascii	"MotorCurrent\000"
 4538      72437572 
 4538      72656E74 
 4538      00
 4539              	.LASF6:
 4540 021e 5F5F7569 		.ascii	"__uint16_t\000"
 4540      6E743136 
 4540      5F7400
 4541              	.LASF63:
 4542 0229 656E6162 		.ascii	"enable\000"
 4542      6C6500
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 108


 4543              	.LASF176:
 4544 0230 50574D5F 		.ascii	"PWM_1_WritePeriod\000"
 4544      315F5772 
 4544      69746550 
 4544      6572696F 
 4544      6400
 4545              	.LASF133:
 4546 0242 436F6E66 		.ascii	"ConfigState\000"
 4546      69675374 
 4546      61746500 
 4547              	.LASF59:
 4548 024e 6C696D69 		.ascii	"limitOutput\000"
 4548      744F7574 
 4548      70757400 
 4549              	.LASF180:
 4550 025a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4550      43313120 
 4550      352E342E 
 4550      31203230 
 4550      31363036 
 4551 028d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 4551      20726576 
 4551      6973696F 
 4551      6E203233 
 4551      37373135 
 4552 02c0 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 4552      66756E63 
 4552      74696F6E 
 4552      2D736563 
 4552      74696F6E 
 4553              	.LASF167:
 4554 02e8 6973725F 		.ascii	"isr_home_SetPriority\000"
 4554      686F6D65 
 4554      5F536574 
 4554      5072696F 
 4554      72697479 
 4555              	.LASF164:
 4556 02fd 6973725F 		.ascii	"isr_brms_StartEx\000"
 4556      62726D73 
 4556      5F537461 
 4556      72744578 
 4556      00
 4557              	.LASF163:
 4558 030e 54696D65 		.ascii	"Timer_BRMS_Start\000"
 4558      725F4252 
 4558      4D535F53 
 4558      74617274 
 4558      00
 4559              	.LASF102:
 4560 031f 5F426F6F 		.ascii	"_Bool\000"
 4560      6C00
 4561              	.LASF36:
 4562 0325 6673556E 		.ascii	"fsUnconfigured\000"
 4562      636F6E66 
 4562      69677572 
 4562      656400
 4563              	.LASF112:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 109


 4564 0334 696E4175 		.ascii	"inAuto\000"
 4564      746F00
 4565              	.LASF13:
 4566 033b 5F5F7569 		.ascii	"__uint64_t\000"
 4566      6E743634 
 4566      5F7400
 4567              	.LASF157:
 4568 0346 5350495F 		.ascii	"SPI_1_SpiUartPutArray\000"
 4568      315F5370 
 4568      69556172 
 4568      74507574 
 4568      41727261 
 4569              	.LASF149:
 4570 035c 7370695F 		.ascii	"spi_ss_ClearInterrupt\000"
 4570      73735F43 
 4570      6C656172 
 4570      496E7465 
 4570      72727570 
 4571              	.LASF130:
 4572 0372 55707469 		.ascii	"UptimeMilliseconds\000"
 4572      6D654D69 
 4572      6C6C6973 
 4572      65636F6E 
 4572      647300
 4573              	.LASF156:
 4574 0385 436F756E 		.ascii	"Counter_1_ReadCounter\000"
 4574      7465725F 
 4574      315F5265 
 4574      6164436F 
 4574      756E7465 
 4575              	.LASF72:
 4576 039b 76657273 		.ascii	"version0\000"
 4576      696F6E30 
 4576      00
 4577              	.LASF73:
 4578 03a4 76657273 		.ascii	"version1\000"
 4578      696F6E31 
 4578      00
 4579              	.LASF74:
 4580 03ad 76657273 		.ascii	"version2\000"
 4580      696F6E32 
 4580      00
 4581              	.LASF54:
 4582 03b6 72784D65 		.ascii	"rxMessage_overlay_t\000"
 4582      73736167 
 4582      655F6F76 
 4582      65726C61 
 4582      795F7400 
 4583              	.LASF119:
 4584 03ca 506F7369 		.ascii	"Position\000"
 4584      74696F6E 
 4584      00
 4585              	.LASF26:
 4586 03d3 63686172 		.ascii	"char\000"
 4586      00
 4587              	.LASF81:
 4588 03d8 6C617374 		.ascii	"last_move_time\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 110


 4588      5F6D6F76 
 4588      655F7469 
 4588      6D6500
 4589              	.LASF160:
 4590 03e7 5049445F 		.ascii	"PID_UpdateValues\000"
 4590      55706461 
 4590      74655661 
 4590      6C756573 
 4590      00
 4591              	.LASF99:
 4592 03f8 5049445F 		.ascii	"PID_SetMode\000"
 4592      5365744D 
 4592      6F646500 
 4593              	.LASF92:
 4594 0404 50574D5F 		.ascii	"PWM_Set\000"
 4594      53657400 
 4595              	.LASF104:
 4596 040c 42524D53 		.ascii	"BRMS_Interrupt\000"
 4596      5F496E74 
 4596      65727275 
 4596      707400
 4597              	.LASF152:
 4598 041b 5350495F 		.ascii	"SPI_1_SpiUartClearRxBuffer\000"
 4598      315F5370 
 4598      69556172 
 4598      74436C65 
 4598      61725278 
 4599              	.LASF53:
 4600 0436 6F70636F 		.ascii	"opcode\000"
 4600      646500
 4601              	.LASF60:
 4602 043d 6C696D69 		.ascii	"limitIterm\000"
 4602      74497465 
 4602      726D00
 4603              	.LASF17:
 4604 0448 75696E74 		.ascii	"uint8_t\000"
 4604      385F7400 
 4605              	.LASF70:
 4606 0450 73746174 		.ascii	"status\000"
 4606      757300
 4607              	.LASF38:
 4608 0457 6673496E 		.ascii	"fsIndex\000"
 4608      64657800 
 4609              	.LASF146:
 4610 045f 496E6465 		.ascii	"Index_Counter_1_WriteCounter\000"
 4610      785F436F 
 4610      756E7465 
 4610      725F315F 
 4610      57726974 
 4611              	.LASF155:
 4612 047c 50574D5F 		.ascii	"PWM_1_WriteCompare\000"
 4612      315F5772 
 4612      69746543 
 4612      6F6D7061 
 4612      726500
 4613              	.LASF35:
 4614 048f 66734E4F 		.ascii	"fsNONE\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 111


 4614      4E4500
 4615              	.LASF143:
 4616 0496 6973725F 		.ascii	"isr_rst_encoder_ClearPending\000"
 4616      7273745F 
 4616      656E636F 
 4616      6465725F 
 4616      436C6561 
 4617              	.LASF171:
 4618 04b3 6973725F 		.ascii	"isr_spi_ss_SetPriority\000"
 4618      7370695F 
 4618      73735F53 
 4618      65745072 
 4618      696F7269 
 4619              	.LASF126:
 4620 04ca 4C617374 		.ascii	"LastMoveTimeUsec\000"
 4620      4D6F7665 
 4620      54696D65 
 4620      55736563 
 4620      00
 4621              	.LASF12:
 4622 04db 6C6F6E67 		.ascii	"long long int\000"
 4622      206C6F6E 
 4622      6720696E 
 4622      7400
 4623              	.LASF161:
 4624 04e9 54696D65 		.ascii	"Timer_BRMS_ClearInterrupt\000"
 4624      725F4252 
 4624      4D535F43 
 4624      6C656172 
 4624      496E7465 
 4625              	.LASF40:
 4626 0503 66734368 		.ascii	"fsChecksum\000"
 4626      65636B73 
 4626      756D00
 4627              	.LASF150:
 4628 050e 7370695F 		.ascii	"spi_ss_Read\000"
 4628      73735F52 
 4628      65616400 
 4629              	.LASF111:
 4630 051a 69746572 		.ascii	"iterm_delay\000"
 4630      6D5F6465 
 4630      6C617900 
 4631              	.LASF4:
 4632 0526 5F5F696E 		.ascii	"__int16_t\000"
 4632      7431365F 
 4632      7400
 4633              	.LASF159:
 4634 0530 494E4445 		.ascii	"INDEX_OUT_SetDriveMode\000"
 4634      585F4F55 
 4634      545F5365 
 4634      74447269 
 4634      76654D6F 
 4635              	.LASF185:
 4636 0547 6D656D73 		.ascii	"memset\000"
 4636      657400
 4637              	.LASF131:
 4638 054e 55707469 		.ascii	"UptimeMillisecondsAccumulator\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 112


 4638      6D654D69 
 4638      6C6C6973 
 4638      65636F6E 
 4638      64734163 
 4639              	.LASF77:
 4640 056c 63686563 		.ascii	"checksum_errors\000"
 4640      6B73756D 
 4640      5F657272 
 4640      6F727300 
 4641              	.LASF52:
 4642 057c 73697A65 		.ascii	"size\000"
 4642      00
 4643              	.LASF182:
 4644 0581 433A5C55 		.ascii	"C:\\Users\\prichards\\proj\\acsnb-motor-cypress\\Qu"
 4644      73657273 
 4644      5C707269 
 4644      63686172 
 4644      64735C70 
 4645 05af 6164456E 		.ascii	"adEncoderRTOS.cydsn\000"
 4645      636F6465 
 4645      7252544F 
 4645      532E6379 
 4645      64736E00 
 4646              	.LASF23:
 4647 05c3 75696E74 		.ascii	"uint32\000"
 4647      333200
 4648              	.LASF84:
 4649 05ca 74786D73 		.ascii	"txmsLoaded\000"
 4649      4C6F6164 
 4649      656400
 4650              	.LASF138:
 4651 05d5 43757272 		.ascii	"CurrentI2Cinbuf\000"
 4651      656E7449 
 4651      3243696E 
 4651      62756600 
 4652              	.LASF151:
 4653 05e5 5350495F 		.ascii	"SPI_1_SpiUartReadRxData\000"
 4653      315F5370 
 4653      69556172 
 4653      74526561 
 4653      64527844 
 4654              	.LASF120:
 4655 05fd 4C617374 		.ascii	"LastPosition\000"
 4655      506F7369 
 4655      74696F6E 
 4655      00
 4656              	.LASF141:
 4657 060a 74784D65 		.ascii	"txMessage\000"
 4657      73736167 
 4657      6500
 4658              	.LASF145:
 4659 0614 436F756E 		.ascii	"Counter_1_WriteCounter\000"
 4659      7465725F 
 4659      315F5772 
 4659      69746543 
 4659      6F756E74 
 4660              	.LASF127:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 113


 4661 062b 4E657743 		.ascii	"NewCommandedMove\000"
 4661      6F6D6D61 
 4661      6E646564 
 4661      4D6F7665 
 4661      00
 4662              	.LASF88:
 4663 063c 5350495F 		.ascii	"SPI_SS_IsrHandler\000"
 4663      53535F49 
 4663      73724861 
 4663      6E646C65 
 4663      7200
 4664              	.LASF0:
 4665 064e 5F5F696E 		.ascii	"__int8_t\000"
 4665      74385F74 
 4665      00
 4666              	.LASF34:
 4667 0657 436F6E66 		.ascii	"ConfigStates_t\000"
 4667      69675374 
 4667      61746573 
 4667      5F7400
 4668              	.LASF96:
 4669 0666 72756E52 		.ascii	"runRateGroup3_SPI\000"
 4669      61746547 
 4669      726F7570 
 4669      335F5350 
 4669      4900
 4670              	.LASF165:
 4671 0678 6973725F 		.ascii	"isr_brms_SetPriority\000"
 4671      62726D73 
 4671      5F536574 
 4671      5072696F 
 4671      72697479 
 4672              	.LASF28:
 4673 068d 6C6F6E67 		.ascii	"long double\000"
 4673      20646F75 
 4673      626C6500 
 4674              	.LASF154:
 4675 0699 67657443 		.ascii	"getCurrent_mA\000"
 4675      75727265 
 4675      6E745F6D 
 4675      4100
 4676              	.LASF19:
 4677 06a7 75696E74 		.ascii	"uint16_t\000"
 4677      31365F74 
 4677      00
 4678              	.LASF27:
 4679 06b0 72656733 		.ascii	"reg32\000"
 4679      3200
 4680              	.LASF30:
 4681 06b6 6373554E 		.ascii	"csUNDEFINED\000"
 4681      44454649 
 4681      4E454400 
 4682              	.LASF55:
 4683 06c2 73657175 		.ascii	"sequence\000"
 4683      656E6365 
 4683      00
 4684              	.LASF121:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 114


 4685 06cb 4F757470 		.ascii	"Output\000"
 4685      757400
 4686              	.LASF69:
 4687 06d2 636F6E66 		.ascii	"config\000"
 4687      696700
 4688              	.LASF39:
 4689 06d9 66734375 		.ascii	"fsCurrentRead\000"
 4689      7272656E 
 4689      74526561 
 4689      6400
 4690              	.LASF5:
 4691 06e7 73686F72 		.ascii	"short int\000"
 4691      7420696E 
 4691      7400
 4692              	.LASF62:
 4693 06f1 72784D65 		.ascii	"rxMessage_config_t\000"
 4693      73736167 
 4693      655F636F 
 4693      6E666967 
 4693      5F7400
 4694              	.LASF114:
 4695 0704 5049445F 		.ascii	"PID_Was_Enabled\000"
 4695      5761735F 
 4695      456E6162 
 4695      6C656400 
 4696              	.LASF113:
 4697 0714 5049445F 		.ascii	"PID_Enabled\000"
 4697      456E6162 
 4697      6C656400 
 4698              	.LASF100:
 4699 0720 4D6F6465 		.ascii	"Mode\000"
 4699      00
 4700              	.LASF110:
 4701 0725 62726D73 		.ascii	"brmsRG5Mask\000"
 4701      5247354D 
 4701      61736B00 
 4702              	.LASF9:
 4703 0731 6C6F6E67 		.ascii	"long int\000"
 4703      20696E74 
 4703      00
 4704              	.LASF33:
 4705 073a 63734D41 		.ascii	"csMAX\000"
 4705      5800
 4706              	.LASF68:
 4707 0740 6F766572 		.ascii	"overlay\000"
 4707      6C617900 
 4708              	.LASF175:
 4709 0748 50574D5F 		.ascii	"PWM_1_Start\000"
 4709      315F5374 
 4709      61727400 
 4710              	.LASF123:
 4711 0754 4C617374 		.ascii	"LastMoveStartTimeUsec\000"
 4711      4D6F7665 
 4711      53746172 
 4711      7454696D 
 4711      65557365 
 4712              	.LASF97:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 115


 4713 076a 64697374 		.ascii	"distance\000"
 4713      616E6365 
 4713      00
 4714              	.LASF158:
 4715 0773 484F4D45 		.ascii	"HOME_OUT_SetDriveMode\000"
 4715      5F4F5554 
 4715      5F536574 
 4715      44726976 
 4715      654D6F64 
 4716              	.LASF94:
 4717 0789 52617750 		.ascii	"RawPosition\000"
 4717      6F736974 
 4717      696F6E00 
 4718              	.LASF139:
 4719 0795 4C617374 		.ascii	"LastMessageTimeSeconds\000"
 4719      4D657373 
 4719      61676554 
 4719      696D6553 
 4719      65636F6E 
 4720              	.LASF108:
 4721 07ac 62726D73 		.ascii	"brmsRG3Mask\000"
 4721      5247334D 
 4721      61736B00 
 4722              	.LASF82:
 4723 07b8 74784D65 		.ascii	"txMessage_t\000"
 4723      73736167 
 4723      655F7400 
 4724              	.LASF22:
 4725 07c4 75696E74 		.ascii	"uint64_t\000"
 4725      36345F74 
 4725      00
 4726              	.LASF64:
 4727 07cd 73657470 		.ascii	"setpoint\000"
 4727      6F696E74 
 4727      00
 4728              	.LASF107:
 4729 07d6 62726D73 		.ascii	"brmsRG2Mask\000"
 4729      5247324D 
 4729      61736B00 
 4730              	.LASF183:
 4731 07e2 47657450 		.ascii	"GetPosition\000"
 4731      6F736974 
 4731      696F6E00 
 4732              	.LASF132:
 4733 07ee 55707469 		.ascii	"UptimeSeconds\000"
 4733      6D655365 
 4733      636F6E64 
 4733      7300
 4734              	.LASF169:
 4735 07fc 6973725F 		.ascii	"isr_rst_encoder_SetPriority\000"
 4735      7273745F 
 4735      656E636F 
 4735      6465725F 
 4735      53657450 
 4736              	.LASF115:
 4737 0818 5049445F 		.ascii	"PID_Setpoint\000"
 4737      53657470 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 116


 4737      6F696E74 
 4737      00
 4738              	.LASF1:
 4739 0825 5F5F7569 		.ascii	"__uint8_t\000"
 4739      6E74385F 
 4739      7400
 4740              	.LASF47:
 4741 082f 6F705374 		.ascii	"opStatus\000"
 4741      61747573 
 4741      00
 4742              	.LASF49:
 4743 0838 6F704D41 		.ascii	"opMAX\000"
 4743      5800
 4744              	.LASF136:
 4745 083e 43686563 		.ascii	"ChecksumErrors\000"
 4745      6B73756D 
 4745      4572726F 
 4745      727300
 4746              	.LASF29:
 4747 084d 73697A65 		.ascii	"sizetype\000"
 4747      74797065 
 4747      00
 4748              	.LASF11:
 4749 0856 6C6F6E67 		.ascii	"long unsigned int\000"
 4749      20756E73 
 4749      69676E65 
 4749      6420696E 
 4749      7400
 4750              	.LASF20:
 4751 0868 696E7433 		.ascii	"int32_t\000"
 4751      325F7400 
 4752              	.LASF128:
 4753 0870 55707469 		.ascii	"UptimeMicroseconds\000"
 4753      6D654D69 
 4753      63726F73 
 4753      65636F6E 
 4753      647300
 4754              	.LASF58:
 4755 0883 6F766572 		.ascii	"overrideKd\000"
 4755      72696465 
 4755      4B6400
 4756              	.LASF75:
 4757 088e 73746174 		.ascii	"state\000"
 4757      6500
 4758              	.LASF57:
 4759 0894 6F766572 		.ascii	"overrideKi\000"
 4759      72696465 
 4759      4B6900
 4760              	.LASF56:
 4761 089f 6F766572 		.ascii	"overrideKp\000"
 4761      72696465 
 4761      4B7000
 4762              	.LASF174:
 4763 08aa 5350495F 		.ascii	"SPI_1_Start\000"
 4763      315F5374 
 4763      61727400 
 4764              	.LASF3:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 117


 4765 08b6 756E7369 		.ascii	"unsigned char\000"
 4765      676E6564 
 4765      20636861 
 4765      7200
 4766              	.LASF10:
 4767 08c4 5F5F7569 		.ascii	"__uint32_t\000"
 4767      6E743332 
 4767      5F7400
 4768              	.LASF45:
 4769 08cf 6F70554E 		.ascii	"opUNDEFINED\000"
 4769      44454649 
 4769      4E454400 
 4770              	.LASF48:
 4771 08db 6F705365 		.ascii	"opSetEnc\000"
 4771      74456E63 
 4771      00
 4772              	.LASF134:
 4773 08e4 4661756C 		.ascii	"FaultState\000"
 4773      74537461 
 4773      746500
 4774              	.LASF41:
 4775 08ef 66735832 		.ascii	"fsX2\000"
 4775      00
 4776              	.LASF42:
 4777 08f4 66735833 		.ascii	"fsX3\000"
 4777      00
 4778              	.LASF43:
 4779 08f9 66735834 		.ascii	"fsX4\000"
 4779      00
 4780              	.LASF135:
 4781 08fe 436F6E66 		.ascii	"ConfigSequence\000"
 4781      69675365 
 4781      7175656E 
 4781      636500
 4782              	.LASF122:
 4783 090d 686F6D69 		.ascii	"homingDone\000"
 4783      6E67446F 
 4783      6E6500
 4784              	.LASF124:
 4785 0918 4C617374 		.ascii	"LastMoveEndTimeUsec\000"
 4785      4D6F7665 
 4785      456E6454 
 4785      696D6555 
 4785      73656300 
 4786              	.LASF144:
 4787 092c 52657365 		.ascii	"Reset_Encoder_ClearInterrupt\000"
 4787      745F456E 
 4787      636F6465 
 4787      725F436C 
 4787      65617249 
 4788              	.LASF67:
 4789 0949 72784D65 		.ascii	"rxMessage_setenc_t\000"
 4789      73736167 
 4789      655F7365 
 4789      74656E63 
 4789      5F7400
 4790              	.LASF162:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 118


 4791 095c 50524F42 		.ascii	"PROBE_Write\000"
 4791      455F5772 
 4791      69746500 
 4792              	.LASF166:
 4793 0968 6973725F 		.ascii	"isr_home_StartEx\000"
 4793      686F6D65 
 4793      5F537461 
 4793      72744578 
 4793      00
 4794              	.LASF2:
 4795 0979 7369676E 		.ascii	"signed char\000"
 4795      65642063 
 4795      68617200 
 4796              	.LASF7:
 4797 0985 73686F72 		.ascii	"short unsigned int\000"
 4797      7420756E 
 4797      7369676E 
 4797      65642069 
 4797      6E7400
 4798              	.LASF98:
 4799 0998 5049445F 		.ascii	"PID_Initialize\000"
 4799      496E6974 
 4799      69616C69 
 4799      7A6500
 4800              	.LASF184:
 4801 09a7 6D61696E 		.ascii	"main\000"
 4801      00
 4802              	.LASF80:
 4803 09ac 69746572 		.ascii	"iterm\000"
 4803      6D00
 4804              	.LASF25:
 4805 09b2 646F7562 		.ascii	"double\000"
 4805      6C6500
 4806              	.LASF178:
 4807 09b9 496E6465 		.ascii	"Index_Counter_1_Start\000"
 4807      785F436F 
 4807      756E7465 
 4807      725F315F 
 4807      53746172 
 4808              	.LASF129:
 4809 09cf 55707469 		.ascii	"UptimeMicrosecondsAccumulator\000"
 4809      6D654D69 
 4809      63726F73 
 4809      65636F6E 
 4809      64734163 
 4810              	.LASF46:
 4811 09ed 6F70436F 		.ascii	"opConfig\000"
 4811      6E666967 
 4811      00
 4812              	.LASF168:
 4813 09f6 6973725F 		.ascii	"isr_rst_encoder_StartEx\000"
 4813      7273745F 
 4813      656E636F 
 4813      6465725F 
 4813      53746172 
 4814              	.LASF147:
 4815 0a0e 6973725F 		.ascii	"isr_home_ClearPending\000"
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\ccRBf87a.s 			page 119


 4815      686F6D65 
 4815      5F436C65 
 4815      61725065 
 4815      6E64696E 
 4816              	.LASF76:
 4817 0a24 6661756C 		.ascii	"fault\000"
 4817      7400
 4818              	.LASF86:
 4819 0a2a 52535449 		.ascii	"RSTIsrHandler\000"
 4819      73724861 
 4819      6E646C65 
 4819      7200
 4820              	.LASF79:
 4821 0a38 706F7369 		.ascii	"position\000"
 4821      74696F6E 
 4821      00
 4822              	.LASF44:
 4823 0a41 4661756C 		.ascii	"FaultStates_t\000"
 4823      74537461 
 4823      7465735F 
 4823      7400
 4824              	.LASF142:
 4825 0a4f 74784D65 		.ascii	"txMessageState\000"
 4825      73736167 
 4825      65537461 
 4825      746500
 4826              	.LASF116:
 4827 0a5e 5049445F 		.ascii	"PID_EffectiveSetpoint\000"
 4827      45666665 
 4827      63746976 
 4827      65536574 
 4827      706F696E 
 4828              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
