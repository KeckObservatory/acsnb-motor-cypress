ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RSTIsrHandler,"ax",%progbits
  20              		.align	2
  21              		.global	RSTIsrHandler
  22              		.code	16
  23              		.thumb_func
  24              		.type	RSTIsrHandler, %function
  25              	RSTIsrHandler:
  26              	.LFB43:
  27              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** * Author: Paul Richards, W.M. Keck Observatory
   4:main.c        **** *   (Adapted from original version from Kona Scientific, JP Fumo)
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *  This file provides a SPI interface for the Quadrature Encoder for the ACS project.
   8:main.c        **** *  The I2C device provides readback of motor current consumption.
   9:main.c        **** *
  10:main.c        **** * History:
  11:main.c        **** * 04/07/23 PMR  Rev: 0-2-1 add move timer to messaging, fix jog function
  12:main.c        **** * 02/08/23 PMR  Rev: 0-2-0 rework PID algorithm based on Galil findings
  13:main.c        **** * 07/27/22 PMR  Rev: 0-1-0 convert FreeRTOS to binary-rate-monotonic-scheduler (BRMS)
  14:main.c        **** * 07/09/20 PMR  Rev: 0-0-7 implement zeroing the encoder value
  15:main.c        **** * 07/09/19 PMR  Rev: 0-0-6 fix tuning of INA219 and inhibit encoder report during homing
  16:main.c        **** * 05/09/19 PMR  Rev: 0-0-5 multiple shaper and PID fixes; let encoder go negative
  17:main.c        **** * 03/22/19 PMR  Rev: 0-0-3 add PID separate I limit and simplify limiting code
  18:main.c        **** * 02/07/19 PMR  Rev: 0-0-2 implement revision numbering in protocol
  19:main.c        **** * 12/18/18 PMR  Rev: B  Implement checksummed messaging and max PWM limiting
  20:main.c        **** * 10/11/18 PMR  Rev: A  Implement PWM functions for PDI control
  21:main.c        **** * 07/31/18 PMR  Rev: NC Initial Release after port from Kona Scientific code
  22:main.c        **** *******************************************************************************/
  23:main.c        **** #include <I2C_I2C.h>
  24:main.c        **** #include <stdbool.h>
  25:main.c        **** #include <stdlib.h>
  26:main.c        **** #include <math.h>
  27:main.c        **** #include "pid.h"
  28:main.c        **** #include "INA219.h"
  29:main.c        **** 
  30:main.c        **** /* Firmware revision as of 2023-04-07 */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 2


  31:main.c        **** #define FIRMWARE_REV_0 0
  32:main.c        **** #define FIRMWARE_REV_1 2
  33:main.c        **** #define FIRMWARE_REV_2 1
  34:main.c        **** 
  35:main.c        **** /* Debugging - undefine this for a production system that needs to watchdog */
  36:main.c        **** #define DEBUG_PROBE_ATTACHED 1
  37:main.c        **** 
  38:main.c        **** /* For the ACS test set, the drives are wired backwards!  Use a polarity of -1 in that case. */
  39:main.c        **** //#define DRIVE_POLARITY -1
  40:main.c        **** #define DRIVE_POLARITY 1
  41:main.c        **** 
  42:main.c        **** /* --------------------------------------------------------------------- 
  43:main.c        ****  * CONSTANTS
  44:main.c        ****  * --------------------------------------------------------------------- */
  45:main.c        **** 
  46:main.c        **** /* Interrupt priorities */
  47:main.c        **** #define NESTED_ISR                             (1u)
  48:main.c        **** #define HIGHER_PRIORITY                        (2u)
  49:main.c        **** #define DEFAULT_PRIORITY                       (3u)
  50:main.c        **** 
  51:main.c        **** /* Interrupt prototypes */
  52:main.c        **** CY_ISR_PROTO(HomeIsrHandler);
  53:main.c        **** CY_ISR_PROTO(RSTIsrHandler);
  54:main.c        **** CY_ISR_PROTO(SPI_IsrHandler);
  55:main.c        **** CY_ISR_PROTO(SPI_SS_IsrHandler);
  56:main.c        **** CY_ISR_PROTO(BRMS_Interrupt);
  57:main.c        **** 
  58:main.c        **** /* --------------------------------------------------------------------- 
  59:main.c        ****  * WDT Defines
  60:main.c        ****  *
  61:main.c        ****  * ILO clock is 32KHz (approx. 31ms/count)
  62:main.c        ****  * We will allow the CPU to stall for 2 full seconds before forcibly
  63:main.c        ****  * resetting.  That comes to 64,000 counts for that 2 seconds.
  64:main.c        ****  * --------------------------------------------------------------------- */
  65:main.c        **** #define WDT_COUNT1_REFRESH()                   CySysWdtResetCounters(CY_SYS_WDT_COUNTER1_RESET)
  66:main.c        **** #define WDT_COUNT1_MATCH_RESET                 (0xFA00u)
  67:main.c        **** 
  68:main.c        **** /* --------------------------------------------------------------------- 
  69:main.c        ****  * PWM Defines
  70:main.c        ****  * --------------------------------------------------------------------- */
  71:main.c        **** #define PWM_15KHZ_PERIOD                       (1600)
  72:main.c        **** #define PWM_NEUTRAL                            (PWM_15KHZ_PERIOD/2)
  73:main.c        **** 
  74:main.c        **** /* TI INA219 Zero-Drift, Bidirectional Current/Power Monitor With I2C Interface */
  75:main.c        **** #define INA219_I2C_ADDR                        (0x40)
  76:main.c        **** #define INA219_CAL_VALUE                       (8192)
  77:main.c        **** 
  78:main.c        **** /* PWM maximum current value clipped to +/- X% duty cycle around the center (50 by default, full po
  79:main.c        **** #define PWM_MAX_MAGNITUDE                      (50) 
  80:main.c        **** 
  81:main.c        **** /* --------------------------------------------------------------------- 
  82:main.c        ****  * PID Defines
  83:main.c        ****  * --------------------------------------------------------------------- */
  84:main.c        **** #define PID_MANUAL                             (0)
  85:main.c        **** #define PID_AUTOMATIC                          (1)
  86:main.c        **** #define PID_EFFECTIVE_SETPOINT_DELTA_DEFAULT   (250)
  87:main.c        **** #define OVERRIDE_PID_CONSTANTS                 1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 3


  88:main.c        **** #define ITERM_90PCT_FIT_CONSTANT               (13)
  89:main.c        **** 
  90:main.c        **** bool inAuto = false;
  91:main.c        **** 
  92:main.c        **** volatile int8_t Jog;
  93:main.c        **** bool PID_Enabled, PID_Was_Enabled;
  94:main.c        **** int32_t PID_Setpoint, PID_EffectiveSetpoint;
  95:main.c        **** uint8_t PID_EffSetDelta;
  96:main.c        **** uint32_t lastTime;
  97:main.c        **** 
  98:main.c        **** volatile int32_t Position, LastPosition;
  99:main.c        **** volatile int32_t Output;
 100:main.c        **** volatile uint16_t limitOutput;
 101:main.c        **** volatile uint16_t limitIterm;
 102:main.c        **** 
 103:main.c        **** bool homingDone = true;
 104:main.c        **** 
 105:main.c        **** /* --------------------------------------------------------------------- 
 106:main.c        ****  * Move timer defines
 107:main.c        ****  * 
 108:main.c        ****  * Wait for 30 samples of position to be the same before declaring a move
 109:main.c        ****  * done.
 110:main.c        ****  * --------------------------------------------------------------------- */
 111:main.c        **** #define LAST_MOVE_TIME_SAMPLE_COUNT 30
 112:main.c        **** 
 113:main.c        **** /* Use UptimeMicroseconds to calculate how long a move elapsed */
 114:main.c        **** uint32_t LastMoveStartTimeUsec = 0;
 115:main.c        **** uint32_t LastMoveEndTimeUsec = 0;
 116:main.c        **** 
 117:main.c        **** /* Counter for how many samples elapsed since the move was complete */
 118:main.c        **** uint16_t LastMoveStableCount = 0;
 119:main.c        **** 
 120:main.c        **** /* Time value in microseconds for how long the last move took */
 121:main.c        **** uint32_t LastMoveTimeUsec = 0;
 122:main.c        **** 
 123:main.c        **** /* Set this flag when a new move comes down from the ACS */
 124:main.c        **** bool NewCommandedMove = false;
 125:main.c        **** 
 126:main.c        **** /* --------------------------------------------------------------------- 
 127:main.c        ****  * Timekeeping defines
 128:main.c        ****  * --------------------------------------------------------------------- */
 129:main.c        **** volatile uint64_t UptimeMicroseconds = 0;
 130:main.c        **** volatile uint64_t UptimeMicrosecondsAccumulator = 0;
 131:main.c        **** volatile uint64_t UptimeMilliseconds = 0;
 132:main.c        **** volatile uint64_t UptimeMillisecondsAccumulator = 0;
 133:main.c        **** volatile uint64_t UptimeSeconds = 0;
 134:main.c        **** 
 135:main.c        **** /* --------------------------------------------------------------------- 
 136:main.c        ****  * ENCODER PROPERTIES
 137:main.c        ****  *
 138:main.c        ****  * The encoder counts up and down in Counter_1, which is unsigned 24 bit
 139:main.c        ****  *
 140:main.c        ****  * Note: the negative boundary is defined as 1,048,576 counts of underflow
 141:main.c        ****  * in the Counter_1 value.  This allows us to start at max travel, reset 
 142:main.c        ****  * encoder to 0 and count negative the full travel before hitting the home
 143:main.c        ****  * flag and resetting the counter to 0 again.
 144:main.c        ****  *
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 4


 145:main.c        ****  * (0x100000 or 1.048M is >3x the entire actuator travel)
 146:main.c        ****  * --------------------------------------------------------------------- */
 147:main.c        **** #define ENCODER_MAX                            (0xFFFFFF)             
 148:main.c        **** #define ENCODER_NEGATIVE_BOUNDARY              (0xFFFFFF - 0x100000)  
 149:main.c        **** #define ENCODER_COUNTS_PER_INDEX               (10000)
 150:main.c        **** 
 151:main.c        **** /* --------------------------------------------------------------------- 
 152:main.c        ****  * GLOBALS
 153:main.c        ****  * --------------------------------------------------------------------- */
 154:main.c        **** /* Coarse reporting of state back to the node box software */
 155:main.c        **** typedef enum {    
 156:main.c        ****     csUNDEFINED   = 0,  /* Invalid state */
 157:main.c        ****     csUnconfig    = 1,  /* Unconfigured, freshly rebooted */
 158:main.c        ****     csReady       = 2,  /* Configuration complete and ready for commands */
 159:main.c        ****     csMAX    
 160:main.c        **** } ConfigStates_t;
 161:main.c        **** 
 162:main.c        **** #define configStateValid(s) ( ((ConfigStates_t) s > csUNDEFINED) && ((ConfigStates_t) s < csMAX) )
 163:main.c        **** 
 164:main.c        **** /* Fault codes, these are bit encoded into a uint8_t */
 165:main.c        **** typedef enum {
 166:main.c        ****     fsNONE         = 0b00000000,    /* No faults detected */
 167:main.c        ****     fsUnconfigured = 0b00000001,    /* Attempt to move an unconfigured system */
 168:main.c        ****     fsEncoder      = 0b00000010,    /* One or more encoder phases not changing during a move */
 169:main.c        ****     fsIndex        = 0b00000100,    /* Index marks not seen during a move */
 170:main.c        ****     fsCurrentRead  = 0b00001000,    /* Unable to read current from INA219 device */
 171:main.c        ****     fsChecksum     = 0b00010000,    /* Too many checksum faults */
 172:main.c        ****     fsX2           = 0b00100000,    /* */
 173:main.c        ****     fsX3           = 0b01000000,    /* */
 174:main.c        ****     fsX4           = 0b10000000     /* */
 175:main.c        **** } FaultStates_t;
 176:main.c        **** 
 177:main.c        **** volatile ConfigStates_t ConfigState;
 178:main.c        **** volatile uint8_t FaultState;
 179:main.c        **** volatile uint8_t ConfigSequence;
 180:main.c        **** volatile uint16_t ChecksumErrors;
 181:main.c        **** volatile int16_t MotorCurrent;
 182:main.c        **** uint8_t CurrentI2Cinbuf[20];
 183:main.c        **** 
 184:main.c        **** /* --------------------------------------------------------------------- 
 185:main.c        ****  * SPI MESSAGING
 186:main.c        ****  * --------------------------------------------------------------------- */
 187:main.c        **** /* V2 protocol 
 188:main.c        **** 
 189:main.c        ****    1) Messages have opcodes (configuration, position, get status)
 190:main.c        ****    2) Messages are validated by a checksum instead of an arbitrary signature pattern.
 191:main.c        ****    3) Transfer the max message size every time, regardless of all bytes used or not.
 192:main.c        **** */
 193:main.c        ****     
 194:main.c        **** /* Set this to be at least the size of the status response message */
 195:main.c        **** #define MAX_MESSAGE_SIZE 27
 196:main.c        ****     
 197:main.c        **** /* Remember the last time a message came in so we can timeout moves if the node box stops 
 198:main.c        ****    talking.  Nominally 1 second max of not talking. */
 199:main.c        **** #define MAX_LAST_MESSAGE_TIME_SECONDS 1
 200:main.c        **** uint32_t LastMessageTimeSeconds;
 201:main.c        **** 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 5


 202:main.c        **** /* Opcodes that can come from the node box software */
 203:main.c        **** typedef enum {
 204:main.c        ****     opUNDEFINED = 0,
 205:main.c        ****     opConfig    = 1,
 206:main.c        ****     opStatus    = 2,
 207:main.c        ****     opSetEnc    = 3,
 208:main.c        ****     opMAX       
 209:main.c        **** } rxMessage_opcodes_t;    
 210:main.c        **** 
 211:main.c        **** /* Sanity check for opcodes */
 212:main.c        **** #define rxMessageOpcodeValid(op) ( ((rxMessage_opcodes_t) op > opUNDEFINED) && ((rxMessage_opcodes_
 213:main.c        **** 
 214:main.c        **** typedef struct { 
 215:main.c        ****     uint8_t checksum;        
 216:main.c        ****     uint8_t size;       /* Size of the message bytes, including opcode and size and checksum */
 217:main.c        ****     uint8_t opcode;     /* Operation (generic overlay for previewing opcode value) */
 218:main.c        **** } __attribute__ ((__packed__)) rxMessage_overlay_t;
 219:main.c        **** 
 220:main.c        **** /* Configuration message, 22 bytes */
 221:main.c        **** typedef struct {
 222:main.c        ****     uint8_t checksum;        
 223:main.c        ****     uint8_t size;        /* Size of the message bytes, including opcode and size and checksum */
 224:main.c        ****     uint8_t opcode;      /* Operation: 01 == config */        
 225:main.c        ****     uint8_t sequence;    /* Configuration message sequence number */
 226:main.c        ****     
 227:main.c        ****     uint32_t overrideKp; /* If nonzero, override the PID P term */
 228:main.c        ****     uint32_t overrideKi; /* If nonzero, override the PID I term */
 229:main.c        ****     uint32_t overrideKd; /* If nonzero, override the PID D term */
 230:main.c        ****     
 231:main.c        ****     uint16_t limitOutput;/* Drive output limit, ranges from 0 to 800 */
 232:main.c        ****     uint16_t limitIterm; /* PID I term output limit, ranges from 0 to 800 */
 233:main.c        ****     uint16_t effsetdelta;/* PID effective setpoint increment delta, nominally 250 steps */
 234:main.c        **** } __attribute__ ((__packed__)) rxMessage_config_t;
 235:main.c        **** 
 236:main.c        **** /* Status message, contains desired position and such values, 10 bytes */
 237:main.c        **** typedef struct {
 238:main.c        ****     uint8_t  checksum;        
 239:main.c        ****     uint8_t  size;       /* Size of the message bytes, including opcode and size and checksum */
 240:main.c        ****     uint8_t  opcode;     /* Operation: 02 == status */
 241:main.c        ****     uint8_t  enable;     /* Enable/disable PID algorithm */
 242:main.c        ****     int32_t  setpoint;   /* Setpoint (desired actuator position) */
 243:main.c        ****     int8_t   jog;        /* Jog value, to manually move the motor; valid range -100 to 100 */ 
 244:main.c        ****     uint8_t  clearfaults;/* Set to nonzero to clear all the current faults */
 245:main.c        **** } __attribute__ ((__packed__)) rxMessage_status_t;
 246:main.c        ****    
 247:main.c        **** /* Clear message, contains new encoder position, 7 bytes */
 248:main.c        **** typedef struct {
 249:main.c        ****     uint8_t  checksum;        
 250:main.c        ****     uint8_t  size;       /* Size of the message bytes, including opcode and size and checksum */
 251:main.c        ****     uint8_t  opcode;     /* Operation: 03 == set encoders */
 252:main.c        ****     int32_t  setpoint;   /* Setpoint (force an actuator logical position) */
 253:main.c        **** } __attribute__ ((__packed__)) rxMessage_setenc_t;
 254:main.c        **** 
 255:main.c        **** 
 256:main.c        **** /* Wrap the message with an array of bytes */
 257:main.c        **** union {
 258:main.c        ****     uint8_t             buf[MAX_MESSAGE_SIZE];
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 6


 259:main.c        ****     rxMessage_overlay_t overlay;
 260:main.c        ****     rxMessage_config_t  config;
 261:main.c        ****     rxMessage_status_t  status;  
 262:main.c        ****     rxMessage_setenc_t  setenc;
 263:main.c        **** } rxMessage;
 264:main.c        **** 
 265:main.c        **** /* Message back to the BBB, watch out for alignment here by packing the structure (27 bytes) */
 266:main.c        **** typedef struct  {  
 267:main.c        ****     uint8_t  checksum;        /* Message checksum */    
 268:main.c        ****     uint8_t  version0;        /* Version byte 0 */ 
 269:main.c        ****     uint8_t  version1;        /* Version byte 1 */
 270:main.c        ****     uint8_t  version2;        /* Version byte 2 */
 271:main.c        ****     uint8_t  size;            /* Size of the message bytes, including opcode and size and checksum 
 272:main.c        ****     uint8_t  opcode;          /* Echo back of the opcode this response is for, operation: 02 == sta
 273:main.c        ****     uint8_t  state;           /* Enum value for current device configuration state */ 
 274:main.c        ****     uint8_t  fault;           /* Bit encoded fields for current fault status */
 275:main.c        ****     uint8_t  sequence;        /* Echo back the config sequence number currently set */
 276:main.c        ****     uint16_t checksum_errors; /* Count of checksum errors */
 277:main.c        ****     int16_t  motor_current;   /* Motor current consumption (mA) */
 278:main.c        ****     int32_t  position;        /* Actual actuator position, signed value */ 
 279:main.c        ****     int16_t  pwm;             /* PWM value the motor is moving at */     
 280:main.c        ****     int32_t  iterm;           /* Instantaneous PID iterm value */
 281:main.c        ****     uint32_t last_move_time;  /* Amount of time for the last move, in us */ 
 282:main.c        **** } __attribute__ ((__packed__)) txMessage_t;
 283:main.c        **** 
 284:main.c        **** /* Wrap the message with an array of bytes */
 285:main.c        **** union {    
 286:main.c        ****     uint8_t     buf[MAX_MESSAGE_SIZE];
 287:main.c        ****     txMessage_t msg;
 288:main.c        **** } txMessage;
 289:main.c        **** 
 290:main.c        **** /* State machine definition for transmit side of messaging */
 291:main.c        **** typedef enum {
 292:main.c        ****     txmsClear,    /* Transmit message buffer is empty and needs loading */
 293:main.c        ****     txmsLoaded    /* Transmit message buffer has been loaded by the message thread for sending */
 294:main.c        **** } txMessageStates_t;
 295:main.c        **** 
 296:main.c        **** txMessageStates_t txMessageState;
 297:main.c        **** 
 298:main.c        **** 
 299:main.c        **** 
 300:main.c        **** /* --------------------------------------------------------------------- 
 301:main.c        ****  * Function prototypes
 302:main.c        ****  * --------------------------------------------------------------------- */
 303:main.c        **** int32_t GetPosition(void);
 304:main.c        **** void runRateGroup1_PID(void);
 305:main.c        **** void runRateGroup3_SPI(void);
 306:main.c        **** void MotorCurrentRead(void);
 307:main.c        **** 
 308:main.c        **** 
 309:main.c        **** /*******************************************************************************
 310:main.c        **** * Function Name: AssertFault
 311:main.c        **** ********************************************************************************
 312:main.c        **** * Summary:
 313:main.c        **** *  Sets a flag that a particular fault has been detected.  Assert fsNONE to clear
 314:main.c        **** *  all faults.
 315:main.c        **** *
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 7


 316:main.c        **** * Parameters: FaultStates_t of the fault detected.
 317:main.c        **** * Return: None
 318:main.c        **** *******************************************************************************/
 319:main.c        **** void AssertFault(FaultStates_t fault) {
 320:main.c        ****  
 321:main.c        ****     switch (fault) {
 322:main.c        ****      
 323:main.c        ****         /* Clears all asserted faults */
 324:main.c        ****         case fsNONE:
 325:main.c        ****             FaultState = fsNONE;
 326:main.c        ****             break;        
 327:main.c        ****         
 328:main.c        ****         /* Any other fault has its bit turned on in the fault status */
 329:main.c        ****         default:
 330:main.c        ****             FaultState |= fault;
 331:main.c        ****             break;        
 332:main.c        ****     }    
 333:main.c        **** }
 334:main.c        **** 
 335:main.c        **** 
 336:main.c        **** /*******************************************************************************
 337:main.c        **** * Function Name: ClearFault
 338:main.c        **** ********************************************************************************
 339:main.c        **** * Summary:
 340:main.c        **** *  Clears a flag that a particular fault has been detected.  Assert fsNONE to clear
 341:main.c        **** *  all faults.
 342:main.c        **** *
 343:main.c        **** * Parameters: FaultStates_t of the fault to be cleared.
 344:main.c        **** * Return: None
 345:main.c        **** *******************************************************************************/
 346:main.c        **** void ClearFault(FaultStates_t fault) {
 347:main.c        ****  
 348:main.c        ****     switch (fault) {
 349:main.c        ****      
 350:main.c        ****         /* Clears all asserted faults */
 351:main.c        ****         case fsNONE:
 352:main.c        ****             FaultState = fsNONE;
 353:main.c        ****             break;        
 354:main.c        ****         
 355:main.c        ****         /* Any other fault has its bit turned off in the fault status */
 356:main.c        ****         default:
 357:main.c        ****             FaultState &= ~fault;
 358:main.c        ****             break;        
 359:main.c        ****     }    
 360:main.c        **** }
 361:main.c        **** 
 362:main.c        **** 
 363:main.c        **** /*******************************************************************************
 364:main.c        **** * Function Name: MotorCurrentRead
 365:main.c        **** ********************************************************************************
 366:main.c        **** * Summary:
 367:main.c        **** *  Read the motor current consumption.
 368:main.c        **** *
 369:main.c        **** * Parameters: None
 370:main.c        **** * Return: None
 371:main.c        **** *******************************************************************************/
 372:main.c        **** void MotorCurrentRead(void) {
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 8


 373:main.c        ****     
 374:main.c        ****     //TODO: Convert this to integer math
 375:main.c        ****     float c;
 376:main.c        ****     
 377:main.c        ****     c = getCurrent_mA(INA219_I2C_ADDR);
 378:main.c        ****     
 379:main.c        ****     /* Assign the global MotorCurrent value */
 380:main.c        ****     MotorCurrent = (int16_t) c;       
 381:main.c        **** }
 382:main.c        **** 
 383:main.c        **** 
 384:main.c        **** /*******************************************************************************
 385:main.c        **** * Function Name: Comm_Task
 386:main.c        **** ********************************************************************************
 387:main.c        **** * Summary:
 388:main.c        **** *  Task to perform the SPI communications.
 389:main.c        **** *
 390:main.c        **** * Parameters: None
 391:main.c        **** * Return: None
 392:main.c        **** *******************************************************************************/
 393:main.c        **** void runRateGroup3_SPI(void) {
 394:main.c        ****  
 395:main.c        ****     rxMessage_opcodes_t opcode;
 396:main.c        ****     uint8_t size;
 397:main.c        ****     uint8_t i;
 398:main.c        ****     uint8_t checksum;
 399:main.c        ****     int32_t distance;
 400:main.c        ****     
 401:main.c        ****     /* If the SPI is moving data out right now, do not touch the message buffer, we will
 402:main.c        ****        get to it next cycle! */
 403:main.c        ****     if (SPI_1_SpiIsBusBusy()) 
 404:main.c        ****         return;
 405:main.c        ****     
 406:main.c        ****     /* In certain states, this thread is responsible for loading the outbound messaging */
 407:main.c        ****     switch (txMessageState) {
 408:main.c        ****      
 409:main.c        ****         /* Output buffer is clear and ready for loading, rxMessage is (probably) good and needs pro
 410:main.c        ****         case txmsClear:
 411:main.c        ****                 
 412:main.c        ****             /* Get a few items out of the message before checking the sum */
 413:main.c        ****             size     = rxMessage.overlay.size;
 414:main.c        ****             opcode   = (rxMessage_opcodes_t) rxMessage.overlay.opcode;
 415:main.c        ****             
 416:main.c        ****             /* Make sure the size makes sense.  If we have to reset the size it's probably a corrup
 417:main.c        ****             if (size > sizeof(txMessage.buf))
 418:main.c        ****                 size = sizeof(txMessage.buf);                            
 419:main.c        ****         
 420:main.c        ****             /* Calculate the checksum by summing the bytes of the entire message, it should resolve
 421:main.c        ****             for (i = 0, checksum = 0; i < size; i++)
 422:main.c        ****                 checksum += rxMessage.buf[i]; 
 423:main.c        **** 
 424:main.c        ****             /* Checksum fault, don't try to process the messgage */
 425:main.c        ****             if ((checksum & 0xFF) != 0) {
 426:main.c        ****                 
 427:main.c        ****                 txMessage.msg.opcode = opcode;
 428:main.c        ****                 txMessage.msg.size = sizeof(txMessage_t);
 429:main.c        ****                 ChecksumErrors++;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 9


 430:main.c        ****                 
 431:main.c        ****             /* Message looks fine, process it */
 432:main.c        ****             } else {
 433:main.c        **** 
 434:main.c        ****                 /* Message opcode must be valid before trying to process the message contents */
 435:main.c        ****                 if ( rxMessageOpcodeValid(opcode) ) {                            
 436:main.c        ****                 
 437:main.c        ****                     switch (opcode) {
 438:main.c        ****                     
 439:main.c        ****                         case opConfig:
 440:main.c        ****                             /* Special message to establish settings on the device such as PID gain
 441:main.c        ****                         
 442:main.c        ****                             /* Remember where we were when the init was sent */
 443:main.c        ****                             LastPosition = GetPosition();
 444:main.c        ****                            
 445:main.c        ****                             /* Initialize the setpoints to be equal to where we are right now.*/
 446:main.c        ****                             PID_Setpoint = LastPosition;
 447:main.c        ****                             PID_EffectiveSetpoint = LastPosition;                                  
 448:main.c        ****                             
 449:main.c        ****                             /* Disable PID if it's on */
 450:main.c        ****                             PID_Was_Enabled = false;
 451:main.c        ****                             PID_Enabled = false;
 452:main.c        **** 
 453:main.c        ****                             /* Stop a jog if one was in progress */
 454:main.c        ****                             Jog = 0;
 455:main.c        ****                             
 456:main.c        ****                             /* Output and Iterm limits */
 457:main.c        ****                             limitOutput = rxMessage.config.limitOutput;
 458:main.c        ****                             limitIterm = rxMessage.config.limitIterm;
 459:main.c        ****                                 
 460:main.c        ****                                 
 461:main.c        ****                             /* Update the PID values passed down from the server */
 462:main.c        ****                         
 463:main.c        **** #ifndef OVERRIDE_PID_CONSTANTS
 464:main.c        ****                             kp = rxMessage.config.Kp;
 465:main.c        ****                             ki = rxMessage.config.Ki;
 466:main.c        ****                             kd = rxMessage.config.Kd;      
 467:main.c        ****                         
 468:main.c        ****                             /* PID effective setpoint increment delta value */                     
 469:main.c        ****                             PID_EffSetDelta = rxMessage.config.effsetdelta;
 470:main.c        **** #endif
 471:main.c        ****                         
 472:main.c        ****                             /* We have received a config message, so signal to the PID thread that 
 473:main.c        ****                             ConfigState = csReady;  
 474:main.c        ****                             ConfigSequence = rxMessage.config.sequence;
 475:main.c        ****                         
 476:main.c        ****                             /* Clear all the faults when reconfigured */
 477:main.c        ****                             ClearFault(fsNONE);
 478:main.c        ****                             break;
 479:main.c        **** 
 480:main.c        ****                         case opStatus:
 481:main.c        ****                             /* The normal message telling us where to go, how much to jog, enable o
 482:main.c        ****                             PID_Enabled = (bool) rxMessage.status.enable;
 483:main.c        ****                             
 484:main.c        ****                             /* If we are commanded to move somewhere else, remember where we starte
 485:main.c        ****                             if (PID_Setpoint != rxMessage.status.setpoint) {
 486:main.c        ****                                 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 10


 487:main.c        ****                                 /* This is a new move, start timing! */
 488:main.c        ****                                 NewCommandedMove = true;
 489:main.c        ****                                 LastMoveStartTimeUsec = UptimeMicroseconds;
 490:main.c        ****                                 
 491:main.c        ****                                 /* Remember where we started */
 492:main.c        ****                                 LastPosition = GetPosition();
 493:main.c        ****                                 
 494:main.c        ****                                 /* Update destination */
 495:main.c        ****                                 PID_Setpoint = rxMessage.status.setpoint;
 496:main.c        ****                                 
 497:main.c        ****                                 /* Initialize the effective setpoint to be equal to where we are ri
 498:main.c        ****                                 it will be incremented/decremented when the PID algorithm runs next
 499:main.c        ****                                 PID_EffectiveSetpoint = LastPosition;                              
 500:main.c        ****                                 
 501:main.c        ****                                 /* Reset counting of index marks */
 502:main.c        ****                                 Index_Counter_1_WriteCounter(0);
 503:main.c        ****                                 
 504:main.c        ****                                 
 505:main.c        ****                                 /* The demand has changed.  Hold off the integrator for a certain a
 506:main.c        ****                                 dictated by the size of the move (if it's more than 50 counts) */
 507:main.c        ****                                 distance = PID_Setpoint - LastPosition;                            
 508:main.c        ****                                 if (distance < 0) {
 509:main.c        ****                                     distance *= -1;
 510:main.c        ****                                 }
 511:main.c        ****                                 
 512:main.c        ****                                 if (distance > 50) {                                
 513:main.c        ****                                     iterm_delay = ((distance / 16) + ITERM_90PCT_FIT_CONSTANT) * 10
 514:main.c        ****                                     //iterm_delay = distance >> 4;  // Shift by 4 is equal to div b
 515:main.c        ****                                 } else {
 516:main.c        ****                                     iterm_delay = 0;
 517:main.c        ****                                 }
 518:main.c        ****                                 
 519:main.c        ****                                 
 520:main.c        ****                                 /* The demand has changed, reset the iterm delay to the max */
 521:main.c        ****                                 //iterm_delay = ITERM_DELAY_DEFAULT;  
 522:main.c        ****                                 //iterm_delay = 0;
 523:main.c        ****                             }                                        
 524:main.c        ****                         
 525:main.c        ****                             /* PWM jog value ranges from -100 to 100, where -100 is max-reverse cur
 526:main.c        ****                             100 is max-forward, 0 is neutral/no movement */
 527:main.c        ****                             Jog = rxMessage.status.jog;                                            
 528:main.c        ****                             break;
 529:main.c        ****                         
 530:main.c        ****                         case opSetEnc:
 531:main.c        ****                             /* The message is telling us what to arbitrarily set the encoder values
 532:main.c        ****                             Counter_1_WriteCounter(rxMessage.status.setpoint);
 533:main.c        ****                             LastPosition = rxMessage.status.setpoint;
 534:main.c        ****                             break;                                        
 535:main.c        ****                             
 536:main.c        ****                         /* No other opcodes are valid */
 537:main.c        ****                         default:
 538:main.c        ****                             break;
 539:main.c        ****                     }                           
 540:main.c        ****                 }                            
 541:main.c        ****             }
 542:main.c        ****             
 543:main.c        ****             /* Get a fresh copy of the position information */
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 11


 544:main.c        ****             Position = GetPosition();
 545:main.c        ****             
 546:main.c        ****             /* Fill out the common reponse the same way every time, as a status response */
 547:main.c        ****             txMessage.msg.checksum        = 0;
 548:main.c        ****             txMessage.msg.version0        = FIRMWARE_REV_0;
 549:main.c        ****             txMessage.msg.version1        = FIRMWARE_REV_1;
 550:main.c        ****             txMessage.msg.version2        = FIRMWARE_REV_2;
 551:main.c        ****             txMessage.msg.size            = sizeof(txMessage_t);
 552:main.c        ****             txMessage.msg.opcode          = opStatus;
 553:main.c        ****             txMessage.msg.state           = (uint8_t) ConfigState;
 554:main.c        ****             txMessage.msg.fault           = (uint8_t) FaultState;
 555:main.c        ****             txMessage.msg.checksum_errors = ChecksumErrors;
 556:main.c        ****             txMessage.msg.sequence        = ConfigSequence;
 557:main.c        ****             txMessage.msg.position        = Position;
 558:main.c        ****             txMessage.msg.pwm             = Output;
 559:main.c        ****             txMessage.msg.iterm           = iterm;
 560:main.c        ****             txMessage.msg.motor_current   = MotorCurrent;                  
 561:main.c        ****             txMessage.msg.last_move_time  = LastMoveTimeUsec;
 562:main.c        ****             
 563:main.c        ****             /* Set the checksum in the response */
 564:main.c        ****             for (i = 0, checksum = 0; i < sizeof(txMessage_t); i++)
 565:main.c        ****                 checksum += txMessage.buf[i]; 
 566:main.c        ****                 
 567:main.c        ****             /* Take the 2's complement of the sum and put it back in the message */
 568:main.c        ****             txMessage.msg.checksum = ~checksum + 1;
 569:main.c        ****                 
 570:main.c        ****             /* Copy the readied buffer out to the FIFO */
 571:main.c        ****             //TODO: should we clear this here, or at the end of the transmit complete interrupt?   
 572:main.c        ****             SPI_1_SpiUartPutArray(txMessage.buf, sizeof(txMessage.buf)); 
 573:main.c        **** 
 574:main.c        ****             /* Indicate it's loaded for use */
 575:main.c        ****             txMessageState = txmsLoaded;
 576:main.c        ****             
 577:main.c        ****             /* Clear all the faults if told to */
 578:main.c        ****             if ((bool) rxMessage.status.clearfaults)
 579:main.c        ****                 ClearFault(fsNONE);
 580:main.c        ****         
 581:main.c        ****             break;
 582:main.c        ****     
 583:main.c        ****         /* A message was already readied for transmission, nothing to do here */
 584:main.c        ****         case txmsLoaded:                
 585:main.c        ****             break;
 586:main.c        ****                 
 587:main.c        ****     } // End of message state case statement
 588:main.c        **** 
 589:main.c        **** }
 590:main.c        ****     
 591:main.c        **** 
 592:main.c        **** /*******************************************************************************
 593:main.c        **** * Function Name: PWM_Set
 594:main.c        **** ********************************************************************************
 595:main.c        **** * Summary:
 596:main.c        **** *  Sets the duty cycle of the PWM at the output pin.
 597:main.c        **** *
 598:main.c        **** * Parameters: Duty cycle, in percent.  A value of 50 is "neutral", values up 
 599:main.c        **** *             to 100 is forward drive, and below 50 down to 0 is backward drive.
 600:main.c        **** * Return: None
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 12


 601:main.c        **** *******************************************************************************/
 602:main.c        **** void PWM_Set(int32_t output) {    
 603:main.c        ****         
 604:main.c        ****     /* output varies from -800 to 800, which needs to be expressed as 0 to 1600 
 605:main.c        ****        for the PWM */
 606:main.c        ****     PWM_1_WriteCompare((PWM_15KHZ_PERIOD/2) + (DRIVE_POLARITY * output));    
 607:main.c        **** }
 608:main.c        **** 
 609:main.c        **** 
 610:main.c        **** /*******************************************************************************
 611:main.c        **** * Function Name: GetPosition
 612:main.c        **** ********************************************************************************
 613:main.c        **** * Summary:
 614:main.c        **** *  Get the physical position value and compensate for negative locations.
 615:main.c        **** *
 616:main.c        **** * Parameters: None
 617:main.c        **** * Return: int32_t (signed!) position value
 618:main.c        **** *******************************************************************************/
 619:main.c        **** int32_t GetPosition(void) {
 620:main.c        ****     
 621:main.c        ****     static volatile uint32_t RawPosition;
 622:main.c        ****     static volatile int32_t result;
 623:main.c        ****     
 624:main.c        ****     /* Get up-to-date position from the 24 bit unsigned counter*/
 625:main.c        ****     RawPosition = Counter_1_ReadCounter();   
 626:main.c        ****     
 627:main.c        ****     /* If the raw position is higher than some extremely high number, treat it as 
 628:main.c        ****        underflow and make that into a negative value */
 629:main.c        ****     if (RawPosition > ENCODER_NEGATIVE_BOUNDARY) {
 630:main.c        ****         
 631:main.c        ****         result = (-1) * ((int32_t) ENCODER_MAX - (int32_t) RawPosition);
 632:main.c        ****         
 633:main.c        ****     } else {
 634:main.c        ****      
 635:main.c        ****         /* Value is "positive", treat it normally */
 636:main.c        ****         result = (int32_t) RawPosition;
 637:main.c        ****     }
 638:main.c        ****     
 639:main.c        ****     /* Update the master copy of position information */
 640:main.c        ****     Position = result;
 641:main.c        ****     return result;
 642:main.c        **** }
 643:main.c        **** 
 644:main.c        **** 
 645:main.c        **** /*******************************************************************************
 646:main.c        **** * Function Name: PID_Initialize
 647:main.c        **** ********************************************************************************
 648:main.c        **** * Summary:
 649:main.c        **** *  Setup and reset the PID terms.
 650:main.c        **** *
 651:main.c        **** * Parameters: None
 652:main.c        **** * Return: None
 653:main.c        **** *******************************************************************************/
 654:main.c        **** void PID_Initialize(void) {
 655:main.c        ****     
 656:main.c        ****     /* Get up-to-date position */
 657:main.c        ****     Position = GetPosition();
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 13


 658:main.c        ****     LastPosition = Position;
 659:main.c        ****     
 660:main.c        ****     /* Initialize the effective setpoint to be equal to where we are right now,
 661:main.c        ****     it will be incremented/decremented when the PID algorithm runs next time */
 662:main.c        ****     PID_EffectiveSetpoint = LastPosition;
 663:main.c        ****     
 664:main.c        ****     /* 2019-03-13 PMR: Init to zero instead of the output value, since we are not
 665:main.c        ****        switching from manual to auto frequently */
 666:main.c        ****     iterm = 0;
 667:main.c        **** }    
 668:main.c        **** 
 669:main.c        **** 
 670:main.c        **** /*******************************************************************************
 671:main.c        **** * Function Name: PID_SetMode
 672:main.c        **** ********************************************************************************
 673:main.c        **** * Summary:
 674:main.c        **** *  Sets the PID into automatic or manual mode.
 675:main.c        **** *
 676:main.c        **** * Parameters: Mode, either PID_AUTOMATIC or PID_MANUAL.
 677:main.c        **** * Return: None
 678:main.c        **** *******************************************************************************/
 679:main.c        **** void PID_SetMode(uint32_t Mode) {
 680:main.c        ****     
 681:main.c        ****     bool newAuto = (Mode == PID_AUTOMATIC);
 682:main.c        ****     
 683:main.c        ****     if (newAuto && !inAuto) {  
 684:main.c        ****         /*we just went from manual to auto*/
 685:main.c        ****         PID_Initialize();
 686:main.c        ****     }
 687:main.c        ****     
 688:main.c        ****     inAuto = newAuto;
 689:main.c        **** } 
 690:main.c        **** 
 691:main.c        **** 
 692:main.c        **** /*******************************************************************************
 693:main.c        **** * Function Name: runRateGroup1_PID
 694:main.c        **** ********************************************************************************
 695:main.c        **** * Summary:
 696:main.c        **** *  Task to perform the PID calculations.
 697:main.c        **** *
 698:main.c        **** * Parameters: None
 699:main.c        **** * Return: None
 700:main.c        **** *******************************************************************************/
 701:main.c        **** void runRateGroup1_PID(void) {
 702:main.c        ****      
 703:main.c        ****     /////////////////////////////////////////////////////
 704:main.c        ****     // TESTING ONLY
 705:main.c        ****     //ConfigState = csReady;
 706:main.c        ****     //PID_Enabled = true;
 707:main.c        ****     /////////////////////////////////////////////////////
 708:main.c        **** 
 709:main.c        ****     /* If the server hasn't talked to us in a while (no messages on the SPI), 
 710:main.c        ****        take preventative action and abandon any moves in progress. */
 711:main.c        ****     if (UptimeSeconds > (LastMessageTimeSeconds + MAX_LAST_MESSAGE_TIME_SECONDS)) {
 712:main.c        ****         
 713:main.c        ****         /* Stop all motion */
 714:main.c        ****         PWM_Set(PWM_NEUTRAL);
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 14


 715:main.c        ****         PID_Enabled = false;
 716:main.c        ****         
 717:main.c        ****         /* Clear the values that would drive motion on the next message arrival.  Assume the 
 718:main.c        ****         next message might be a config, in which case we want to be neutral. */
 719:main.c        ****         Jog = 0;
 720:main.c        **** 
 721:main.c        ****     /* Only run the PID algorithm if we have been configured by the nodebox software */
 722:main.c        ****     } else if (ConfigState == csReady) {
 723:main.c        ****         
 724:main.c        ****         /* Enable the drive outputs for the home and index once configured, otherwise they
 725:main.c        ****            can screw up the boot pins on the BeagleBoneBlack */
 726:main.c        ****         HOME_OUT_SetDriveMode(HOME_OUT_DM_STRONG); 
 727:main.c        ****         INDEX_OUT_SetDriveMode(INDEX_OUT_DM_STRONG); 
 728:main.c        **** 
 729:main.c        ****         /* Handle mode switching */
 730:main.c        ****         if (!PID_Was_Enabled && PID_Enabled) {
 731:main.c        ****             PID_SetMode(PID_AUTOMATIC);
 732:main.c        ****         } else if (!PID_Enabled && PID_Was_Enabled) {
 733:main.c        ****             PID_SetMode(PID_MANUAL);                
 734:main.c        ****         } else {
 735:main.c        ****             // No mode change happened   
 736:main.c        ****         }
 737:main.c        ****         
 738:main.c        ****         /* Save value for next cycle */
 739:main.c        ****         PID_Was_Enabled = PID_Enabled;
 740:main.c        ****         
 741:main.c        ****         /* Calculate the effective setpoint, which is defined as N (nominally 25) counts closer to 
 742:main.c        ****         actual setpoint, incremented once per cycle of this algorithm.  
 743:main.c        ****     
 744:main.c        ****         Consider a move of +2000 counts from position 0 to 2000: 
 745:main.c        ****         
 746:main.c        ****         1) The setpoint will change to 2000.
 747:main.c        ****         2) The effective setpoint is initialized to the current position, plus 25 counts = 25.
 748:main.c        ****         3) Calculate the PID and return.
 749:main.c        ****         4) The next time PID_Compute is called, increment the effective setpoint by 25 counts = 50.
 750:main.c        ****         5) Calculate the PID and return.
 751:main.c        ****         6) Repeat steps 4 and 5 until the effective setpoint equals the actual setpoint.           
 752:main.c        ****         */
 753:main.c        ****         
 754:main.c        ****         if (PID_Enabled) {
 755:main.c        ****             
 756:main.c        ****             if (PID_EffSetDelta == 0) {
 757:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;
 758:main.c        ****             } else if ( labs(PID_EffectiveSetpoint - PID_Setpoint) <= (2 * PID_EffSetDelta) ) {
 759:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;                                              
 760:main.c        ****             } else if (PID_Setpoint > PID_EffectiveSetpoint) {
 761:main.c        ****                 PID_EffectiveSetpoint = (PID_EffectiveSetpoint + PID_EffSetDelta);
 762:main.c        ****             } else {
 763:main.c        ****                 PID_EffectiveSetpoint = (PID_EffectiveSetpoint - PID_EffSetDelta);
 764:main.c        ****             }
 765:main.c        ****             
 766:main.c        ****             /* Get most up-to-date current position */
 767:main.c        ****             Position = GetPosition();
 768:main.c        ****             
 769:main.c        ****             /* Run the PID algorithm once */
 770:main.c        ****             Output = PID_UpdateValues(PID_EffectiveSetpoint, Position);
 771:main.c        ****             
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 15


 772:main.c        ****             /* Put the PID output value out on the wire */
 773:main.c        ****             PWM_Set(Output);
 774:main.c        ****             
 775:main.c        ****             /* Calculate how long the last commanded move has taken */
 776:main.c        ****             if (NewCommandedMove) {
 777:main.c        ****                 
 778:main.c        ****                 if (Position == PID_Setpoint) {
 779:main.c        ****                     
 780:main.c        ****                     /* We are at the set point, but it's not known if the motion is stable yet, we 
 781:main.c        ****                     Therefore, count how many times we have held at this location.  When it exceeds
 782:main.c        ****                     use the time we first reached this position as the move's end time. */
 783:main.c        ****                     if (LastMoveStableCount == LAST_MOVE_TIME_SAMPLE_COUNT) {
 784:main.c        ****                         
 785:main.c        ****                         /* We have arrived at the set point and have been here for 6ms (30 counts o
 786:main.c        ****                         good and calculate how long this move took */
 787:main.c        ****                         LastMoveTimeUsec = LastMoveEndTimeUsec - LastMoveStartTimeUsec;
 788:main.c        ****                         
 789:main.c        ****                         /* Clear the flag for this particular move */ 
 790:main.c        ****                         NewCommandedMove = false;
 791:main.c        ****                         
 792:main.c        ****                     } else {
 793:main.c        ****                         
 794:main.c        ****                         /* We have reached the destination but it is not yet proven stable. Increme
 795:main.c        ****                         It will be reset to zero if we deviate from this position. */              
 796:main.c        ****                         LastMoveStableCount += 1;
 797:main.c        **** 
 798:main.c        ****                         /* If the stable count is exactly 1, then this might be the start of a new 
 799:main.c        ****                         note the time.  This is potentially the END TIME of a move.  The start time
 800:main.c        ****                         when the node box sent a new set point. */
 801:main.c        ****                         if (LastMoveStableCount == 1) {
 802:main.c        ****                             LastMoveEndTimeUsec = UptimeMicroseconds;
 803:main.c        ****                         }                    
 804:main.c        ****                     }                
 805:main.c        ****                     
 806:main.c        ****                 } else {
 807:main.c        ****                     
 808:main.c        ****                     /* Reset the stable counter, because we are not at the commanded location */
 809:main.c        ****                     LastMoveStableCount = 0;                
 810:main.c        ****                 }
 811:main.c        ****             }
 812:main.c        **** 
 813:main.c        ****         } else {
 814:main.c        ****             
 815:main.c        ****             /* If the server is asking us to jog, do that instead of PID.  Drive in the direction 
 816:main.c        ****             and speed the server told us.  Translate the jog percentage, from -100 to +100, into 
 817:main.c        ****             PWM_Set values from -800 to 800 */
 818:main.c        ****             Output = (Jog * 8);
 819:main.c        ****             
 820:main.c        ****             /* Put the new jog value on the wire, instead of a PID value */
 821:main.c        ****             PWM_Set(Output);            
 822:main.c        ****         }        
 823:main.c        ****         
 824:main.c        ****     } else {
 825:main.c        ****         
 826:main.c        ****         /* Config state is not ready (configured), inhibit all motion */
 827:main.c        ****         PWM_Set(PWM_NEUTRAL);        
 828:main.c        ****     }
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 16


 829:main.c        **** }
 830:main.c        **** 
 831:main.c        **** 
 832:main.c        **** /*******************************************************************************
 833:main.c        **** * Function Name: main
 834:main.c        **** ********************************************************************************
 835:main.c        **** * Summary:
 836:main.c        **** *  Setup tasks, interrupts, and perform the background task functions.
 837:main.c        **** *
 838:main.c        **** * Parameters: None
 839:main.c        **** * Return: NEVER!
 840:main.c        **** *******************************************************************************/
 841:main.c        **** int main(void) {
 842:main.c        ****     
 843:main.c        ****     /* DISABLE the drive outputs for the home and index immediately upon booting the 
 844:main.c        ****        microprocessor.  There is a race condition here: unless the actuator is on a home
 845:main.c        ****        flag or index mark, a 1 will be written to each output.  Depending on which 
 846:main.c        ****        Cypress device this is, it could end up going to one of the boot pins of the Beagle
 847:main.c        ****        Bone Black device.  Undesirable results can result: corrupt serial output on the
 848:main.c        ****        console, inabulity to boot from eMMC, or even a complete failure to power on. */
 849:main.c        ****     HOME_OUT_SetDriveMode(HOME_OUT_DM_DIG_HIZ); 
 850:main.c        ****     INDEX_OUT_SetDriveMode(INDEX_OUT_DM_DIG_HIZ); 
 851:main.c        **** 
 852:main.c        ****     
 853:main.c        ****     /********************************************************************** 
 854:main.c        ****     * Interrupts
 855:main.c        ****     **********************************************************************/
 856:main.c        ****     
 857:main.c        ****     /* BRMS timer interrupt */
 858:main.c        ****     Timer_BRMS_Start();
 859:main.c        ****     isr_brms_StartEx(BRMS_Interrupt);
 860:main.c        ****     isr_brms_SetPriority(HIGHER_PRIORITY);
 861:main.c        **** 
 862:main.c        ****     /* Sets up the Index and Reset interrupt and enables them */
 863:main.c        ****     isr_home_StartEx(HomeIsrHandler);
 864:main.c        ****     isr_home_SetPriority(DEFAULT_PRIORITY);
 865:main.c        **** 
 866:main.c        ****     /* Encoder interrupt */
 867:main.c        ****     isr_rst_encoder_StartEx(RSTIsrHandler);
 868:main.c        ****     isr_rst_encoder_SetPriority(DEFAULT_PRIORITY);
 869:main.c        ****     
 870:main.c        ****     /* Setup the SPI slave select interrupt ISR */
 871:main.c        ****     isr_spi_ss_StartEx(SPI_SS_IsrHandler);
 872:main.c        ****     isr_spi_ss_SetPriority(DEFAULT_PRIORITY);   
 873:main.c        **** 
 874:main.c        ****     /* Enable the global interrupt */
 875:main.c        ****     CyGlobalIntEnable;
 876:main.c        ****     
 877:main.c        ****     /********************************************************************** 
 878:main.c        ****     * Watchdog timer.  Implements the WDT1 automatic CPU reset.
 879:main.c        ****     **********************************************************************/
 880:main.c        **** 
 881:main.c        ****     /* If you are using the JTAG debugging probe, turn off the watchdog by
 882:main.c        ****        defining DEBUG_PROBE_ATTACHED to something, or it will reset the CPU
 883:main.c        ****        when you hit a breakpoint. */
 884:main.c        **** 
 885:main.c        **** #ifndef DEBUG_PROBE_ATTACHED
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 17


 886:main.c        **** 	/* Set WDT counter 1 to generate reset on match */
 887:main.c        **** 	CySysWdtWriteMatch(CY_SYS_WDT_COUNTER1, WDT_COUNT1_MATCH_RESET);
 888:main.c        **** 	CySysWdtWriteMode(CY_SYS_WDT_COUNTER1, CY_SYS_WDT_MODE_RESET);
 889:main.c        ****     CySysWdtWriteClearOnMatch(CY_SYS_WDT_COUNTER1, 1u);
 890:main.c        **** 	
 891:main.c        **** 	/* Enable WDT counter 1 */
 892:main.c        **** 	CySysWdtEnable(CY_SYS_WDT_COUNTER1_MASK);
 893:main.c        **** 	
 894:main.c        **** 	/* Lock WDT registers and try to disable WDT 1 */
 895:main.c        **** 	CySysWdtLock();
 896:main.c        **** 	CySysWdtDisable(CY_SYS_WDT_COUNTER1_MASK);
 897:main.c        **** 	CySysWdtUnlock();        
 898:main.c        **** #endif    
 899:main.c        **** 
 900:main.c        ****     
 901:main.c        ****     /*********************************************************************** 
 902:main.c        ****     * Start the various subsystems.
 903:main.c        ****     ***********************************************************************/
 904:main.c        ****     I2C_Start();
 905:main.c        ****     
 906:main.c        ****     /* Start I2C for the Motor Current monitor */
 907:main.c        ****     //Init_INA(INA219_I2C_ADDR);
 908:main.c        ****     
 909:main.c        ****     CyDelay(100u);
 910:main.c        ****     SPI_1_Start();
 911:main.c        ****     
 912:main.c        ****     /* Setup the PWM at a base frequency of 15KHz, 50% duty cycle.  Clock_1 is set to
 913:main.c        ****        12MHz, so the desired period to get 15KHz is a count of 800. */
 914:main.c        ****     PWM_1_Start();
 915:main.c        ****     PWM_1_WritePeriod(PWM_15KHZ_PERIOD);
 916:main.c        ****     PWM_Set(PWM_NEUTRAL);   
 917:main.c        ****     
 918:main.c        ****     /* Default the jog value to neutral (no movement) */
 919:main.c        ****     Jog = 0;
 920:main.c        ****     
 921:main.c        ****     /* Set a flag that homing is not done yet, since we just booted */
 922:main.c        ****     homingDone = false;
 923:main.c        ****    
 924:main.c        ****     /* Start counting the quadrature encoding */
 925:main.c        ****     Counter_1_Start();    
 926:main.c        ****     Counter_1_WriteCounter(ENCODER_MAX);  // Set the encoder initially to mid range
 927:main.c        ****     LastPosition = ENCODER_MAX;
 928:main.c        ****     
 929:main.c        ****     /* Clear and start the index mark counter */
 930:main.c        ****     Index_Counter_1_Start();
 931:main.c        ****     Index_Counter_1_WriteCounter(0);
 932:main.c        ****      
 933:main.c        ****     /* Start off unconfigured */
 934:main.c        ****     ConfigState = csUnconfig;  
 935:main.c        ****     ConfigSequence = 0;
 936:main.c        ****     ChecksumErrors = 0;
 937:main.c        ****     
 938:main.c        ****     /***************************/
 939:main.c        ****     /* Setup the PID subsystem */
 940:main.c        ****     PID_Initialize();
 941:main.c        ****     PID_SetMode(PID_MANUAL);
 942:main.c        ****     
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 18


 943:main.c        ****     /* Initially default to full output max until config tells us otherwise */
 944:main.c        ****     limitOutput = 800;
 945:main.c        ****     limitIterm = 800;
 946:main.c        ****     
 947:main.c        ****     /* Start off disabled */
 948:main.c        ****     PID_Setpoint          = 0;  
 949:main.c        ****     PID_EffectiveSetpoint = 0;
 950:main.c        ****     PID_EffSetDelta       = 250; //PID_EFFECTIVE_SETPOINT_DELTA_DEFAULT;
 951:main.c        ****     PID_Was_Enabled       = false;
 952:main.c        ****     PID_Enabled           = false;
 953:main.c        ****     PWM_Set(PWM_NEUTRAL);
 954:main.c        ****   
 955:main.c        ****     /***********************************************************************
 956:main.c        ****     * Run the background tasks.  Assume anything executed in here will be
 957:main.c        ****     * constantly interrupted by the task scheduler.
 958:main.c        ****     ***********************************************************************/
 959:main.c        ****     while (1) {
 960:main.c        **** 
 961:main.c        ****         //TODO: Enable/disable this mechanism based on some input from the SPI master,
 962:main.c        ****         //      which might be the ACS test set, or the beagle bone node box.  Disable it for
 963:main.c        ****         //      now to prevent multi-mastering of the I2C bus, which doesn't work.
 964:main.c        ****         /*
 965:main.c        ****         PROBE_Write(1);
 966:main.c        ****         MotorCurrentRead();
 967:main.c        ****         PROBE_Write(0);
 968:main.c        ****         */
 969:main.c        ****         
 970:main.c        ****         /*
 971:main.c        ****         if (UptimeMicroseconds > (LastUptimeMicroseconds + 500)) {
 972:main.c        ****             LastUptimeMicroseconds = UptimeMicroseconds;
 973:main.c        ****             
 974:main.c        ****             if (toggle) {
 975:main.c        ****                 PROBE_Write(1);
 976:main.c        ****                 toggle = false;
 977:main.c        ****             } else {
 978:main.c        ****                 PROBE_Write(0);
 979:main.c        ****                 toggle = true;
 980:main.c        ****             }
 981:main.c        ****         }
 982:main.c        ****         */
 983:main.c        ****         
 984:main.c        ****         
 985:main.c        ****         /* Use the LED as a heartbeat */
 986:main.c        ****         if (UptimeSeconds % 2) {
 987:main.c        ****             LED_Write(1);
 988:main.c        ****         } else {
 989:main.c        ****             LED_Write(0);
 990:main.c        ****         } 
 991:main.c        ****         
 992:main.c        ****         // Delay 10ms before next loop iteration
 993:main.c        ****         CyDelay(10);         
 994:main.c        ****         
 995:main.c        ****         
 996:main.c        ****    
 997:main.c        ****     /* ------------------------------------------------------------------------------------ */
 998:main.c        ****     /* Every loop, refresh the counter of the watchdog to indicate the system is still alive
 999:main.c        ****        and not stalled out in some interrupt somewhre.  Were the BRMS to stop working or the 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 19


1000:main.c        ****        motion thread to die, the CPU will be reset after 2 seconds. */
1001:main.c        **** ////    WDT_COUNT1_REFRESH();        
1002:main.c        ****     /* ------------------------------------------------------------------------------------ */
1003:main.c        ****         
1004:main.c        ****     }
1005:main.c        ****       
1006:main.c        ****     
1007:main.c        ****     /***********************************************************************
1008:main.c        ****     *  We should never reach this, if we do, we'll crash (reset).
1009:main.c        ****     ***********************************************************************/
1010:main.c        ****     return 1;       
1011:main.c        **** }
1012:main.c        **** 
1013:main.c        **** 
1014:main.c        **** /*******************************************************************************
1015:main.c        **** * Function Name: BRMS_Interrupt
1016:main.c        **** ********************************************************************************
1017:main.c        **** * Summary:
1018:main.c        **** *  Hooks the 200us tick for the BRMS scheduler.
1019:main.c        **** *
1020:main.c        **** * Parameters: None
1021:main.c        **** * Return: None
1022:main.c        **** *******************************************************************************/
1023:main.c        **** CY_ISR(BRMS_Interrupt) {
1024:main.c        ****     
1025:main.c        ****     static uint32_t brmsTask;                 // The BRMS schedule counter
1026:main.c        **** 
1027:main.c        ****     static uint32_t brmsRG1Mask = 0b00000001; // Rate group 1 mask
1028:main.c        ****     static uint32_t brmsRG2Mask = 0b00000010; // Rate group 2 mask
1029:main.c        ****     static uint32_t brmsRG3Mask = 0b00000100; // Rate group 3 mask
1030:main.c        ****     static uint32_t brmsRG4Mask = 0b00001000; // Rate group 4 mask
1031:main.c        ****     static uint32_t brmsRG5Mask = 0b00010000; // Rate group 5 mask
1032:main.c        ****     
1033:main.c        ****     /* Clears the timer interrupt */
1034:main.c        ****     Timer_BRMS_ClearInterrupt(Timer_BRMS_INTR_MASK_CC_MATCH);
1035:main.c        **** 
1036:main.c        ****     PROBE_Write(1);
1037:main.c        ****     
1038:main.c        ****     /* Use this 200us interrupt as a clock mechanism */
1039:main.c        ****     UptimeMicroseconds += 200;
1040:main.c        ****     UptimeMicrosecondsAccumulator += 200;
1041:main.c        ****     
1042:main.c        ****     /* Count milliseconds */
1043:main.c        ****     if (UptimeMicrosecondsAccumulator > 1000) {
1044:main.c        ****         UptimeMicrosecondsAccumulator = 0;
1045:main.c        ****         UptimeMilliseconds += 1;
1046:main.c        ****         UptimeMillisecondsAccumulator += 1;
1047:main.c        ****     }
1048:main.c        ****     
1049:main.c        ****     /* Count seconds */
1050:main.c        ****     if (UptimeMillisecondsAccumulator > 1000) {
1051:main.c        ****         UptimeMillisecondsAccumulator = 0;
1052:main.c        ****         UptimeSeconds += 1;
1053:main.c        ****     }
1054:main.c        ****     
1055:main.c        ****     /* Increment the BRMS task counter infinitely */
1056:main.c        ****     brmsTask++;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 20


1057:main.c        **** 
1058:main.c        ****     /* Determine which rate group to run.  Do this by applying the rate group masks
1059:main.c        ****        sequentially until one results in a "true" value.  
1060:main.c        ****     
1061:main.c        ****        For example: the 1st rate group is invoked every time the brmsTask value ends 
1062:main.c        ****        in 0bxxx1, and ignored when it's 0bxxx0.  
1063:main.c        ****     
1064:main.c        ****        The second rate group is invoked half as often as the first: when the brmsTask
1065:main.c        ****        value ends in 0bxx10. 
1066:main.c        ****     
1067:main.c        ****        The third rate group is invoked half as often as the second: when brmsTask
1068:main.c        ****        ends in 0bx100.  
1069:main.c        ****     
1070:main.c        ****        In this way, we have decreasing tiers of tasks that are run for at most 200us.
1071:main.c        ****     
1072:main.c        ****        The "background" task does not run at interrupt level.  The main() of the program
1073:main.c        ****        represents everything non time critical, using whatever CPU is left over when the
1074:main.c        ****        interrupt returns.
1075:main.c        ****     */
1076:main.c        ****     if (brmsTask & brmsRG1Mask) {
1077:main.c        ****         
1078:main.c        ****         /* The PID task has the highest priority for this system.  Run it every time rate 
1079:main.c        ****            group 1 comes around, which results in an invocation of PID every 400us.  Equal
1080:main.c        ****            to a 2.5KHz update rate. */
1081:main.c        ****         runRateGroup1_PID();
1082:main.c        ****         
1083:main.c        ****     } else if (brmsTask & brmsRG2Mask) {
1084:main.c        ****         
1085:main.c        ****         /* Rate group 2 is run every 0.8ms, or 1.25KHz*/
1086:main.c        ****         //runRateGroup2_TBD();           
1087:main.c        ****         
1088:main.c        ****     } else if (brmsTask & brmsRG3Mask) {
1089:main.c        ****         
1090:main.c        ****         /* Rate group 3 is run every 1.6ms, or 625Hz*/
1091:main.c        ****         runRateGroup3_SPI();
1092:main.c        ****         
1093:main.c        ****     } else if (brmsTask & brmsRG4Mask) {
1094:main.c        ****      
1095:main.c        ****         /* Rate group 4 is run every 3.2ms, or 312Hz*/
1096:main.c        ****         //runRateGroup4_TBD();
1097:main.c        **** 
1098:main.c        ****     } else if (brmsTask & brmsRG5Mask) {
1099:main.c        ****      
1100:main.c        ****         /* Rate group 5 is run every 6.4ms, or 156Hz*/
1101:main.c        ****         //runRateGroup5_TBD();
1102:main.c        ****     }
1103:main.c        ****     
1104:main.c        ****     PROBE_Write(0);
1105:main.c        ****    
1106:main.c        **** }
1107:main.c        **** 
1108:main.c        **** 
1109:main.c        **** /*******************************************************************************
1110:main.c        **** * Function Name: RSTIsrHandler
1111:main.c        **** ********************************************************************************
1112:main.c        **** * Summary:
1113:main.c        **** *  The interrupt handler for resetting the encoder count interrupts.
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 21


1114:main.c        **** *  Clears a pending Interrupt.
1115:main.c        **** *  Clears a pin Interrupt.
1116:main.c        **** *
1117:main.c        **** * Parameters: None
1118:main.c        **** * Return: None
1119:main.c        **** *******************************************************************************/
1120:main.c        **** CY_ISR(RSTIsrHandler) {
  28              		.loc 1 1120 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
1121:main.c        ****     
1122:main.c        ****     /* Clear pending Interrupt */
1123:main.c        ****     isr_rst_encoder_ClearPending(); 
  36              		.loc 1 1123 0
  37 0002 FFF7FEFF 		bl	isr_rst_encoder_ClearPending
  38              	.LVL0:
1124:main.c        ****     
1125:main.c        ****     /* Clear pin Interrupt */
1126:main.c        ****     Reset_Encoder_ClearInterrupt();
  39              		.loc 1 1126 0
  40 0006 FFF7FEFF 		bl	Reset_Encoder_ClearInterrupt
  41              	.LVL1:
1127:main.c        ****     
1128:main.c        ****     /* Clear the 24b Encoder (Absolute Position Counter) */
1129:main.c        ****     Counter_1_WriteCounter(0);
  42              		.loc 1 1129 0
  43 000a 0020     		movs	r0, #0
  44 000c FFF7FEFF 		bl	Counter_1_WriteCounter
  45              	.LVL2:
1130:main.c        ****     
1131:main.c        ****     /* Clear the index counter */
1132:main.c        ****     Index_Counter_1_WriteCounter(0);  
  46              		.loc 1 1132 0
  47 0010 0020     		movs	r0, #0
  48 0012 FFF7FEFF 		bl	Index_Counter_1_WriteCounter
  49              	.LVL3:
1133:main.c        ****     
1134:main.c        ****     /* When we hit the index mark, homing is complete */
1135:main.c        ****     homingDone = true;    
  50              		.loc 1 1135 0
  51 0016 0122     		movs	r2, #1
  52 0018 014B     		ldr	r3, .L2
  53 001a 1A70     		strb	r2, [r3]
1136:main.c        **** }
  54              		.loc 1 1136 0
  55              		@ sp needed
  56 001c 10BD     		pop	{r4, pc}
  57              	.L3:
  58 001e C046     		.align	2
  59              	.L2:
  60 0020 00000000 		.word	.LANCHOR0
  61              		.cfi_endproc
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 22


  62              	.LFE43:
  63              		.size	RSTIsrHandler, .-RSTIsrHandler
  64              		.section	.text.HomeIsrHandler,"ax",%progbits
  65              		.align	2
  66              		.global	HomeIsrHandler
  67              		.code	16
  68              		.thumb_func
  69              		.type	HomeIsrHandler, %function
  70              	HomeIsrHandler:
  71              	.LFB44:
1137:main.c        **** 
1138:main.c        **** 
1139:main.c        **** /*******************************************************************************
1140:main.c        **** * Function Name: HomeIsrHandler
1141:main.c        **** ********************************************************************************
1142:main.c        **** * Summary:
1143:main.c        **** *  The interrupt handler for resetting the encoder count interrupts.
1144:main.c        **** *  Clears a pending Interrupt.
1145:main.c        **** *  Clears a pin Interrupt.
1146:main.c        **** *
1147:main.c        **** * Parameters: None
1148:main.c        **** * Return: None
1149:main.c        **** *******************************************************************************/
1150:main.c        **** CY_ISR(HomeIsrHandler) {
  72              		.loc 1 1150 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76 0000 10B5     		push	{r4, lr}
  77              		.cfi_def_cfa_offset 8
  78              		.cfi_offset 4, -8
  79              		.cfi_offset 14, -4
1151:main.c        ****     
1152:main.c        ****     /* Clear pending Interrupt */
1153:main.c        ****     isr_home_ClearPending(); 
  80              		.loc 1 1153 0
  81 0002 FFF7FEFF 		bl	isr_home_ClearPending
  82              	.LVL4:
1154:main.c        ****     
1155:main.c        ****     /* Clear pin Interrupt */
1156:main.c        ****     HOME_IN_ClearInterrupt();
  83              		.loc 1 1156 0
  84 0006 FFF7FEFF 		bl	HOME_IN_ClearInterrupt
  85              	.LVL5:
1157:main.c        **** 
1158:main.c        ****     /* Clear the 24b Encoder (Absolute Position Counter) */
1159:main.c        ****     Counter_1_WriteCounter(0);
  86              		.loc 1 1159 0
  87 000a 0020     		movs	r0, #0
  88 000c FFF7FEFF 		bl	Counter_1_WriteCounter
  89              	.LVL6:
1160:main.c        ****     
1161:main.c        ****     /* Set a flag that homing is not done yet until the next index position */
1162:main.c        ****     homingDone = false;
  90              		.loc 1 1162 0
  91 0010 0022     		movs	r2, #0
  92 0012 014B     		ldr	r3, .L5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 23


  93 0014 1A70     		strb	r2, [r3]
1163:main.c        **** }
  94              		.loc 1 1163 0
  95              		@ sp needed
  96 0016 10BD     		pop	{r4, pc}
  97              	.L6:
  98              		.align	2
  99              	.L5:
 100 0018 00000000 		.word	.LANCHOR0
 101              		.cfi_endproc
 102              	.LFE44:
 103              		.size	HomeIsrHandler, .-HomeIsrHandler
 104              		.section	.text.SPI_SS_IsrHandler,"ax",%progbits
 105              		.align	2
 106              		.global	SPI_SS_IsrHandler
 107              		.code	16
 108              		.thumb_func
 109              		.type	SPI_SS_IsrHandler, %function
 110              	SPI_SS_IsrHandler:
 111              	.LFB45:
1164:main.c        **** 
1165:main.c        **** 
1166:main.c        **** /*******************************************************************************
1167:main.c        **** * Function Name: SPI_SS_IsrHandler
1168:main.c        **** ********************************************************************************
1169:main.c        **** * Summary:
1170:main.c        **** *  The interrupt handler for knowing when the SPI master deasserts the slave select.
1171:main.c        **** *  Clears a pin Interrupt.
1172:main.c        **** *
1173:main.c        **** * Parameters: None
1174:main.c        **** * Return: None
1175:main.c        **** *******************************************************************************/
1176:main.c        **** CY_ISR(SPI_SS_IsrHandler) {
 112              		.loc 1 1176 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116 0000 10B5     		push	{r4, lr}
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 4, -8
 119              		.cfi_offset 14, -4
1177:main.c        ****     
1178:main.c        ****     uint32_t i;
1179:main.c        ****     
1180:main.c        ****     /* Clear SPI slave select pin Interrupt */
1181:main.c        ****     spi_ss_ClearInterrupt();
 120              		.loc 1 1181 0
 121 0002 FFF7FEFF 		bl	spi_ss_ClearInterrupt
 122              	.LVL7:
1182:main.c        ****     
1183:main.c        ****     /* Make sure the slave select is actually de-asserted before proceeding */
1184:main.c        ****     if (!spi_ss_Read()) 
 123              		.loc 1 1184 0
 124 0006 FFF7FEFF 		bl	spi_ss_Read
 125              	.LVL8:
 126 000a 0028     		cmp	r0, #0
 127 000c 1DD0     		beq	.L7
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 24


1185:main.c        ****         return;
1186:main.c        ****    
1187:main.c        ****     /* Update the last message tick timer */
1188:main.c        ****     LastMessageTimeSeconds = UptimeSeconds;
 128              		.loc 1 1188 0
 129 000e 0F4B     		ldr	r3, .L12
 130 0010 1A68     		ldr	r2, [r3]
 131 0012 5B68     		ldr	r3, [r3, #4]
 132 0014 0E4B     		ldr	r3, .L12+4
 133 0016 1A60     		str	r2, [r3]
1189:main.c        **** 
1190:main.c        ****     /* It's possible the slave select has fired and returned without transmitting any data (glitche
1191:main.c        ****        check the messaging state before resetting the buffers */
1192:main.c        ****     switch (txMessageState) {
 134              		.loc 1 1192 0
 135 0018 0E4B     		ldr	r3, .L12+8
 136 001a 1B78     		ldrb	r3, [r3]
 137 001c 012B     		cmp	r3, #1
 138 001e 14D1     		bne	.L7
1193:main.c        ****      
1194:main.c        ****         /* FIFO is not yet loaded and slave select deasserted, this is a glitch */ 
1195:main.c        ****         case txmsClear:
1196:main.c        ****             break;
1197:main.c        ****      
1198:main.c        ****         /* A message was readied for transmission */
1199:main.c        ****         case txmsLoaded:
1200:main.c        ****          
1201:main.c        ****             /* FIFO is clear and slave select deasserted, it's time to reset */ 
1202:main.c        ****             
1203:main.c        ****             /* Clear the transmit message buffer, the comm thread will fill it in again to make sur
1204:main.c        ****             bzero(txMessage.buf, sizeof(txMessage.buf)); 
 139              		.loc 1 1204 0
 140 0020 1B22     		movs	r2, #27
 141 0022 0021     		movs	r1, #0
 142 0024 0C48     		ldr	r0, .L12+12
 143 0026 FFF7FEFF 		bl	memset
 144              	.LVL9:
1205:main.c        **** 
1206:main.c        ****             /* Message from the master is completely clocked in by now */     
1207:main.c        ****             for (i = 0; i < sizeof(rxMessage.buf); i++) {
 145              		.loc 1 1207 0
 146 002a 0024     		movs	r4, #0
 147 002c 04E0     		b	.L10
 148              	.LVL10:
 149              	.L11:
1208:main.c        ****                 rxMessage.buf[i] = (uint8_t) SPI_1_SpiUartReadRxData();            
 150              		.loc 1 1208 0 discriminator 3
 151 002e FFF7FEFF 		bl	SPI_1_SpiUartReadRxData
 152              	.LVL11:
 153 0032 0A4B     		ldr	r3, .L12+16
 154 0034 1855     		strb	r0, [r3, r4]
1207:main.c        ****                 rxMessage.buf[i] = (uint8_t) SPI_1_SpiUartReadRxData();            
 155              		.loc 1 1207 0 discriminator 3
 156 0036 0134     		adds	r4, r4, #1
 157              	.LVL12:
 158              	.L10:
1207:main.c        ****                 rxMessage.buf[i] = (uint8_t) SPI_1_SpiUartReadRxData();            
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 25


 159              		.loc 1 1207 0 is_stmt 0 discriminator 1
 160 0038 1A2C     		cmp	r4, #26
 161 003a F8D9     		bls	.L11
1209:main.c        ****             }
1210:main.c        ****             
1211:main.c        ****             /* Clear out all the bytes in the receive side so they can be filled in again */
1212:main.c        ****             SPI_1_SpiUartClearRxBuffer();  
 162              		.loc 1 1212 0 is_stmt 1
 163 003c FFF7FEFF 		bl	SPI_1_SpiUartClearRxBuffer
 164              	.LVL13:
1213:main.c        ****             
1214:main.c        ****             /* Clear out any remaining bytes in the transmit buffer, in case the message transfer w
1215:main.c        ****             SPI_1_SpiUartClearTxBuffer();
 165              		.loc 1 1215 0
 166 0040 FFF7FEFF 		bl	SPI_1_SpiUartClearTxBuffer
 167              	.LVL14:
1216:main.c        ****             
1217:main.c        ****             /* Set the state to indicate to the messaging thread that it's time to load the TX buff
1218:main.c        ****             txMessageState = txmsClear;        
 168              		.loc 1 1218 0
 169 0044 0022     		movs	r2, #0
 170 0046 034B     		ldr	r3, .L12+8
 171 0048 1A70     		strb	r2, [r3]
 172              	.LVL15:
 173              	.L7:
1219:main.c        ****             break;
1220:main.c        ****             
1221:main.c        ****     } 
1222:main.c        ****         
1223:main.c        **** }
 174              		.loc 1 1223 0
 175              		@ sp needed
 176 004a 10BD     		pop	{r4, pc}
 177              	.L13:
 178              		.align	2
 179              	.L12:
 180 004c 00000000 		.word	.LANCHOR1
 181 0050 00000000 		.word	LastMessageTimeSeconds
 182 0054 00000000 		.word	txMessageState
 183 0058 00000000 		.word	txMessage
 184 005c 00000000 		.word	rxMessage
 185              		.cfi_endproc
 186              	.LFE45:
 187              		.size	SPI_SS_IsrHandler, .-SPI_SS_IsrHandler
 188              		.section	.text.AssertFault,"ax",%progbits
 189              		.align	2
 190              		.global	AssertFault
 191              		.code	16
 192              		.thumb_func
 193              		.type	AssertFault, %function
 194              	AssertFault:
 195              	.LFB32:
 319:main.c        ****  
 196              		.loc 1 319 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 26


 200              		@ link register save eliminated.
 201              	.LVL16:
 321:main.c        ****      
 202              		.loc 1 321 0
 203 0000 0028     		cmp	r0, #0
 204 0002 03D1     		bne	.L18
 325:main.c        ****             break;        
 205              		.loc 1 325 0
 206 0004 0022     		movs	r2, #0
 207 0006 044B     		ldr	r3, .L19
 208 0008 1A70     		strb	r2, [r3]
 326:main.c        ****         
 209              		.loc 1 326 0
 210 000a 03E0     		b	.L14
 211              	.L18:
 330:main.c        ****             break;        
 212              		.loc 1 330 0
 213 000c 024B     		ldr	r3, .L19
 214 000e 1A78     		ldrb	r2, [r3]
 215 0010 1043     		orrs	r0, r2
 216              	.LVL17:
 217 0012 1870     		strb	r0, [r3]
 218              	.L14:
 333:main.c        **** 
 219              		.loc 1 333 0
 220              		@ sp needed
 221 0014 7047     		bx	lr
 222              	.L20:
 223 0016 C046     		.align	2
 224              	.L19:
 225 0018 00000000 		.word	FaultState
 226              		.cfi_endproc
 227              	.LFE32:
 228              		.size	AssertFault, .-AssertFault
 229              		.section	.text.ClearFault,"ax",%progbits
 230              		.align	2
 231              		.global	ClearFault
 232              		.code	16
 233              		.thumb_func
 234              		.type	ClearFault, %function
 235              	ClearFault:
 236              	.LFB33:
 346:main.c        ****  
 237              		.loc 1 346 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242              	.LVL18:
 348:main.c        ****      
 243              		.loc 1 348 0
 244 0000 0028     		cmp	r0, #0
 245 0002 03D1     		bne	.L25
 352:main.c        ****             break;        
 246              		.loc 1 352 0
 247 0004 0022     		movs	r2, #0
 248 0006 044B     		ldr	r3, .L26
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 27


 249 0008 1A70     		strb	r2, [r3]
 353:main.c        ****         
 250              		.loc 1 353 0
 251 000a 03E0     		b	.L21
 252              	.L25:
 357:main.c        ****             break;        
 253              		.loc 1 357 0
 254 000c 024A     		ldr	r2, .L26
 255 000e 1378     		ldrb	r3, [r2]
 256 0010 8343     		bics	r3, r0
 257 0012 1370     		strb	r3, [r2]
 258              	.L21:
 360:main.c        **** 
 259              		.loc 1 360 0
 260              		@ sp needed
 261 0014 7047     		bx	lr
 262              	.L27:
 263 0016 C046     		.align	2
 264              	.L26:
 265 0018 00000000 		.word	FaultState
 266              		.cfi_endproc
 267              	.LFE33:
 268              		.size	ClearFault, .-ClearFault
 269              		.global	__aeabi_f2iz
 270              		.section	.text.MotorCurrentRead,"ax",%progbits
 271              		.align	2
 272              		.global	MotorCurrentRead
 273              		.code	16
 274              		.thumb_func
 275              		.type	MotorCurrentRead, %function
 276              	MotorCurrentRead:
 277              	.LFB34:
 372:main.c        ****     
 278              		.loc 1 372 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282 0000 10B5     		push	{r4, lr}
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 4, -8
 285              		.cfi_offset 14, -4
 377:main.c        ****     
 286              		.loc 1 377 0
 287 0002 4020     		movs	r0, #64
 288 0004 FFF7FEFF 		bl	getCurrent_mA
 289              	.LVL19:
 380:main.c        **** }
 290              		.loc 1 380 0
 291 0008 FFF7FEFF 		bl	__aeabi_f2iz
 292              	.LVL20:
 293 000c 00B2     		sxth	r0, r0
 294 000e 014B     		ldr	r3, .L29
 295 0010 1880     		strh	r0, [r3]
 381:main.c        **** 
 296              		.loc 1 381 0
 297              		@ sp needed
 298 0012 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 28


 299              	.L30:
 300              		.align	2
 301              	.L29:
 302 0014 00000000 		.word	MotorCurrent
 303              		.cfi_endproc
 304              	.LFE34:
 305              		.size	MotorCurrentRead, .-MotorCurrentRead
 306              		.section	.text.PWM_Set,"ax",%progbits
 307              		.align	2
 308              		.global	PWM_Set
 309              		.code	16
 310              		.thumb_func
 311              		.type	PWM_Set, %function
 312              	PWM_Set:
 313              	.LFB36:
 602:main.c        ****         
 314              		.loc 1 602 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              	.LVL21:
 319 0000 10B5     		push	{r4, lr}
 320              		.cfi_def_cfa_offset 8
 321              		.cfi_offset 4, -8
 322              		.cfi_offset 14, -4
 606:main.c        **** }
 323              		.loc 1 606 0
 324 0002 C823     		movs	r3, #200
 325 0004 9B00     		lsls	r3, r3, #2
 326 0006 9C46     		mov	ip, r3
 327 0008 6044     		add	r0, r0, ip
 328              	.LVL22:
 329 000a FFF7FEFF 		bl	PWM_1_WriteCompare
 330              	.LVL23:
 607:main.c        **** 
 331              		.loc 1 607 0
 332              		@ sp needed
 333 000e 10BD     		pop	{r4, pc}
 334              		.cfi_endproc
 335              	.LFE36:
 336              		.size	PWM_Set, .-PWM_Set
 337              		.section	.text.GetPosition,"ax",%progbits
 338              		.align	2
 339              		.global	GetPosition
 340              		.code	16
 341              		.thumb_func
 342              		.type	GetPosition, %function
 343              	GetPosition:
 344              	.LFB37:
 619:main.c        ****     
 345              		.loc 1 619 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349 0000 10B5     		push	{r4, lr}
 350              		.cfi_def_cfa_offset 8
 351              		.cfi_offset 4, -8
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 29


 352              		.cfi_offset 14, -4
 625:main.c        ****     
 353              		.loc 1 625 0
 354 0002 FFF7FEFF 		bl	Counter_1_ReadCounter
 355              	.LVL24:
 356 0006 0B4B     		ldr	r3, .L35
 357 0008 9860     		str	r0, [r3, #8]
 629:main.c        ****         
 358              		.loc 1 629 0
 359 000a 9A68     		ldr	r2, [r3, #8]
 360 000c 0A4B     		ldr	r3, .L35+4
 361 000e 9A42     		cmp	r2, r3
 362 0010 06D9     		bls	.L33
 631:main.c        ****         
 363              		.loc 1 631 0
 364 0012 084A     		ldr	r2, .L35
 365 0014 9368     		ldr	r3, [r2, #8]
 366 0016 0949     		ldr	r1, .L35+8
 367 0018 8C46     		mov	ip, r1
 368 001a 6344     		add	r3, r3, ip
 369 001c D360     		str	r3, [r2, #12]
 370 001e 02E0     		b	.L34
 371              	.L33:
 636:main.c        ****     }
 372              		.loc 1 636 0
 373 0020 044B     		ldr	r3, .L35
 374 0022 9A68     		ldr	r2, [r3, #8]
 375 0024 DA60     		str	r2, [r3, #12]
 376              	.L34:
 640:main.c        ****     return result;
 377              		.loc 1 640 0
 378 0026 034B     		ldr	r3, .L35
 379 0028 D968     		ldr	r1, [r3, #12]
 380 002a 054A     		ldr	r2, .L35+12
 381 002c 1160     		str	r1, [r2]
 641:main.c        **** }
 382              		.loc 1 641 0
 383 002e D868     		ldr	r0, [r3, #12]
 642:main.c        **** 
 384              		.loc 1 642 0
 385              		@ sp needed
 386 0030 10BD     		pop	{r4, pc}
 387              	.L36:
 388 0032 C046     		.align	2
 389              	.L35:
 390 0034 00000000 		.word	.LANCHOR1
 391 0038 FFFFEF00 		.word	15728639
 392 003c 010000FF 		.word	-16777215
 393 0040 00000000 		.word	Position
 394              		.cfi_endproc
 395              	.LFE37:
 396              		.size	GetPosition, .-GetPosition
 397              		.section	.text.runRateGroup3_SPI,"ax",%progbits
 398              		.align	2
 399              		.global	runRateGroup3_SPI
 400              		.code	16
 401              		.thumb_func
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 30


 402              		.type	runRateGroup3_SPI, %function
 403              	runRateGroup3_SPI:
 404              	.LFB35:
 393:main.c        ****  
 405              		.loc 1 393 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409 0000 70B5     		push	{r4, r5, r6, lr}
 410              		.cfi_def_cfa_offset 16
 411              		.cfi_offset 4, -16
 412              		.cfi_offset 5, -12
 413              		.cfi_offset 6, -8
 414              		.cfi_offset 14, -4
 403:main.c        ****         return;
 415              		.loc 1 403 0
 416 0002 954B     		ldr	r3, .L54
 417 0004 1B68     		ldr	r3, [r3]
 418 0006 DB07     		lsls	r3, r3, #31
 419 0008 00D5     		bpl	.LCB323
 420 000a 23E1     		b	.L37	@long jump
 421              	.LCB323:
 407:main.c        ****      
 422              		.loc 1 407 0
 423 000c 934B     		ldr	r3, .L54+4
 424 000e 1B78     		ldrb	r3, [r3]
 425 0010 002B     		cmp	r3, #0
 426 0012 00D0     		beq	.LCB328
 427 0014 1EE1     		b	.L37	@long jump
 428              	.LCB328:
 413:main.c        ****             opcode   = (rxMessage_opcodes_t) rxMessage.overlay.opcode;
 429              		.loc 1 413 0
 430 0016 924B     		ldr	r3, .L54+8
 431 0018 5878     		ldrb	r0, [r3, #1]
 432              	.LVL25:
 414:main.c        ****             
 433              		.loc 1 414 0
 434 001a 9C78     		ldrb	r4, [r3, #2]
 435              	.LVL26:
 417:main.c        ****                 size = sizeof(txMessage.buf);                            
 436              		.loc 1 417 0
 437 001c 1B28     		cmp	r0, #27
 438 001e 00D9     		bls	.L40
 418:main.c        ****         
 439              		.loc 1 418 0
 440 0020 1B20     		movs	r0, #27
 441              	.LVL27:
 442              	.L40:
 421:main.c        ****                 checksum += rxMessage.buf[i]; 
 443              		.loc 1 421 0
 444 0022 0022     		movs	r2, #0
 445 0024 0023     		movs	r3, #0
 446 0026 05E0     		b	.L41
 447              	.LVL28:
 448              	.L42:
 422:main.c        **** 
 449              		.loc 1 422 0 discriminator 3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 31


 450 0028 8D49     		ldr	r1, .L54+8
 451 002a C95C     		ldrb	r1, [r1, r3]
 452 002c 5218     		adds	r2, r2, r1
 453              	.LVL29:
 454 002e D2B2     		uxtb	r2, r2
 455              	.LVL30:
 421:main.c        ****                 checksum += rxMessage.buf[i]; 
 456              		.loc 1 421 0 discriminator 3
 457 0030 0133     		adds	r3, r3, #1
 458              	.LVL31:
 459 0032 DBB2     		uxtb	r3, r3
 460              	.LVL32:
 461              	.L41:
 421:main.c        ****                 checksum += rxMessage.buf[i]; 
 462              		.loc 1 421 0 is_stmt 0 discriminator 1
 463 0034 9842     		cmp	r0, r3
 464 0036 F7D8     		bhi	.L42
 425:main.c        ****                 
 465              		.loc 1 425 0 is_stmt 1
 466 0038 002A     		cmp	r2, #0
 467 003a 09D0     		beq	.L43
 427:main.c        ****                 txMessage.msg.size = sizeof(txMessage_t);
 468              		.loc 1 427 0
 469 003c 894B     		ldr	r3, .L54+12
 470              	.LVL33:
 471 003e 5C71     		strb	r4, [r3, #5]
 428:main.c        ****                 ChecksumErrors++;
 472              		.loc 1 428 0
 473 0040 1B22     		movs	r2, #27
 474              	.LVL34:
 475 0042 1A71     		strb	r2, [r3, #4]
 429:main.c        ****                 
 476              		.loc 1 429 0
 477 0044 884A     		ldr	r2, .L54+16
 478 0046 1388     		ldrh	r3, [r2]
 479 0048 0133     		adds	r3, r3, #1
 480 004a 9BB2     		uxth	r3, r3
 481 004c 1380     		strh	r3, [r2]
 482 004e 9EE0     		b	.L44
 483              	.LVL35:
 484              	.L43:
 435:main.c        ****                 
 485              		.loc 1 435 0
 486 0050 631E     		subs	r3, r4, #1
 487              	.LVL36:
 488 0052 DBB2     		uxtb	r3, r3
 489 0054 022B     		cmp	r3, #2
 490 0056 00D9     		bls	.LCB394
 491 0058 99E0     		b	.L44	@long jump
 492              	.LCB394:
 437:main.c        ****                     
 493              		.loc 1 437 0
 494 005a 022C     		cmp	r4, #2
 495 005c 2CD0     		beq	.L45
 496 005e 032C     		cmp	r4, #3
 497 0060 79D0     		beq	.L46
 498 0062 012C     		cmp	r4, #1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 32


 499 0064 00D0     		beq	.LCB400
 500 0066 92E0     		b	.L44	@long jump
 501              	.LCB400:
 443:main.c        ****                            
 502              		.loc 1 443 0
 503 0068 FFF7FEFF 		bl	GetPosition
 504              	.LVL37:
 505 006c 7F4B     		ldr	r3, .L54+20
 506 006e 1860     		str	r0, [r3]
 446:main.c        ****                             PID_EffectiveSetpoint = LastPosition;                                  
 507              		.loc 1 446 0
 508 0070 1968     		ldr	r1, [r3]
 509 0072 7F4A     		ldr	r2, .L54+24
 510 0074 1160     		str	r1, [r2]
 447:main.c        ****                             
 511              		.loc 1 447 0
 512 0076 1A68     		ldr	r2, [r3]
 513 0078 7E4B     		ldr	r3, .L54+28
 514 007a 1A60     		str	r2, [r3]
 450:main.c        ****                             PID_Enabled = false;
 515              		.loc 1 450 0
 516 007c 0023     		movs	r3, #0
 517 007e 7E4A     		ldr	r2, .L54+32
 518 0080 1370     		strb	r3, [r2]
 451:main.c        **** 
 519              		.loc 1 451 0
 520 0082 7E4A     		ldr	r2, .L54+36
 521 0084 1370     		strb	r3, [r2]
 454:main.c        ****                             
 522              		.loc 1 454 0
 523 0086 7E4A     		ldr	r2, .L54+40
 524 0088 1370     		strb	r3, [r2]
 457:main.c        ****                             limitIterm = rxMessage.config.limitIterm;
 525              		.loc 1 457 0
 526 008a 754B     		ldr	r3, .L54+8
 527 008c 197C     		ldrb	r1, [r3, #16]
 528 008e 5A7C     		ldrb	r2, [r3, #17]
 529 0090 1202     		lsls	r2, r2, #8
 530 0092 0A43     		orrs	r2, r1
 531 0094 7B49     		ldr	r1, .L54+44
 532 0096 0A80     		strh	r2, [r1]
 458:main.c        ****                                 
 533              		.loc 1 458 0
 534 0098 997C     		ldrb	r1, [r3, #18]
 535 009a DA7C     		ldrb	r2, [r3, #19]
 536 009c 1202     		lsls	r2, r2, #8
 537 009e 0A43     		orrs	r2, r1
 538 00a0 7949     		ldr	r1, .L54+48
 539 00a2 0A80     		strh	r2, [r1]
 473:main.c        ****                             ConfigSequence = rxMessage.config.sequence;
 540              		.loc 1 473 0
 541 00a4 0221     		movs	r1, #2
 542 00a6 794A     		ldr	r2, .L54+52
 543 00a8 1170     		strb	r1, [r2]
 474:main.c        ****                         
 544              		.loc 1 474 0
 545 00aa DA78     		ldrb	r2, [r3, #3]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 33


 546 00ac 784B     		ldr	r3, .L54+56
 547 00ae 1A70     		strb	r2, [r3]
 477:main.c        ****                             break;
 548              		.loc 1 477 0
 549 00b0 0020     		movs	r0, #0
 550 00b2 FFF7FEFF 		bl	ClearFault
 551              	.LVL38:
 478:main.c        **** 
 552              		.loc 1 478 0
 553 00b6 6AE0     		b	.L44
 554              	.LVL39:
 555              	.L45:
 482:main.c        ****                             
 556              		.loc 1 482 0
 557 00b8 6948     		ldr	r0, .L54+8
 558              	.LVL40:
 559 00ba C378     		ldrb	r3, [r0, #3]
 560 00bc 5A1E     		subs	r2, r3, #1
 561 00be 9341     		sbcs	r3, r3, r2
 562              	.LVL41:
 563 00c0 6E4A     		ldr	r2, .L54+36
 564 00c2 1370     		strb	r3, [r2]
 485:main.c        ****                                 
 565              		.loc 1 485 0
 566 00c4 0379     		ldrb	r3, [r0, #4]
 567 00c6 4279     		ldrb	r2, [r0, #5]
 568 00c8 1202     		lsls	r2, r2, #8
 569 00ca 1A43     		orrs	r2, r3
 570 00cc 8379     		ldrb	r3, [r0, #6]
 571 00ce 1B04     		lsls	r3, r3, #16
 572 00d0 1343     		orrs	r3, r2
 573 00d2 1A00     		movs	r2, r3
 574 00d4 C379     		ldrb	r3, [r0, #7]
 575 00d6 1B06     		lsls	r3, r3, #24
 576 00d8 1343     		orrs	r3, r2
 577 00da 654A     		ldr	r2, .L54+24
 578 00dc 1268     		ldr	r2, [r2]
 579 00de 9342     		cmp	r3, r2
 580 00e0 33D0     		beq	.L48
 488:main.c        ****                                 LastMoveStartTimeUsec = UptimeMicroseconds;
 581              		.loc 1 488 0
 582 00e2 6C4B     		ldr	r3, .L54+60
 583 00e4 0122     		movs	r2, #1
 584 00e6 1A74     		strb	r2, [r3, #16]
 489:main.c        ****                                 
 585              		.loc 1 489 0
 586 00e8 9869     		ldr	r0, [r3, #24]
 587 00ea D969     		ldr	r1, [r3, #28]
 588 00ec 1862     		str	r0, [r3, #32]
 492:main.c        ****                                 
 589              		.loc 1 492 0
 590 00ee FFF7FEFF 		bl	GetPosition
 591              	.LVL42:
 592 00f2 5E4C     		ldr	r4, .L54+20
 593              	.LVL43:
 594 00f4 2060     		str	r0, [r4]
 495:main.c        ****                                 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 34


 595              		.loc 1 495 0
 596 00f6 5A48     		ldr	r0, .L54+8
 597 00f8 0379     		ldrb	r3, [r0, #4]
 598 00fa 4279     		ldrb	r2, [r0, #5]
 599 00fc 1202     		lsls	r2, r2, #8
 600 00fe 1A43     		orrs	r2, r3
 601 0100 8379     		ldrb	r3, [r0, #6]
 602 0102 1B04     		lsls	r3, r3, #16
 603 0104 1343     		orrs	r3, r2
 604 0106 1A00     		movs	r2, r3
 605 0108 C379     		ldrb	r3, [r0, #7]
 606 010a 1B06     		lsls	r3, r3, #24
 607 010c 1343     		orrs	r3, r2
 608 010e 584D     		ldr	r5, .L54+24
 609 0110 2B60     		str	r3, [r5]
 499:main.c        ****                                 
 610              		.loc 1 499 0
 611 0112 2268     		ldr	r2, [r4]
 612 0114 574B     		ldr	r3, .L54+28
 613 0116 1A60     		str	r2, [r3]
 502:main.c        ****                                 
 614              		.loc 1 502 0
 615 0118 0020     		movs	r0, #0
 616 011a FFF7FEFF 		bl	Index_Counter_1_WriteCounter
 617              	.LVL44:
 507:main.c        ****                                 if (distance < 0) {
 618              		.loc 1 507 0
 619 011e 2B68     		ldr	r3, [r5]
 620 0120 2268     		ldr	r2, [r4]
 621 0122 9B1A     		subs	r3, r3, r2
 622              	.LVL45:
 508:main.c        ****                                     distance *= -1;
 623              		.loc 1 508 0
 624 0124 00D5     		bpl	.L49
 509:main.c        ****                                 }
 625              		.loc 1 509 0
 626 0126 5B42     		rsbs	r3, r3, #0
 627              	.LVL46:
 628              	.L49:
 512:main.c        ****                                     iterm_delay = ((distance / 16) + ITERM_90PCT_FIT_CONSTANT) * 10
 629              		.loc 1 512 0
 630 0128 322B     		cmp	r3, #50
 631 012a 0BDD     		ble	.L50
 513:main.c        ****                                     //iterm_delay = distance >> 4;  // Shift by 4 is equal to div b
 632              		.loc 1 513 0
 633 012c DA17     		asrs	r2, r3, #31
 634 012e 0F21     		movs	r1, #15
 635 0130 0A40     		ands	r2, r1
 636 0132 D318     		adds	r3, r2, r3
 637              	.LVL47:
 638 0134 1B11     		asrs	r3, r3, #4
 639 0136 0D33     		adds	r3, r3, #13
 640 0138 FA22     		movs	r2, #250
 641 013a 9200     		lsls	r2, r2, #2
 642 013c 5343     		muls	r3, r2
 643 013e 564A     		ldr	r2, .L54+64
 644 0140 1360     		str	r3, [r2]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 35


 645 0142 02E0     		b	.L48
 646              	.LVL48:
 647              	.L50:
 516:main.c        ****                                 }
 648              		.loc 1 516 0
 649 0144 0022     		movs	r2, #0
 650 0146 544B     		ldr	r3, .L54+64
 651              	.LVL49:
 652 0148 1A60     		str	r2, [r3]
 653              	.L48:
 527:main.c        ****                             break;
 654              		.loc 1 527 0
 655 014a 454B     		ldr	r3, .L54+8
 656 014c 0822     		movs	r2, #8
 657 014e 9A56     		ldrsb	r2, [r3, r2]
 658 0150 4B4B     		ldr	r3, .L54+40
 659 0152 1A70     		strb	r2, [r3]
 528:main.c        ****                         
 660              		.loc 1 528 0
 661 0154 1BE0     		b	.L44
 662              	.LVL50:
 663              	.L46:
 532:main.c        ****                             LastPosition = rxMessage.status.setpoint;
 664              		.loc 1 532 0
 665 0156 424C     		ldr	r4, .L54+8
 666              	.LVL51:
 667 0158 2179     		ldrb	r1, [r4, #4]
 668 015a 6379     		ldrb	r3, [r4, #5]
 669 015c 1B02     		lsls	r3, r3, #8
 670 015e 0B43     		orrs	r3, r1
 671 0160 1A00     		movs	r2, r3
 672              	.LVL52:
 673 0162 A079     		ldrb	r0, [r4, #6]
 674              	.LVL53:
 675 0164 0004     		lsls	r0, r0, #16
 676 0166 0300     		movs	r3, r0
 677 0168 1343     		orrs	r3, r2
 678 016a E079     		ldrb	r0, [r4, #7]
 679 016c 0006     		lsls	r0, r0, #24
 680 016e 1843     		orrs	r0, r3
 681 0170 FFF7FEFF 		bl	Counter_1_WriteCounter
 682              	.LVL54:
 533:main.c        ****                             break;                                        
 683              		.loc 1 533 0
 684 0174 2379     		ldrb	r3, [r4, #4]
 685 0176 6279     		ldrb	r2, [r4, #5]
 686 0178 1202     		lsls	r2, r2, #8
 687 017a 1A43     		orrs	r2, r3
 688 017c A379     		ldrb	r3, [r4, #6]
 689 017e 1B04     		lsls	r3, r3, #16
 690 0180 1343     		orrs	r3, r2
 691 0182 1A00     		movs	r2, r3
 692 0184 E379     		ldrb	r3, [r4, #7]
 693 0186 1B06     		lsls	r3, r3, #24
 694 0188 1343     		orrs	r3, r2
 695 018a 384A     		ldr	r2, .L54+20
 696 018c 1360     		str	r3, [r2]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 36


 697              	.L44:
 544:main.c        ****             
 698              		.loc 1 544 0
 699 018e FFF7FEFF 		bl	GetPosition
 700              	.LVL55:
 701 0192 4249     		ldr	r1, .L54+68
 702 0194 0860     		str	r0, [r1]
 547:main.c        ****             txMessage.msg.version0        = FIRMWARE_REV_0;
 703              		.loc 1 547 0
 704 0196 334B     		ldr	r3, .L54+12
 705 0198 0022     		movs	r2, #0
 706 019a 1A70     		strb	r2, [r3]
 548:main.c        ****             txMessage.msg.version1        = FIRMWARE_REV_1;
 707              		.loc 1 548 0
 708 019c 5A70     		strb	r2, [r3, #1]
 549:main.c        ****             txMessage.msg.version2        = FIRMWARE_REV_2;
 709              		.loc 1 549 0
 710 019e 0232     		adds	r2, r2, #2
 711 01a0 9A70     		strb	r2, [r3, #2]
 550:main.c        ****             txMessage.msg.size            = sizeof(txMessage_t);
 712              		.loc 1 550 0
 713 01a2 0120     		movs	r0, #1
 714 01a4 D870     		strb	r0, [r3, #3]
 551:main.c        ****             txMessage.msg.opcode          = opStatus;
 715              		.loc 1 551 0
 716 01a6 1A30     		adds	r0, r0, #26
 717 01a8 1871     		strb	r0, [r3, #4]
 552:main.c        ****             txMessage.msg.state           = (uint8_t) ConfigState;
 718              		.loc 1 552 0
 719 01aa 5A71     		strb	r2, [r3, #5]
 553:main.c        ****             txMessage.msg.fault           = (uint8_t) FaultState;
 720              		.loc 1 553 0
 721 01ac 374A     		ldr	r2, .L54+52
 722 01ae 1278     		ldrb	r2, [r2]
 723 01b0 9A71     		strb	r2, [r3, #6]
 554:main.c        ****             txMessage.msg.checksum_errors = ChecksumErrors;
 724              		.loc 1 554 0
 725 01b2 3B4A     		ldr	r2, .L54+72
 726 01b4 1278     		ldrb	r2, [r2]
 727 01b6 DA71     		strb	r2, [r3, #7]
 555:main.c        ****             txMessage.msg.sequence        = ConfigSequence;
 728              		.loc 1 555 0
 729 01b8 2B4A     		ldr	r2, .L54+16
 730 01ba 1288     		ldrh	r2, [r2]
 731 01bc 92B2     		uxth	r2, r2
 732 01be 5A72     		strb	r2, [r3, #9]
 733 01c0 120A     		lsrs	r2, r2, #8
 734 01c2 9A72     		strb	r2, [r3, #10]
 556:main.c        ****             txMessage.msg.position        = Position;
 735              		.loc 1 556 0
 736 01c4 324A     		ldr	r2, .L54+56
 737 01c6 1278     		ldrb	r2, [r2]
 738 01c8 1A72     		strb	r2, [r3, #8]
 557:main.c        ****             txMessage.msg.pwm             = Output;
 739              		.loc 1 557 0
 740 01ca 0A68     		ldr	r2, [r1]
 741 01cc 5A73     		strb	r2, [r3, #13]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 37


 742 01ce 100A     		lsrs	r0, r2, #8
 743 01d0 9873     		strb	r0, [r3, #14]
 744 01d2 100C     		lsrs	r0, r2, #16
 745 01d4 D873     		strb	r0, [r3, #15]
 746 01d6 120E     		lsrs	r2, r2, #24
 747 01d8 1A74     		strb	r2, [r3, #16]
 558:main.c        ****             txMessage.msg.iterm           = iterm;
 748              		.loc 1 558 0
 749 01da 324A     		ldr	r2, .L54+76
 750 01dc 1268     		ldr	r2, [r2]
 751 01de 92B2     		uxth	r2, r2
 752 01e0 5A74     		strb	r2, [r3, #17]
 753 01e2 120A     		lsrs	r2, r2, #8
 754 01e4 9A74     		strb	r2, [r3, #18]
 559:main.c        ****             txMessage.msg.motor_current   = MotorCurrent;                  
 755              		.loc 1 559 0
 756 01e6 304A     		ldr	r2, .L54+80
 757 01e8 1078     		ldrb	r0, [r2]
 758 01ea D874     		strb	r0, [r3, #19]
 759 01ec 5078     		ldrb	r0, [r2, #1]
 760 01ee 1875     		strb	r0, [r3, #20]
 761 01f0 9078     		ldrb	r0, [r2, #2]
 762 01f2 5875     		strb	r0, [r3, #21]
 763 01f4 D278     		ldrb	r2, [r2, #3]
 764 01f6 9A75     		strb	r2, [r3, #22]
 560:main.c        ****             txMessage.msg.last_move_time  = LastMoveTimeUsec;
 765              		.loc 1 560 0
 766 01f8 2C4A     		ldr	r2, .L54+84
 767 01fa 1288     		ldrh	r2, [r2]
 768 01fc DA72     		strb	r2, [r3, #11]
 769 01fe 120A     		lsrs	r2, r2, #8
 770 0200 1A73     		strb	r2, [r3, #12]
 561:main.c        ****             
 771              		.loc 1 561 0
 772 0202 244A     		ldr	r2, .L54+60
 773 0204 1900     		movs	r1, r3
 774 0206 2420     		movs	r0, #36
 775 0208 105C     		ldrb	r0, [r2, r0]
 776 020a D875     		strb	r0, [r3, #23]
 777 020c 2523     		movs	r3, #37
 778 020e D35C     		ldrb	r3, [r2, r3]
 779 0210 0B76     		strb	r3, [r1, #24]
 780 0212 2623     		movs	r3, #38
 781 0214 D35C     		ldrb	r3, [r2, r3]
 782 0216 4B76     		strb	r3, [r1, #25]
 783 0218 2723     		movs	r3, #39
 784 021a D35C     		ldrb	r3, [r2, r3]
 785 021c 8B76     		strb	r3, [r1, #26]
 786              	.LVL56:
 564:main.c        ****                 checksum += txMessage.buf[i]; 
 787              		.loc 1 564 0
 788 021e 0022     		movs	r2, #0
 789 0220 0023     		movs	r3, #0
 790 0222 05E0     		b	.L51
 791              	.LVL57:
 792              	.L52:
 565:main.c        ****                 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 38


 793              		.loc 1 565 0 discriminator 3
 794 0224 0F49     		ldr	r1, .L54+12
 795 0226 C95C     		ldrb	r1, [r1, r3]
 796 0228 5218     		adds	r2, r2, r1
 797              	.LVL58:
 798 022a D2B2     		uxtb	r2, r2
 799              	.LVL59:
 564:main.c        ****                 checksum += txMessage.buf[i]; 
 800              		.loc 1 564 0 discriminator 3
 801 022c 0133     		adds	r3, r3, #1
 802              	.LVL60:
 803 022e DBB2     		uxtb	r3, r3
 804              	.LVL61:
 805              	.L51:
 564:main.c        ****                 checksum += txMessage.buf[i]; 
 806              		.loc 1 564 0 is_stmt 0 discriminator 1
 807 0230 1A2B     		cmp	r3, #26
 808 0232 F7D9     		bls	.L52
 568:main.c        ****                 
 809              		.loc 1 568 0 is_stmt 1
 810 0234 0B48     		ldr	r0, .L54+12
 811 0236 5242     		rsbs	r2, r2, #0
 812              	.LVL62:
 813 0238 0270     		strb	r2, [r0]
 572:main.c        **** 
 814              		.loc 1 572 0
 815 023a 1B21     		movs	r1, #27
 816 023c FFF7FEFF 		bl	SPI_1_SpiUartPutArray
 817              	.LVL63:
 575:main.c        ****             
 818              		.loc 1 575 0
 819 0240 0122     		movs	r2, #1
 820 0242 064B     		ldr	r3, .L54+4
 821 0244 1A70     		strb	r2, [r3]
 578:main.c        ****                 ClearFault(fsNONE);
 822              		.loc 1 578 0
 823 0246 064B     		ldr	r3, .L54+8
 824 0248 5B7A     		ldrb	r3, [r3, #9]
 825 024a 002B     		cmp	r3, #0
 826 024c 02D0     		beq	.L37
 579:main.c        ****         
 827              		.loc 1 579 0
 828 024e 0020     		movs	r0, #0
 829 0250 FFF7FEFF 		bl	ClearFault
 830              	.LVL64:
 831              	.L37:
 589:main.c        ****     
 832              		.loc 1 589 0
 833              		@ sp needed
 834 0254 70BD     		pop	{r4, r5, r6, pc}
 835              	.L55:
 836 0256 C046     		.align	2
 837              	.L54:
 838 0258 24000740 		.word	1074200612
 839 025c 00000000 		.word	txMessageState
 840 0260 00000000 		.word	rxMessage
 841 0264 00000000 		.word	txMessage
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 39


 842 0268 00000000 		.word	ChecksumErrors
 843 026c 00000000 		.word	LastPosition
 844 0270 00000000 		.word	PID_Setpoint
 845 0274 00000000 		.word	PID_EffectiveSetpoint
 846 0278 00000000 		.word	PID_Was_Enabled
 847 027c 00000000 		.word	PID_Enabled
 848 0280 00000000 		.word	Jog
 849 0284 00000000 		.word	limitOutput
 850 0288 00000000 		.word	limitIterm
 851 028c 00000000 		.word	ConfigState
 852 0290 00000000 		.word	ConfigSequence
 853 0294 00000000 		.word	.LANCHOR1
 854 0298 00000000 		.word	iterm_delay
 855 029c 00000000 		.word	Position
 856 02a0 00000000 		.word	FaultState
 857 02a4 00000000 		.word	Output
 858 02a8 00000000 		.word	iterm
 859 02ac 00000000 		.word	MotorCurrent
 860              		.cfi_endproc
 861              	.LFE35:
 862              		.size	runRateGroup3_SPI, .-runRateGroup3_SPI
 863              		.section	.text.PID_Initialize,"ax",%progbits
 864              		.align	2
 865              		.global	PID_Initialize
 866              		.code	16
 867              		.thumb_func
 868              		.type	PID_Initialize, %function
 869              	PID_Initialize:
 870              	.LFB38:
 654:main.c        ****     
 871              		.loc 1 654 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875 0000 10B5     		push	{r4, lr}
 876              		.cfi_def_cfa_offset 8
 877              		.cfi_offset 4, -8
 878              		.cfi_offset 14, -4
 657:main.c        ****     LastPosition = Position;
 879              		.loc 1 657 0
 880 0002 FFF7FEFF 		bl	GetPosition
 881              	.LVL65:
 882 0006 064B     		ldr	r3, .L57
 883 0008 1860     		str	r0, [r3]
 658:main.c        ****     
 884              		.loc 1 658 0
 885 000a 1A68     		ldr	r2, [r3]
 886 000c 054B     		ldr	r3, .L57+4
 887 000e 1A60     		str	r2, [r3]
 662:main.c        ****     
 888              		.loc 1 662 0
 889 0010 1A68     		ldr	r2, [r3]
 890 0012 054B     		ldr	r3, .L57+8
 891 0014 1A60     		str	r2, [r3]
 666:main.c        **** }    
 892              		.loc 1 666 0
 893 0016 0022     		movs	r2, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 40


 894 0018 044B     		ldr	r3, .L57+12
 895 001a 1A60     		str	r2, [r3]
 667:main.c        **** 
 896              		.loc 1 667 0
 897              		@ sp needed
 898 001c 10BD     		pop	{r4, pc}
 899              	.L58:
 900 001e C046     		.align	2
 901              	.L57:
 902 0020 00000000 		.word	Position
 903 0024 00000000 		.word	LastPosition
 904 0028 00000000 		.word	PID_EffectiveSetpoint
 905 002c 00000000 		.word	iterm
 906              		.cfi_endproc
 907              	.LFE38:
 908              		.size	PID_Initialize, .-PID_Initialize
 909              		.section	.text.PID_SetMode,"ax",%progbits
 910              		.align	2
 911              		.global	PID_SetMode
 912              		.code	16
 913              		.thumb_func
 914              		.type	PID_SetMode, %function
 915              	PID_SetMode:
 916              	.LFB39:
 679:main.c        ****     
 917              		.loc 1 679 0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 921              	.LVL66:
 922 0000 10B5     		push	{r4, lr}
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 4, -8
 925              		.cfi_offset 14, -4
 681:main.c        ****     
 926              		.loc 1 681 0
 927 0002 441E     		subs	r4, r0, #1
 928 0004 6342     		rsbs	r3, r4, #0
 929 0006 5C41     		adcs	r4, r4, r3
 930 0008 E4B2     		uxtb	r4, r4
 931              	.LVL67:
 683:main.c        ****         /*we just went from manual to auto*/
 932              		.loc 1 683 0
 933 000a 0128     		cmp	r0, #1
 934 000c 06D1     		bne	.L60
 683:main.c        ****         /*we just went from manual to auto*/
 935              		.loc 1 683 0 is_stmt 0 discriminator 1
 936 000e 2823     		movs	r3, #40
 937 0010 044A     		ldr	r2, .L61
 938 0012 D35C     		ldrb	r3, [r2, r3]
 939 0014 002B     		cmp	r3, #0
 940 0016 01D1     		bne	.L60
 685:main.c        ****     }
 941              		.loc 1 685 0 is_stmt 1
 942 0018 FFF7FEFF 		bl	PID_Initialize
 943              	.LVL68:
 944              	.L60:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 41


 688:main.c        **** } 
 945              		.loc 1 688 0
 946 001c 2823     		movs	r3, #40
 947 001e 014A     		ldr	r2, .L61
 948 0020 D454     		strb	r4, [r2, r3]
 689:main.c        **** 
 949              		.loc 1 689 0
 950              		@ sp needed
 951              	.LVL69:
 952 0022 10BD     		pop	{r4, pc}
 953              	.L62:
 954              		.align	2
 955              	.L61:
 956 0024 00000000 		.word	.LANCHOR1
 957              		.cfi_endproc
 958              	.LFE39:
 959              		.size	PID_SetMode, .-PID_SetMode
 960              		.section	.text.runRateGroup1_PID,"ax",%progbits
 961              		.align	2
 962              		.global	runRateGroup1_PID
 963              		.code	16
 964              		.thumb_func
 965              		.type	runRateGroup1_PID, %function
 966              	runRateGroup1_PID:
 967              	.LFB40:
 701:main.c        ****      
 968              		.loc 1 701 0
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 0
 971              		@ frame_needed = 0, uses_anonymous_args = 0
 972 0000 10B5     		push	{r4, lr}
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 4, -8
 975              		.cfi_offset 14, -4
 711:main.c        ****         
 976              		.loc 1 711 0
 977 0002 4E4B     		ldr	r3, .L78
 978 0004 1B68     		ldr	r3, [r3]
 979 0006 0133     		adds	r3, r3, #1
 980 0008 0024     		movs	r4, #0
 981 000a 4D4A     		ldr	r2, .L78+4
 982 000c 1068     		ldr	r0, [r2]
 983 000e 5168     		ldr	r1, [r2, #4]
 984 0010 0029     		cmp	r1, #0
 985 0012 03D1     		bne	.L77
 986 0014 A142     		cmp	r1, r4
 987 0016 0BD1     		bne	.L64
 988 0018 9842     		cmp	r0, r3
 989 001a 09D9     		bls	.L64
 990              	.L77:
 714:main.c        ****         PID_Enabled = false;
 991              		.loc 1 714 0
 992 001c C820     		movs	r0, #200
 993 001e 8000     		lsls	r0, r0, #2
 994 0020 FFF7FEFF 		bl	PWM_Set
 995              	.LVL70:
 715:main.c        ****         
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 42


 996              		.loc 1 715 0
 997 0024 0023     		movs	r3, #0
 998 0026 474A     		ldr	r2, .L78+8
 999 0028 1370     		strb	r3, [r2]
 719:main.c        **** 
 1000              		.loc 1 719 0
 1001 002a 474A     		ldr	r2, .L78+12
 1002 002c 1370     		strb	r3, [r2]
 1003 002e 84E0     		b	.L63
 1004              	.L64:
 722:main.c        ****         
 1005              		.loc 1 722 0
 1006 0030 464B     		ldr	r3, .L78+16
 1007 0032 1B78     		ldrb	r3, [r3]
 1008 0034 022B     		cmp	r3, #2
 1009 0036 7CD1     		bne	.L67
 726:main.c        ****         INDEX_OUT_SetDriveMode(INDEX_OUT_DM_STRONG); 
 1010              		.loc 1 726 0
 1011 0038 0620     		movs	r0, #6
 1012 003a FFF7FEFF 		bl	HOME_OUT_SetDriveMode
 1013              	.LVL71:
 727:main.c        **** 
 1014              		.loc 1 727 0
 1015 003e 0620     		movs	r0, #6
 1016 0040 FFF7FEFF 		bl	INDEX_OUT_SetDriveMode
 1017              	.LVL72:
 730:main.c        ****             PID_SetMode(PID_AUTOMATIC);
 1018              		.loc 1 730 0
 1019 0044 424B     		ldr	r3, .L78+20
 1020 0046 1B78     		ldrb	r3, [r3]
 1021 0048 002B     		cmp	r3, #0
 1022 004a 07D1     		bne	.L68
 730:main.c        ****             PID_SetMode(PID_AUTOMATIC);
 1023              		.loc 1 730 0 is_stmt 0 discriminator 1
 1024 004c 3D4A     		ldr	r2, .L78+8
 1025 004e 1278     		ldrb	r2, [r2]
 1026 0050 002A     		cmp	r2, #0
 1027 0052 03D0     		beq	.L68
 731:main.c        ****         } else if (!PID_Enabled && PID_Was_Enabled) {
 1028              		.loc 1 731 0 is_stmt 1
 1029 0054 0120     		movs	r0, #1
 1030 0056 FFF7FEFF 		bl	PID_SetMode
 1031              	.LVL73:
 1032 005a 08E0     		b	.L69
 1033              	.L68:
 732:main.c        ****             PID_SetMode(PID_MANUAL);                
 1034              		.loc 1 732 0
 1035 005c 394A     		ldr	r2, .L78+8
 1036 005e 1278     		ldrb	r2, [r2]
 1037 0060 002A     		cmp	r2, #0
 1038 0062 04D1     		bne	.L69
 732:main.c        ****             PID_SetMode(PID_MANUAL);                
 1039              		.loc 1 732 0 is_stmt 0 discriminator 1
 1040 0064 002B     		cmp	r3, #0
 1041 0066 02D0     		beq	.L69
 733:main.c        ****         } else {
 1042              		.loc 1 733 0 is_stmt 1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 43


 1043 0068 0020     		movs	r0, #0
 1044 006a FFF7FEFF 		bl	PID_SetMode
 1045              	.LVL74:
 1046              	.L69:
 739:main.c        ****         
 1047              		.loc 1 739 0
 1048 006e 354B     		ldr	r3, .L78+8
 1049 0070 1B78     		ldrb	r3, [r3]
 1050 0072 374A     		ldr	r2, .L78+20
 1051 0074 1370     		strb	r3, [r2]
 754:main.c        ****             
 1052              		.loc 1 754 0
 1053 0076 002B     		cmp	r3, #0
 1054 0078 51D0     		beq	.L70
 756:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;
 1055              		.loc 1 756 0
 1056 007a 364B     		ldr	r3, .L78+24
 1057 007c 1B78     		ldrb	r3, [r3]
 1058 007e 002B     		cmp	r3, #0
 1059 0080 04D1     		bne	.L71
 757:main.c        ****             } else if ( labs(PID_EffectiveSetpoint - PID_Setpoint) <= (2 * PID_EffSetDelta) ) {
 1060              		.loc 1 757 0
 1061 0082 354B     		ldr	r3, .L78+28
 1062 0084 1A68     		ldr	r2, [r3]
 1063 0086 354B     		ldr	r3, .L78+32
 1064 0088 1A60     		str	r2, [r3]
 1065 008a 16E0     		b	.L72
 1066              	.L71:
 758:main.c        ****                 PID_EffectiveSetpoint = PID_Setpoint;                                              
 1067              		.loc 1 758 0
 1068 008c 334A     		ldr	r2, .L78+32
 1069 008e 1168     		ldr	r1, [r2]
 1070 0090 314A     		ldr	r2, .L78+28
 1071 0092 1068     		ldr	r0, [r2]
 1072 0094 0A1A     		subs	r2, r1, r0
 1073 0096 D417     		asrs	r4, r2, #31
 1074 0098 1219     		adds	r2, r2, r4
 1075 009a 6240     		eors	r2, r4
 1076 009c 5C00     		lsls	r4, r3, #1
 1077 009e A242     		cmp	r2, r4
 1078 00a0 02DC     		bgt	.L73
 759:main.c        ****             } else if (PID_Setpoint > PID_EffectiveSetpoint) {
 1079              		.loc 1 759 0
 1080 00a2 2E4B     		ldr	r3, .L78+32
 1081 00a4 1860     		str	r0, [r3]
 1082 00a6 08E0     		b	.L72
 1083              	.L73:
 760:main.c        ****                 PID_EffectiveSetpoint = (PID_EffectiveSetpoint + PID_EffSetDelta);
 1084              		.loc 1 760 0
 1085 00a8 8142     		cmp	r1, r0
 1086 00aa 03DA     		bge	.L74
 761:main.c        ****             } else {
 1087              		.loc 1 761 0
 1088 00ac CB18     		adds	r3, r1, r3
 1089 00ae 2B4A     		ldr	r2, .L78+32
 1090 00b0 1360     		str	r3, [r2]
 1091 00b2 02E0     		b	.L72
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 44


 1092              	.L74:
 763:main.c        ****             }
 1093              		.loc 1 763 0
 1094 00b4 CB1A     		subs	r3, r1, r3
 1095 00b6 294A     		ldr	r2, .L78+32
 1096 00b8 1360     		str	r3, [r2]
 1097              	.L72:
 767:main.c        ****             
 1098              		.loc 1 767 0
 1099 00ba FFF7FEFF 		bl	GetPosition
 1100              	.LVL75:
 1101 00be 284B     		ldr	r3, .L78+36
 1102 00c0 1860     		str	r0, [r3]
 770:main.c        ****             
 1103              		.loc 1 770 0
 1104 00c2 1968     		ldr	r1, [r3]
 1105 00c4 254B     		ldr	r3, .L78+32
 1106 00c6 1868     		ldr	r0, [r3]
 1107 00c8 FFF7FEFF 		bl	PID_UpdateValues
 1108              	.LVL76:
 1109 00cc 254B     		ldr	r3, .L78+40
 1110 00ce 1860     		str	r0, [r3]
 773:main.c        ****             
 1111              		.loc 1 773 0
 1112 00d0 1868     		ldr	r0, [r3]
 1113 00d2 FFF7FEFF 		bl	PWM_Set
 1114              	.LVL77:
 776:main.c        ****                 
 1115              		.loc 1 776 0
 1116 00d6 1A4B     		ldr	r3, .L78+4
 1117 00d8 1B7C     		ldrb	r3, [r3, #16]
 1118 00da 002B     		cmp	r3, #0
 1119 00dc 2DD0     		beq	.L63
 778:main.c        ****                     
 1120              		.loc 1 778 0
 1121 00de 204B     		ldr	r3, .L78+36
 1122 00e0 1A68     		ldr	r2, [r3]
 1123 00e2 1D4B     		ldr	r3, .L78+28
 1124 00e4 1B68     		ldr	r3, [r3]
 1125 00e6 9A42     		cmp	r2, r3
 1126 00e8 15D1     		bne	.L75
 783:main.c        ****                         
 1127              		.loc 1 783 0
 1128 00ea 154B     		ldr	r3, .L78+4
 1129 00ec 5B8D     		ldrh	r3, [r3, #42]
 1130 00ee 1E2B     		cmp	r3, #30
 1131 00f0 07D1     		bne	.L76
 787:main.c        ****                         
 1132              		.loc 1 787 0
 1133 00f2 134B     		ldr	r3, .L78+4
 1134 00f4 DA6A     		ldr	r2, [r3, #44]
 1135 00f6 196A     		ldr	r1, [r3, #32]
 1136 00f8 521A     		subs	r2, r2, r1
 1137 00fa 5A62     		str	r2, [r3, #36]
 790:main.c        ****                         
 1138              		.loc 1 790 0
 1139 00fc 0022     		movs	r2, #0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 45


 1140 00fe 1A74     		strb	r2, [r3, #16]
 1141 0100 1BE0     		b	.L63
 1142              	.L76:
 796:main.c        **** 
 1143              		.loc 1 796 0
 1144 0102 0133     		adds	r3, r3, #1
 1145 0104 9BB2     		uxth	r3, r3
 1146 0106 0E4A     		ldr	r2, .L78+4
 1147 0108 5385     		strh	r3, [r2, #42]
 801:main.c        ****                             LastMoveEndTimeUsec = UptimeMicroseconds;
 1148              		.loc 1 801 0
 1149 010a 012B     		cmp	r3, #1
 1150 010c 15D1     		bne	.L63
 802:main.c        ****                         }                    
 1151              		.loc 1 802 0
 1152 010e 9069     		ldr	r0, [r2, #24]
 1153 0110 D169     		ldr	r1, [r2, #28]
 1154 0112 D062     		str	r0, [r2, #44]
 1155 0114 11E0     		b	.L63
 1156              	.L75:
 809:main.c        ****                 }
 1157              		.loc 1 809 0
 1158 0116 0022     		movs	r2, #0
 1159 0118 094B     		ldr	r3, .L78+4
 1160 011a 5A85     		strh	r2, [r3, #42]
 1161 011c 0DE0     		b	.L63
 1162              	.L70:
 818:main.c        ****             
 1163              		.loc 1 818 0
 1164 011e 0A4B     		ldr	r3, .L78+12
 1165 0120 1B78     		ldrb	r3, [r3]
 1166 0122 5BB2     		sxtb	r3, r3
 1167 0124 DB00     		lsls	r3, r3, #3
 1168 0126 0F4A     		ldr	r2, .L78+40
 1169 0128 1360     		str	r3, [r2]
 821:main.c        ****         }        
 1170              		.loc 1 821 0
 1171 012a 1068     		ldr	r0, [r2]
 1172 012c FFF7FEFF 		bl	PWM_Set
 1173              	.LVL78:
 1174 0130 03E0     		b	.L63
 1175              	.L67:
 827:main.c        ****     }
 1176              		.loc 1 827 0
 1177 0132 C820     		movs	r0, #200
 1178 0134 8000     		lsls	r0, r0, #2
 1179 0136 FFF7FEFF 		bl	PWM_Set
 1180              	.LVL79:
 1181              	.L63:
 829:main.c        **** 
 1182              		.loc 1 829 0
 1183              		@ sp needed
 1184 013a 10BD     		pop	{r4, pc}
 1185              	.L79:
 1186              		.align	2
 1187              	.L78:
 1188 013c 00000000 		.word	LastMessageTimeSeconds
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 46


 1189 0140 00000000 		.word	.LANCHOR1
 1190 0144 00000000 		.word	PID_Enabled
 1191 0148 00000000 		.word	Jog
 1192 014c 00000000 		.word	ConfigState
 1193 0150 00000000 		.word	PID_Was_Enabled
 1194 0154 00000000 		.word	PID_EffSetDelta
 1195 0158 00000000 		.word	PID_Setpoint
 1196 015c 00000000 		.word	PID_EffectiveSetpoint
 1197 0160 00000000 		.word	Position
 1198 0164 00000000 		.word	Output
 1199              		.cfi_endproc
 1200              	.LFE40:
 1201              		.size	runRateGroup1_PID, .-runRateGroup1_PID
 1202              		.section	.text.BRMS_Interrupt,"ax",%progbits
 1203              		.align	2
 1204              		.global	BRMS_Interrupt
 1205              		.code	16
 1206              		.thumb_func
 1207              		.type	BRMS_Interrupt, %function
 1208              	BRMS_Interrupt:
 1209              	.LFB42:
1023:main.c        ****     
 1210              		.loc 1 1023 0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 0
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 1214 0000 70B5     		push	{r4, r5, r6, lr}
 1215              		.cfi_def_cfa_offset 16
 1216              		.cfi_offset 4, -16
 1217              		.cfi_offset 5, -12
 1218              		.cfi_offset 6, -8
 1219              		.cfi_offset 14, -4
1034:main.c        **** 
 1220              		.loc 1 1034 0
 1221 0002 0220     		movs	r0, #2
 1222 0004 FFF7FEFF 		bl	Timer_BRMS_ClearInterrupt
 1223              	.LVL80:
1036:main.c        ****     
 1224              		.loc 1 1036 0
 1225 0008 0120     		movs	r0, #1
 1226 000a FFF7FEFF 		bl	PROBE_Write
 1227              	.LVL81:
1039:main.c        ****     UptimeMicrosecondsAccumulator += 200;
 1228              		.loc 1 1039 0
 1229 000e 2A4B     		ldr	r3, .L89
 1230 0010 9C69     		ldr	r4, [r3, #24]
 1231 0012 DD69     		ldr	r5, [r3, #28]
 1232 0014 C820     		movs	r0, #200
 1233 0016 0021     		movs	r1, #0
 1234 0018 2418     		adds	r4, r4, r0
 1235 001a 4D41     		adcs	r5, r5, r1
 1236 001c 9C61     		str	r4, [r3, #24]
 1237 001e DD61     		str	r5, [r3, #28]
1040:main.c        ****     
 1238              		.loc 1 1040 0
 1239 0020 1C6B     		ldr	r4, [r3, #48]
 1240 0022 5D6B     		ldr	r5, [r3, #52]
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 47


 1241 0024 0019     		adds	r0, r0, r4
 1242 0026 6941     		adcs	r1, r1, r5
 1243 0028 1863     		str	r0, [r3, #48]
 1244 002a 5963     		str	r1, [r3, #52]
1043:main.c        ****         UptimeMicrosecondsAccumulator = 0;
 1245              		.loc 1 1043 0
 1246 002c 196B     		ldr	r1, [r3, #48]
 1247 002e 5A6B     		ldr	r2, [r3, #52]
 1248 0030 002A     		cmp	r2, #0
 1249 0032 04D1     		bne	.L87
 1250 0034 16D1     		bne	.L81
 1251 0036 FA23     		movs	r3, #250
 1252 0038 9B00     		lsls	r3, r3, #2
 1253 003a 9942     		cmp	r1, r3
 1254 003c 12D9     		bls	.L81
 1255              	.L87:
1044:main.c        ****         UptimeMilliseconds += 1;
 1256              		.loc 1 1044 0
 1257 003e 1E4B     		ldr	r3, .L89
 1258 0040 0020     		movs	r0, #0
 1259 0042 0021     		movs	r1, #0
 1260 0044 1863     		str	r0, [r3, #48]
 1261 0046 5963     		str	r1, [r3, #52]
1045:main.c        ****         UptimeMillisecondsAccumulator += 1;
 1262              		.loc 1 1045 0
 1263 0048 9C6B     		ldr	r4, [r3, #56]
 1264 004a DD6B     		ldr	r5, [r3, #60]
 1265 004c 0120     		movs	r0, #1
 1266 004e 0021     		movs	r1, #0
 1267 0050 2418     		adds	r4, r4, r0
 1268 0052 4D41     		adcs	r5, r5, r1
 1269 0054 9C63     		str	r4, [r3, #56]
 1270 0056 DD63     		str	r5, [r3, #60]
1046:main.c        ****     }
 1271              		.loc 1 1046 0
 1272 0058 1C6C     		ldr	r4, [r3, #64]
 1273 005a 5D6C     		ldr	r5, [r3, #68]
 1274 005c 0019     		adds	r0, r0, r4
 1275 005e 6941     		adcs	r1, r1, r5
 1276 0060 1864     		str	r0, [r3, #64]
 1277 0062 5964     		str	r1, [r3, #68]
 1278              	.L81:
1050:main.c        ****         UptimeMillisecondsAccumulator = 0;
 1279              		.loc 1 1050 0
 1280 0064 144B     		ldr	r3, .L89
 1281 0066 196C     		ldr	r1, [r3, #64]
 1282 0068 5A6C     		ldr	r2, [r3, #68]
 1283 006a 002A     		cmp	r2, #0
 1284 006c 04D1     		bne	.L88
 1285 006e 10D1     		bne	.L83
 1286 0070 FA23     		movs	r3, #250
 1287 0072 9B00     		lsls	r3, r3, #2
 1288 0074 9942     		cmp	r1, r3
 1289 0076 0CD9     		bls	.L83
 1290              	.L88:
1051:main.c        ****         UptimeSeconds += 1;
 1291              		.loc 1 1051 0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 48


 1292 0078 0F4B     		ldr	r3, .L89
 1293 007a 0020     		movs	r0, #0
 1294 007c 0021     		movs	r1, #0
 1295 007e 1864     		str	r0, [r3, #64]
 1296 0080 5964     		str	r1, [r3, #68]
1052:main.c        ****     }
 1297              		.loc 1 1052 0
 1298 0082 1C68     		ldr	r4, [r3]
 1299 0084 5D68     		ldr	r5, [r3, #4]
 1300 0086 0120     		movs	r0, #1
 1301 0088 0021     		movs	r1, #0
 1302 008a 0019     		adds	r0, r0, r4
 1303 008c 6941     		adcs	r1, r1, r5
 1304 008e 1860     		str	r0, [r3]
 1305 0090 5960     		str	r1, [r3, #4]
 1306              	.L83:
1056:main.c        **** 
 1307              		.loc 1 1056 0
 1308 0092 094A     		ldr	r2, .L89
 1309 0094 936C     		ldr	r3, [r2, #72]
 1310 0096 0133     		adds	r3, r3, #1
 1311 0098 9364     		str	r3, [r2, #72]
1076:main.c        ****         
 1312              		.loc 1 1076 0
 1313 009a DA07     		lsls	r2, r3, #31
 1314 009c 02D5     		bpl	.L85
1081:main.c        ****         
 1315              		.loc 1 1081 0
 1316 009e FFF7FEFF 		bl	runRateGroup1_PID
 1317              	.LVL82:
 1318 00a2 05E0     		b	.L86
 1319              	.L85:
1083:main.c        ****         
 1320              		.loc 1 1083 0
 1321 00a4 9A07     		lsls	r2, r3, #30
 1322 00a6 03D4     		bmi	.L86
1088:main.c        ****         
 1323              		.loc 1 1088 0
 1324 00a8 5B07     		lsls	r3, r3, #29
 1325 00aa 01D5     		bpl	.L86
1091:main.c        ****         
 1326              		.loc 1 1091 0
 1327 00ac FFF7FEFF 		bl	runRateGroup3_SPI
 1328              	.LVL83:
 1329              	.L86:
1104:main.c        ****    
 1330              		.loc 1 1104 0
 1331 00b0 0020     		movs	r0, #0
 1332 00b2 FFF7FEFF 		bl	PROBE_Write
 1333              	.LVL84:
1106:main.c        **** 
 1334              		.loc 1 1106 0
 1335              		@ sp needed
 1336 00b6 70BD     		pop	{r4, r5, r6, pc}
 1337              	.L90:
 1338              		.align	2
 1339              	.L89:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 49


 1340 00b8 00000000 		.word	.LANCHOR1
 1341              		.cfi_endproc
 1342              	.LFE42:
 1343              		.size	BRMS_Interrupt, .-BRMS_Interrupt
 1344              		.section	.text.main,"ax",%progbits
 1345              		.align	2
 1346              		.global	main
 1347              		.code	16
 1348              		.thumb_func
 1349              		.type	main, %function
 1350              	main:
 1351              	.LFB41:
 841:main.c        ****     
 1352              		.loc 1 841 0
 1353              		.cfi_startproc
 1354              		@ Volatile: function does not return.
 1355              		@ args = 0, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 1357 0000 70B5     		push	{r4, r5, r6, lr}
 1358              		.cfi_def_cfa_offset 16
 1359              		.cfi_offset 4, -16
 1360              		.cfi_offset 5, -12
 1361              		.cfi_offset 6, -8
 1362              		.cfi_offset 14, -4
 849:main.c        ****     INDEX_OUT_SetDriveMode(INDEX_OUT_DM_DIG_HIZ); 
 1363              		.loc 1 849 0
 1364 0002 0120     		movs	r0, #1
 1365 0004 FFF7FEFF 		bl	HOME_OUT_SetDriveMode
 1366              	.LVL85:
 850:main.c        **** 
 1367              		.loc 1 850 0
 1368 0008 0120     		movs	r0, #1
 1369 000a FFF7FEFF 		bl	INDEX_OUT_SetDriveMode
 1370              	.LVL86:
 858:main.c        ****     isr_brms_StartEx(BRMS_Interrupt);
 1371              		.loc 1 858 0
 1372 000e FFF7FEFF 		bl	Timer_BRMS_Start
 1373              	.LVL87:
 859:main.c        ****     isr_brms_SetPriority(HIGHER_PRIORITY);
 1374              		.loc 1 859 0
 1375 0012 3648     		ldr	r0, .L96
 1376 0014 FFF7FEFF 		bl	isr_brms_StartEx
 1377              	.LVL88:
 860:main.c        **** 
 1378              		.loc 1 860 0
 1379 0018 0220     		movs	r0, #2
 1380 001a FFF7FEFF 		bl	isr_brms_SetPriority
 1381              	.LVL89:
 863:main.c        ****     isr_home_SetPriority(DEFAULT_PRIORITY);
 1382              		.loc 1 863 0
 1383 001e 3448     		ldr	r0, .L96+4
 1384 0020 FFF7FEFF 		bl	isr_home_StartEx
 1385              	.LVL90:
 864:main.c        **** 
 1386              		.loc 1 864 0
 1387 0024 0320     		movs	r0, #3
 1388 0026 FFF7FEFF 		bl	isr_home_SetPriority
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 50


 1389              	.LVL91:
 867:main.c        ****     isr_rst_encoder_SetPriority(DEFAULT_PRIORITY);
 1390              		.loc 1 867 0
 1391 002a 3248     		ldr	r0, .L96+8
 1392 002c FFF7FEFF 		bl	isr_rst_encoder_StartEx
 1393              	.LVL92:
 868:main.c        ****     
 1394              		.loc 1 868 0
 1395 0030 0320     		movs	r0, #3
 1396 0032 FFF7FEFF 		bl	isr_rst_encoder_SetPriority
 1397              	.LVL93:
 871:main.c        ****     isr_spi_ss_SetPriority(DEFAULT_PRIORITY);   
 1398              		.loc 1 871 0
 1399 0036 3048     		ldr	r0, .L96+12
 1400 0038 FFF7FEFF 		bl	isr_spi_ss_StartEx
 1401              	.LVL94:
 872:main.c        **** 
 1402              		.loc 1 872 0
 1403 003c 0320     		movs	r0, #3
 1404 003e FFF7FEFF 		bl	isr_spi_ss_SetPriority
 1405              	.LVL95:
 875:main.c        ****     
 1406              		.loc 1 875 0
 1407              		.syntax divided
 1408              	@ 875 "main.c" 1
 1409 0042 62B6     		CPSIE   i
 1410              	@ 0 "" 2
 904:main.c        ****     
 1411              		.loc 1 904 0
 1412              		.thumb
 1413              		.syntax unified
 1414 0044 FFF7FEFF 		bl	I2C_Start
 1415              	.LVL96:
 909:main.c        ****     SPI_1_Start();
 1416              		.loc 1 909 0
 1417 0048 6420     		movs	r0, #100
 1418 004a FFF7FEFF 		bl	CyDelay
 1419              	.LVL97:
 910:main.c        ****     
 1420              		.loc 1 910 0
 1421 004e FFF7FEFF 		bl	SPI_1_Start
 1422              	.LVL98:
 914:main.c        ****     PWM_1_WritePeriod(PWM_15KHZ_PERIOD);
 1423              		.loc 1 914 0
 1424 0052 FFF7FEFF 		bl	PWM_1_Start
 1425              	.LVL99:
 915:main.c        ****     PWM_Set(PWM_NEUTRAL);   
 1426              		.loc 1 915 0
 1427 0056 C820     		movs	r0, #200
 1428 0058 C000     		lsls	r0, r0, #3
 1429 005a FFF7FEFF 		bl	PWM_1_WritePeriod
 1430              	.LVL100:
 916:main.c        ****     
 1431              		.loc 1 916 0
 1432 005e C825     		movs	r5, #200
 1433 0060 AD00     		lsls	r5, r5, #2
 1434 0062 2800     		movs	r0, r5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 51


 1435 0064 FFF7FEFF 		bl	PWM_Set
 1436              	.LVL101:
 919:main.c        ****     
 1437              		.loc 1 919 0
 1438 0068 0024     		movs	r4, #0
 1439 006a 244B     		ldr	r3, .L96+16
 1440 006c 1C70     		strb	r4, [r3]
 922:main.c        ****    
 1441              		.loc 1 922 0
 1442 006e 244B     		ldr	r3, .L96+20
 1443 0070 1C70     		strb	r4, [r3]
 925:main.c        ****     Counter_1_WriteCounter(ENCODER_MAX);  // Set the encoder initially to mid range
 1444              		.loc 1 925 0
 1445 0072 FFF7FEFF 		bl	Counter_1_Start
 1446              	.LVL102:
 926:main.c        ****     LastPosition = ENCODER_MAX;
 1447              		.loc 1 926 0
 1448 0076 234E     		ldr	r6, .L96+24
 1449 0078 3000     		movs	r0, r6
 1450 007a FFF7FEFF 		bl	Counter_1_WriteCounter
 1451              	.LVL103:
 927:main.c        ****     
 1452              		.loc 1 927 0
 1453 007e 224B     		ldr	r3, .L96+28
 1454 0080 1E60     		str	r6, [r3]
 930:main.c        ****     Index_Counter_1_WriteCounter(0);
 1455              		.loc 1 930 0
 1456 0082 FFF7FEFF 		bl	Index_Counter_1_Start
 1457              	.LVL104:
 931:main.c        ****      
 1458              		.loc 1 931 0
 1459 0086 0020     		movs	r0, #0
 1460 0088 FFF7FEFF 		bl	Index_Counter_1_WriteCounter
 1461              	.LVL105:
 934:main.c        ****     ConfigSequence = 0;
 1462              		.loc 1 934 0
 1463 008c 0122     		movs	r2, #1
 1464 008e 1F4B     		ldr	r3, .L96+32
 1465 0090 1A70     		strb	r2, [r3]
 935:main.c        ****     ChecksumErrors = 0;
 1466              		.loc 1 935 0
 1467 0092 1F4B     		ldr	r3, .L96+36
 1468 0094 1C70     		strb	r4, [r3]
 936:main.c        ****     
 1469              		.loc 1 936 0
 1470 0096 1F4B     		ldr	r3, .L96+40
 1471 0098 1C80     		strh	r4, [r3]
 940:main.c        ****     PID_SetMode(PID_MANUAL);
 1472              		.loc 1 940 0
 1473 009a FFF7FEFF 		bl	PID_Initialize
 1474              	.LVL106:
 941:main.c        ****     
 1475              		.loc 1 941 0
 1476 009e 0020     		movs	r0, #0
 1477 00a0 FFF7FEFF 		bl	PID_SetMode
 1478              	.LVL107:
 944:main.c        ****     limitIterm = 800;
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 52


 1479              		.loc 1 944 0
 1480 00a4 1C4B     		ldr	r3, .L96+44
 1481 00a6 1D80     		strh	r5, [r3]
 945:main.c        ****     
 1482              		.loc 1 945 0
 1483 00a8 1C4B     		ldr	r3, .L96+48
 1484 00aa 1D80     		strh	r5, [r3]
 948:main.c        ****     PID_EffectiveSetpoint = 0;
 1485              		.loc 1 948 0
 1486 00ac 1C4B     		ldr	r3, .L96+52
 1487 00ae 1C60     		str	r4, [r3]
 949:main.c        ****     PID_EffSetDelta       = 250; //PID_EFFECTIVE_SETPOINT_DELTA_DEFAULT;
 1488              		.loc 1 949 0
 1489 00b0 1C4B     		ldr	r3, .L96+56
 1490 00b2 1C60     		str	r4, [r3]
 950:main.c        ****     PID_Was_Enabled       = false;
 1491              		.loc 1 950 0
 1492 00b4 FA22     		movs	r2, #250
 1493 00b6 1C4B     		ldr	r3, .L96+60
 1494 00b8 1A70     		strb	r2, [r3]
 951:main.c        ****     PID_Enabled           = false;
 1495              		.loc 1 951 0
 1496 00ba 1C4B     		ldr	r3, .L96+64
 1497 00bc 0022     		movs	r2, #0
 1498 00be 1A70     		strb	r2, [r3]
 952:main.c        ****     PWM_Set(PWM_NEUTRAL);
 1499              		.loc 1 952 0
 1500 00c0 1B4B     		ldr	r3, .L96+68
 1501 00c2 1A70     		strb	r2, [r3]
 953:main.c        ****   
 1502              		.loc 1 953 0
 1503 00c4 2800     		movs	r0, r5
 1504 00c6 FFF7FEFF 		bl	PWM_Set
 1505              	.LVL108:
 1506              	.L95:
 986:main.c        ****             LED_Write(1);
 1507              		.loc 1 986 0
 1508 00ca 1A4B     		ldr	r3, .L96+72
 1509 00cc 1A68     		ldr	r2, [r3]
 1510 00ce 5B68     		ldr	r3, [r3, #4]
 1511 00d0 0123     		movs	r3, #1
 1512 00d2 1342     		tst	r3, r2
 1513 00d4 03D0     		beq	.L92
 987:main.c        ****         } else {
 1514              		.loc 1 987 0
 1515 00d6 0120     		movs	r0, #1
 1516 00d8 FFF7FEFF 		bl	LED_Write
 1517              	.LVL109:
 1518 00dc 02E0     		b	.L94
 1519              	.L92:
 989:main.c        ****         } 
 1520              		.loc 1 989 0
 1521 00de 0020     		movs	r0, #0
 1522 00e0 FFF7FEFF 		bl	LED_Write
 1523              	.LVL110:
 1524              	.L94:
 993:main.c        ****         
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 53


 1525              		.loc 1 993 0
 1526 00e4 0A20     		movs	r0, #10
 1527 00e6 FFF7FEFF 		bl	CyDelay
 1528              	.LVL111:
1004:main.c        ****       
 1529              		.loc 1 1004 0
 1530 00ea EEE7     		b	.L95
 1531              	.L97:
 1532              		.align	2
 1533              	.L96:
 1534 00ec 00000000 		.word	BRMS_Interrupt
 1535 00f0 00000000 		.word	HomeIsrHandler
 1536 00f4 00000000 		.word	RSTIsrHandler
 1537 00f8 00000000 		.word	SPI_SS_IsrHandler
 1538 00fc 00000000 		.word	Jog
 1539 0100 00000000 		.word	.LANCHOR0
 1540 0104 FFFFFF00 		.word	16777215
 1541 0108 00000000 		.word	LastPosition
 1542 010c 00000000 		.word	ConfigState
 1543 0110 00000000 		.word	ConfigSequence
 1544 0114 00000000 		.word	ChecksumErrors
 1545 0118 00000000 		.word	limitOutput
 1546 011c 00000000 		.word	limitIterm
 1547 0120 00000000 		.word	PID_Setpoint
 1548 0124 00000000 		.word	PID_EffectiveSetpoint
 1549 0128 00000000 		.word	PID_EffSetDelta
 1550 012c 00000000 		.word	PID_Was_Enabled
 1551 0130 00000000 		.word	PID_Enabled
 1552 0134 00000000 		.word	.LANCHOR1
 1553              		.cfi_endproc
 1554              	.LFE41:
 1555              		.size	main, .-main
 1556              		.comm	txMessageState,1,1
 1557              		.comm	txMessage,27,4
 1558              		.comm	rxMessage,27,4
 1559              		.comm	LastMessageTimeSeconds,4,4
 1560              		.comm	CurrentI2Cinbuf,20,4
 1561              		.comm	MotorCurrent,2,2
 1562              		.comm	ChecksumErrors,2,2
 1563              		.comm	ConfigSequence,1,1
 1564              		.comm	FaultState,1,1
 1565              		.comm	ConfigState,1,1
 1566              		.global	UptimeSeconds
 1567              		.global	UptimeMillisecondsAccumulator
 1568              		.global	UptimeMilliseconds
 1569              		.global	UptimeMicrosecondsAccumulator
 1570              		.global	UptimeMicroseconds
 1571              		.global	NewCommandedMove
 1572              		.global	LastMoveTimeUsec
 1573              		.global	LastMoveStableCount
 1574              		.global	LastMoveEndTimeUsec
 1575              		.global	LastMoveStartTimeUsec
 1576              		.global	homingDone
 1577              		.comm	limitIterm,2,2
 1578              		.comm	limitOutput,2,2
 1579              		.comm	Output,4,4
 1580              		.comm	LastPosition,4,4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 54


 1581              		.comm	Position,4,4
 1582              		.comm	lastTime,4,4
 1583              		.comm	PID_EffSetDelta,1,1
 1584              		.comm	PID_EffectiveSetpoint,4,4
 1585              		.comm	PID_Setpoint,4,4
 1586              		.comm	PID_Was_Enabled,1,1
 1587              		.comm	PID_Enabled,1,1
 1588              		.comm	Jog,1,1
 1589              		.global	inAuto
 1590              		.data
 1591              		.set	.LANCHOR0,. + 0
 1592              		.type	homingDone, %object
 1593              		.size	homingDone, 1
 1594              	homingDone:
 1595 0000 01       		.byte	1
 1596              		.bss
 1597              		.align	3
 1598              		.set	.LANCHOR1,. + 0
 1599              		.type	UptimeSeconds, %object
 1600              		.size	UptimeSeconds, 8
 1601              	UptimeSeconds:
 1602 0000 00000000 		.space	8
 1602      00000000 
 1603              		.type	RawPosition.7275, %object
 1604              		.size	RawPosition.7275, 4
 1605              	RawPosition.7275:
 1606 0008 00000000 		.space	4
 1607              		.type	result.7276, %object
 1608              		.size	result.7276, 4
 1609              	result.7276:
 1610 000c 00000000 		.space	4
 1611              		.type	NewCommandedMove, %object
 1612              		.size	NewCommandedMove, 1
 1613              	NewCommandedMove:
 1614 0010 00       		.space	1
 1615 0011 00000000 		.space	7
 1615      000000
 1616              		.type	UptimeMicroseconds, %object
 1617              		.size	UptimeMicroseconds, 8
 1618              	UptimeMicroseconds:
 1619 0018 00000000 		.space	8
 1619      00000000 
 1620              		.type	LastMoveStartTimeUsec, %object
 1621              		.size	LastMoveStartTimeUsec, 4
 1622              	LastMoveStartTimeUsec:
 1623 0020 00000000 		.space	4
 1624              		.type	LastMoveTimeUsec, %object
 1625              		.size	LastMoveTimeUsec, 4
 1626              	LastMoveTimeUsec:
 1627 0024 00000000 		.space	4
 1628              		.type	inAuto, %object
 1629              		.size	inAuto, 1
 1630              	inAuto:
 1631 0028 00       		.space	1
 1632 0029 00       		.space	1
 1633              		.type	LastMoveStableCount, %object
 1634              		.size	LastMoveStableCount, 2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 55


 1635              	LastMoveStableCount:
 1636 002a 0000     		.space	2
 1637              		.type	LastMoveEndTimeUsec, %object
 1638              		.size	LastMoveEndTimeUsec, 4
 1639              	LastMoveEndTimeUsec:
 1640 002c 00000000 		.space	4
 1641              		.type	UptimeMicrosecondsAccumulator, %object
 1642              		.size	UptimeMicrosecondsAccumulator, 8
 1643              	UptimeMicrosecondsAccumulator:
 1644 0030 00000000 		.space	8
 1644      00000000 
 1645              		.type	UptimeMilliseconds, %object
 1646              		.size	UptimeMilliseconds, 8
 1647              	UptimeMilliseconds:
 1648 0038 00000000 		.space	8
 1648      00000000 
 1649              		.type	UptimeMillisecondsAccumulator, %object
 1650              		.size	UptimeMillisecondsAccumulator, 8
 1651              	UptimeMillisecondsAccumulator:
 1652 0040 00000000 		.space	8
 1652      00000000 
 1653              		.type	brmsTask.7294, %object
 1654              		.size	brmsTask.7294, 4
 1655              	brmsTask.7294:
 1656 0048 00000000 		.space	4
 1657              		.text
 1658              	.Letext0:
 1659              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1660              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1661              		.file 4 "Generated_Source\\PSoC4/cytypes.h"
 1662              		.file 5 "pid.h"
 1663              		.file 6 "Generated_Source\\PSoC4/isr_rst_encoder.h"
 1664              		.file 7 "Generated_Source\\PSoC4/Reset_Encoder.h"
 1665              		.file 8 "Generated_Source\\PSoC4/Counter_1.h"
 1666              		.file 9 "Generated_Source\\PSoC4/Index_Counter_1.h"
 1667              		.file 10 "Generated_Source\\PSoC4/isr_home.h"
 1668              		.file 11 "Generated_Source\\PSoC4/HOME_IN.h"
 1669              		.file 12 "Generated_Source\\PSoC4/spi_ss.h"
 1670              		.file 13 "Generated_Source\\PSoC4/SPI_1_SPI_UART.h"
 1671              		.file 14 "INA219.h"
 1672              		.file 15 "Generated_Source\\PSoC4/PWM_1.h"
 1673              		.file 16 "Generated_Source\\PSoC4/HOME_OUT.h"
 1674              		.file 17 "Generated_Source\\PSoC4/INDEX_OUT.h"
 1675              		.file 18 "Generated_Source\\PSoC4/Timer_BRMS.h"
 1676              		.file 19 "Generated_Source\\PSoC4/PROBE.h"
 1677              		.file 20 "Generated_Source\\PSoC4/isr_brms.h"
 1678              		.file 21 "Generated_Source\\PSoC4/isr_spi_ss.h"
 1679              		.file 22 "Generated_Source\\PSoC4/I2C.h"
 1680              		.file 23 "Generated_Source\\PSoC4/CyLib.h"
 1681              		.file 24 "Generated_Source\\PSoC4/SPI_1.h"
 1682              		.file 25 "Generated_Source\\PSoC4/LED.h"
 1683              		.section	.debug_info,"",%progbits
 1684              	.Ldebug_info0:
 1685 0000 B20F0000 		.4byte	0xfb2
 1686 0004 0400     		.2byte	0x4
 1687 0006 00000000 		.4byte	.Ldebug_abbrev0
 1688 000a 04       		.byte	0x4
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 56


 1689 000b 01       		.uleb128 0x1
 1690 000c 5A020000 		.4byte	.LASF180
 1691 0010 0C       		.byte	0xc
 1692 0011 12000000 		.4byte	.LASF181
 1693 0015 81050000 		.4byte	.LASF182
 1694 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1695 001d 00000000 		.4byte	0
 1696 0021 00000000 		.4byte	.Ldebug_line0
 1697 0025 02       		.uleb128 0x2
 1698 0026 4E060000 		.4byte	.LASF0
 1699 002a 02       		.byte	0x2
 1700 002b 1B       		.byte	0x1b
 1701 002c 30000000 		.4byte	0x30
 1702 0030 03       		.uleb128 0x3
 1703 0031 01       		.byte	0x1
 1704 0032 06       		.byte	0x6
 1705 0033 79090000 		.4byte	.LASF2
 1706 0037 02       		.uleb128 0x2
 1707 0038 25080000 		.4byte	.LASF1
 1708 003c 02       		.byte	0x2
 1709 003d 1D       		.byte	0x1d
 1710 003e 42000000 		.4byte	0x42
 1711 0042 03       		.uleb128 0x3
 1712 0043 01       		.byte	0x1
 1713 0044 08       		.byte	0x8
 1714 0045 B6080000 		.4byte	.LASF3
 1715 0049 02       		.uleb128 0x2
 1716 004a 26050000 		.4byte	.LASF4
 1717 004e 02       		.byte	0x2
 1718 004f 29       		.byte	0x29
 1719 0050 54000000 		.4byte	0x54
 1720 0054 03       		.uleb128 0x3
 1721 0055 02       		.byte	0x2
 1722 0056 05       		.byte	0x5
 1723 0057 E7060000 		.4byte	.LASF5
 1724 005b 02       		.uleb128 0x2
 1725 005c 1E020000 		.4byte	.LASF6
 1726 0060 02       		.byte	0x2
 1727 0061 2B       		.byte	0x2b
 1728 0062 66000000 		.4byte	0x66
 1729 0066 03       		.uleb128 0x3
 1730 0067 02       		.byte	0x2
 1731 0068 07       		.byte	0x7
 1732 0069 85090000 		.4byte	.LASF7
 1733 006d 02       		.uleb128 0x2
 1734 006e CE000000 		.4byte	.LASF8
 1735 0072 02       		.byte	0x2
 1736 0073 3F       		.byte	0x3f
 1737 0074 78000000 		.4byte	0x78
 1738 0078 03       		.uleb128 0x3
 1739 0079 04       		.byte	0x4
 1740 007a 05       		.byte	0x5
 1741 007b 31070000 		.4byte	.LASF9
 1742 007f 02       		.uleb128 0x2
 1743 0080 C4080000 		.4byte	.LASF10
 1744 0084 02       		.byte	0x2
 1745 0085 41       		.byte	0x41
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 57


 1746 0086 8A000000 		.4byte	0x8a
 1747 008a 03       		.uleb128 0x3
 1748 008b 04       		.byte	0x4
 1749 008c 07       		.byte	0x7
 1750 008d 56080000 		.4byte	.LASF11
 1751 0091 03       		.uleb128 0x3
 1752 0092 08       		.byte	0x8
 1753 0093 05       		.byte	0x5
 1754 0094 DB040000 		.4byte	.LASF12
 1755 0098 02       		.uleb128 0x2
 1756 0099 3B030000 		.4byte	.LASF13
 1757 009d 02       		.byte	0x2
 1758 009e 5B       		.byte	0x5b
 1759 009f A3000000 		.4byte	0xa3
 1760 00a3 03       		.uleb128 0x3
 1761 00a4 08       		.byte	0x8
 1762 00a5 07       		.byte	0x7
 1763 00a6 E1010000 		.4byte	.LASF14
 1764 00aa 04       		.uleb128 0x4
 1765 00ab 04       		.byte	0x4
 1766 00ac 05       		.byte	0x5
 1767 00ad 696E7400 		.ascii	"int\000"
 1768 00b1 03       		.uleb128 0x3
 1769 00b2 04       		.byte	0x4
 1770 00b3 07       		.byte	0x7
 1771 00b4 87000000 		.4byte	.LASF15
 1772 00b8 02       		.uleb128 0x2
 1773 00b9 6F010000 		.4byte	.LASF16
 1774 00bd 03       		.byte	0x3
 1775 00be 14       		.byte	0x14
 1776 00bf 25000000 		.4byte	0x25
 1777 00c3 02       		.uleb128 0x2
 1778 00c4 48040000 		.4byte	.LASF17
 1779 00c8 03       		.byte	0x3
 1780 00c9 18       		.byte	0x18
 1781 00ca 37000000 		.4byte	0x37
 1782 00ce 02       		.uleb128 0x2
 1783 00cf D2010000 		.4byte	.LASF18
 1784 00d3 03       		.byte	0x3
 1785 00d4 20       		.byte	0x20
 1786 00d5 49000000 		.4byte	0x49
 1787 00d9 02       		.uleb128 0x2
 1788 00da A7060000 		.4byte	.LASF19
 1789 00de 03       		.byte	0x3
 1790 00df 24       		.byte	0x24
 1791 00e0 5B000000 		.4byte	0x5b
 1792 00e4 02       		.uleb128 0x2
 1793 00e5 68080000 		.4byte	.LASF20
 1794 00e9 03       		.byte	0x3
 1795 00ea 2C       		.byte	0x2c
 1796 00eb 6D000000 		.4byte	0x6d
 1797 00ef 02       		.uleb128 0x2
 1798 00f0 66010000 		.4byte	.LASF21
 1799 00f4 03       		.byte	0x3
 1800 00f5 30       		.byte	0x30
 1801 00f6 7F000000 		.4byte	0x7f
 1802 00fa 02       		.uleb128 0x2
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 58


 1803 00fb C4070000 		.4byte	.LASF22
 1804 00ff 03       		.byte	0x3
 1805 0100 3C       		.byte	0x3c
 1806 0101 98000000 		.4byte	0x98
 1807 0105 05       		.uleb128 0x5
 1808 0106 C3050000 		.4byte	.LASF23
 1809 010a 04       		.byte	0x4
 1810 010b FE01     		.2byte	0x1fe
 1811 010d 8A000000 		.4byte	0x8a
 1812 0111 03       		.uleb128 0x3
 1813 0112 04       		.byte	0x4
 1814 0113 04       		.byte	0x4
 1815 0114 A9010000 		.4byte	.LASF24
 1816 0118 03       		.uleb128 0x3
 1817 0119 08       		.byte	0x8
 1818 011a 04       		.byte	0x4
 1819 011b B2090000 		.4byte	.LASF25
 1820 011f 03       		.uleb128 0x3
 1821 0120 01       		.byte	0x1
 1822 0121 08       		.byte	0x8
 1823 0122 D3030000 		.4byte	.LASF26
 1824 0126 05       		.uleb128 0x5
 1825 0127 B0060000 		.4byte	.LASF27
 1826 012b 04       		.byte	0x4
 1827 012c A802     		.2byte	0x2a8
 1828 012e 32010000 		.4byte	0x132
 1829 0132 06       		.uleb128 0x6
 1830 0133 05010000 		.4byte	0x105
 1831 0137 03       		.uleb128 0x3
 1832 0138 08       		.byte	0x8
 1833 0139 04       		.byte	0x4
 1834 013a 8D060000 		.4byte	.LASF28
 1835 013e 03       		.uleb128 0x3
 1836 013f 04       		.byte	0x4
 1837 0140 07       		.byte	0x7
 1838 0141 4D080000 		.4byte	.LASF29
 1839 0145 06       		.uleb128 0x6
 1840 0146 EF000000 		.4byte	0xef
 1841 014a 07       		.uleb128 0x7
 1842 014b 01       		.byte	0x1
 1843 014c 42000000 		.4byte	0x42
 1844 0150 01       		.byte	0x1
 1845 0151 9B       		.byte	0x9b
 1846 0152 6F010000 		.4byte	0x16f
 1847 0156 08       		.uleb128 0x8
 1848 0157 B6060000 		.4byte	.LASF30
 1849 015b 00       		.byte	0
 1850 015c 08       		.uleb128 0x8
 1851 015d 74000000 		.4byte	.LASF31
 1852 0161 01       		.byte	0x1
 1853 0162 08       		.uleb128 0x8
 1854 0163 43010000 		.4byte	.LASF32
 1855 0167 02       		.byte	0x2
 1856 0168 08       		.uleb128 0x8
 1857 0169 3A070000 		.4byte	.LASF33
 1858 016d 03       		.byte	0x3
 1859 016e 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 59


 1860 016f 02       		.uleb128 0x2
 1861 0170 57060000 		.4byte	.LASF34
 1862 0174 01       		.byte	0x1
 1863 0175 A0       		.byte	0xa0
 1864 0176 4A010000 		.4byte	0x14a
 1865 017a 07       		.uleb128 0x7
 1866 017b 01       		.byte	0x1
 1867 017c 42000000 		.4byte	0x42
 1868 0180 01       		.byte	0x1
 1869 0181 A5       		.byte	0xa5
 1870 0182 BD010000 		.4byte	0x1bd
 1871 0186 08       		.uleb128 0x8
 1872 0187 8F040000 		.4byte	.LASF35
 1873 018b 00       		.byte	0
 1874 018c 08       		.uleb128 0x8
 1875 018d 25030000 		.4byte	.LASF36
 1876 0191 01       		.byte	0x1
 1877 0192 08       		.uleb128 0x8
 1878 0193 6A000000 		.4byte	.LASF37
 1879 0197 02       		.byte	0x2
 1880 0198 08       		.uleb128 0x8
 1881 0199 57040000 		.4byte	.LASF38
 1882 019d 04       		.byte	0x4
 1883 019e 08       		.uleb128 0x8
 1884 019f D9060000 		.4byte	.LASF39
 1885 01a3 08       		.byte	0x8
 1886 01a4 08       		.uleb128 0x8
 1887 01a5 03050000 		.4byte	.LASF40
 1888 01a9 10       		.byte	0x10
 1889 01aa 08       		.uleb128 0x8
 1890 01ab EF080000 		.4byte	.LASF41
 1891 01af 20       		.byte	0x20
 1892 01b0 08       		.uleb128 0x8
 1893 01b1 F4080000 		.4byte	.LASF42
 1894 01b5 40       		.byte	0x40
 1895 01b6 08       		.uleb128 0x8
 1896 01b7 F9080000 		.4byte	.LASF43
 1897 01bb 80       		.byte	0x80
 1898 01bc 00       		.byte	0
 1899 01bd 02       		.uleb128 0x2
 1900 01be 410A0000 		.4byte	.LASF44
 1901 01c2 01       		.byte	0x1
 1902 01c3 AF       		.byte	0xaf
 1903 01c4 7A010000 		.4byte	0x17a
 1904 01c8 07       		.uleb128 0x7
 1905 01c9 01       		.byte	0x1
 1906 01ca 42000000 		.4byte	0x42
 1907 01ce 01       		.byte	0x1
 1908 01cf CB       		.byte	0xcb
 1909 01d0 F3010000 		.4byte	0x1f3
 1910 01d4 08       		.uleb128 0x8
 1911 01d5 CF080000 		.4byte	.LASF45
 1912 01d9 00       		.byte	0
 1913 01da 08       		.uleb128 0x8
 1914 01db ED090000 		.4byte	.LASF46
 1915 01df 01       		.byte	0x1
 1916 01e0 08       		.uleb128 0x8
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 60


 1917 01e1 2F080000 		.4byte	.LASF47
 1918 01e5 02       		.byte	0x2
 1919 01e6 08       		.uleb128 0x8
 1920 01e7 DB080000 		.4byte	.LASF48
 1921 01eb 03       		.byte	0x3
 1922 01ec 08       		.uleb128 0x8
 1923 01ed 38080000 		.4byte	.LASF49
 1924 01f1 04       		.byte	0x4
 1925 01f2 00       		.byte	0
 1926 01f3 02       		.uleb128 0x2
 1927 01f4 76010000 		.4byte	.LASF50
 1928 01f8 01       		.byte	0x1
 1929 01f9 D1       		.byte	0xd1
 1930 01fa C8010000 		.4byte	0x1c8
 1931 01fe 09       		.uleb128 0x9
 1932 01ff 03       		.byte	0x3
 1933 0200 01       		.byte	0x1
 1934 0201 D6       		.byte	0xd6
 1935 0202 2B020000 		.4byte	0x22b
 1936 0206 0A       		.uleb128 0xa
 1937 0207 C2010000 		.4byte	.LASF51
 1938 020b 01       		.byte	0x1
 1939 020c D7       		.byte	0xd7
 1940 020d C3000000 		.4byte	0xc3
 1941 0211 00       		.byte	0
 1942 0212 0A       		.uleb128 0xa
 1943 0213 7C050000 		.4byte	.LASF52
 1944 0217 01       		.byte	0x1
 1945 0218 D8       		.byte	0xd8
 1946 0219 C3000000 		.4byte	0xc3
 1947 021d 01       		.byte	0x1
 1948 021e 0A       		.uleb128 0xa
 1949 021f 36040000 		.4byte	.LASF53
 1950 0223 01       		.byte	0x1
 1951 0224 D9       		.byte	0xd9
 1952 0225 C3000000 		.4byte	0xc3
 1953 0229 02       		.byte	0x2
 1954 022a 00       		.byte	0
 1955 022b 02       		.uleb128 0x2
 1956 022c B6030000 		.4byte	.LASF54
 1957 0230 01       		.byte	0x1
 1958 0231 DA       		.byte	0xda
 1959 0232 FE010000 		.4byte	0x1fe
 1960 0236 09       		.uleb128 0x9
 1961 0237 16       		.byte	0x16
 1962 0238 01       		.byte	0x1
 1963 0239 DD       		.byte	0xdd
 1964 023a B7020000 		.4byte	0x2b7
 1965 023e 0A       		.uleb128 0xa
 1966 023f C2010000 		.4byte	.LASF51
 1967 0243 01       		.byte	0x1
 1968 0244 DE       		.byte	0xde
 1969 0245 C3000000 		.4byte	0xc3
 1970 0249 00       		.byte	0
 1971 024a 0A       		.uleb128 0xa
 1972 024b 7C050000 		.4byte	.LASF52
 1973 024f 01       		.byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 61


 1974 0250 DF       		.byte	0xdf
 1975 0251 C3000000 		.4byte	0xc3
 1976 0255 01       		.byte	0x1
 1977 0256 0A       		.uleb128 0xa
 1978 0257 36040000 		.4byte	.LASF53
 1979 025b 01       		.byte	0x1
 1980 025c E0       		.byte	0xe0
 1981 025d C3000000 		.4byte	0xc3
 1982 0261 02       		.byte	0x2
 1983 0262 0A       		.uleb128 0xa
 1984 0263 C2060000 		.4byte	.LASF55
 1985 0267 01       		.byte	0x1
 1986 0268 E1       		.byte	0xe1
 1987 0269 C3000000 		.4byte	0xc3
 1988 026d 03       		.byte	0x3
 1989 026e 0A       		.uleb128 0xa
 1990 026f 9F080000 		.4byte	.LASF56
 1991 0273 01       		.byte	0x1
 1992 0274 E3       		.byte	0xe3
 1993 0275 EF000000 		.4byte	0xef
 1994 0279 04       		.byte	0x4
 1995 027a 0A       		.uleb128 0xa
 1996 027b 94080000 		.4byte	.LASF57
 1997 027f 01       		.byte	0x1
 1998 0280 E4       		.byte	0xe4
 1999 0281 EF000000 		.4byte	0xef
 2000 0285 08       		.byte	0x8
 2001 0286 0A       		.uleb128 0xa
 2002 0287 83080000 		.4byte	.LASF58
 2003 028b 01       		.byte	0x1
 2004 028c E5       		.byte	0xe5
 2005 028d EF000000 		.4byte	0xef
 2006 0291 0C       		.byte	0xc
 2007 0292 0A       		.uleb128 0xa
 2008 0293 4E020000 		.4byte	.LASF59
 2009 0297 01       		.byte	0x1
 2010 0298 E7       		.byte	0xe7
 2011 0299 D9000000 		.4byte	0xd9
 2012 029d 10       		.byte	0x10
 2013 029e 0A       		.uleb128 0xa
 2014 029f 3D040000 		.4byte	.LASF60
 2015 02a3 01       		.byte	0x1
 2016 02a4 E8       		.byte	0xe8
 2017 02a5 D9000000 		.4byte	0xd9
 2018 02a9 12       		.byte	0x12
 2019 02aa 0A       		.uleb128 0xa
 2020 02ab 5E000000 		.4byte	.LASF61
 2021 02af 01       		.byte	0x1
 2022 02b0 E9       		.byte	0xe9
 2023 02b1 D9000000 		.4byte	0xd9
 2024 02b5 14       		.byte	0x14
 2025 02b6 00       		.byte	0
 2026 02b7 02       		.uleb128 0x2
 2027 02b8 F1060000 		.4byte	.LASF62
 2028 02bc 01       		.byte	0x1
 2029 02bd EA       		.byte	0xea
 2030 02be 36020000 		.4byte	0x236
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 62


 2031 02c2 09       		.uleb128 0x9
 2032 02c3 0A       		.byte	0xa
 2033 02c4 01       		.byte	0x1
 2034 02c5 ED       		.byte	0xed
 2035 02c6 1F030000 		.4byte	0x31f
 2036 02ca 0A       		.uleb128 0xa
 2037 02cb C2010000 		.4byte	.LASF51
 2038 02cf 01       		.byte	0x1
 2039 02d0 EE       		.byte	0xee
 2040 02d1 C3000000 		.4byte	0xc3
 2041 02d5 00       		.byte	0
 2042 02d6 0A       		.uleb128 0xa
 2043 02d7 7C050000 		.4byte	.LASF52
 2044 02db 01       		.byte	0x1
 2045 02dc EF       		.byte	0xef
 2046 02dd C3000000 		.4byte	0xc3
 2047 02e1 01       		.byte	0x1
 2048 02e2 0A       		.uleb128 0xa
 2049 02e3 36040000 		.4byte	.LASF53
 2050 02e7 01       		.byte	0x1
 2051 02e8 F0       		.byte	0xf0
 2052 02e9 C3000000 		.4byte	0xc3
 2053 02ed 02       		.byte	0x2
 2054 02ee 0A       		.uleb128 0xa
 2055 02ef 29020000 		.4byte	.LASF63
 2056 02f3 01       		.byte	0x1
 2057 02f4 F1       		.byte	0xf1
 2058 02f5 C3000000 		.4byte	0xc3
 2059 02f9 03       		.byte	0x3
 2060 02fa 0A       		.uleb128 0xa
 2061 02fb CD070000 		.4byte	.LASF64
 2062 02ff 01       		.byte	0x1
 2063 0300 F2       		.byte	0xf2
 2064 0301 E4000000 		.4byte	0xe4
 2065 0305 04       		.byte	0x4
 2066 0306 0B       		.uleb128 0xb
 2067 0307 6A6F6700 		.ascii	"jog\000"
 2068 030b 01       		.byte	0x1
 2069 030c F3       		.byte	0xf3
 2070 030d B8000000 		.4byte	0xb8
 2071 0311 08       		.byte	0x8
 2072 0312 0A       		.uleb128 0xa
 2073 0313 C2000000 		.4byte	.LASF65
 2074 0317 01       		.byte	0x1
 2075 0318 F4       		.byte	0xf4
 2076 0319 C3000000 		.4byte	0xc3
 2077 031d 09       		.byte	0x9
 2078 031e 00       		.byte	0
 2079 031f 02       		.uleb128 0x2
 2080 0320 8A010000 		.4byte	.LASF66
 2081 0324 01       		.byte	0x1
 2082 0325 F5       		.byte	0xf5
 2083 0326 C2020000 		.4byte	0x2c2
 2084 032a 09       		.uleb128 0x9
 2085 032b 07       		.byte	0x7
 2086 032c 01       		.byte	0x1
 2087 032d F8       		.byte	0xf8
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 63


 2088 032e 63030000 		.4byte	0x363
 2089 0332 0A       		.uleb128 0xa
 2090 0333 C2010000 		.4byte	.LASF51
 2091 0337 01       		.byte	0x1
 2092 0338 F9       		.byte	0xf9
 2093 0339 C3000000 		.4byte	0xc3
 2094 033d 00       		.byte	0
 2095 033e 0A       		.uleb128 0xa
 2096 033f 7C050000 		.4byte	.LASF52
 2097 0343 01       		.byte	0x1
 2098 0344 FA       		.byte	0xfa
 2099 0345 C3000000 		.4byte	0xc3
 2100 0349 01       		.byte	0x1
 2101 034a 0A       		.uleb128 0xa
 2102 034b 36040000 		.4byte	.LASF53
 2103 034f 01       		.byte	0x1
 2104 0350 FB       		.byte	0xfb
 2105 0351 C3000000 		.4byte	0xc3
 2106 0355 02       		.byte	0x2
 2107 0356 0A       		.uleb128 0xa
 2108 0357 CD070000 		.4byte	.LASF64
 2109 035b 01       		.byte	0x1
 2110 035c FC       		.byte	0xfc
 2111 035d E4000000 		.4byte	0xe4
 2112 0361 03       		.byte	0x3
 2113 0362 00       		.byte	0
 2114 0363 02       		.uleb128 0x2
 2115 0364 49090000 		.4byte	.LASF67
 2116 0368 01       		.byte	0x1
 2117 0369 FD       		.byte	0xfd
 2118 036a 2A030000 		.4byte	0x32a
 2119 036e 0C       		.uleb128 0xc
 2120 036f 1B       		.byte	0x1b
 2121 0370 01       		.byte	0x1
 2122 0371 0101     		.2byte	0x101
 2123 0373 B4030000 		.4byte	0x3b4
 2124 0377 0D       		.uleb128 0xd
 2125 0378 62756600 		.ascii	"buf\000"
 2126 037c 01       		.byte	0x1
 2127 037d 0201     		.2byte	0x102
 2128 037f B4030000 		.4byte	0x3b4
 2129 0383 0E       		.uleb128 0xe
 2130 0384 40070000 		.4byte	.LASF68
 2131 0388 01       		.byte	0x1
 2132 0389 0301     		.2byte	0x103
 2133 038b 2B020000 		.4byte	0x22b
 2134 038f 0E       		.uleb128 0xe
 2135 0390 D2060000 		.4byte	.LASF69
 2136 0394 01       		.byte	0x1
 2137 0395 0401     		.2byte	0x104
 2138 0397 B7020000 		.4byte	0x2b7
 2139 039b 0E       		.uleb128 0xe
 2140 039c 50040000 		.4byte	.LASF70
 2141 03a0 01       		.byte	0x1
 2142 03a1 0501     		.2byte	0x105
 2143 03a3 1F030000 		.4byte	0x31f
 2144 03a7 0E       		.uleb128 0xe
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 64


 2145 03a8 CB010000 		.4byte	.LASF71
 2146 03ac 01       		.byte	0x1
 2147 03ad 0601     		.2byte	0x106
 2148 03af 63030000 		.4byte	0x363
 2149 03b3 00       		.byte	0
 2150 03b4 0F       		.uleb128 0xf
 2151 03b5 C3000000 		.4byte	0xc3
 2152 03b9 C4030000 		.4byte	0x3c4
 2153 03bd 10       		.uleb128 0x10
 2154 03be 3E010000 		.4byte	0x13e
 2155 03c2 1A       		.byte	0x1a
 2156 03c3 00       		.byte	0
 2157 03c4 11       		.uleb128 0x11
 2158 03c5 1B       		.byte	0x1b
 2159 03c6 01       		.byte	0x1
 2160 03c7 0A01     		.2byte	0x10a
 2161 03c9 91040000 		.4byte	0x491
 2162 03cd 12       		.uleb128 0x12
 2163 03ce C2010000 		.4byte	.LASF51
 2164 03d2 01       		.byte	0x1
 2165 03d3 0B01     		.2byte	0x10b
 2166 03d5 C3000000 		.4byte	0xc3
 2167 03d9 00       		.byte	0
 2168 03da 12       		.uleb128 0x12
 2169 03db 9B030000 		.4byte	.LASF72
 2170 03df 01       		.byte	0x1
 2171 03e0 0C01     		.2byte	0x10c
 2172 03e2 C3000000 		.4byte	0xc3
 2173 03e6 01       		.byte	0x1
 2174 03e7 12       		.uleb128 0x12
 2175 03e8 A4030000 		.4byte	.LASF73
 2176 03ec 01       		.byte	0x1
 2177 03ed 0D01     		.2byte	0x10d
 2178 03ef C3000000 		.4byte	0xc3
 2179 03f3 02       		.byte	0x2
 2180 03f4 12       		.uleb128 0x12
 2181 03f5 AD030000 		.4byte	.LASF74
 2182 03f9 01       		.byte	0x1
 2183 03fa 0E01     		.2byte	0x10e
 2184 03fc C3000000 		.4byte	0xc3
 2185 0400 03       		.byte	0x3
 2186 0401 12       		.uleb128 0x12
 2187 0402 7C050000 		.4byte	.LASF52
 2188 0406 01       		.byte	0x1
 2189 0407 0F01     		.2byte	0x10f
 2190 0409 C3000000 		.4byte	0xc3
 2191 040d 04       		.byte	0x4
 2192 040e 12       		.uleb128 0x12
 2193 040f 36040000 		.4byte	.LASF53
 2194 0413 01       		.byte	0x1
 2195 0414 1001     		.2byte	0x110
 2196 0416 C3000000 		.4byte	0xc3
 2197 041a 05       		.byte	0x5
 2198 041b 12       		.uleb128 0x12
 2199 041c 8E080000 		.4byte	.LASF75
 2200 0420 01       		.byte	0x1
 2201 0421 1101     		.2byte	0x111
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 65


 2202 0423 C3000000 		.4byte	0xc3
 2203 0427 06       		.byte	0x6
 2204 0428 12       		.uleb128 0x12
 2205 0429 240A0000 		.4byte	.LASF76
 2206 042d 01       		.byte	0x1
 2207 042e 1201     		.2byte	0x112
 2208 0430 C3000000 		.4byte	0xc3
 2209 0434 07       		.byte	0x7
 2210 0435 12       		.uleb128 0x12
 2211 0436 C2060000 		.4byte	.LASF55
 2212 043a 01       		.byte	0x1
 2213 043b 1301     		.2byte	0x113
 2214 043d C3000000 		.4byte	0xc3
 2215 0441 08       		.byte	0x8
 2216 0442 12       		.uleb128 0x12
 2217 0443 6C050000 		.4byte	.LASF77
 2218 0447 01       		.byte	0x1
 2219 0448 1401     		.2byte	0x114
 2220 044a D9000000 		.4byte	0xd9
 2221 044e 09       		.byte	0x9
 2222 044f 12       		.uleb128 0x12
 2223 0450 19000000 		.4byte	.LASF78
 2224 0454 01       		.byte	0x1
 2225 0455 1501     		.2byte	0x115
 2226 0457 CE000000 		.4byte	0xce
 2227 045b 0B       		.byte	0xb
 2228 045c 12       		.uleb128 0x12
 2229 045d 380A0000 		.4byte	.LASF79
 2230 0461 01       		.byte	0x1
 2231 0462 1601     		.2byte	0x116
 2232 0464 E4000000 		.4byte	0xe4
 2233 0468 0D       		.byte	0xd
 2234 0469 13       		.uleb128 0x13
 2235 046a 70776D00 		.ascii	"pwm\000"
 2236 046e 01       		.byte	0x1
 2237 046f 1701     		.2byte	0x117
 2238 0471 CE000000 		.4byte	0xce
 2239 0475 11       		.byte	0x11
 2240 0476 12       		.uleb128 0x12
 2241 0477 AC090000 		.4byte	.LASF80
 2242 047b 01       		.byte	0x1
 2243 047c 1801     		.2byte	0x118
 2244 047e E4000000 		.4byte	0xe4
 2245 0482 13       		.byte	0x13
 2246 0483 12       		.uleb128 0x12
 2247 0484 D8030000 		.4byte	.LASF81
 2248 0488 01       		.byte	0x1
 2249 0489 1901     		.2byte	0x119
 2250 048b EF000000 		.4byte	0xef
 2251 048f 17       		.byte	0x17
 2252 0490 00       		.byte	0
 2253 0491 05       		.uleb128 0x5
 2254 0492 B8070000 		.4byte	.LASF82
 2255 0496 01       		.byte	0x1
 2256 0497 1A01     		.2byte	0x11a
 2257 0499 C4030000 		.4byte	0x3c4
 2258 049d 0C       		.uleb128 0xc
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 66


 2259 049e 1B       		.byte	0x1b
 2260 049f 01       		.byte	0x1
 2261 04a0 1D01     		.2byte	0x11d
 2262 04a2 BF040000 		.4byte	0x4bf
 2263 04a6 0D       		.uleb128 0xd
 2264 04a7 62756600 		.ascii	"buf\000"
 2265 04ab 01       		.byte	0x1
 2266 04ac 1E01     		.2byte	0x11e
 2267 04ae B4030000 		.4byte	0x3b4
 2268 04b2 0D       		.uleb128 0xd
 2269 04b3 6D736700 		.ascii	"msg\000"
 2270 04b7 01       		.byte	0x1
 2271 04b8 1F01     		.2byte	0x11f
 2272 04ba 91040000 		.4byte	0x491
 2273 04be 00       		.byte	0
 2274 04bf 14       		.uleb128 0x14
 2275 04c0 01       		.byte	0x1
 2276 04c1 42000000 		.4byte	0x42
 2277 04c5 01       		.byte	0x1
 2278 04c6 2301     		.2byte	0x123
 2279 04c8 D9040000 		.4byte	0x4d9
 2280 04cc 08       		.uleb128 0x8
 2281 04cd 33000000 		.4byte	.LASF83
 2282 04d1 00       		.byte	0
 2283 04d2 08       		.uleb128 0x8
 2284 04d3 CA050000 		.4byte	.LASF84
 2285 04d7 01       		.byte	0x1
 2286 04d8 00       		.byte	0
 2287 04d9 05       		.uleb128 0x5
 2288 04da 08010000 		.4byte	.LASF85
 2289 04de 01       		.byte	0x1
 2290 04df 2601     		.2byte	0x126
 2291 04e1 BF040000 		.4byte	0x4bf
 2292 04e5 15       		.uleb128 0x15
 2293 04e6 2A0A0000 		.4byte	.LASF86
 2294 04ea 01       		.byte	0x1
 2295 04eb 6004     		.2byte	0x460
 2296 04ed 00000000 		.4byte	.LFB43
 2297 04f1 24000000 		.4byte	.LFE43-.LFB43
 2298 04f5 01       		.uleb128 0x1
 2299 04f6 9C       		.byte	0x9c
 2300 04f7 30050000 		.4byte	0x530
 2301 04fb 16       		.uleb128 0x16
 2302 04fc 06000000 		.4byte	.LVL0
 2303 0500 0C0E0000 		.4byte	0xe0c
 2304 0504 16       		.uleb128 0x16
 2305 0505 0A000000 		.4byte	.LVL1
 2306 0509 170E0000 		.4byte	0xe17
 2307 050d 17       		.uleb128 0x17
 2308 050e 10000000 		.4byte	.LVL2
 2309 0512 220E0000 		.4byte	0xe22
 2310 0516 20050000 		.4byte	0x520
 2311 051a 18       		.uleb128 0x18
 2312 051b 01       		.uleb128 0x1
 2313 051c 50       		.byte	0x50
 2314 051d 01       		.uleb128 0x1
 2315 051e 30       		.byte	0x30
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 67


 2316 051f 00       		.byte	0
 2317 0520 19       		.uleb128 0x19
 2318 0521 16000000 		.4byte	.LVL3
 2319 0525 2D0E0000 		.4byte	0xe2d
 2320 0529 18       		.uleb128 0x18
 2321 052a 01       		.uleb128 0x1
 2322 052b 50       		.byte	0x50
 2323 052c 01       		.uleb128 0x1
 2324 052d 30       		.byte	0x30
 2325 052e 00       		.byte	0
 2326 052f 00       		.byte	0
 2327 0530 15       		.uleb128 0x15
 2328 0531 F9000000 		.4byte	.LASF87
 2329 0535 01       		.byte	0x1
 2330 0536 7E04     		.2byte	0x47e
 2331 0538 00000000 		.4byte	.LFB44
 2332 053c 1C000000 		.4byte	.LFE44-.LFB44
 2333 0540 01       		.uleb128 0x1
 2334 0541 9C       		.byte	0x9c
 2335 0542 68050000 		.4byte	0x568
 2336 0546 16       		.uleb128 0x16
 2337 0547 06000000 		.4byte	.LVL4
 2338 054b 380E0000 		.4byte	0xe38
 2339 054f 16       		.uleb128 0x16
 2340 0550 0A000000 		.4byte	.LVL5
 2341 0554 430E0000 		.4byte	0xe43
 2342 0558 19       		.uleb128 0x19
 2343 0559 10000000 		.4byte	.LVL6
 2344 055d 220E0000 		.4byte	0xe22
 2345 0561 18       		.uleb128 0x18
 2346 0562 01       		.uleb128 0x1
 2347 0563 50       		.byte	0x50
 2348 0564 01       		.uleb128 0x1
 2349 0565 30       		.byte	0x30
 2350 0566 00       		.byte	0
 2351 0567 00       		.byte	0
 2352 0568 15       		.uleb128 0x15
 2353 0569 3C060000 		.4byte	.LASF88
 2354 056d 01       		.byte	0x1
 2355 056e 9804     		.2byte	0x498
 2356 0570 00000000 		.4byte	.LFB45
 2357 0574 60000000 		.4byte	.LFE45-.LFB45
 2358 0578 01       		.uleb128 0x1
 2359 0579 9C       		.byte	0x9c
 2360 057a DB050000 		.4byte	0x5db
 2361 057e 1A       		.uleb128 0x1a
 2362 057f 6900     		.ascii	"i\000"
 2363 0581 01       		.byte	0x1
 2364 0582 9A04     		.2byte	0x49a
 2365 0584 EF000000 		.4byte	0xef
 2366 0588 00000000 		.4byte	.LLST0
 2367 058c 16       		.uleb128 0x16
 2368 058d 06000000 		.4byte	.LVL7
 2369 0591 4E0E0000 		.4byte	0xe4e
 2370 0595 16       		.uleb128 0x16
 2371 0596 0A000000 		.4byte	.LVL8
 2372 059a 590E0000 		.4byte	0xe59
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 68


 2373 059e 17       		.uleb128 0x17
 2374 059f 2A000000 		.4byte	.LVL9
 2375 05a3 640E0000 		.4byte	0xe64
 2376 05a7 BF050000 		.4byte	0x5bf
 2377 05ab 18       		.uleb128 0x18
 2378 05ac 01       		.uleb128 0x1
 2379 05ad 50       		.byte	0x50
 2380 05ae 05       		.uleb128 0x5
 2381 05af 03       		.byte	0x3
 2382 05b0 00000000 		.4byte	txMessage
 2383 05b4 18       		.uleb128 0x18
 2384 05b5 01       		.uleb128 0x1
 2385 05b6 51       		.byte	0x51
 2386 05b7 01       		.uleb128 0x1
 2387 05b8 30       		.byte	0x30
 2388 05b9 18       		.uleb128 0x18
 2389 05ba 01       		.uleb128 0x1
 2390 05bb 52       		.byte	0x52
 2391 05bc 01       		.uleb128 0x1
 2392 05bd 4B       		.byte	0x4b
 2393 05be 00       		.byte	0
 2394 05bf 16       		.uleb128 0x16
 2395 05c0 32000000 		.4byte	.LVL11
 2396 05c4 6D0E0000 		.4byte	0xe6d
 2397 05c8 16       		.uleb128 0x16
 2398 05c9 40000000 		.4byte	.LVL13
 2399 05cd 790E0000 		.4byte	0xe79
 2400 05d1 16       		.uleb128 0x16
 2401 05d2 44000000 		.4byte	.LVL14
 2402 05d6 850E0000 		.4byte	0xe85
 2403 05da 00       		.byte	0
 2404 05db 15       		.uleb128 0x15
 2405 05dc 9D010000 		.4byte	.LASF89
 2406 05e0 01       		.byte	0x1
 2407 05e1 3F01     		.2byte	0x13f
 2408 05e3 00000000 		.4byte	.LFB32
 2409 05e7 1C000000 		.4byte	.LFE32-.LFB32
 2410 05eb 01       		.uleb128 0x1
 2411 05ec 9C       		.byte	0x9c
 2412 05ed 02060000 		.4byte	0x602
 2413 05f1 1B       		.uleb128 0x1b
 2414 05f2 240A0000 		.4byte	.LASF76
 2415 05f6 01       		.byte	0x1
 2416 05f7 3F01     		.2byte	0x13f
 2417 05f9 BD010000 		.4byte	0x1bd
 2418 05fd 1F000000 		.4byte	.LLST1
 2419 0601 00       		.byte	0
 2420 0602 15       		.uleb128 0x15
 2421 0603 1A010000 		.4byte	.LASF90
 2422 0607 01       		.byte	0x1
 2423 0608 5A01     		.2byte	0x15a
 2424 060a 00000000 		.4byte	.LFB33
 2425 060e 1C000000 		.4byte	.LFE33-.LFB33
 2426 0612 01       		.uleb128 0x1
 2427 0613 9C       		.byte	0x9c
 2428 0614 27060000 		.4byte	0x627
 2429 0618 1C       		.uleb128 0x1c
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 69


 2430 0619 240A0000 		.4byte	.LASF76
 2431 061d 01       		.byte	0x1
 2432 061e 5A01     		.2byte	0x15a
 2433 0620 BD010000 		.4byte	0x1bd
 2434 0624 01       		.uleb128 0x1
 2435 0625 50       		.byte	0x50
 2436 0626 00       		.byte	0
 2437 0627 1D       		.uleb128 0x1d
 2438 0628 44000000 		.4byte	.LASF91
 2439 062c 01       		.byte	0x1
 2440 062d 7401     		.2byte	0x174
 2441 062f 00000000 		.4byte	.LFB34
 2442 0633 18000000 		.4byte	.LFE34-.LFB34
 2443 0637 01       		.uleb128 0x1
 2444 0638 9C       		.byte	0x9c
 2445 0639 5C060000 		.4byte	0x65c
 2446 063d 1A       		.uleb128 0x1a
 2447 063e 6300     		.ascii	"c\000"
 2448 0640 01       		.byte	0x1
 2449 0641 7701     		.2byte	0x177
 2450 0643 11010000 		.4byte	0x111
 2451 0647 40000000 		.4byte	.LLST2
 2452 064b 19       		.uleb128 0x19
 2453 064c 08000000 		.4byte	.LVL19
 2454 0650 910E0000 		.4byte	0xe91
 2455 0654 18       		.uleb128 0x18
 2456 0655 01       		.uleb128 0x1
 2457 0656 50       		.byte	0x50
 2458 0657 02       		.uleb128 0x2
 2459 0658 08       		.byte	0x8
 2460 0659 40       		.byte	0x40
 2461 065a 00       		.byte	0
 2462 065b 00       		.byte	0
 2463 065c 15       		.uleb128 0x15
 2464 065d 04040000 		.4byte	.LASF92
 2465 0661 01       		.byte	0x1
 2466 0662 5A02     		.2byte	0x25a
 2467 0664 00000000 		.4byte	.LFB36
 2468 0668 10000000 		.4byte	.LFE36-.LFB36
 2469 066c 01       		.uleb128 0x1
 2470 066d 9C       		.byte	0x9c
 2471 066e 97060000 		.4byte	0x697
 2472 0672 1B       		.uleb128 0x1b
 2473 0673 3D000000 		.4byte	.LASF93
 2474 0677 01       		.byte	0x1
 2475 0678 5A02     		.2byte	0x25a
 2476 067a E4000000 		.4byte	0xe4
 2477 067e 53000000 		.4byte	.LLST3
 2478 0682 19       		.uleb128 0x19
 2479 0683 0E000000 		.4byte	.LVL23
 2480 0687 9C0E0000 		.4byte	0xe9c
 2481 068b 18       		.uleb128 0x18
 2482 068c 01       		.uleb128 0x1
 2483 068d 50       		.byte	0x50
 2484 068e 06       		.uleb128 0x6
 2485 068f F3       		.byte	0xf3
 2486 0690 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 70


 2487 0691 50       		.byte	0x50
 2488 0692 23       		.byte	0x23
 2489 0693 A006     		.uleb128 0x320
 2490 0695 00       		.byte	0
 2491 0696 00       		.byte	0
 2492 0697 1E       		.uleb128 0x1e
 2493 0698 E2070000 		.4byte	.LASF183
 2494 069c 01       		.byte	0x1
 2495 069d 6B02     		.2byte	0x26b
 2496 069f E4000000 		.4byte	0xe4
 2497 06a3 00000000 		.4byte	.LFB37
 2498 06a7 44000000 		.4byte	.LFE37-.LFB37
 2499 06ab 01       		.uleb128 0x1
 2500 06ac 9C       		.byte	0x9c
 2501 06ad DF060000 		.4byte	0x6df
 2502 06b1 1F       		.uleb128 0x1f
 2503 06b2 89070000 		.4byte	.LASF94
 2504 06b6 01       		.byte	0x1
 2505 06b7 6D02     		.2byte	0x26d
 2506 06b9 45010000 		.4byte	0x145
 2507 06bd 05       		.uleb128 0x5
 2508 06be 03       		.byte	0x3
 2509 06bf 08000000 		.4byte	RawPosition.7275
 2510 06c3 1F       		.uleb128 0x1f
 2511 06c4 DA010000 		.4byte	.LASF95
 2512 06c8 01       		.byte	0x1
 2513 06c9 6E02     		.2byte	0x26e
 2514 06cb DF060000 		.4byte	0x6df
 2515 06cf 05       		.uleb128 0x5
 2516 06d0 03       		.byte	0x3
 2517 06d1 0C000000 		.4byte	result.7276
 2518 06d5 16       		.uleb128 0x16
 2519 06d6 06000000 		.4byte	.LVL24
 2520 06da A80E0000 		.4byte	0xea8
 2521 06de 00       		.byte	0
 2522 06df 06       		.uleb128 0x6
 2523 06e0 E4000000 		.4byte	0xe4
 2524 06e4 15       		.uleb128 0x15
 2525 06e5 66060000 		.4byte	.LASF96
 2526 06e9 01       		.byte	0x1
 2527 06ea 8901     		.2byte	0x189
 2528 06ec 00000000 		.4byte	.LFB35
 2529 06f0 B0020000 		.4byte	.LFE35-.LFB35
 2530 06f4 01       		.uleb128 0x1
 2531 06f5 9C       		.byte	0x9c
 2532 06f6 BE070000 		.4byte	0x7be
 2533 06fa 20       		.uleb128 0x20
 2534 06fb 36040000 		.4byte	.LASF53
 2535 06ff 01       		.byte	0x1
 2536 0700 8B01     		.2byte	0x18b
 2537 0702 F3010000 		.4byte	0x1f3
 2538 0706 82000000 		.4byte	.LLST4
 2539 070a 20       		.uleb128 0x20
 2540 070b 7C050000 		.4byte	.LASF52
 2541 070f 01       		.byte	0x1
 2542 0710 8C01     		.2byte	0x18c
 2543 0712 C3000000 		.4byte	0xc3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 71


 2544 0716 AC000000 		.4byte	.LLST5
 2545 071a 1A       		.uleb128 0x1a
 2546 071b 6900     		.ascii	"i\000"
 2547 071d 01       		.byte	0x1
 2548 071e 8D01     		.2byte	0x18d
 2549 0720 C3000000 		.4byte	0xc3
 2550 0724 D5000000 		.4byte	.LLST6
 2551 0728 20       		.uleb128 0x20
 2552 0729 C2010000 		.4byte	.LASF51
 2553 072d 01       		.byte	0x1
 2554 072e 8E01     		.2byte	0x18e
 2555 0730 C3000000 		.4byte	0xc3
 2556 0734 2C010000 		.4byte	.LLST7
 2557 0738 20       		.uleb128 0x20
 2558 0739 6A070000 		.4byte	.LASF97
 2559 073d 01       		.byte	0x1
 2560 073e 8F01     		.2byte	0x18f
 2561 0740 E4000000 		.4byte	0xe4
 2562 0744 99010000 		.4byte	.LLST8
 2563 0748 16       		.uleb128 0x16
 2564 0749 6C000000 		.4byte	.LVL37
 2565 074d 97060000 		.4byte	0x697
 2566 0751 17       		.uleb128 0x17
 2567 0752 B6000000 		.4byte	.LVL38
 2568 0756 02060000 		.4byte	0x602
 2569 075a 64070000 		.4byte	0x764
 2570 075e 18       		.uleb128 0x18
 2571 075f 01       		.uleb128 0x1
 2572 0760 50       		.byte	0x50
 2573 0761 01       		.uleb128 0x1
 2574 0762 30       		.byte	0x30
 2575 0763 00       		.byte	0
 2576 0764 16       		.uleb128 0x16
 2577 0765 F2000000 		.4byte	.LVL42
 2578 0769 97060000 		.4byte	0x697
 2579 076d 17       		.uleb128 0x17
 2580 076e 1E010000 		.4byte	.LVL44
 2581 0772 2D0E0000 		.4byte	0xe2d
 2582 0776 80070000 		.4byte	0x780
 2583 077a 18       		.uleb128 0x18
 2584 077b 01       		.uleb128 0x1
 2585 077c 50       		.byte	0x50
 2586 077d 01       		.uleb128 0x1
 2587 077e 30       		.byte	0x30
 2588 077f 00       		.byte	0
 2589 0780 16       		.uleb128 0x16
 2590 0781 74010000 		.4byte	.LVL54
 2591 0785 220E0000 		.4byte	0xe22
 2592 0789 16       		.uleb128 0x16
 2593 078a 92010000 		.4byte	.LVL55
 2594 078e 97060000 		.4byte	0x697
 2595 0792 17       		.uleb128 0x17
 2596 0793 40020000 		.4byte	.LVL63
 2597 0797 B30E0000 		.4byte	0xeb3
 2598 079b AE070000 		.4byte	0x7ae
 2599 079f 18       		.uleb128 0x18
 2600 07a0 01       		.uleb128 0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 72


 2601 07a1 50       		.byte	0x50
 2602 07a2 05       		.uleb128 0x5
 2603 07a3 03       		.byte	0x3
 2604 07a4 00000000 		.4byte	txMessage
 2605 07a8 18       		.uleb128 0x18
 2606 07a9 01       		.uleb128 0x1
 2607 07aa 51       		.byte	0x51
 2608 07ab 01       		.uleb128 0x1
 2609 07ac 4B       		.byte	0x4b
 2610 07ad 00       		.byte	0
 2611 07ae 19       		.uleb128 0x19
 2612 07af 54020000 		.4byte	.LVL64
 2613 07b3 02060000 		.4byte	0x602
 2614 07b7 18       		.uleb128 0x18
 2615 07b8 01       		.uleb128 0x1
 2616 07b9 50       		.byte	0x50
 2617 07ba 01       		.uleb128 0x1
 2618 07bb 30       		.byte	0x30
 2619 07bc 00       		.byte	0
 2620 07bd 00       		.byte	0
 2621 07be 15       		.uleb128 0x15
 2622 07bf 98090000 		.4byte	.LASF98
 2623 07c3 01       		.byte	0x1
 2624 07c4 8E02     		.2byte	0x28e
 2625 07c6 00000000 		.4byte	.LFB38
 2626 07ca 30000000 		.4byte	.LFE38-.LFB38
 2627 07ce 01       		.uleb128 0x1
 2628 07cf 9C       		.byte	0x9c
 2629 07d0 DE070000 		.4byte	0x7de
 2630 07d4 16       		.uleb128 0x16
 2631 07d5 06000000 		.4byte	.LVL65
 2632 07d9 97060000 		.4byte	0x697
 2633 07dd 00       		.byte	0
 2634 07de 15       		.uleb128 0x15
 2635 07df F8030000 		.4byte	.LASF99
 2636 07e3 01       		.byte	0x1
 2637 07e4 A702     		.2byte	0x2a7
 2638 07e6 00000000 		.4byte	.LFB39
 2639 07ea 28000000 		.4byte	.LFE39-.LFB39
 2640 07ee 01       		.uleb128 0x1
 2641 07ef 9C       		.byte	0x9c
 2642 07f0 1E080000 		.4byte	0x81e
 2643 07f4 1B       		.uleb128 0x1b
 2644 07f5 20070000 		.4byte	.LASF100
 2645 07f9 01       		.byte	0x1
 2646 07fa A702     		.2byte	0x2a7
 2647 07fc EF000000 		.4byte	0xef
 2648 0800 B7010000 		.4byte	.LLST9
 2649 0804 20       		.uleb128 0x20
 2650 0805 7F000000 		.4byte	.LASF101
 2651 0809 01       		.byte	0x1
 2652 080a A902     		.2byte	0x2a9
 2653 080c 1E080000 		.4byte	0x81e
 2654 0810 D8010000 		.4byte	.LLST10
 2655 0814 16       		.uleb128 0x16
 2656 0815 1C000000 		.4byte	.LVL68
 2657 0819 BE070000 		.4byte	0x7be
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 73


 2658 081d 00       		.byte	0
 2659 081e 03       		.uleb128 0x3
 2660 081f 01       		.byte	0x1
 2661 0820 02       		.byte	0x2
 2662 0821 1F030000 		.4byte	.LASF102
 2663 0825 15       		.uleb128 0x15
 2664 0826 B0000000 		.4byte	.LASF103
 2665 082a 01       		.byte	0x1
 2666 082b BD02     		.2byte	0x2bd
 2667 082d 00000000 		.4byte	.LFB40
 2668 0831 68010000 		.4byte	.LFE40-.LFB40
 2669 0835 01       		.uleb128 0x1
 2670 0836 9C       		.byte	0x9c
 2671 0837 D3080000 		.4byte	0x8d3
 2672 083b 17       		.uleb128 0x17
 2673 083c 24000000 		.4byte	.LVL70
 2674 0840 5C060000 		.4byte	0x65c
 2675 0844 50080000 		.4byte	0x850
 2676 0848 18       		.uleb128 0x18
 2677 0849 01       		.uleb128 0x1
 2678 084a 50       		.byte	0x50
 2679 084b 03       		.uleb128 0x3
 2680 084c 0A       		.byte	0xa
 2681 084d 2003     		.2byte	0x320
 2682 084f 00       		.byte	0
 2683 0850 17       		.uleb128 0x17
 2684 0851 3E000000 		.4byte	.LVL71
 2685 0855 BF0E0000 		.4byte	0xebf
 2686 0859 63080000 		.4byte	0x863
 2687 085d 18       		.uleb128 0x18
 2688 085e 01       		.uleb128 0x1
 2689 085f 50       		.byte	0x50
 2690 0860 01       		.uleb128 0x1
 2691 0861 36       		.byte	0x36
 2692 0862 00       		.byte	0
 2693 0863 17       		.uleb128 0x17
 2694 0864 44000000 		.4byte	.LVL72
 2695 0868 CA0E0000 		.4byte	0xeca
 2696 086c 76080000 		.4byte	0x876
 2697 0870 18       		.uleb128 0x18
 2698 0871 01       		.uleb128 0x1
 2699 0872 50       		.byte	0x50
 2700 0873 01       		.uleb128 0x1
 2701 0874 36       		.byte	0x36
 2702 0875 00       		.byte	0
 2703 0876 17       		.uleb128 0x17
 2704 0877 5A000000 		.4byte	.LVL73
 2705 087b DE070000 		.4byte	0x7de
 2706 087f 89080000 		.4byte	0x889
 2707 0883 18       		.uleb128 0x18
 2708 0884 01       		.uleb128 0x1
 2709 0885 50       		.byte	0x50
 2710 0886 01       		.uleb128 0x1
 2711 0887 31       		.byte	0x31
 2712 0888 00       		.byte	0
 2713 0889 17       		.uleb128 0x17
 2714 088a 6E000000 		.4byte	.LVL74
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 74


 2715 088e DE070000 		.4byte	0x7de
 2716 0892 9D080000 		.4byte	0x89d
 2717 0896 18       		.uleb128 0x18
 2718 0897 01       		.uleb128 0x1
 2719 0898 50       		.byte	0x50
 2720 0899 02       		.uleb128 0x2
 2721 089a 74       		.byte	0x74
 2722 089b 00       		.sleb128 0
 2723 089c 00       		.byte	0
 2724 089d 16       		.uleb128 0x16
 2725 089e BE000000 		.4byte	.LVL75
 2726 08a2 97060000 		.4byte	0x697
 2727 08a6 16       		.uleb128 0x16
 2728 08a7 CC000000 		.4byte	.LVL76
 2729 08ab D50E0000 		.4byte	0xed5
 2730 08af 16       		.uleb128 0x16
 2731 08b0 D6000000 		.4byte	.LVL77
 2732 08b4 5C060000 		.4byte	0x65c
 2733 08b8 16       		.uleb128 0x16
 2734 08b9 30010000 		.4byte	.LVL78
 2735 08bd 5C060000 		.4byte	0x65c
 2736 08c1 19       		.uleb128 0x19
 2737 08c2 3A010000 		.4byte	.LVL79
 2738 08c6 5C060000 		.4byte	0x65c
 2739 08ca 18       		.uleb128 0x18
 2740 08cb 01       		.uleb128 0x1
 2741 08cc 50       		.byte	0x50
 2742 08cd 03       		.uleb128 0x3
 2743 08ce 0A       		.byte	0xa
 2744 08cf 2003     		.2byte	0x320
 2745 08d1 00       		.byte	0
 2746 08d2 00       		.byte	0
 2747 08d3 15       		.uleb128 0x15
 2748 08d4 0C040000 		.4byte	.LASF104
 2749 08d8 01       		.byte	0x1
 2750 08d9 FF03     		.2byte	0x3ff
 2751 08db 00000000 		.4byte	.LFB42
 2752 08df BC000000 		.4byte	.LFE42-.LFB42
 2753 08e3 01       		.uleb128 0x1
 2754 08e4 9C       		.byte	0x9c
 2755 08e5 84090000 		.4byte	0x984
 2756 08e9 1F       		.uleb128 0x1f
 2757 08ea 55000000 		.4byte	.LASF105
 2758 08ee 01       		.byte	0x1
 2759 08ef 0104     		.2byte	0x401
 2760 08f1 EF000000 		.4byte	0xef
 2761 08f5 05       		.uleb128 0x5
 2762 08f6 03       		.byte	0x3
 2763 08f7 48000000 		.4byte	brmsTask.7294
 2764 08fb 21       		.uleb128 0x21
 2765 08fc 94000000 		.4byte	.LASF106
 2766 0900 01       		.byte	0x1
 2767 0901 0304     		.2byte	0x403
 2768 0903 84090000 		.4byte	0x984
 2769 0907 01       		.byte	0x1
 2770 0908 21       		.uleb128 0x21
 2771 0909 D6070000 		.4byte	.LASF107
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 75


 2772 090d 01       		.byte	0x1
 2773 090e 0404     		.2byte	0x404
 2774 0910 89090000 		.4byte	0x989
 2775 0914 02       		.byte	0x2
 2776 0915 21       		.uleb128 0x21
 2777 0916 AC070000 		.4byte	.LASF108
 2778 091a 01       		.byte	0x1
 2779 091b 0504     		.2byte	0x405
 2780 091d 8E090000 		.4byte	0x98e
 2781 0921 04       		.byte	0x4
 2782 0922 21       		.uleb128 0x21
 2783 0923 27000000 		.4byte	.LASF109
 2784 0927 01       		.byte	0x1
 2785 0928 0604     		.2byte	0x406
 2786 092a 93090000 		.4byte	0x993
 2787 092e 08       		.byte	0x8
 2788 092f 21       		.uleb128 0x21
 2789 0930 25070000 		.4byte	.LASF110
 2790 0934 01       		.byte	0x1
 2791 0935 0704     		.2byte	0x407
 2792 0937 EF000000 		.4byte	0xef
 2793 093b 10       		.byte	0x10
 2794 093c 17       		.uleb128 0x17
 2795 093d 08000000 		.4byte	.LVL80
 2796 0941 E00E0000 		.4byte	0xee0
 2797 0945 4F090000 		.4byte	0x94f
 2798 0949 18       		.uleb128 0x18
 2799 094a 01       		.uleb128 0x1
 2800 094b 50       		.byte	0x50
 2801 094c 01       		.uleb128 0x1
 2802 094d 32       		.byte	0x32
 2803 094e 00       		.byte	0
 2804 094f 17       		.uleb128 0x17
 2805 0950 0E000000 		.4byte	.LVL81
 2806 0954 EC0E0000 		.4byte	0xeec
 2807 0958 62090000 		.4byte	0x962
 2808 095c 18       		.uleb128 0x18
 2809 095d 01       		.uleb128 0x1
 2810 095e 50       		.byte	0x50
 2811 095f 01       		.uleb128 0x1
 2812 0960 31       		.byte	0x31
 2813 0961 00       		.byte	0
 2814 0962 16       		.uleb128 0x16
 2815 0963 A2000000 		.4byte	.LVL82
 2816 0967 25080000 		.4byte	0x825
 2817 096b 16       		.uleb128 0x16
 2818 096c B0000000 		.4byte	.LVL83
 2819 0970 E4060000 		.4byte	0x6e4
 2820 0974 19       		.uleb128 0x19
 2821 0975 B6000000 		.4byte	.LVL84
 2822 0979 EC0E0000 		.4byte	0xeec
 2823 097d 18       		.uleb128 0x18
 2824 097e 01       		.uleb128 0x1
 2825 097f 50       		.byte	0x50
 2826 0980 01       		.uleb128 0x1
 2827 0981 30       		.byte	0x30
 2828 0982 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 76


 2829 0983 00       		.byte	0
 2830 0984 22       		.uleb128 0x22
 2831 0985 EF000000 		.4byte	0xef
 2832 0989 22       		.uleb128 0x22
 2833 098a EF000000 		.4byte	0xef
 2834 098e 22       		.uleb128 0x22
 2835 098f EF000000 		.4byte	0xef
 2836 0993 22       		.uleb128 0x22
 2837 0994 EF000000 		.4byte	0xef
 2838 0998 23       		.uleb128 0x23
 2839 0999 A7090000 		.4byte	.LASF184
 2840 099d 01       		.byte	0x1
 2841 099e 4903     		.2byte	0x349
 2842 09a0 AA000000 		.4byte	0xaa
 2843 09a4 00000000 		.4byte	.LFB41
 2844 09a8 38010000 		.4byte	.LFE41-.LFB41
 2845 09ac 01       		.uleb128 0x1
 2846 09ad 9C       		.byte	0x9c
 2847 09ae 830B0000 		.4byte	0xb83
 2848 09b2 17       		.uleb128 0x17
 2849 09b3 08000000 		.4byte	.LVL85
 2850 09b7 BF0E0000 		.4byte	0xebf
 2851 09bb C5090000 		.4byte	0x9c5
 2852 09bf 18       		.uleb128 0x18
 2853 09c0 01       		.uleb128 0x1
 2854 09c1 50       		.byte	0x50
 2855 09c2 01       		.uleb128 0x1
 2856 09c3 31       		.byte	0x31
 2857 09c4 00       		.byte	0
 2858 09c5 17       		.uleb128 0x17
 2859 09c6 0E000000 		.4byte	.LVL86
 2860 09ca CA0E0000 		.4byte	0xeca
 2861 09ce D8090000 		.4byte	0x9d8
 2862 09d2 18       		.uleb128 0x18
 2863 09d3 01       		.uleb128 0x1
 2864 09d4 50       		.byte	0x50
 2865 09d5 01       		.uleb128 0x1
 2866 09d6 31       		.byte	0x31
 2867 09d7 00       		.byte	0
 2868 09d8 16       		.uleb128 0x16
 2869 09d9 12000000 		.4byte	.LVL87
 2870 09dd F70E0000 		.4byte	0xef7
 2871 09e1 17       		.uleb128 0x17
 2872 09e2 18000000 		.4byte	.LVL88
 2873 09e6 030F0000 		.4byte	0xf03
 2874 09ea F8090000 		.4byte	0x9f8
 2875 09ee 18       		.uleb128 0x18
 2876 09ef 01       		.uleb128 0x1
 2877 09f0 50       		.byte	0x50
 2878 09f1 05       		.uleb128 0x5
 2879 09f2 03       		.byte	0x3
 2880 09f3 00000000 		.4byte	BRMS_Interrupt
 2881 09f7 00       		.byte	0
 2882 09f8 17       		.uleb128 0x17
 2883 09f9 1E000000 		.4byte	.LVL89
 2884 09fd 0E0F0000 		.4byte	0xf0e
 2885 0a01 0B0A0000 		.4byte	0xa0b
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 77


 2886 0a05 18       		.uleb128 0x18
 2887 0a06 01       		.uleb128 0x1
 2888 0a07 50       		.byte	0x50
 2889 0a08 01       		.uleb128 0x1
 2890 0a09 32       		.byte	0x32
 2891 0a0a 00       		.byte	0
 2892 0a0b 17       		.uleb128 0x17
 2893 0a0c 24000000 		.4byte	.LVL90
 2894 0a10 190F0000 		.4byte	0xf19
 2895 0a14 220A0000 		.4byte	0xa22
 2896 0a18 18       		.uleb128 0x18
 2897 0a19 01       		.uleb128 0x1
 2898 0a1a 50       		.byte	0x50
 2899 0a1b 05       		.uleb128 0x5
 2900 0a1c 03       		.byte	0x3
 2901 0a1d 00000000 		.4byte	HomeIsrHandler
 2902 0a21 00       		.byte	0
 2903 0a22 17       		.uleb128 0x17
 2904 0a23 2A000000 		.4byte	.LVL91
 2905 0a27 240F0000 		.4byte	0xf24
 2906 0a2b 350A0000 		.4byte	0xa35
 2907 0a2f 18       		.uleb128 0x18
 2908 0a30 01       		.uleb128 0x1
 2909 0a31 50       		.byte	0x50
 2910 0a32 01       		.uleb128 0x1
 2911 0a33 33       		.byte	0x33
 2912 0a34 00       		.byte	0
 2913 0a35 17       		.uleb128 0x17
 2914 0a36 30000000 		.4byte	.LVL92
 2915 0a3a 2F0F0000 		.4byte	0xf2f
 2916 0a3e 4C0A0000 		.4byte	0xa4c
 2917 0a42 18       		.uleb128 0x18
 2918 0a43 01       		.uleb128 0x1
 2919 0a44 50       		.byte	0x50
 2920 0a45 05       		.uleb128 0x5
 2921 0a46 03       		.byte	0x3
 2922 0a47 00000000 		.4byte	RSTIsrHandler
 2923 0a4b 00       		.byte	0
 2924 0a4c 17       		.uleb128 0x17
 2925 0a4d 36000000 		.4byte	.LVL93
 2926 0a51 3A0F0000 		.4byte	0xf3a
 2927 0a55 5F0A0000 		.4byte	0xa5f
 2928 0a59 18       		.uleb128 0x18
 2929 0a5a 01       		.uleb128 0x1
 2930 0a5b 50       		.byte	0x50
 2931 0a5c 01       		.uleb128 0x1
 2932 0a5d 33       		.byte	0x33
 2933 0a5e 00       		.byte	0
 2934 0a5f 17       		.uleb128 0x17
 2935 0a60 3C000000 		.4byte	.LVL94
 2936 0a64 450F0000 		.4byte	0xf45
 2937 0a68 760A0000 		.4byte	0xa76
 2938 0a6c 18       		.uleb128 0x18
 2939 0a6d 01       		.uleb128 0x1
 2940 0a6e 50       		.byte	0x50
 2941 0a6f 05       		.uleb128 0x5
 2942 0a70 03       		.byte	0x3
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 78


 2943 0a71 00000000 		.4byte	SPI_SS_IsrHandler
 2944 0a75 00       		.byte	0
 2945 0a76 17       		.uleb128 0x17
 2946 0a77 42000000 		.4byte	.LVL95
 2947 0a7b 500F0000 		.4byte	0xf50
 2948 0a7f 890A0000 		.4byte	0xa89
 2949 0a83 18       		.uleb128 0x18
 2950 0a84 01       		.uleb128 0x1
 2951 0a85 50       		.byte	0x50
 2952 0a86 01       		.uleb128 0x1
 2953 0a87 33       		.byte	0x33
 2954 0a88 00       		.byte	0
 2955 0a89 16       		.uleb128 0x16
 2956 0a8a 48000000 		.4byte	.LVL96
 2957 0a8e 5B0F0000 		.4byte	0xf5b
 2958 0a92 17       		.uleb128 0x17
 2959 0a93 4E000000 		.4byte	.LVL97
 2960 0a97 660F0000 		.4byte	0xf66
 2961 0a9b A60A0000 		.4byte	0xaa6
 2962 0a9f 18       		.uleb128 0x18
 2963 0aa0 01       		.uleb128 0x1
 2964 0aa1 50       		.byte	0x50
 2965 0aa2 02       		.uleb128 0x2
 2966 0aa3 08       		.byte	0x8
 2967 0aa4 64       		.byte	0x64
 2968 0aa5 00       		.byte	0
 2969 0aa6 16       		.uleb128 0x16
 2970 0aa7 52000000 		.4byte	.LVL98
 2971 0aab 710F0000 		.4byte	0xf71
 2972 0aaf 16       		.uleb128 0x16
 2973 0ab0 56000000 		.4byte	.LVL99
 2974 0ab4 7C0F0000 		.4byte	0xf7c
 2975 0ab8 17       		.uleb128 0x17
 2976 0ab9 5E000000 		.4byte	.LVL100
 2977 0abd 880F0000 		.4byte	0xf88
 2978 0ac1 CD0A0000 		.4byte	0xacd
 2979 0ac5 18       		.uleb128 0x18
 2980 0ac6 01       		.uleb128 0x1
 2981 0ac7 50       		.byte	0x50
 2982 0ac8 03       		.uleb128 0x3
 2983 0ac9 0A       		.byte	0xa
 2984 0aca 4006     		.2byte	0x640
 2985 0acc 00       		.byte	0
 2986 0acd 17       		.uleb128 0x17
 2987 0ace 68000000 		.4byte	.LVL101
 2988 0ad2 5C060000 		.4byte	0x65c
 2989 0ad6 E10A0000 		.4byte	0xae1
 2990 0ada 18       		.uleb128 0x18
 2991 0adb 01       		.uleb128 0x1
 2992 0adc 50       		.byte	0x50
 2993 0add 02       		.uleb128 0x2
 2994 0ade 75       		.byte	0x75
 2995 0adf 00       		.sleb128 0
 2996 0ae0 00       		.byte	0
 2997 0ae1 16       		.uleb128 0x16
 2998 0ae2 76000000 		.4byte	.LVL102
 2999 0ae6 940F0000 		.4byte	0xf94
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 79


 3000 0aea 17       		.uleb128 0x17
 3001 0aeb 7E000000 		.4byte	.LVL103
 3002 0aef 220E0000 		.4byte	0xe22
 3003 0af3 FE0A0000 		.4byte	0xafe
 3004 0af7 18       		.uleb128 0x18
 3005 0af8 01       		.uleb128 0x1
 3006 0af9 50       		.byte	0x50
 3007 0afa 02       		.uleb128 0x2
 3008 0afb 76       		.byte	0x76
 3009 0afc 00       		.sleb128 0
 3010 0afd 00       		.byte	0
 3011 0afe 16       		.uleb128 0x16
 3012 0aff 86000000 		.4byte	.LVL104
 3013 0b03 9F0F0000 		.4byte	0xf9f
 3014 0b07 17       		.uleb128 0x17
 3015 0b08 8C000000 		.4byte	.LVL105
 3016 0b0c 2D0E0000 		.4byte	0xe2d
 3017 0b10 1B0B0000 		.4byte	0xb1b
 3018 0b14 18       		.uleb128 0x18
 3019 0b15 01       		.uleb128 0x1
 3020 0b16 50       		.byte	0x50
 3021 0b17 02       		.uleb128 0x2
 3022 0b18 74       		.byte	0x74
 3023 0b19 00       		.sleb128 0
 3024 0b1a 00       		.byte	0
 3025 0b1b 16       		.uleb128 0x16
 3026 0b1c 9E000000 		.4byte	.LVL106
 3027 0b20 BE070000 		.4byte	0x7be
 3028 0b24 17       		.uleb128 0x17
 3029 0b25 A4000000 		.4byte	.LVL107
 3030 0b29 DE070000 		.4byte	0x7de
 3031 0b2d 380B0000 		.4byte	0xb38
 3032 0b31 18       		.uleb128 0x18
 3033 0b32 01       		.uleb128 0x1
 3034 0b33 50       		.byte	0x50
 3035 0b34 02       		.uleb128 0x2
 3036 0b35 74       		.byte	0x74
 3037 0b36 00       		.sleb128 0
 3038 0b37 00       		.byte	0
 3039 0b38 17       		.uleb128 0x17
 3040 0b39 CA000000 		.4byte	.LVL108
 3041 0b3d 5C060000 		.4byte	0x65c
 3042 0b41 4C0B0000 		.4byte	0xb4c
 3043 0b45 18       		.uleb128 0x18
 3044 0b46 01       		.uleb128 0x1
 3045 0b47 50       		.byte	0x50
 3046 0b48 02       		.uleb128 0x2
 3047 0b49 75       		.byte	0x75
 3048 0b4a 00       		.sleb128 0
 3049 0b4b 00       		.byte	0
 3050 0b4c 17       		.uleb128 0x17
 3051 0b4d DC000000 		.4byte	.LVL109
 3052 0b51 AA0F0000 		.4byte	0xfaa
 3053 0b55 5F0B0000 		.4byte	0xb5f
 3054 0b59 18       		.uleb128 0x18
 3055 0b5a 01       		.uleb128 0x1
 3056 0b5b 50       		.byte	0x50
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 80


 3057 0b5c 01       		.uleb128 0x1
 3058 0b5d 31       		.byte	0x31
 3059 0b5e 00       		.byte	0
 3060 0b5f 17       		.uleb128 0x17
 3061 0b60 E4000000 		.4byte	.LVL110
 3062 0b64 AA0F0000 		.4byte	0xfaa
 3063 0b68 730B0000 		.4byte	0xb73
 3064 0b6c 18       		.uleb128 0x18
 3065 0b6d 01       		.uleb128 0x1
 3066 0b6e 50       		.byte	0x50
 3067 0b6f 02       		.uleb128 0x2
 3068 0b70 74       		.byte	0x74
 3069 0b71 00       		.sleb128 0
 3070 0b72 00       		.byte	0
 3071 0b73 19       		.uleb128 0x19
 3072 0b74 EA000000 		.4byte	.LVL111
 3073 0b78 660F0000 		.4byte	0xf66
 3074 0b7c 18       		.uleb128 0x18
 3075 0b7d 01       		.uleb128 0x1
 3076 0b7e 50       		.byte	0x50
 3077 0b7f 01       		.uleb128 0x1
 3078 0b80 3A       		.byte	0x3a
 3079 0b81 00       		.byte	0
 3080 0b82 00       		.byte	0
 3081 0b83 24       		.uleb128 0x24
 3082 0b84 AC090000 		.4byte	.LASF80
 3083 0b88 05       		.byte	0x5
 3084 0b89 0F       		.byte	0xf
 3085 0b8a E4000000 		.4byte	0xe4
 3086 0b8e 24       		.uleb128 0x24
 3087 0b8f 1A050000 		.4byte	.LASF111
 3088 0b93 05       		.byte	0x5
 3089 0b94 10       		.byte	0x10
 3090 0b95 E4000000 		.4byte	0xe4
 3091 0b99 25       		.uleb128 0x25
 3092 0b9a 34030000 		.4byte	.LASF112
 3093 0b9e 01       		.byte	0x1
 3094 0b9f 5A       		.byte	0x5a
 3095 0ba0 1E080000 		.4byte	0x81e
 3096 0ba4 05       		.uleb128 0x5
 3097 0ba5 03       		.byte	0x3
 3098 0ba6 00000000 		.4byte	inAuto
 3099 0baa 26       		.uleb128 0x26
 3100 0bab 4A6F6700 		.ascii	"Jog\000"
 3101 0baf 01       		.byte	0x1
 3102 0bb0 5C       		.byte	0x5c
 3103 0bb1 BB0B0000 		.4byte	0xbbb
 3104 0bb5 05       		.uleb128 0x5
 3105 0bb6 03       		.byte	0x3
 3106 0bb7 00000000 		.4byte	Jog
 3107 0bbb 06       		.uleb128 0x6
 3108 0bbc B8000000 		.4byte	0xb8
 3109 0bc0 25       		.uleb128 0x25
 3110 0bc1 14070000 		.4byte	.LASF113
 3111 0bc5 01       		.byte	0x1
 3112 0bc6 5D       		.byte	0x5d
 3113 0bc7 1E080000 		.4byte	0x81e
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 81


 3114 0bcb 05       		.uleb128 0x5
 3115 0bcc 03       		.byte	0x3
 3116 0bcd 00000000 		.4byte	PID_Enabled
 3117 0bd1 25       		.uleb128 0x25
 3118 0bd2 04070000 		.4byte	.LASF114
 3119 0bd6 01       		.byte	0x1
 3120 0bd7 5D       		.byte	0x5d
 3121 0bd8 1E080000 		.4byte	0x81e
 3122 0bdc 05       		.uleb128 0x5
 3123 0bdd 03       		.byte	0x3
 3124 0bde 00000000 		.4byte	PID_Was_Enabled
 3125 0be2 25       		.uleb128 0x25
 3126 0be3 18080000 		.4byte	.LASF115
 3127 0be7 01       		.byte	0x1
 3128 0be8 5E       		.byte	0x5e
 3129 0be9 E4000000 		.4byte	0xe4
 3130 0bed 05       		.uleb128 0x5
 3131 0bee 03       		.byte	0x3
 3132 0bef 00000000 		.4byte	PID_Setpoint
 3133 0bf3 25       		.uleb128 0x25
 3134 0bf4 5E0A0000 		.4byte	.LASF116
 3135 0bf8 01       		.byte	0x1
 3136 0bf9 5E       		.byte	0x5e
 3137 0bfa E4000000 		.4byte	0xe4
 3138 0bfe 05       		.uleb128 0x5
 3139 0bff 03       		.byte	0x3
 3140 0c00 00000000 		.4byte	PID_EffectiveSetpoint
 3141 0c04 25       		.uleb128 0x25
 3142 0c05 F8010000 		.4byte	.LASF117
 3143 0c09 01       		.byte	0x1
 3144 0c0a 5F       		.byte	0x5f
 3145 0c0b C3000000 		.4byte	0xc3
 3146 0c0f 05       		.uleb128 0x5
 3147 0c10 03       		.byte	0x3
 3148 0c11 00000000 		.4byte	PID_EffSetDelta
 3149 0c15 25       		.uleb128 0x25
 3150 0c16 08020000 		.4byte	.LASF118
 3151 0c1a 01       		.byte	0x1
 3152 0c1b 60       		.byte	0x60
 3153 0c1c EF000000 		.4byte	0xef
 3154 0c20 05       		.uleb128 0x5
 3155 0c21 03       		.byte	0x3
 3156 0c22 00000000 		.4byte	lastTime
 3157 0c26 25       		.uleb128 0x25
 3158 0c27 CA030000 		.4byte	.LASF119
 3159 0c2b 01       		.byte	0x1
 3160 0c2c 62       		.byte	0x62
 3161 0c2d DF060000 		.4byte	0x6df
 3162 0c31 05       		.uleb128 0x5
 3163 0c32 03       		.byte	0x3
 3164 0c33 00000000 		.4byte	Position
 3165 0c37 25       		.uleb128 0x25
 3166 0c38 FD050000 		.4byte	.LASF120
 3167 0c3c 01       		.byte	0x1
 3168 0c3d 62       		.byte	0x62
 3169 0c3e DF060000 		.4byte	0x6df
 3170 0c42 05       		.uleb128 0x5
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 82


 3171 0c43 03       		.byte	0x3
 3172 0c44 00000000 		.4byte	LastPosition
 3173 0c48 25       		.uleb128 0x25
 3174 0c49 CB060000 		.4byte	.LASF121
 3175 0c4d 01       		.byte	0x1
 3176 0c4e 63       		.byte	0x63
 3177 0c4f DF060000 		.4byte	0x6df
 3178 0c53 05       		.uleb128 0x5
 3179 0c54 03       		.byte	0x3
 3180 0c55 00000000 		.4byte	Output
 3181 0c59 25       		.uleb128 0x25
 3182 0c5a 4E020000 		.4byte	.LASF59
 3183 0c5e 01       		.byte	0x1
 3184 0c5f 64       		.byte	0x64
 3185 0c60 6A0C0000 		.4byte	0xc6a
 3186 0c64 05       		.uleb128 0x5
 3187 0c65 03       		.byte	0x3
 3188 0c66 00000000 		.4byte	limitOutput
 3189 0c6a 06       		.uleb128 0x6
 3190 0c6b D9000000 		.4byte	0xd9
 3191 0c6f 25       		.uleb128 0x25
 3192 0c70 3D040000 		.4byte	.LASF60
 3193 0c74 01       		.byte	0x1
 3194 0c75 65       		.byte	0x65
 3195 0c76 6A0C0000 		.4byte	0xc6a
 3196 0c7a 05       		.uleb128 0x5
 3197 0c7b 03       		.byte	0x3
 3198 0c7c 00000000 		.4byte	limitIterm
 3199 0c80 25       		.uleb128 0x25
 3200 0c81 0D090000 		.4byte	.LASF122
 3201 0c85 01       		.byte	0x1
 3202 0c86 67       		.byte	0x67
 3203 0c87 1E080000 		.4byte	0x81e
 3204 0c8b 05       		.uleb128 0x5
 3205 0c8c 03       		.byte	0x3
 3206 0c8d 00000000 		.4byte	homingDone
 3207 0c91 25       		.uleb128 0x25
 3208 0c92 54070000 		.4byte	.LASF123
 3209 0c96 01       		.byte	0x1
 3210 0c97 72       		.byte	0x72
 3211 0c98 EF000000 		.4byte	0xef
 3212 0c9c 05       		.uleb128 0x5
 3213 0c9d 03       		.byte	0x3
 3214 0c9e 00000000 		.4byte	LastMoveStartTimeUsec
 3215 0ca2 25       		.uleb128 0x25
 3216 0ca3 18090000 		.4byte	.LASF124
 3217 0ca7 01       		.byte	0x1
 3218 0ca8 73       		.byte	0x73
 3219 0ca9 EF000000 		.4byte	0xef
 3220 0cad 05       		.uleb128 0x5
 3221 0cae 03       		.byte	0x3
 3222 0caf 00000000 		.4byte	LastMoveEndTimeUsec
 3223 0cb3 25       		.uleb128 0x25
 3224 0cb4 2F010000 		.4byte	.LASF125
 3225 0cb8 01       		.byte	0x1
 3226 0cb9 76       		.byte	0x76
 3227 0cba D9000000 		.4byte	0xd9
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 83


 3228 0cbe 05       		.uleb128 0x5
 3229 0cbf 03       		.byte	0x3
 3230 0cc0 00000000 		.4byte	LastMoveStableCount
 3231 0cc4 25       		.uleb128 0x25
 3232 0cc5 CA040000 		.4byte	.LASF126
 3233 0cc9 01       		.byte	0x1
 3234 0cca 79       		.byte	0x79
 3235 0ccb EF000000 		.4byte	0xef
 3236 0ccf 05       		.uleb128 0x5
 3237 0cd0 03       		.byte	0x3
 3238 0cd1 00000000 		.4byte	LastMoveTimeUsec
 3239 0cd5 25       		.uleb128 0x25
 3240 0cd6 2B060000 		.4byte	.LASF127
 3241 0cda 01       		.byte	0x1
 3242 0cdb 7C       		.byte	0x7c
 3243 0cdc 1E080000 		.4byte	0x81e
 3244 0ce0 05       		.uleb128 0x5
 3245 0ce1 03       		.byte	0x3
 3246 0ce2 00000000 		.4byte	NewCommandedMove
 3247 0ce6 25       		.uleb128 0x25
 3248 0ce7 70080000 		.4byte	.LASF128
 3249 0ceb 01       		.byte	0x1
 3250 0cec 81       		.byte	0x81
 3251 0ced F70C0000 		.4byte	0xcf7
 3252 0cf1 05       		.uleb128 0x5
 3253 0cf2 03       		.byte	0x3
 3254 0cf3 00000000 		.4byte	UptimeMicroseconds
 3255 0cf7 06       		.uleb128 0x6
 3256 0cf8 FA000000 		.4byte	0xfa
 3257 0cfc 25       		.uleb128 0x25
 3258 0cfd CF090000 		.4byte	.LASF129
 3259 0d01 01       		.byte	0x1
 3260 0d02 82       		.byte	0x82
 3261 0d03 F70C0000 		.4byte	0xcf7
 3262 0d07 05       		.uleb128 0x5
 3263 0d08 03       		.byte	0x3
 3264 0d09 00000000 		.4byte	UptimeMicrosecondsAccumulator
 3265 0d0d 25       		.uleb128 0x25
 3266 0d0e 72030000 		.4byte	.LASF130
 3267 0d12 01       		.byte	0x1
 3268 0d13 83       		.byte	0x83
 3269 0d14 F70C0000 		.4byte	0xcf7
 3270 0d18 05       		.uleb128 0x5
 3271 0d19 03       		.byte	0x3
 3272 0d1a 00000000 		.4byte	UptimeMilliseconds
 3273 0d1e 25       		.uleb128 0x25
 3274 0d1f 4E050000 		.4byte	.LASF131
 3275 0d23 01       		.byte	0x1
 3276 0d24 84       		.byte	0x84
 3277 0d25 F70C0000 		.4byte	0xcf7
 3278 0d29 05       		.uleb128 0x5
 3279 0d2a 03       		.byte	0x3
 3280 0d2b 00000000 		.4byte	UptimeMillisecondsAccumulator
 3281 0d2f 25       		.uleb128 0x25
 3282 0d30 EE070000 		.4byte	.LASF132
 3283 0d34 01       		.byte	0x1
 3284 0d35 85       		.byte	0x85
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 84


 3285 0d36 F70C0000 		.4byte	0xcf7
 3286 0d3a 05       		.uleb128 0x5
 3287 0d3b 03       		.byte	0x3
 3288 0d3c 00000000 		.4byte	UptimeSeconds
 3289 0d40 25       		.uleb128 0x25
 3290 0d41 42020000 		.4byte	.LASF133
 3291 0d45 01       		.byte	0x1
 3292 0d46 B1       		.byte	0xb1
 3293 0d47 510D0000 		.4byte	0xd51
 3294 0d4b 05       		.uleb128 0x5
 3295 0d4c 03       		.byte	0x3
 3296 0d4d 00000000 		.4byte	ConfigState
 3297 0d51 06       		.uleb128 0x6
 3298 0d52 6F010000 		.4byte	0x16f
 3299 0d56 25       		.uleb128 0x25
 3300 0d57 E4080000 		.4byte	.LASF134
 3301 0d5b 01       		.byte	0x1
 3302 0d5c B2       		.byte	0xb2
 3303 0d5d 670D0000 		.4byte	0xd67
 3304 0d61 05       		.uleb128 0x5
 3305 0d62 03       		.byte	0x3
 3306 0d63 00000000 		.4byte	FaultState
 3307 0d67 06       		.uleb128 0x6
 3308 0d68 C3000000 		.4byte	0xc3
 3309 0d6c 25       		.uleb128 0x25
 3310 0d6d FE080000 		.4byte	.LASF135
 3311 0d71 01       		.byte	0x1
 3312 0d72 B3       		.byte	0xb3
 3313 0d73 670D0000 		.4byte	0xd67
 3314 0d77 05       		.uleb128 0x5
 3315 0d78 03       		.byte	0x3
 3316 0d79 00000000 		.4byte	ConfigSequence
 3317 0d7d 25       		.uleb128 0x25
 3318 0d7e 3E080000 		.4byte	.LASF136
 3319 0d82 01       		.byte	0x1
 3320 0d83 B4       		.byte	0xb4
 3321 0d84 6A0C0000 		.4byte	0xc6a
 3322 0d88 05       		.uleb128 0x5
 3323 0d89 03       		.byte	0x3
 3324 0d8a 00000000 		.4byte	ChecksumErrors
 3325 0d8e 25       		.uleb128 0x25
 3326 0d8f 11020000 		.4byte	.LASF137
 3327 0d93 01       		.byte	0x1
 3328 0d94 B5       		.byte	0xb5
 3329 0d95 9F0D0000 		.4byte	0xd9f
 3330 0d99 05       		.uleb128 0x5
 3331 0d9a 03       		.byte	0x3
 3332 0d9b 00000000 		.4byte	MotorCurrent
 3333 0d9f 06       		.uleb128 0x6
 3334 0da0 CE000000 		.4byte	0xce
 3335 0da4 0F       		.uleb128 0xf
 3336 0da5 C3000000 		.4byte	0xc3
 3337 0da9 B40D0000 		.4byte	0xdb4
 3338 0dad 10       		.uleb128 0x10
 3339 0dae 3E010000 		.4byte	0x13e
 3340 0db2 13       		.byte	0x13
 3341 0db3 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 85


 3342 0db4 25       		.uleb128 0x25
 3343 0db5 D5050000 		.4byte	.LASF138
 3344 0db9 01       		.byte	0x1
 3345 0dba B6       		.byte	0xb6
 3346 0dbb A40D0000 		.4byte	0xda4
 3347 0dbf 05       		.uleb128 0x5
 3348 0dc0 03       		.byte	0x3
 3349 0dc1 00000000 		.4byte	CurrentI2Cinbuf
 3350 0dc5 25       		.uleb128 0x25
 3351 0dc6 95070000 		.4byte	.LASF139
 3352 0dca 01       		.byte	0x1
 3353 0dcb C8       		.byte	0xc8
 3354 0dcc EF000000 		.4byte	0xef
 3355 0dd0 05       		.uleb128 0x5
 3356 0dd1 03       		.byte	0x3
 3357 0dd2 00000000 		.4byte	LastMessageTimeSeconds
 3358 0dd6 27       		.uleb128 0x27
 3359 0dd7 08000000 		.4byte	.LASF140
 3360 0ddb 01       		.byte	0x1
 3361 0ddc 0701     		.2byte	0x107
 3362 0dde 6E030000 		.4byte	0x36e
 3363 0de2 05       		.uleb128 0x5
 3364 0de3 03       		.byte	0x3
 3365 0de4 00000000 		.4byte	rxMessage
 3366 0de8 27       		.uleb128 0x27
 3367 0de9 0A060000 		.4byte	.LASF141
 3368 0ded 01       		.byte	0x1
 3369 0dee 2001     		.2byte	0x120
 3370 0df0 9D040000 		.4byte	0x49d
 3371 0df4 05       		.uleb128 0x5
 3372 0df5 03       		.byte	0x3
 3373 0df6 00000000 		.4byte	txMessage
 3374 0dfa 27       		.uleb128 0x27
 3375 0dfb 4F0A0000 		.4byte	.LASF142
 3376 0dff 01       		.byte	0x1
 3377 0e00 2801     		.2byte	0x128
 3378 0e02 D9040000 		.4byte	0x4d9
 3379 0e06 05       		.uleb128 0x5
 3380 0e07 03       		.byte	0x3
 3381 0e08 00000000 		.4byte	txMessageState
 3382 0e0c 28       		.uleb128 0x28
 3383 0e0d 96040000 		.4byte	.LASF143
 3384 0e11 96040000 		.4byte	.LASF143
 3385 0e15 06       		.byte	0x6
 3386 0e16 28       		.byte	0x28
 3387 0e17 28       		.uleb128 0x28
 3388 0e18 2C090000 		.4byte	.LASF144
 3389 0e1c 2C090000 		.4byte	.LASF144
 3390 0e20 07       		.byte	0x7
 3391 0e21 39       		.byte	0x39
 3392 0e22 28       		.uleb128 0x28
 3393 0e23 14060000 		.4byte	.LASF145
 3394 0e27 14060000 		.4byte	.LASF145
 3395 0e2b 08       		.byte	0x8
 3396 0e2c 5A       		.byte	0x5a
 3397 0e2d 28       		.uleb128 0x28
 3398 0e2e 5F040000 		.4byte	.LASF146
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 86


 3399 0e32 5F040000 		.4byte	.LASF146
 3400 0e36 09       		.byte	0x9
 3401 0e37 5A       		.byte	0x5a
 3402 0e38 28       		.uleb128 0x28
 3403 0e39 0E0A0000 		.4byte	.LASF147
 3404 0e3d 0E0A0000 		.4byte	.LASF147
 3405 0e41 0A       		.byte	0xa
 3406 0e42 28       		.byte	0x28
 3407 0e43 28       		.uleb128 0x28
 3408 0e44 D8000000 		.4byte	.LASF148
 3409 0e48 D8000000 		.4byte	.LASF148
 3410 0e4c 0B       		.byte	0xb
 3411 0e4d 39       		.byte	0x39
 3412 0e4e 28       		.uleb128 0x28
 3413 0e4f 5C030000 		.4byte	.LASF149
 3414 0e53 5C030000 		.4byte	.LASF149
 3415 0e57 0C       		.byte	0xc
 3416 0e58 39       		.byte	0x39
 3417 0e59 28       		.uleb128 0x28
 3418 0e5a 0E050000 		.4byte	.LASF150
 3419 0e5e 0E050000 		.4byte	.LASF150
 3420 0e62 0C       		.byte	0xc
 3421 0e63 32       		.byte	0x32
 3422 0e64 29       		.uleb128 0x29
 3423 0e65 47050000 		.4byte	.LASF185
 3424 0e69 47050000 		.4byte	.LASF185
 3425 0e6d 2A       		.uleb128 0x2a
 3426 0e6e E5050000 		.4byte	.LASF151
 3427 0e72 E5050000 		.4byte	.LASF151
 3428 0e76 0D       		.byte	0xd
 3429 0e77 3D03     		.2byte	0x33d
 3430 0e79 2A       		.uleb128 0x2a
 3431 0e7a 1B040000 		.4byte	.LASF152
 3432 0e7e 1B040000 		.4byte	.LASF152
 3433 0e82 0D       		.byte	0xd
 3434 0e83 3F03     		.2byte	0x33f
 3435 0e85 2A       		.uleb128 0x2a
 3436 0e86 4B010000 		.4byte	.LASF153
 3437 0e8a 4B010000 		.4byte	.LASF153
 3438 0e8e 0D       		.byte	0xd
 3439 0e8f 4703     		.2byte	0x347
 3440 0e91 28       		.uleb128 0x28
 3441 0e92 99060000 		.4byte	.LASF154
 3442 0e96 99060000 		.4byte	.LASF154
 3443 0e9a 0E       		.byte	0xe
 3444 0e9b 70       		.byte	0x70
 3445 0e9c 2A       		.uleb128 0x2a
 3446 0e9d 7C040000 		.4byte	.LASF155
 3447 0ea1 7C040000 		.4byte	.LASF155
 3448 0ea5 0F       		.byte	0xf
 3449 0ea6 5501     		.2byte	0x155
 3450 0ea8 28       		.uleb128 0x28
 3451 0ea9 85030000 		.4byte	.LASF156
 3452 0ead 85030000 		.4byte	.LASF156
 3453 0eb1 08       		.byte	0x8
 3454 0eb2 5D       		.byte	0x5d
 3455 0eb3 2A       		.uleb128 0x2a
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 87


 3456 0eb4 46030000 		.4byte	.LASF157
 3457 0eb8 46030000 		.4byte	.LASF157
 3458 0ebc 0D       		.byte	0xd
 3459 0ebd 4503     		.2byte	0x345
 3460 0ebf 28       		.uleb128 0x28
 3461 0ec0 73070000 		.4byte	.LASF158
 3462 0ec4 73070000 		.4byte	.LASF158
 3463 0ec8 10       		.byte	0x10
 3464 0ec9 36       		.byte	0x36
 3465 0eca 28       		.uleb128 0x28
 3466 0ecb 30050000 		.4byte	.LASF159
 3467 0ecf 30050000 		.4byte	.LASF159
 3468 0ed3 11       		.byte	0x11
 3469 0ed4 36       		.byte	0x36
 3470 0ed5 28       		.uleb128 0x28
 3471 0ed6 E7030000 		.4byte	.LASF160
 3472 0eda E7030000 		.4byte	.LASF160
 3473 0ede 05       		.byte	0x5
 3474 0edf 11       		.byte	0x11
 3475 0ee0 2A       		.uleb128 0x2a
 3476 0ee1 E9040000 		.4byte	.LASF161
 3477 0ee5 E9040000 		.4byte	.LASF161
 3478 0ee9 12       		.byte	0x12
 3479 0eea 4701     		.2byte	0x147
 3480 0eec 28       		.uleb128 0x28
 3481 0eed 5C090000 		.4byte	.LASF162
 3482 0ef1 5C090000 		.4byte	.LASF162
 3483 0ef5 13       		.byte	0x13
 3484 0ef6 33       		.byte	0x33
 3485 0ef7 2A       		.uleb128 0x2a
 3486 0ef8 0E030000 		.4byte	.LASF163
 3487 0efc 0E030000 		.4byte	.LASF163
 3488 0f00 12       		.byte	0x12
 3489 0f01 3201     		.2byte	0x132
 3490 0f03 28       		.uleb128 0x28
 3491 0f04 FD020000 		.4byte	.LASF164
 3492 0f08 FD020000 		.4byte	.LASF164
 3493 0f0c 14       		.byte	0x14
 3494 0f0d 18       		.byte	0x18
 3495 0f0e 28       		.uleb128 0x28
 3496 0f0f 78060000 		.4byte	.LASF165
 3497 0f13 78060000 		.4byte	.LASF165
 3498 0f17 14       		.byte	0x14
 3499 0f18 20       		.byte	0x20
 3500 0f19 28       		.uleb128 0x28
 3501 0f1a 68090000 		.4byte	.LASF166
 3502 0f1e 68090000 		.4byte	.LASF166
 3503 0f22 0A       		.byte	0xa
 3504 0f23 18       		.byte	0x18
 3505 0f24 28       		.uleb128 0x28
 3506 0f25 E8020000 		.4byte	.LASF167
 3507 0f29 E8020000 		.4byte	.LASF167
 3508 0f2d 0A       		.byte	0xa
 3509 0f2e 20       		.byte	0x20
 3510 0f2f 28       		.uleb128 0x28
 3511 0f30 F6090000 		.4byte	.LASF168
 3512 0f34 F6090000 		.4byte	.LASF168
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 88


 3513 0f38 06       		.byte	0x6
 3514 0f39 18       		.byte	0x18
 3515 0f3a 28       		.uleb128 0x28
 3516 0f3b FC070000 		.4byte	.LASF169
 3517 0f3f FC070000 		.4byte	.LASF169
 3518 0f43 06       		.byte	0x6
 3519 0f44 20       		.byte	0x20
 3520 0f45 28       		.uleb128 0x28
 3521 0f46 AF010000 		.4byte	.LASF170
 3522 0f4a AF010000 		.4byte	.LASF170
 3523 0f4e 15       		.byte	0x15
 3524 0f4f 18       		.byte	0x18
 3525 0f50 28       		.uleb128 0x28
 3526 0f51 B3040000 		.4byte	.LASF171
 3527 0f55 B3040000 		.4byte	.LASF171
 3528 0f59 15       		.byte	0x15
 3529 0f5a 20       		.byte	0x20
 3530 0f5b 28       		.uleb128 0x28
 3531 0f5c 25010000 		.4byte	.LASF172
 3532 0f60 25010000 		.4byte	.LASF172
 3533 0f64 16       		.byte	0x16
 3534 0f65 72       		.byte	0x72
 3535 0f66 28       		.uleb128 0x28
 3536 0f67 00000000 		.4byte	.LASF173
 3537 0f6b 00000000 		.4byte	.LASF173
 3538 0f6f 17       		.byte	0x17
 3539 0f70 EC       		.byte	0xec
 3540 0f71 28       		.uleb128 0x28
 3541 0f72 AA080000 		.4byte	.LASF174
 3542 0f76 AA080000 		.4byte	.LASF174
 3543 0f7a 18       		.byte	0x18
 3544 0f7b 72       		.byte	0x72
 3545 0f7c 2A       		.uleb128 0x2a
 3546 0f7d 48070000 		.4byte	.LASF175
 3547 0f81 48070000 		.4byte	.LASF175
 3548 0f85 0F       		.byte	0xf
 3549 0f86 3201     		.2byte	0x132
 3550 0f88 2A       		.uleb128 0x2a
 3551 0f89 30020000 		.4byte	.LASF176
 3552 0f8d 30020000 		.4byte	.LASF176
 3553 0f91 0F       		.byte	0xf
 3554 0f92 5001     		.2byte	0x150
 3555 0f94 28       		.uleb128 0x28
 3556 0f95 A0000000 		.4byte	.LASF177
 3557 0f99 A0000000 		.4byte	.LASF177
 3558 0f9d 08       		.byte	0x8
 3559 0f9e 4F       		.byte	0x4f
 3560 0f9f 28       		.uleb128 0x28
 3561 0fa0 B9090000 		.4byte	.LASF178
 3562 0fa4 B9090000 		.4byte	.LASF178
 3563 0fa8 09       		.byte	0x9
 3564 0fa9 4F       		.byte	0x4f
 3565 0faa 28       		.uleb128 0x28
 3566 0fab EF000000 		.4byte	.LASF179
 3567 0faf EF000000 		.4byte	.LASF179
 3568 0fb3 19       		.byte	0x19
 3569 0fb4 33       		.byte	0x33
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 89


 3570 0fb5 00       		.byte	0
 3571              		.section	.debug_abbrev,"",%progbits
 3572              	.Ldebug_abbrev0:
 3573 0000 01       		.uleb128 0x1
 3574 0001 11       		.uleb128 0x11
 3575 0002 01       		.byte	0x1
 3576 0003 25       		.uleb128 0x25
 3577 0004 0E       		.uleb128 0xe
 3578 0005 13       		.uleb128 0x13
 3579 0006 0B       		.uleb128 0xb
 3580 0007 03       		.uleb128 0x3
 3581 0008 0E       		.uleb128 0xe
 3582 0009 1B       		.uleb128 0x1b
 3583 000a 0E       		.uleb128 0xe
 3584 000b 55       		.uleb128 0x55
 3585 000c 17       		.uleb128 0x17
 3586 000d 11       		.uleb128 0x11
 3587 000e 01       		.uleb128 0x1
 3588 000f 10       		.uleb128 0x10
 3589 0010 17       		.uleb128 0x17
 3590 0011 00       		.byte	0
 3591 0012 00       		.byte	0
 3592 0013 02       		.uleb128 0x2
 3593 0014 16       		.uleb128 0x16
 3594 0015 00       		.byte	0
 3595 0016 03       		.uleb128 0x3
 3596 0017 0E       		.uleb128 0xe
 3597 0018 3A       		.uleb128 0x3a
 3598 0019 0B       		.uleb128 0xb
 3599 001a 3B       		.uleb128 0x3b
 3600 001b 0B       		.uleb128 0xb
 3601 001c 49       		.uleb128 0x49
 3602 001d 13       		.uleb128 0x13
 3603 001e 00       		.byte	0
 3604 001f 00       		.byte	0
 3605 0020 03       		.uleb128 0x3
 3606 0021 24       		.uleb128 0x24
 3607 0022 00       		.byte	0
 3608 0023 0B       		.uleb128 0xb
 3609 0024 0B       		.uleb128 0xb
 3610 0025 3E       		.uleb128 0x3e
 3611 0026 0B       		.uleb128 0xb
 3612 0027 03       		.uleb128 0x3
 3613 0028 0E       		.uleb128 0xe
 3614 0029 00       		.byte	0
 3615 002a 00       		.byte	0
 3616 002b 04       		.uleb128 0x4
 3617 002c 24       		.uleb128 0x24
 3618 002d 00       		.byte	0
 3619 002e 0B       		.uleb128 0xb
 3620 002f 0B       		.uleb128 0xb
 3621 0030 3E       		.uleb128 0x3e
 3622 0031 0B       		.uleb128 0xb
 3623 0032 03       		.uleb128 0x3
 3624 0033 08       		.uleb128 0x8
 3625 0034 00       		.byte	0
 3626 0035 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 90


 3627 0036 05       		.uleb128 0x5
 3628 0037 16       		.uleb128 0x16
 3629 0038 00       		.byte	0
 3630 0039 03       		.uleb128 0x3
 3631 003a 0E       		.uleb128 0xe
 3632 003b 3A       		.uleb128 0x3a
 3633 003c 0B       		.uleb128 0xb
 3634 003d 3B       		.uleb128 0x3b
 3635 003e 05       		.uleb128 0x5
 3636 003f 49       		.uleb128 0x49
 3637 0040 13       		.uleb128 0x13
 3638 0041 00       		.byte	0
 3639 0042 00       		.byte	0
 3640 0043 06       		.uleb128 0x6
 3641 0044 35       		.uleb128 0x35
 3642 0045 00       		.byte	0
 3643 0046 49       		.uleb128 0x49
 3644 0047 13       		.uleb128 0x13
 3645 0048 00       		.byte	0
 3646 0049 00       		.byte	0
 3647 004a 07       		.uleb128 0x7
 3648 004b 04       		.uleb128 0x4
 3649 004c 01       		.byte	0x1
 3650 004d 0B       		.uleb128 0xb
 3651 004e 0B       		.uleb128 0xb
 3652 004f 49       		.uleb128 0x49
 3653 0050 13       		.uleb128 0x13
 3654 0051 3A       		.uleb128 0x3a
 3655 0052 0B       		.uleb128 0xb
 3656 0053 3B       		.uleb128 0x3b
 3657 0054 0B       		.uleb128 0xb
 3658 0055 01       		.uleb128 0x1
 3659 0056 13       		.uleb128 0x13
 3660 0057 00       		.byte	0
 3661 0058 00       		.byte	0
 3662 0059 08       		.uleb128 0x8
 3663 005a 28       		.uleb128 0x28
 3664 005b 00       		.byte	0
 3665 005c 03       		.uleb128 0x3
 3666 005d 0E       		.uleb128 0xe
 3667 005e 1C       		.uleb128 0x1c
 3668 005f 0B       		.uleb128 0xb
 3669 0060 00       		.byte	0
 3670 0061 00       		.byte	0
 3671 0062 09       		.uleb128 0x9
 3672 0063 13       		.uleb128 0x13
 3673 0064 01       		.byte	0x1
 3674 0065 0B       		.uleb128 0xb
 3675 0066 0B       		.uleb128 0xb
 3676 0067 3A       		.uleb128 0x3a
 3677 0068 0B       		.uleb128 0xb
 3678 0069 3B       		.uleb128 0x3b
 3679 006a 0B       		.uleb128 0xb
 3680 006b 01       		.uleb128 0x1
 3681 006c 13       		.uleb128 0x13
 3682 006d 00       		.byte	0
 3683 006e 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 91


 3684 006f 0A       		.uleb128 0xa
 3685 0070 0D       		.uleb128 0xd
 3686 0071 00       		.byte	0
 3687 0072 03       		.uleb128 0x3
 3688 0073 0E       		.uleb128 0xe
 3689 0074 3A       		.uleb128 0x3a
 3690 0075 0B       		.uleb128 0xb
 3691 0076 3B       		.uleb128 0x3b
 3692 0077 0B       		.uleb128 0xb
 3693 0078 49       		.uleb128 0x49
 3694 0079 13       		.uleb128 0x13
 3695 007a 38       		.uleb128 0x38
 3696 007b 0B       		.uleb128 0xb
 3697 007c 00       		.byte	0
 3698 007d 00       		.byte	0
 3699 007e 0B       		.uleb128 0xb
 3700 007f 0D       		.uleb128 0xd
 3701 0080 00       		.byte	0
 3702 0081 03       		.uleb128 0x3
 3703 0082 08       		.uleb128 0x8
 3704 0083 3A       		.uleb128 0x3a
 3705 0084 0B       		.uleb128 0xb
 3706 0085 3B       		.uleb128 0x3b
 3707 0086 0B       		.uleb128 0xb
 3708 0087 49       		.uleb128 0x49
 3709 0088 13       		.uleb128 0x13
 3710 0089 38       		.uleb128 0x38
 3711 008a 0B       		.uleb128 0xb
 3712 008b 00       		.byte	0
 3713 008c 00       		.byte	0
 3714 008d 0C       		.uleb128 0xc
 3715 008e 17       		.uleb128 0x17
 3716 008f 01       		.byte	0x1
 3717 0090 0B       		.uleb128 0xb
 3718 0091 0B       		.uleb128 0xb
 3719 0092 3A       		.uleb128 0x3a
 3720 0093 0B       		.uleb128 0xb
 3721 0094 3B       		.uleb128 0x3b
 3722 0095 05       		.uleb128 0x5
 3723 0096 01       		.uleb128 0x1
 3724 0097 13       		.uleb128 0x13
 3725 0098 00       		.byte	0
 3726 0099 00       		.byte	0
 3727 009a 0D       		.uleb128 0xd
 3728 009b 0D       		.uleb128 0xd
 3729 009c 00       		.byte	0
 3730 009d 03       		.uleb128 0x3
 3731 009e 08       		.uleb128 0x8
 3732 009f 3A       		.uleb128 0x3a
 3733 00a0 0B       		.uleb128 0xb
 3734 00a1 3B       		.uleb128 0x3b
 3735 00a2 05       		.uleb128 0x5
 3736 00a3 49       		.uleb128 0x49
 3737 00a4 13       		.uleb128 0x13
 3738 00a5 00       		.byte	0
 3739 00a6 00       		.byte	0
 3740 00a7 0E       		.uleb128 0xe
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 92


 3741 00a8 0D       		.uleb128 0xd
 3742 00a9 00       		.byte	0
 3743 00aa 03       		.uleb128 0x3
 3744 00ab 0E       		.uleb128 0xe
 3745 00ac 3A       		.uleb128 0x3a
 3746 00ad 0B       		.uleb128 0xb
 3747 00ae 3B       		.uleb128 0x3b
 3748 00af 05       		.uleb128 0x5
 3749 00b0 49       		.uleb128 0x49
 3750 00b1 13       		.uleb128 0x13
 3751 00b2 00       		.byte	0
 3752 00b3 00       		.byte	0
 3753 00b4 0F       		.uleb128 0xf
 3754 00b5 01       		.uleb128 0x1
 3755 00b6 01       		.byte	0x1
 3756 00b7 49       		.uleb128 0x49
 3757 00b8 13       		.uleb128 0x13
 3758 00b9 01       		.uleb128 0x1
 3759 00ba 13       		.uleb128 0x13
 3760 00bb 00       		.byte	0
 3761 00bc 00       		.byte	0
 3762 00bd 10       		.uleb128 0x10
 3763 00be 21       		.uleb128 0x21
 3764 00bf 00       		.byte	0
 3765 00c0 49       		.uleb128 0x49
 3766 00c1 13       		.uleb128 0x13
 3767 00c2 2F       		.uleb128 0x2f
 3768 00c3 0B       		.uleb128 0xb
 3769 00c4 00       		.byte	0
 3770 00c5 00       		.byte	0
 3771 00c6 11       		.uleb128 0x11
 3772 00c7 13       		.uleb128 0x13
 3773 00c8 01       		.byte	0x1
 3774 00c9 0B       		.uleb128 0xb
 3775 00ca 0B       		.uleb128 0xb
 3776 00cb 3A       		.uleb128 0x3a
 3777 00cc 0B       		.uleb128 0xb
 3778 00cd 3B       		.uleb128 0x3b
 3779 00ce 05       		.uleb128 0x5
 3780 00cf 01       		.uleb128 0x1
 3781 00d0 13       		.uleb128 0x13
 3782 00d1 00       		.byte	0
 3783 00d2 00       		.byte	0
 3784 00d3 12       		.uleb128 0x12
 3785 00d4 0D       		.uleb128 0xd
 3786 00d5 00       		.byte	0
 3787 00d6 03       		.uleb128 0x3
 3788 00d7 0E       		.uleb128 0xe
 3789 00d8 3A       		.uleb128 0x3a
 3790 00d9 0B       		.uleb128 0xb
 3791 00da 3B       		.uleb128 0x3b
 3792 00db 05       		.uleb128 0x5
 3793 00dc 49       		.uleb128 0x49
 3794 00dd 13       		.uleb128 0x13
 3795 00de 38       		.uleb128 0x38
 3796 00df 0B       		.uleb128 0xb
 3797 00e0 00       		.byte	0
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 93


 3798 00e1 00       		.byte	0
 3799 00e2 13       		.uleb128 0x13
 3800 00e3 0D       		.uleb128 0xd
 3801 00e4 00       		.byte	0
 3802 00e5 03       		.uleb128 0x3
 3803 00e6 08       		.uleb128 0x8
 3804 00e7 3A       		.uleb128 0x3a
 3805 00e8 0B       		.uleb128 0xb
 3806 00e9 3B       		.uleb128 0x3b
 3807 00ea 05       		.uleb128 0x5
 3808 00eb 49       		.uleb128 0x49
 3809 00ec 13       		.uleb128 0x13
 3810 00ed 38       		.uleb128 0x38
 3811 00ee 0B       		.uleb128 0xb
 3812 00ef 00       		.byte	0
 3813 00f0 00       		.byte	0
 3814 00f1 14       		.uleb128 0x14
 3815 00f2 04       		.uleb128 0x4
 3816 00f3 01       		.byte	0x1
 3817 00f4 0B       		.uleb128 0xb
 3818 00f5 0B       		.uleb128 0xb
 3819 00f6 49       		.uleb128 0x49
 3820 00f7 13       		.uleb128 0x13
 3821 00f8 3A       		.uleb128 0x3a
 3822 00f9 0B       		.uleb128 0xb
 3823 00fa 3B       		.uleb128 0x3b
 3824 00fb 05       		.uleb128 0x5
 3825 00fc 01       		.uleb128 0x1
 3826 00fd 13       		.uleb128 0x13
 3827 00fe 00       		.byte	0
 3828 00ff 00       		.byte	0
 3829 0100 15       		.uleb128 0x15
 3830 0101 2E       		.uleb128 0x2e
 3831 0102 01       		.byte	0x1
 3832 0103 3F       		.uleb128 0x3f
 3833 0104 19       		.uleb128 0x19
 3834 0105 03       		.uleb128 0x3
 3835 0106 0E       		.uleb128 0xe
 3836 0107 3A       		.uleb128 0x3a
 3837 0108 0B       		.uleb128 0xb
 3838 0109 3B       		.uleb128 0x3b
 3839 010a 05       		.uleb128 0x5
 3840 010b 27       		.uleb128 0x27
 3841 010c 19       		.uleb128 0x19
 3842 010d 11       		.uleb128 0x11
 3843 010e 01       		.uleb128 0x1
 3844 010f 12       		.uleb128 0x12
 3845 0110 06       		.uleb128 0x6
 3846 0111 40       		.uleb128 0x40
 3847 0112 18       		.uleb128 0x18
 3848 0113 9742     		.uleb128 0x2117
 3849 0115 19       		.uleb128 0x19
 3850 0116 01       		.uleb128 0x1
 3851 0117 13       		.uleb128 0x13
 3852 0118 00       		.byte	0
 3853 0119 00       		.byte	0
 3854 011a 16       		.uleb128 0x16
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 94


 3855 011b 898201   		.uleb128 0x4109
 3856 011e 00       		.byte	0
 3857 011f 11       		.uleb128 0x11
 3858 0120 01       		.uleb128 0x1
 3859 0121 31       		.uleb128 0x31
 3860 0122 13       		.uleb128 0x13
 3861 0123 00       		.byte	0
 3862 0124 00       		.byte	0
 3863 0125 17       		.uleb128 0x17
 3864 0126 898201   		.uleb128 0x4109
 3865 0129 01       		.byte	0x1
 3866 012a 11       		.uleb128 0x11
 3867 012b 01       		.uleb128 0x1
 3868 012c 31       		.uleb128 0x31
 3869 012d 13       		.uleb128 0x13
 3870 012e 01       		.uleb128 0x1
 3871 012f 13       		.uleb128 0x13
 3872 0130 00       		.byte	0
 3873 0131 00       		.byte	0
 3874 0132 18       		.uleb128 0x18
 3875 0133 8A8201   		.uleb128 0x410a
 3876 0136 00       		.byte	0
 3877 0137 02       		.uleb128 0x2
 3878 0138 18       		.uleb128 0x18
 3879 0139 9142     		.uleb128 0x2111
 3880 013b 18       		.uleb128 0x18
 3881 013c 00       		.byte	0
 3882 013d 00       		.byte	0
 3883 013e 19       		.uleb128 0x19
 3884 013f 898201   		.uleb128 0x4109
 3885 0142 01       		.byte	0x1
 3886 0143 11       		.uleb128 0x11
 3887 0144 01       		.uleb128 0x1
 3888 0145 31       		.uleb128 0x31
 3889 0146 13       		.uleb128 0x13
 3890 0147 00       		.byte	0
 3891 0148 00       		.byte	0
 3892 0149 1A       		.uleb128 0x1a
 3893 014a 34       		.uleb128 0x34
 3894 014b 00       		.byte	0
 3895 014c 03       		.uleb128 0x3
 3896 014d 08       		.uleb128 0x8
 3897 014e 3A       		.uleb128 0x3a
 3898 014f 0B       		.uleb128 0xb
 3899 0150 3B       		.uleb128 0x3b
 3900 0151 05       		.uleb128 0x5
 3901 0152 49       		.uleb128 0x49
 3902 0153 13       		.uleb128 0x13
 3903 0154 02       		.uleb128 0x2
 3904 0155 17       		.uleb128 0x17
 3905 0156 00       		.byte	0
 3906 0157 00       		.byte	0
 3907 0158 1B       		.uleb128 0x1b
 3908 0159 05       		.uleb128 0x5
 3909 015a 00       		.byte	0
 3910 015b 03       		.uleb128 0x3
 3911 015c 0E       		.uleb128 0xe
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 95


 3912 015d 3A       		.uleb128 0x3a
 3913 015e 0B       		.uleb128 0xb
 3914 015f 3B       		.uleb128 0x3b
 3915 0160 05       		.uleb128 0x5
 3916 0161 49       		.uleb128 0x49
 3917 0162 13       		.uleb128 0x13
 3918 0163 02       		.uleb128 0x2
 3919 0164 17       		.uleb128 0x17
 3920 0165 00       		.byte	0
 3921 0166 00       		.byte	0
 3922 0167 1C       		.uleb128 0x1c
 3923 0168 05       		.uleb128 0x5
 3924 0169 00       		.byte	0
 3925 016a 03       		.uleb128 0x3
 3926 016b 0E       		.uleb128 0xe
 3927 016c 3A       		.uleb128 0x3a
 3928 016d 0B       		.uleb128 0xb
 3929 016e 3B       		.uleb128 0x3b
 3930 016f 05       		.uleb128 0x5
 3931 0170 49       		.uleb128 0x49
 3932 0171 13       		.uleb128 0x13
 3933 0172 02       		.uleb128 0x2
 3934 0173 18       		.uleb128 0x18
 3935 0174 00       		.byte	0
 3936 0175 00       		.byte	0
 3937 0176 1D       		.uleb128 0x1d
 3938 0177 2E       		.uleb128 0x2e
 3939 0178 01       		.byte	0x1
 3940 0179 3F       		.uleb128 0x3f
 3941 017a 19       		.uleb128 0x19
 3942 017b 03       		.uleb128 0x3
 3943 017c 0E       		.uleb128 0xe
 3944 017d 3A       		.uleb128 0x3a
 3945 017e 0B       		.uleb128 0xb
 3946 017f 3B       		.uleb128 0x3b
 3947 0180 05       		.uleb128 0x5
 3948 0181 27       		.uleb128 0x27
 3949 0182 19       		.uleb128 0x19
 3950 0183 11       		.uleb128 0x11
 3951 0184 01       		.uleb128 0x1
 3952 0185 12       		.uleb128 0x12
 3953 0186 06       		.uleb128 0x6
 3954 0187 40       		.uleb128 0x40
 3955 0188 18       		.uleb128 0x18
 3956 0189 9642     		.uleb128 0x2116
 3957 018b 19       		.uleb128 0x19
 3958 018c 01       		.uleb128 0x1
 3959 018d 13       		.uleb128 0x13
 3960 018e 00       		.byte	0
 3961 018f 00       		.byte	0
 3962 0190 1E       		.uleb128 0x1e
 3963 0191 2E       		.uleb128 0x2e
 3964 0192 01       		.byte	0x1
 3965 0193 3F       		.uleb128 0x3f
 3966 0194 19       		.uleb128 0x19
 3967 0195 03       		.uleb128 0x3
 3968 0196 0E       		.uleb128 0xe
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 96


 3969 0197 3A       		.uleb128 0x3a
 3970 0198 0B       		.uleb128 0xb
 3971 0199 3B       		.uleb128 0x3b
 3972 019a 05       		.uleb128 0x5
 3973 019b 27       		.uleb128 0x27
 3974 019c 19       		.uleb128 0x19
 3975 019d 49       		.uleb128 0x49
 3976 019e 13       		.uleb128 0x13
 3977 019f 11       		.uleb128 0x11
 3978 01a0 01       		.uleb128 0x1
 3979 01a1 12       		.uleb128 0x12
 3980 01a2 06       		.uleb128 0x6
 3981 01a3 40       		.uleb128 0x40
 3982 01a4 18       		.uleb128 0x18
 3983 01a5 9742     		.uleb128 0x2117
 3984 01a7 19       		.uleb128 0x19
 3985 01a8 01       		.uleb128 0x1
 3986 01a9 13       		.uleb128 0x13
 3987 01aa 00       		.byte	0
 3988 01ab 00       		.byte	0
 3989 01ac 1F       		.uleb128 0x1f
 3990 01ad 34       		.uleb128 0x34
 3991 01ae 00       		.byte	0
 3992 01af 03       		.uleb128 0x3
 3993 01b0 0E       		.uleb128 0xe
 3994 01b1 3A       		.uleb128 0x3a
 3995 01b2 0B       		.uleb128 0xb
 3996 01b3 3B       		.uleb128 0x3b
 3997 01b4 05       		.uleb128 0x5
 3998 01b5 49       		.uleb128 0x49
 3999 01b6 13       		.uleb128 0x13
 4000 01b7 02       		.uleb128 0x2
 4001 01b8 18       		.uleb128 0x18
 4002 01b9 00       		.byte	0
 4003 01ba 00       		.byte	0
 4004 01bb 20       		.uleb128 0x20
 4005 01bc 34       		.uleb128 0x34
 4006 01bd 00       		.byte	0
 4007 01be 03       		.uleb128 0x3
 4008 01bf 0E       		.uleb128 0xe
 4009 01c0 3A       		.uleb128 0x3a
 4010 01c1 0B       		.uleb128 0xb
 4011 01c2 3B       		.uleb128 0x3b
 4012 01c3 05       		.uleb128 0x5
 4013 01c4 49       		.uleb128 0x49
 4014 01c5 13       		.uleb128 0x13
 4015 01c6 02       		.uleb128 0x2
 4016 01c7 17       		.uleb128 0x17
 4017 01c8 00       		.byte	0
 4018 01c9 00       		.byte	0
 4019 01ca 21       		.uleb128 0x21
 4020 01cb 34       		.uleb128 0x34
 4021 01cc 00       		.byte	0
 4022 01cd 03       		.uleb128 0x3
 4023 01ce 0E       		.uleb128 0xe
 4024 01cf 3A       		.uleb128 0x3a
 4025 01d0 0B       		.uleb128 0xb
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 97


 4026 01d1 3B       		.uleb128 0x3b
 4027 01d2 05       		.uleb128 0x5
 4028 01d3 49       		.uleb128 0x49
 4029 01d4 13       		.uleb128 0x13
 4030 01d5 1C       		.uleb128 0x1c
 4031 01d6 0B       		.uleb128 0xb
 4032 01d7 00       		.byte	0
 4033 01d8 00       		.byte	0
 4034 01d9 22       		.uleb128 0x22
 4035 01da 26       		.uleb128 0x26
 4036 01db 00       		.byte	0
 4037 01dc 49       		.uleb128 0x49
 4038 01dd 13       		.uleb128 0x13
 4039 01de 00       		.byte	0
 4040 01df 00       		.byte	0
 4041 01e0 23       		.uleb128 0x23
 4042 01e1 2E       		.uleb128 0x2e
 4043 01e2 01       		.byte	0x1
 4044 01e3 3F       		.uleb128 0x3f
 4045 01e4 19       		.uleb128 0x19
 4046 01e5 03       		.uleb128 0x3
 4047 01e6 0E       		.uleb128 0xe
 4048 01e7 3A       		.uleb128 0x3a
 4049 01e8 0B       		.uleb128 0xb
 4050 01e9 3B       		.uleb128 0x3b
 4051 01ea 05       		.uleb128 0x5
 4052 01eb 27       		.uleb128 0x27
 4053 01ec 19       		.uleb128 0x19
 4054 01ed 49       		.uleb128 0x49
 4055 01ee 13       		.uleb128 0x13
 4056 01ef 8701     		.uleb128 0x87
 4057 01f1 19       		.uleb128 0x19
 4058 01f2 11       		.uleb128 0x11
 4059 01f3 01       		.uleb128 0x1
 4060 01f4 12       		.uleb128 0x12
 4061 01f5 06       		.uleb128 0x6
 4062 01f6 40       		.uleb128 0x40
 4063 01f7 18       		.uleb128 0x18
 4064 01f8 9742     		.uleb128 0x2117
 4065 01fa 19       		.uleb128 0x19
 4066 01fb 01       		.uleb128 0x1
 4067 01fc 13       		.uleb128 0x13
 4068 01fd 00       		.byte	0
 4069 01fe 00       		.byte	0
 4070 01ff 24       		.uleb128 0x24
 4071 0200 34       		.uleb128 0x34
 4072 0201 00       		.byte	0
 4073 0202 03       		.uleb128 0x3
 4074 0203 0E       		.uleb128 0xe
 4075 0204 3A       		.uleb128 0x3a
 4076 0205 0B       		.uleb128 0xb
 4077 0206 3B       		.uleb128 0x3b
 4078 0207 0B       		.uleb128 0xb
 4079 0208 49       		.uleb128 0x49
 4080 0209 13       		.uleb128 0x13
 4081 020a 3F       		.uleb128 0x3f
 4082 020b 19       		.uleb128 0x19
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 98


 4083 020c 3C       		.uleb128 0x3c
 4084 020d 19       		.uleb128 0x19
 4085 020e 00       		.byte	0
 4086 020f 00       		.byte	0
 4087 0210 25       		.uleb128 0x25
 4088 0211 34       		.uleb128 0x34
 4089 0212 00       		.byte	0
 4090 0213 03       		.uleb128 0x3
 4091 0214 0E       		.uleb128 0xe
 4092 0215 3A       		.uleb128 0x3a
 4093 0216 0B       		.uleb128 0xb
 4094 0217 3B       		.uleb128 0x3b
 4095 0218 0B       		.uleb128 0xb
 4096 0219 49       		.uleb128 0x49
 4097 021a 13       		.uleb128 0x13
 4098 021b 3F       		.uleb128 0x3f
 4099 021c 19       		.uleb128 0x19
 4100 021d 02       		.uleb128 0x2
 4101 021e 18       		.uleb128 0x18
 4102 021f 00       		.byte	0
 4103 0220 00       		.byte	0
 4104 0221 26       		.uleb128 0x26
 4105 0222 34       		.uleb128 0x34
 4106 0223 00       		.byte	0
 4107 0224 03       		.uleb128 0x3
 4108 0225 08       		.uleb128 0x8
 4109 0226 3A       		.uleb128 0x3a
 4110 0227 0B       		.uleb128 0xb
 4111 0228 3B       		.uleb128 0x3b
 4112 0229 0B       		.uleb128 0xb
 4113 022a 49       		.uleb128 0x49
 4114 022b 13       		.uleb128 0x13
 4115 022c 3F       		.uleb128 0x3f
 4116 022d 19       		.uleb128 0x19
 4117 022e 02       		.uleb128 0x2
 4118 022f 18       		.uleb128 0x18
 4119 0230 00       		.byte	0
 4120 0231 00       		.byte	0
 4121 0232 27       		.uleb128 0x27
 4122 0233 34       		.uleb128 0x34
 4123 0234 00       		.byte	0
 4124 0235 03       		.uleb128 0x3
 4125 0236 0E       		.uleb128 0xe
 4126 0237 3A       		.uleb128 0x3a
 4127 0238 0B       		.uleb128 0xb
 4128 0239 3B       		.uleb128 0x3b
 4129 023a 05       		.uleb128 0x5
 4130 023b 49       		.uleb128 0x49
 4131 023c 13       		.uleb128 0x13
 4132 023d 3F       		.uleb128 0x3f
 4133 023e 19       		.uleb128 0x19
 4134 023f 02       		.uleb128 0x2
 4135 0240 18       		.uleb128 0x18
 4136 0241 00       		.byte	0
 4137 0242 00       		.byte	0
 4138 0243 28       		.uleb128 0x28
 4139 0244 2E       		.uleb128 0x2e
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 99


 4140 0245 00       		.byte	0
 4141 0246 3F       		.uleb128 0x3f
 4142 0247 19       		.uleb128 0x19
 4143 0248 3C       		.uleb128 0x3c
 4144 0249 19       		.uleb128 0x19
 4145 024a 6E       		.uleb128 0x6e
 4146 024b 0E       		.uleb128 0xe
 4147 024c 03       		.uleb128 0x3
 4148 024d 0E       		.uleb128 0xe
 4149 024e 3A       		.uleb128 0x3a
 4150 024f 0B       		.uleb128 0xb
 4151 0250 3B       		.uleb128 0x3b
 4152 0251 0B       		.uleb128 0xb
 4153 0252 00       		.byte	0
 4154 0253 00       		.byte	0
 4155 0254 29       		.uleb128 0x29
 4156 0255 2E       		.uleb128 0x2e
 4157 0256 00       		.byte	0
 4158 0257 3F       		.uleb128 0x3f
 4159 0258 19       		.uleb128 0x19
 4160 0259 3C       		.uleb128 0x3c
 4161 025a 19       		.uleb128 0x19
 4162 025b 6E       		.uleb128 0x6e
 4163 025c 0E       		.uleb128 0xe
 4164 025d 03       		.uleb128 0x3
 4165 025e 0E       		.uleb128 0xe
 4166 025f 00       		.byte	0
 4167 0260 00       		.byte	0
 4168 0261 2A       		.uleb128 0x2a
 4169 0262 2E       		.uleb128 0x2e
 4170 0263 00       		.byte	0
 4171 0264 3F       		.uleb128 0x3f
 4172 0265 19       		.uleb128 0x19
 4173 0266 3C       		.uleb128 0x3c
 4174 0267 19       		.uleb128 0x19
 4175 0268 6E       		.uleb128 0x6e
 4176 0269 0E       		.uleb128 0xe
 4177 026a 03       		.uleb128 0x3
 4178 026b 0E       		.uleb128 0xe
 4179 026c 3A       		.uleb128 0x3a
 4180 026d 0B       		.uleb128 0xb
 4181 026e 3B       		.uleb128 0x3b
 4182 026f 05       		.uleb128 0x5
 4183 0270 00       		.byte	0
 4184 0271 00       		.byte	0
 4185 0272 00       		.byte	0
 4186              		.section	.debug_loc,"",%progbits
 4187              	.Ldebug_loc0:
 4188              	.LLST0:
 4189 0000 2A000000 		.4byte	.LVL9
 4190 0004 2E000000 		.4byte	.LVL10
 4191 0008 0200     		.2byte	0x2
 4192 000a 30       		.byte	0x30
 4193 000b 9F       		.byte	0x9f
 4194 000c 2E000000 		.4byte	.LVL10
 4195 0010 4A000000 		.4byte	.LVL15
 4196 0014 0100     		.2byte	0x1
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 100


 4197 0016 54       		.byte	0x54
 4198 0017 00000000 		.4byte	0
 4199 001b 00000000 		.4byte	0
 4200              	.LLST1:
 4201 001f 00000000 		.4byte	.LVL16
 4202 0023 12000000 		.4byte	.LVL17
 4203 0027 0100     		.2byte	0x1
 4204 0029 50       		.byte	0x50
 4205 002a 12000000 		.4byte	.LVL17
 4206 002e 1C000000 		.4byte	.LFE32
 4207 0032 0400     		.2byte	0x4
 4208 0034 F3       		.byte	0xf3
 4209 0035 01       		.uleb128 0x1
 4210 0036 50       		.byte	0x50
 4211 0037 9F       		.byte	0x9f
 4212 0038 00000000 		.4byte	0
 4213 003c 00000000 		.4byte	0
 4214              	.LLST2:
 4215 0040 08000000 		.4byte	.LVL19
 4216 0044 0B000000 		.4byte	.LVL20-1
 4217 0048 0100     		.2byte	0x1
 4218 004a 50       		.byte	0x50
 4219 004b 00000000 		.4byte	0
 4220 004f 00000000 		.4byte	0
 4221              	.LLST3:
 4222 0053 00000000 		.4byte	.LVL21
 4223 0057 0A000000 		.4byte	.LVL22
 4224 005b 0100     		.2byte	0x1
 4225 005d 50       		.byte	0x50
 4226 005e 0A000000 		.4byte	.LVL22
 4227 0062 0D000000 		.4byte	.LVL23-1
 4228 0066 0400     		.2byte	0x4
 4229 0068 70       		.byte	0x70
 4230 0069 E079     		.sleb128 -800
 4231 006b 9F       		.byte	0x9f
 4232 006c 0D000000 		.4byte	.LVL23-1
 4233 0070 10000000 		.4byte	.LFE36
 4234 0074 0400     		.2byte	0x4
 4235 0076 F3       		.byte	0xf3
 4236 0077 01       		.uleb128 0x1
 4237 0078 50       		.byte	0x50
 4238 0079 9F       		.byte	0x9f
 4239 007a 00000000 		.4byte	0
 4240 007e 00000000 		.4byte	0
 4241              	.LLST4:
 4242 0082 1C000000 		.4byte	.LVL26
 4243 0086 F4000000 		.4byte	.LVL43
 4244 008a 0100     		.2byte	0x1
 4245 008c 54       		.byte	0x54
 4246 008d 56010000 		.4byte	.LVL50
 4247 0091 58010000 		.4byte	.LVL51
 4248 0095 0100     		.2byte	0x1
 4249 0097 54       		.byte	0x54
 4250 0098 58010000 		.4byte	.LVL51
 4251 009c 73010000 		.4byte	.LVL54-1
 4252 00a0 0200     		.2byte	0x2
 4253 00a2 74       		.byte	0x74
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 101


 4254 00a3 02       		.sleb128 2
 4255 00a4 00000000 		.4byte	0
 4256 00a8 00000000 		.4byte	0
 4257              	.LLST5:
 4258 00ac 1A000000 		.4byte	.LVL25
 4259 00b0 6B000000 		.4byte	.LVL37-1
 4260 00b4 0100     		.2byte	0x1
 4261 00b6 50       		.byte	0x50
 4262 00b7 B8000000 		.4byte	.LVL39
 4263 00bb BA000000 		.4byte	.LVL40
 4264 00bf 0100     		.2byte	0x1
 4265 00c1 50       		.byte	0x50
 4266 00c2 56010000 		.4byte	.LVL50
 4267 00c6 64010000 		.4byte	.LVL53
 4268 00ca 0100     		.2byte	0x1
 4269 00cc 50       		.byte	0x50
 4270 00cd 00000000 		.4byte	0
 4271 00d1 00000000 		.4byte	0
 4272              	.LLST6:
 4273 00d5 22000000 		.4byte	.LVL27
 4274 00d9 28000000 		.4byte	.LVL28
 4275 00dd 0200     		.2byte	0x2
 4276 00df 30       		.byte	0x30
 4277 00e0 9F       		.byte	0x9f
 4278 00e1 28000000 		.4byte	.LVL28
 4279 00e5 32000000 		.4byte	.LVL31
 4280 00e9 0100     		.2byte	0x1
 4281 00eb 53       		.byte	0x53
 4282 00ec 34000000 		.4byte	.LVL32
 4283 00f0 3E000000 		.4byte	.LVL33
 4284 00f4 0100     		.2byte	0x1
 4285 00f6 53       		.byte	0x53
 4286 00f7 50000000 		.4byte	.LVL35
 4287 00fb 52000000 		.4byte	.LVL36
 4288 00ff 0100     		.2byte	0x1
 4289 0101 53       		.byte	0x53
 4290 0102 1E020000 		.4byte	.LVL56
 4291 0106 24020000 		.4byte	.LVL57
 4292 010a 0200     		.2byte	0x2
 4293 010c 30       		.byte	0x30
 4294 010d 9F       		.byte	0x9f
 4295 010e 24020000 		.4byte	.LVL57
 4296 0112 2E020000 		.4byte	.LVL60
 4297 0116 0100     		.2byte	0x1
 4298 0118 53       		.byte	0x53
 4299 0119 30020000 		.4byte	.LVL61
 4300 011d 3F020000 		.4byte	.LVL63-1
 4301 0121 0100     		.2byte	0x1
 4302 0123 53       		.byte	0x53
 4303 0124 00000000 		.4byte	0
 4304 0128 00000000 		.4byte	0
 4305              	.LLST7:
 4306 012c 22000000 		.4byte	.LVL27
 4307 0130 28000000 		.4byte	.LVL28
 4308 0134 0200     		.2byte	0x2
 4309 0136 30       		.byte	0x30
 4310 0137 9F       		.byte	0x9f
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 102


 4311 0138 28000000 		.4byte	.LVL28
 4312 013c 2E000000 		.4byte	.LVL29
 4313 0140 0100     		.2byte	0x1
 4314 0142 52       		.byte	0x52
 4315 0143 30000000 		.4byte	.LVL30
 4316 0147 42000000 		.4byte	.LVL34
 4317 014b 0100     		.2byte	0x1
 4318 014d 52       		.byte	0x52
 4319 014e 50000000 		.4byte	.LVL35
 4320 0152 6B000000 		.4byte	.LVL37-1
 4321 0156 0100     		.2byte	0x1
 4322 0158 52       		.byte	0x52
 4323 0159 B8000000 		.4byte	.LVL39
 4324 015d C0000000 		.4byte	.LVL41
 4325 0161 0100     		.2byte	0x1
 4326 0163 52       		.byte	0x52
 4327 0164 56010000 		.4byte	.LVL50
 4328 0168 62010000 		.4byte	.LVL52
 4329 016c 0100     		.2byte	0x1
 4330 016e 52       		.byte	0x52
 4331 016f 1E020000 		.4byte	.LVL56
 4332 0173 24020000 		.4byte	.LVL57
 4333 0177 0200     		.2byte	0x2
 4334 0179 30       		.byte	0x30
 4335 017a 9F       		.byte	0x9f
 4336 017b 24020000 		.4byte	.LVL57
 4337 017f 2A020000 		.4byte	.LVL58
 4338 0183 0100     		.2byte	0x1
 4339 0185 52       		.byte	0x52
 4340 0186 2C020000 		.4byte	.LVL59
 4341 018a 38020000 		.4byte	.LVL62
 4342 018e 0100     		.2byte	0x1
 4343 0190 52       		.byte	0x52
 4344 0191 00000000 		.4byte	0
 4345 0195 00000000 		.4byte	0
 4346              	.LLST8:
 4347 0199 24010000 		.4byte	.LVL45
 4348 019d 34010000 		.4byte	.LVL47
 4349 01a1 0100     		.2byte	0x1
 4350 01a3 53       		.byte	0x53
 4351 01a4 44010000 		.4byte	.LVL48
 4352 01a8 48010000 		.4byte	.LVL49
 4353 01ac 0100     		.2byte	0x1
 4354 01ae 53       		.byte	0x53
 4355 01af 00000000 		.4byte	0
 4356 01b3 00000000 		.4byte	0
 4357              	.LLST9:
 4358 01b7 00000000 		.4byte	.LVL66
 4359 01bb 1B000000 		.4byte	.LVL68-1
 4360 01bf 0100     		.2byte	0x1
 4361 01c1 50       		.byte	0x50
 4362 01c2 1B000000 		.4byte	.LVL68-1
 4363 01c6 28000000 		.4byte	.LFE39
 4364 01ca 0400     		.2byte	0x4
 4365 01cc F3       		.byte	0xf3
 4366 01cd 01       		.uleb128 0x1
 4367 01ce 50       		.byte	0x50
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 103


 4368 01cf 9F       		.byte	0x9f
 4369 01d0 00000000 		.4byte	0
 4370 01d4 00000000 		.4byte	0
 4371              	.LLST10:
 4372 01d8 0A000000 		.4byte	.LVL67
 4373 01dc 22000000 		.4byte	.LVL69
 4374 01e0 0100     		.2byte	0x1
 4375 01e2 54       		.byte	0x54
 4376 01e3 22000000 		.4byte	.LVL69
 4377 01e7 28000000 		.4byte	.LFE39
 4378 01eb 0500     		.2byte	0x5
 4379 01ed 03       		.byte	0x3
 4380 01ee 00000000 		.4byte	inAuto
 4381 01f2 00000000 		.4byte	0
 4382 01f6 00000000 		.4byte	0
 4383              		.section	.debug_aranges,"",%progbits
 4384 0000 84000000 		.4byte	0x84
 4385 0004 0200     		.2byte	0x2
 4386 0006 00000000 		.4byte	.Ldebug_info0
 4387 000a 04       		.byte	0x4
 4388 000b 00       		.byte	0
 4389 000c 0000     		.2byte	0
 4390 000e 0000     		.2byte	0
 4391 0010 00000000 		.4byte	.LFB43
 4392 0014 24000000 		.4byte	.LFE43-.LFB43
 4393 0018 00000000 		.4byte	.LFB44
 4394 001c 1C000000 		.4byte	.LFE44-.LFB44
 4395 0020 00000000 		.4byte	.LFB45
 4396 0024 60000000 		.4byte	.LFE45-.LFB45
 4397 0028 00000000 		.4byte	.LFB32
 4398 002c 1C000000 		.4byte	.LFE32-.LFB32
 4399 0030 00000000 		.4byte	.LFB33
 4400 0034 1C000000 		.4byte	.LFE33-.LFB33
 4401 0038 00000000 		.4byte	.LFB34
 4402 003c 18000000 		.4byte	.LFE34-.LFB34
 4403 0040 00000000 		.4byte	.LFB36
 4404 0044 10000000 		.4byte	.LFE36-.LFB36
 4405 0048 00000000 		.4byte	.LFB37
 4406 004c 44000000 		.4byte	.LFE37-.LFB37
 4407 0050 00000000 		.4byte	.LFB35
 4408 0054 B0020000 		.4byte	.LFE35-.LFB35
 4409 0058 00000000 		.4byte	.LFB38
 4410 005c 30000000 		.4byte	.LFE38-.LFB38
 4411 0060 00000000 		.4byte	.LFB39
 4412 0064 28000000 		.4byte	.LFE39-.LFB39
 4413 0068 00000000 		.4byte	.LFB40
 4414 006c 68010000 		.4byte	.LFE40-.LFB40
 4415 0070 00000000 		.4byte	.LFB42
 4416 0074 BC000000 		.4byte	.LFE42-.LFB42
 4417 0078 00000000 		.4byte	.LFB41
 4418 007c 38010000 		.4byte	.LFE41-.LFB41
 4419 0080 00000000 		.4byte	0
 4420 0084 00000000 		.4byte	0
 4421              		.section	.debug_ranges,"",%progbits
 4422              	.Ldebug_ranges0:
 4423 0000 00000000 		.4byte	.LFB43
 4424 0004 24000000 		.4byte	.LFE43
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 104


 4425 0008 00000000 		.4byte	.LFB44
 4426 000c 1C000000 		.4byte	.LFE44
 4427 0010 00000000 		.4byte	.LFB45
 4428 0014 60000000 		.4byte	.LFE45
 4429 0018 00000000 		.4byte	.LFB32
 4430 001c 1C000000 		.4byte	.LFE32
 4431 0020 00000000 		.4byte	.LFB33
 4432 0024 1C000000 		.4byte	.LFE33
 4433 0028 00000000 		.4byte	.LFB34
 4434 002c 18000000 		.4byte	.LFE34
 4435 0030 00000000 		.4byte	.LFB36
 4436 0034 10000000 		.4byte	.LFE36
 4437 0038 00000000 		.4byte	.LFB37
 4438 003c 44000000 		.4byte	.LFE37
 4439 0040 00000000 		.4byte	.LFB35
 4440 0044 B0020000 		.4byte	.LFE35
 4441 0048 00000000 		.4byte	.LFB38
 4442 004c 30000000 		.4byte	.LFE38
 4443 0050 00000000 		.4byte	.LFB39
 4444 0054 28000000 		.4byte	.LFE39
 4445 0058 00000000 		.4byte	.LFB40
 4446 005c 68010000 		.4byte	.LFE40
 4447 0060 00000000 		.4byte	.LFB42
 4448 0064 BC000000 		.4byte	.LFE42
 4449 0068 00000000 		.4byte	.LFB41
 4450 006c 38010000 		.4byte	.LFE41
 4451 0070 00000000 		.4byte	0
 4452 0074 00000000 		.4byte	0
 4453              		.section	.debug_line,"",%progbits
 4454              	.Ldebug_line0:
 4455 0000 88040000 		.section	.debug_str,"MS",%progbits,1
 4455      02006302 
 4455      00000201 
 4455      FB0E0D00 
 4455      01010101 
 4456              	.LASF173:
 4457 0000 43794465 		.ascii	"CyDelay\000"
 4457      6C617900 
 4458              	.LASF140:
 4459 0008 72784D65 		.ascii	"rxMessage\000"
 4459      73736167 
 4459      6500
 4460              	.LASF181:
 4461 0012 6D61696E 		.ascii	"main.c\000"
 4461      2E6300
 4462              	.LASF78:
 4463 0019 6D6F746F 		.ascii	"motor_current\000"
 4463      725F6375 
 4463      7272656E 
 4463      7400
 4464              	.LASF109:
 4465 0027 62726D73 		.ascii	"brmsRG4Mask\000"
 4465      5247344D 
 4465      61736B00 
 4466              	.LASF83:
 4467 0033 74786D73 		.ascii	"txmsClear\000"
 4467      436C6561 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 105


 4467      7200
 4468              	.LASF93:
 4469 003d 6F757470 		.ascii	"output\000"
 4469      757400
 4470              	.LASF91:
 4471 0044 4D6F746F 		.ascii	"MotorCurrentRead\000"
 4471      72437572 
 4471      72656E74 
 4471      52656164 
 4471      00
 4472              	.LASF105:
 4473 0055 62726D73 		.ascii	"brmsTask\000"
 4473      5461736B 
 4473      00
 4474              	.LASF61:
 4475 005e 65666673 		.ascii	"effsetdelta\000"
 4475      65746465 
 4475      6C746100 
 4476              	.LASF37:
 4477 006a 6673456E 		.ascii	"fsEncoder\000"
 4477      636F6465 
 4477      7200
 4478              	.LASF31:
 4479 0074 6373556E 		.ascii	"csUnconfig\000"
 4479      636F6E66 
 4479      696700
 4480              	.LASF101:
 4481 007f 6E657741 		.ascii	"newAuto\000"
 4481      75746F00 
 4482              	.LASF15:
 4483 0087 756E7369 		.ascii	"unsigned int\000"
 4483      676E6564 
 4483      20696E74 
 4483      00
 4484              	.LASF106:
 4485 0094 62726D73 		.ascii	"brmsRG1Mask\000"
 4485      5247314D 
 4485      61736B00 
 4486              	.LASF177:
 4487 00a0 436F756E 		.ascii	"Counter_1_Start\000"
 4487      7465725F 
 4487      315F5374 
 4487      61727400 
 4488              	.LASF103:
 4489 00b0 72756E52 		.ascii	"runRateGroup1_PID\000"
 4489      61746547 
 4489      726F7570 
 4489      315F5049 
 4489      4400
 4490              	.LASF65:
 4491 00c2 636C6561 		.ascii	"clearfaults\000"
 4491      72666175 
 4491      6C747300 
 4492              	.LASF8:
 4493 00ce 5F5F696E 		.ascii	"__int32_t\000"
 4493      7433325F 
 4493      7400
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 106


 4494              	.LASF148:
 4495 00d8 484F4D45 		.ascii	"HOME_IN_ClearInterrupt\000"
 4495      5F494E5F 
 4495      436C6561 
 4495      72496E74 
 4495      65727275 
 4496              	.LASF179:
 4497 00ef 4C45445F 		.ascii	"LED_Write\000"
 4497      57726974 
 4497      6500
 4498              	.LASF87:
 4499 00f9 486F6D65 		.ascii	"HomeIsrHandler\000"
 4499      49737248 
 4499      616E646C 
 4499      657200
 4500              	.LASF85:
 4501 0108 74784D65 		.ascii	"txMessageStates_t\000"
 4501      73736167 
 4501      65537461 
 4501      7465735F 
 4501      7400
 4502              	.LASF90:
 4503 011a 436C6561 		.ascii	"ClearFault\000"
 4503      72466175 
 4503      6C7400
 4504              	.LASF172:
 4505 0125 4932435F 		.ascii	"I2C_Start\000"
 4505      53746172 
 4505      7400
 4506              	.LASF125:
 4507 012f 4C617374 		.ascii	"LastMoveStableCount\000"
 4507      4D6F7665 
 4507      53746162 
 4507      6C65436F 
 4507      756E7400 
 4508              	.LASF32:
 4509 0143 63735265 		.ascii	"csReady\000"
 4509      61647900 
 4510              	.LASF153:
 4511 014b 5350495F 		.ascii	"SPI_1_SpiUartClearTxBuffer\000"
 4511      315F5370 
 4511      69556172 
 4511      74436C65 
 4511      61725478 
 4512              	.LASF21:
 4513 0166 75696E74 		.ascii	"uint32_t\000"
 4513      33325F74 
 4513      00
 4514              	.LASF16:
 4515 016f 696E7438 		.ascii	"int8_t\000"
 4515      5F7400
 4516              	.LASF50:
 4517 0176 72784D65 		.ascii	"rxMessage_opcodes_t\000"
 4517      73736167 
 4517      655F6F70 
 4517      636F6465 
 4517      735F7400 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 107


 4518              	.LASF66:
 4519 018a 72784D65 		.ascii	"rxMessage_status_t\000"
 4519      73736167 
 4519      655F7374 
 4519      61747573 
 4519      5F7400
 4520              	.LASF89:
 4521 019d 41737365 		.ascii	"AssertFault\000"
 4521      72744661 
 4521      756C7400 
 4522              	.LASF24:
 4523 01a9 666C6F61 		.ascii	"float\000"
 4523      7400
 4524              	.LASF170:
 4525 01af 6973725F 		.ascii	"isr_spi_ss_StartEx\000"
 4525      7370695F 
 4525      73735F53 
 4525      74617274 
 4525      457800
 4526              	.LASF51:
 4527 01c2 63686563 		.ascii	"checksum\000"
 4527      6B73756D 
 4527      00
 4528              	.LASF71:
 4529 01cb 73657465 		.ascii	"setenc\000"
 4529      6E6300
 4530              	.LASF18:
 4531 01d2 696E7431 		.ascii	"int16_t\000"
 4531      365F7400 
 4532              	.LASF95:
 4533 01da 72657375 		.ascii	"result\000"
 4533      6C7400
 4534              	.LASF14:
 4535 01e1 6C6F6E67 		.ascii	"long long unsigned int\000"
 4535      206C6F6E 
 4535      6720756E 
 4535      7369676E 
 4535      65642069 
 4536              	.LASF117:
 4537 01f8 5049445F 		.ascii	"PID_EffSetDelta\000"
 4537      45666653 
 4537      65744465 
 4537      6C746100 
 4538              	.LASF118:
 4539 0208 6C617374 		.ascii	"lastTime\000"
 4539      54696D65 
 4539      00
 4540              	.LASF137:
 4541 0211 4D6F746F 		.ascii	"MotorCurrent\000"
 4541      72437572 
 4541      72656E74 
 4541      00
 4542              	.LASF6:
 4543 021e 5F5F7569 		.ascii	"__uint16_t\000"
 4543      6E743136 
 4543      5F7400
 4544              	.LASF63:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 108


 4545 0229 656E6162 		.ascii	"enable\000"
 4545      6C6500
 4546              	.LASF176:
 4547 0230 50574D5F 		.ascii	"PWM_1_WritePeriod\000"
 4547      315F5772 
 4547      69746550 
 4547      6572696F 
 4547      6400
 4548              	.LASF133:
 4549 0242 436F6E66 		.ascii	"ConfigState\000"
 4549      69675374 
 4549      61746500 
 4550              	.LASF59:
 4551 024e 6C696D69 		.ascii	"limitOutput\000"
 4551      744F7574 
 4551      70757400 
 4552              	.LASF180:
 4553 025a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4553      43313120 
 4553      352E342E 
 4553      31203230 
 4553      31363036 
 4554 028d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 4554      20726576 
 4554      6973696F 
 4554      6E203233 
 4554      37373135 
 4555 02c0 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 4555      66756E63 
 4555      74696F6E 
 4555      2D736563 
 4555      74696F6E 
 4556              	.LASF167:
 4557 02e8 6973725F 		.ascii	"isr_home_SetPriority\000"
 4557      686F6D65 
 4557      5F536574 
 4557      5072696F 
 4557      72697479 
 4558              	.LASF164:
 4559 02fd 6973725F 		.ascii	"isr_brms_StartEx\000"
 4559      62726D73 
 4559      5F537461 
 4559      72744578 
 4559      00
 4560              	.LASF163:
 4561 030e 54696D65 		.ascii	"Timer_BRMS_Start\000"
 4561      725F4252 
 4561      4D535F53 
 4561      74617274 
 4561      00
 4562              	.LASF102:
 4563 031f 5F426F6F 		.ascii	"_Bool\000"
 4563      6C00
 4564              	.LASF36:
 4565 0325 6673556E 		.ascii	"fsUnconfigured\000"
 4565      636F6E66 
 4565      69677572 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 109


 4565      656400
 4566              	.LASF112:
 4567 0334 696E4175 		.ascii	"inAuto\000"
 4567      746F00
 4568              	.LASF13:
 4569 033b 5F5F7569 		.ascii	"__uint64_t\000"
 4569      6E743634 
 4569      5F7400
 4570              	.LASF157:
 4571 0346 5350495F 		.ascii	"SPI_1_SpiUartPutArray\000"
 4571      315F5370 
 4571      69556172 
 4571      74507574 
 4571      41727261 
 4572              	.LASF149:
 4573 035c 7370695F 		.ascii	"spi_ss_ClearInterrupt\000"
 4573      73735F43 
 4573      6C656172 
 4573      496E7465 
 4573      72727570 
 4574              	.LASF130:
 4575 0372 55707469 		.ascii	"UptimeMilliseconds\000"
 4575      6D654D69 
 4575      6C6C6973 
 4575      65636F6E 
 4575      647300
 4576              	.LASF156:
 4577 0385 436F756E 		.ascii	"Counter_1_ReadCounter\000"
 4577      7465725F 
 4577      315F5265 
 4577      6164436F 
 4577      756E7465 
 4578              	.LASF72:
 4579 039b 76657273 		.ascii	"version0\000"
 4579      696F6E30 
 4579      00
 4580              	.LASF73:
 4581 03a4 76657273 		.ascii	"version1\000"
 4581      696F6E31 
 4581      00
 4582              	.LASF74:
 4583 03ad 76657273 		.ascii	"version2\000"
 4583      696F6E32 
 4583      00
 4584              	.LASF54:
 4585 03b6 72784D65 		.ascii	"rxMessage_overlay_t\000"
 4585      73736167 
 4585      655F6F76 
 4585      65726C61 
 4585      795F7400 
 4586              	.LASF119:
 4587 03ca 506F7369 		.ascii	"Position\000"
 4587      74696F6E 
 4587      00
 4588              	.LASF26:
 4589 03d3 63686172 		.ascii	"char\000"
 4589      00
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 110


 4590              	.LASF81:
 4591 03d8 6C617374 		.ascii	"last_move_time\000"
 4591      5F6D6F76 
 4591      655F7469 
 4591      6D6500
 4592              	.LASF160:
 4593 03e7 5049445F 		.ascii	"PID_UpdateValues\000"
 4593      55706461 
 4593      74655661 
 4593      6C756573 
 4593      00
 4594              	.LASF99:
 4595 03f8 5049445F 		.ascii	"PID_SetMode\000"
 4595      5365744D 
 4595      6F646500 
 4596              	.LASF92:
 4597 0404 50574D5F 		.ascii	"PWM_Set\000"
 4597      53657400 
 4598              	.LASF104:
 4599 040c 42524D53 		.ascii	"BRMS_Interrupt\000"
 4599      5F496E74 
 4599      65727275 
 4599      707400
 4600              	.LASF152:
 4601 041b 5350495F 		.ascii	"SPI_1_SpiUartClearRxBuffer\000"
 4601      315F5370 
 4601      69556172 
 4601      74436C65 
 4601      61725278 
 4602              	.LASF53:
 4603 0436 6F70636F 		.ascii	"opcode\000"
 4603      646500
 4604              	.LASF60:
 4605 043d 6C696D69 		.ascii	"limitIterm\000"
 4605      74497465 
 4605      726D00
 4606              	.LASF17:
 4607 0448 75696E74 		.ascii	"uint8_t\000"
 4607      385F7400 
 4608              	.LASF70:
 4609 0450 73746174 		.ascii	"status\000"
 4609      757300
 4610              	.LASF38:
 4611 0457 6673496E 		.ascii	"fsIndex\000"
 4611      64657800 
 4612              	.LASF146:
 4613 045f 496E6465 		.ascii	"Index_Counter_1_WriteCounter\000"
 4613      785F436F 
 4613      756E7465 
 4613      725F315F 
 4613      57726974 
 4614              	.LASF155:
 4615 047c 50574D5F 		.ascii	"PWM_1_WriteCompare\000"
 4615      315F5772 
 4615      69746543 
 4615      6F6D7061 
 4615      726500
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 111


 4616              	.LASF35:
 4617 048f 66734E4F 		.ascii	"fsNONE\000"
 4617      4E4500
 4618              	.LASF143:
 4619 0496 6973725F 		.ascii	"isr_rst_encoder_ClearPending\000"
 4619      7273745F 
 4619      656E636F 
 4619      6465725F 
 4619      436C6561 
 4620              	.LASF171:
 4621 04b3 6973725F 		.ascii	"isr_spi_ss_SetPriority\000"
 4621      7370695F 
 4621      73735F53 
 4621      65745072 
 4621      696F7269 
 4622              	.LASF126:
 4623 04ca 4C617374 		.ascii	"LastMoveTimeUsec\000"
 4623      4D6F7665 
 4623      54696D65 
 4623      55736563 
 4623      00
 4624              	.LASF12:
 4625 04db 6C6F6E67 		.ascii	"long long int\000"
 4625      206C6F6E 
 4625      6720696E 
 4625      7400
 4626              	.LASF161:
 4627 04e9 54696D65 		.ascii	"Timer_BRMS_ClearInterrupt\000"
 4627      725F4252 
 4627      4D535F43 
 4627      6C656172 
 4627      496E7465 
 4628              	.LASF40:
 4629 0503 66734368 		.ascii	"fsChecksum\000"
 4629      65636B73 
 4629      756D00
 4630              	.LASF150:
 4631 050e 7370695F 		.ascii	"spi_ss_Read\000"
 4631      73735F52 
 4631      65616400 
 4632              	.LASF111:
 4633 051a 69746572 		.ascii	"iterm_delay\000"
 4633      6D5F6465 
 4633      6C617900 
 4634              	.LASF4:
 4635 0526 5F5F696E 		.ascii	"__int16_t\000"
 4635      7431365F 
 4635      7400
 4636              	.LASF159:
 4637 0530 494E4445 		.ascii	"INDEX_OUT_SetDriveMode\000"
 4637      585F4F55 
 4637      545F5365 
 4637      74447269 
 4637      76654D6F 
 4638              	.LASF185:
 4639 0547 6D656D73 		.ascii	"memset\000"
 4639      657400
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 112


 4640              	.LASF131:
 4641 054e 55707469 		.ascii	"UptimeMillisecondsAccumulator\000"
 4641      6D654D69 
 4641      6C6C6973 
 4641      65636F6E 
 4641      64734163 
 4642              	.LASF77:
 4643 056c 63686563 		.ascii	"checksum_errors\000"
 4643      6B73756D 
 4643      5F657272 
 4643      6F727300 
 4644              	.LASF52:
 4645 057c 73697A65 		.ascii	"size\000"
 4645      00
 4646              	.LASF182:
 4647 0581 433A5C55 		.ascii	"C:\\Users\\prichards\\proj\\acsnb-motor-cypress\\Qu"
 4647      73657273 
 4647      5C707269 
 4647      63686172 
 4647      64735C70 
 4648 05af 6164456E 		.ascii	"adEncoderRTOS.cydsn\000"
 4648      636F6465 
 4648      7252544F 
 4648      532E6379 
 4648      64736E00 
 4649              	.LASF23:
 4650 05c3 75696E74 		.ascii	"uint32\000"
 4650      333200
 4651              	.LASF84:
 4652 05ca 74786D73 		.ascii	"txmsLoaded\000"
 4652      4C6F6164 
 4652      656400
 4653              	.LASF138:
 4654 05d5 43757272 		.ascii	"CurrentI2Cinbuf\000"
 4654      656E7449 
 4654      3243696E 
 4654      62756600 
 4655              	.LASF151:
 4656 05e5 5350495F 		.ascii	"SPI_1_SpiUartReadRxData\000"
 4656      315F5370 
 4656      69556172 
 4656      74526561 
 4656      64527844 
 4657              	.LASF120:
 4658 05fd 4C617374 		.ascii	"LastPosition\000"
 4658      506F7369 
 4658      74696F6E 
 4658      00
 4659              	.LASF141:
 4660 060a 74784D65 		.ascii	"txMessage\000"
 4660      73736167 
 4660      6500
 4661              	.LASF145:
 4662 0614 436F756E 		.ascii	"Counter_1_WriteCounter\000"
 4662      7465725F 
 4662      315F5772 
 4662      69746543 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 113


 4662      6F756E74 
 4663              	.LASF127:
 4664 062b 4E657743 		.ascii	"NewCommandedMove\000"
 4664      6F6D6D61 
 4664      6E646564 
 4664      4D6F7665 
 4664      00
 4665              	.LASF88:
 4666 063c 5350495F 		.ascii	"SPI_SS_IsrHandler\000"
 4666      53535F49 
 4666      73724861 
 4666      6E646C65 
 4666      7200
 4667              	.LASF0:
 4668 064e 5F5F696E 		.ascii	"__int8_t\000"
 4668      74385F74 
 4668      00
 4669              	.LASF34:
 4670 0657 436F6E66 		.ascii	"ConfigStates_t\000"
 4670      69675374 
 4670      61746573 
 4670      5F7400
 4671              	.LASF96:
 4672 0666 72756E52 		.ascii	"runRateGroup3_SPI\000"
 4672      61746547 
 4672      726F7570 
 4672      335F5350 
 4672      4900
 4673              	.LASF165:
 4674 0678 6973725F 		.ascii	"isr_brms_SetPriority\000"
 4674      62726D73 
 4674      5F536574 
 4674      5072696F 
 4674      72697479 
 4675              	.LASF28:
 4676 068d 6C6F6E67 		.ascii	"long double\000"
 4676      20646F75 
 4676      626C6500 
 4677              	.LASF154:
 4678 0699 67657443 		.ascii	"getCurrent_mA\000"
 4678      75727265 
 4678      6E745F6D 
 4678      4100
 4679              	.LASF19:
 4680 06a7 75696E74 		.ascii	"uint16_t\000"
 4680      31365F74 
 4680      00
 4681              	.LASF27:
 4682 06b0 72656733 		.ascii	"reg32\000"
 4682      3200
 4683              	.LASF30:
 4684 06b6 6373554E 		.ascii	"csUNDEFINED\000"
 4684      44454649 
 4684      4E454400 
 4685              	.LASF55:
 4686 06c2 73657175 		.ascii	"sequence\000"
 4686      656E6365 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 114


 4686      00
 4687              	.LASF121:
 4688 06cb 4F757470 		.ascii	"Output\000"
 4688      757400
 4689              	.LASF69:
 4690 06d2 636F6E66 		.ascii	"config\000"
 4690      696700
 4691              	.LASF39:
 4692 06d9 66734375 		.ascii	"fsCurrentRead\000"
 4692      7272656E 
 4692      74526561 
 4692      6400
 4693              	.LASF5:
 4694 06e7 73686F72 		.ascii	"short int\000"
 4694      7420696E 
 4694      7400
 4695              	.LASF62:
 4696 06f1 72784D65 		.ascii	"rxMessage_config_t\000"
 4696      73736167 
 4696      655F636F 
 4696      6E666967 
 4696      5F7400
 4697              	.LASF114:
 4698 0704 5049445F 		.ascii	"PID_Was_Enabled\000"
 4698      5761735F 
 4698      456E6162 
 4698      6C656400 
 4699              	.LASF113:
 4700 0714 5049445F 		.ascii	"PID_Enabled\000"
 4700      456E6162 
 4700      6C656400 
 4701              	.LASF100:
 4702 0720 4D6F6465 		.ascii	"Mode\000"
 4702      00
 4703              	.LASF110:
 4704 0725 62726D73 		.ascii	"brmsRG5Mask\000"
 4704      5247354D 
 4704      61736B00 
 4705              	.LASF9:
 4706 0731 6C6F6E67 		.ascii	"long int\000"
 4706      20696E74 
 4706      00
 4707              	.LASF33:
 4708 073a 63734D41 		.ascii	"csMAX\000"
 4708      5800
 4709              	.LASF68:
 4710 0740 6F766572 		.ascii	"overlay\000"
 4710      6C617900 
 4711              	.LASF175:
 4712 0748 50574D5F 		.ascii	"PWM_1_Start\000"
 4712      315F5374 
 4712      61727400 
 4713              	.LASF123:
 4714 0754 4C617374 		.ascii	"LastMoveStartTimeUsec\000"
 4714      4D6F7665 
 4714      53746172 
 4714      7454696D 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 115


 4714      65557365 
 4715              	.LASF97:
 4716 076a 64697374 		.ascii	"distance\000"
 4716      616E6365 
 4716      00
 4717              	.LASF158:
 4718 0773 484F4D45 		.ascii	"HOME_OUT_SetDriveMode\000"
 4718      5F4F5554 
 4718      5F536574 
 4718      44726976 
 4718      654D6F64 
 4719              	.LASF94:
 4720 0789 52617750 		.ascii	"RawPosition\000"
 4720      6F736974 
 4720      696F6E00 
 4721              	.LASF139:
 4722 0795 4C617374 		.ascii	"LastMessageTimeSeconds\000"
 4722      4D657373 
 4722      61676554 
 4722      696D6553 
 4722      65636F6E 
 4723              	.LASF108:
 4724 07ac 62726D73 		.ascii	"brmsRG3Mask\000"
 4724      5247334D 
 4724      61736B00 
 4725              	.LASF82:
 4726 07b8 74784D65 		.ascii	"txMessage_t\000"
 4726      73736167 
 4726      655F7400 
 4727              	.LASF22:
 4728 07c4 75696E74 		.ascii	"uint64_t\000"
 4728      36345F74 
 4728      00
 4729              	.LASF64:
 4730 07cd 73657470 		.ascii	"setpoint\000"
 4730      6F696E74 
 4730      00
 4731              	.LASF107:
 4732 07d6 62726D73 		.ascii	"brmsRG2Mask\000"
 4732      5247324D 
 4732      61736B00 
 4733              	.LASF183:
 4734 07e2 47657450 		.ascii	"GetPosition\000"
 4734      6F736974 
 4734      696F6E00 
 4735              	.LASF132:
 4736 07ee 55707469 		.ascii	"UptimeSeconds\000"
 4736      6D655365 
 4736      636F6E64 
 4736      7300
 4737              	.LASF169:
 4738 07fc 6973725F 		.ascii	"isr_rst_encoder_SetPriority\000"
 4738      7273745F 
 4738      656E636F 
 4738      6465725F 
 4738      53657450 
 4739              	.LASF115:
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 116


 4740 0818 5049445F 		.ascii	"PID_Setpoint\000"
 4740      53657470 
 4740      6F696E74 
 4740      00
 4741              	.LASF1:
 4742 0825 5F5F7569 		.ascii	"__uint8_t\000"
 4742      6E74385F 
 4742      7400
 4743              	.LASF47:
 4744 082f 6F705374 		.ascii	"opStatus\000"
 4744      61747573 
 4744      00
 4745              	.LASF49:
 4746 0838 6F704D41 		.ascii	"opMAX\000"
 4746      5800
 4747              	.LASF136:
 4748 083e 43686563 		.ascii	"ChecksumErrors\000"
 4748      6B73756D 
 4748      4572726F 
 4748      727300
 4749              	.LASF29:
 4750 084d 73697A65 		.ascii	"sizetype\000"
 4750      74797065 
 4750      00
 4751              	.LASF11:
 4752 0856 6C6F6E67 		.ascii	"long unsigned int\000"
 4752      20756E73 
 4752      69676E65 
 4752      6420696E 
 4752      7400
 4753              	.LASF20:
 4754 0868 696E7433 		.ascii	"int32_t\000"
 4754      325F7400 
 4755              	.LASF128:
 4756 0870 55707469 		.ascii	"UptimeMicroseconds\000"
 4756      6D654D69 
 4756      63726F73 
 4756      65636F6E 
 4756      647300
 4757              	.LASF58:
 4758 0883 6F766572 		.ascii	"overrideKd\000"
 4758      72696465 
 4758      4B6400
 4759              	.LASF75:
 4760 088e 73746174 		.ascii	"state\000"
 4760      6500
 4761              	.LASF57:
 4762 0894 6F766572 		.ascii	"overrideKi\000"
 4762      72696465 
 4762      4B6900
 4763              	.LASF56:
 4764 089f 6F766572 		.ascii	"overrideKp\000"
 4764      72696465 
 4764      4B7000
 4765              	.LASF174:
 4766 08aa 5350495F 		.ascii	"SPI_1_Start\000"
 4766      315F5374 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 117


 4766      61727400 
 4767              	.LASF3:
 4768 08b6 756E7369 		.ascii	"unsigned char\000"
 4768      676E6564 
 4768      20636861 
 4768      7200
 4769              	.LASF10:
 4770 08c4 5F5F7569 		.ascii	"__uint32_t\000"
 4770      6E743332 
 4770      5F7400
 4771              	.LASF45:
 4772 08cf 6F70554E 		.ascii	"opUNDEFINED\000"
 4772      44454649 
 4772      4E454400 
 4773              	.LASF48:
 4774 08db 6F705365 		.ascii	"opSetEnc\000"
 4774      74456E63 
 4774      00
 4775              	.LASF134:
 4776 08e4 4661756C 		.ascii	"FaultState\000"
 4776      74537461 
 4776      746500
 4777              	.LASF41:
 4778 08ef 66735832 		.ascii	"fsX2\000"
 4778      00
 4779              	.LASF42:
 4780 08f4 66735833 		.ascii	"fsX3\000"
 4780      00
 4781              	.LASF43:
 4782 08f9 66735834 		.ascii	"fsX4\000"
 4782      00
 4783              	.LASF135:
 4784 08fe 436F6E66 		.ascii	"ConfigSequence\000"
 4784      69675365 
 4784      7175656E 
 4784      636500
 4785              	.LASF122:
 4786 090d 686F6D69 		.ascii	"homingDone\000"
 4786      6E67446F 
 4786      6E6500
 4787              	.LASF124:
 4788 0918 4C617374 		.ascii	"LastMoveEndTimeUsec\000"
 4788      4D6F7665 
 4788      456E6454 
 4788      696D6555 
 4788      73656300 
 4789              	.LASF144:
 4790 092c 52657365 		.ascii	"Reset_Encoder_ClearInterrupt\000"
 4790      745F456E 
 4790      636F6465 
 4790      725F436C 
 4790      65617249 
 4791              	.LASF67:
 4792 0949 72784D65 		.ascii	"rxMessage_setenc_t\000"
 4792      73736167 
 4792      655F7365 
 4792      74656E63 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 118


 4792      5F7400
 4793              	.LASF162:
 4794 095c 50524F42 		.ascii	"PROBE_Write\000"
 4794      455F5772 
 4794      69746500 
 4795              	.LASF166:
 4796 0968 6973725F 		.ascii	"isr_home_StartEx\000"
 4796      686F6D65 
 4796      5F537461 
 4796      72744578 
 4796      00
 4797              	.LASF2:
 4798 0979 7369676E 		.ascii	"signed char\000"
 4798      65642063 
 4798      68617200 
 4799              	.LASF7:
 4800 0985 73686F72 		.ascii	"short unsigned int\000"
 4800      7420756E 
 4800      7369676E 
 4800      65642069 
 4800      6E7400
 4801              	.LASF98:
 4802 0998 5049445F 		.ascii	"PID_Initialize\000"
 4802      496E6974 
 4802      69616C69 
 4802      7A6500
 4803              	.LASF184:
 4804 09a7 6D61696E 		.ascii	"main\000"
 4804      00
 4805              	.LASF80:
 4806 09ac 69746572 		.ascii	"iterm\000"
 4806      6D00
 4807              	.LASF25:
 4808 09b2 646F7562 		.ascii	"double\000"
 4808      6C6500
 4809              	.LASF178:
 4810 09b9 496E6465 		.ascii	"Index_Counter_1_Start\000"
 4810      785F436F 
 4810      756E7465 
 4810      725F315F 
 4810      53746172 
 4811              	.LASF129:
 4812 09cf 55707469 		.ascii	"UptimeMicrosecondsAccumulator\000"
 4812      6D654D69 
 4812      63726F73 
 4812      65636F6E 
 4812      64734163 
 4813              	.LASF46:
 4814 09ed 6F70436F 		.ascii	"opConfig\000"
 4814      6E666967 
 4814      00
 4815              	.LASF168:
 4816 09f6 6973725F 		.ascii	"isr_rst_encoder_StartEx\000"
 4816      7273745F 
 4816      656E636F 
 4816      6465725F 
 4816      53746172 
ARM GAS  C:\Users\PRICHA~1\AppData\Local\Temp\cccOR48r.s 			page 119


 4817              	.LASF147:
 4818 0a0e 6973725F 		.ascii	"isr_home_ClearPending\000"
 4818      686F6D65 
 4818      5F436C65 
 4818      61725065 
 4818      6E64696E 
 4819              	.LASF76:
 4820 0a24 6661756C 		.ascii	"fault\000"
 4820      7400
 4821              	.LASF86:
 4822 0a2a 52535449 		.ascii	"RSTIsrHandler\000"
 4822      73724861 
 4822      6E646C65 
 4822      7200
 4823              	.LASF79:
 4824 0a38 706F7369 		.ascii	"position\000"
 4824      74696F6E 
 4824      00
 4825              	.LASF44:
 4826 0a41 4661756C 		.ascii	"FaultStates_t\000"
 4826      74537461 
 4826      7465735F 
 4826      7400
 4827              	.LASF142:
 4828 0a4f 74784D65 		.ascii	"txMessageState\000"
 4828      73736167 
 4828      65537461 
 4828      746500
 4829              	.LASF116:
 4830 0a5e 5049445F 		.ascii	"PID_EffectiveSetpoint\000"
 4830      45666665 
 4830      63746976 
 4830      65536574 
 4830      706F696E 
 4831              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
